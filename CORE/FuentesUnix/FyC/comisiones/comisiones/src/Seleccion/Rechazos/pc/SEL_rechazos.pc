/************************************************************************/
/* Programa encargado de poblar tabla cmt_rechazos_celular              */ 
/*----------------------------------------------------------------------*/
/* Version 1 - Revision 01.                                             */
/* Inicio: Martes 09 de Octubre del 2001.                               */
/* Fin   : Miercoles 10 de Octubre del 2001.                            */
/* Por Richard Troncoso C.                                              */
/* Inicio: Miercoles 13 de Noviembre del 2002                           */
/* Fin:                                                                 */
/* Autor:  Christian Descouvieres Vargas                                */
/* Modificacion: Se modifico el Num_serie de largo 12 a 26              */
/************************************************************************/
/* Modificacion por PGonzaleg                                           */
/* Inicio: Lunes 2 de diciembre de 2002.                                */
/* Fin:    Lunes 2 de diciembre de 2002.                                */
/* Autor : Patricio Gonzalez Gomez                                      */
/* Modificacion de condiciones en los WHERE referentes a la tabla       */
/* CMD_PARAMETROS. Cambio en los campos COD_TIPCODIGO, COD_CODIGO y     */
/* COD_PARAMETRO.                                                       */
/* Modificacion por Jaime Vargas  (enero-7-2003)                        */
/* Descripcion : se modifico estructura  para multinivel                */                 
/************************************************************************/
/* 20030924 Marcelo Quiroz Garcia Versionado Cuzco.                     */
/* Se normalizan nombres de funciones y de variables                    */
/* Se incorporan: Planes de Comisiones y Tipos de Ciclos                */
/* Se incorpra manejo de lista general de tipos de comisionistas.       */
/* Se restructura proceso en función de estructura de tipos de          */
/* comisionistas.                                                       */
/*                                                                      */
/************************************************************************/

#include "SEL_rechazos.h"
#include "GEN_biblioteca.h"

/*---------------------------------------------------------------------------*/
/* Inclusion de biblioteca para manejo de interaccion con Oracle.            */
/*---------------------------------------------------------------------------*/
EXEC SQL INCLUDE sqlca;
EXEC SQL WHENEVER SQLERROR DO vSqlError();
/*---------------------------------------------------------------------------*/
/* Definicion de variables globales para ser usadas con Oracle.              */
/*---------------------------------------------------------------------------*/
EXEC SQL BEGIN DECLARE SECTION;
	char    szhUser[30]="";
	char    szhPass[30]="";
	char    szhSysDate [17]="";
	char    szFechaYYYYMMDD[9]="";
EXEC SQL END DECLARE SECTION;
/*---------------------------------------------------------------------------*/
/* Lista de Tipos de Comisionistas para ejecucion de ciclo                   */
/*---------------------------------------------------------------------------*/
	stTiposComis * lstTiposComis = NULL;
/*---------------------------------------------------------------------------*/
/* Tipos de Comisionistas para el proceso.                                   */
/*---------------------------------------------------------------------------*/
void vCargaTiposComis()
{
    stTiposComis * paux;
    
    lstUniverso = NULL;
    switch(szTipoPeriodo)
    {
    	case PERIODICO:
    			fprintf(stderr,"\n(vCargaTiposComis) EJECUCION EN MODO PERIODICO.\n");
    			fprintf(pfLog ,"\n(vCargaTiposComis) EJECUCION EN MODO PERIODICO.\n");
    			lstTiposComis = stGetTipComisSelecPer(UNIVERSO, stCiclo);
				break;
    	case ESPORADICO:
    			fprintf(stderr,"\n(vCargaTiposComis) EJECUCION EN MODO ESPORADICO.\n");
    			fprintf(pfLog ,"\n(vCargaTiposComis) EJECUCION EN MODO ESPORADICO.\n");
    			lstTiposComis = stGetTipComisSelecProm(UNIVERSO, stCiclo);
    			break;
    }
	if (lstTiposComis==NULL)
		fprintf(pfLog, "\n[vCargaTiposComis] No existen Tipos de Comisionistas para procesar.");
	else
	{
		for (paux=lstTiposComis;paux != NULL; paux=paux->sgte)
        {
			fprintf(pfLog ,"\n(vCargaTiposComis) Carga las Ventas para TipComis:[%s] [%s].\n",paux->szCodTipComis,paux->szDesTipComis);
			fprintf(stderr,"\n(vCargaTiposComis) Carga las Ventas para TipComis:[%s] [%s].\n",paux->szCodTipComis,paux->szDesTipComis);
            vSeleccionarUniverso(paux->iCodTipoRed, paux->szCodTipComis, paux->szCodTipVendedor);
		}
/*---------------------------------------------------------------------------*/
		vFechaHora();
		fprintf(pfLog, "[%s]\n", (char *)pszGetDateLog());
		fprintf(pfLog ,"\n(vCargaTiposComis) Evalua Rescate de Rechazos de Venta\n");
		fprintf(stderr,"\n(vCargaTiposComis) Evalua Rescate de Rechazos de Venta\n");
		vGetPlan();
/*---------------------------------------------------------------------------*/
		vFechaHora();
		fprintf(pfLog, "[%s]\n", (char *)pszGetDateLog());
		fprintf(pfLog ,"\n(vCargaTiposComis) Recupera los abonados de la venta.\n");
		fprintf(stderr,"\n(vCargaTiposComis) Recupera los abonados de la venta.\n");
		vInsertaSeleccion();
/*---------------------------------------------------------------------------*/
		vFechaHora();
		fprintf(pfLog, "[%s]\n", (char *)pszGetDateLog());
		fprintf(pfLog ,"\n(vCargaTiposComis) Libera la memori utilizada.\n");
		fprintf(stderr,"\n(vCargaTiposComis) Libera la memori utilizada.\n");
		vLiberaUniverso();
		vLiberaTiposComis(lstTiposComis);
	}
}

/* -------------------------------------------------------------------------------------- */
/* Se extrae el universo DIRECTO inicial de registros a considerar para Comisiones.       */
/* -------------------------------------------------------------------------------------- */
void vSeleccionarUniverso(int piCodTipoRed, char * pszCodTipComis, char * pszCodTipVendedor)
{
    stUniverso 	* paux;
    long    	iCantidad = 0;

	int                            i;
	long            iLastRows    = 0;
	int             iFetchedRows = MAXFETCH;
	int             iRetrievRows = MAXFETCH;

    EXEC SQL BEGIN DECLARE SECTION;
	    char    szhFechaInicio[11];
	    char    szhFechaTermino[11];
	    long    lMaxFetch;

		int		ihCodTipoRed;
		char	szhCodTipVendedor[3];
		long    lhNumVenta[MAXFETCH];
        long    lhNumAbonado[MAXFETCH];
		char    szhCodTipComis[3];
        long    lhCodVendFinal[MAXFETCH];
        short   shIndCodVendFinal[MAXFETCH];
        long    lhCodCliente[MAXFETCH];
        long    lhNumCelular[MAXFETCH];
        char    szhNumContrato[MAXFETCH][20];
        short   shIdNumContrato[MAXFETCH];
        char    chNumSerie[MAXFETCH][26];
        long    lhCodComisionista[MAXFETCH];
        long    lhCodAgencia[MAXFETCH];
   	    char    szhFecVenta[MAXFETCH][20];
	    char    szhFecRecepcion[MAXFETCH][20];
        short   shIndFecRecepcion[MAXFETCH];
	    char    szhFecRechazo[MAXFETCH][20];
        char    szhCodCausaRec[MAXFETCH][3];
        char    szhNumIdent[MAXFETCH][21];
        long    lhCodCategoria[MAXFETCH];
        short   shIndCodCategoria[MAXFETCH];
        char    szhCodCatribut[MAXFETCH][2];
        char    szhIndProcequi[MAXFETCH][2];
        char    szhNomUsuario[MAXFETCH][31];                
    EXEC SQL END DECLARE SECTION;
    
    strcpy(szhFechaInicio           , stCiclo.szFecDesdeNormal);  
    strcpy(szhFechaTermino          , stCiclo.szFecHastaNormal);  
    strcpy(szhCodTipComis			, pszCodTipComis);    
    ihCodTipoRed					= piCodTipoRed;
    strcpy(szhCodTipVendedor		, pszCodTipVendedor);
    
    paux      = NULL;
	lMaxFetch = MAXFETCH;	

    EXEC SQL DECLARE CUR_UNIVERSO CURSOR FOR
          SELECT  S.NUM_VENTA,
                  S.NUM_ABONADO,
                  S.COD_VEND_FINAL,
                  S.COD_CLIENTE,
                  S.NUM_CELULAR,
                  S.NUM_CONTRATO,
                  S.NUM_SERIE,
                  S.COD_COMISIONISTA,
                  S.COD_AGENCIA,
                  TO_CHAR(S.FEC_VENTA,'DD-MM-YYYY HH24:MI:SS'),
                  TO_CHAR(S.FEC_RECEPCION,'DD-MM-YYYY HH24:MI:SS'),
                  TO_CHAR(S.FEC_RECHAZO,'DD-MM-YYYY HH24:MI:SS'),
                  S.COD_CAUSAREC,
                  CLI.NUM_IDENT,
                  CLI.COD_CATEGORIA,
                  CATRI.COD_CATRIBUT,
                  S.IND_PROCEQUI,
                  S.NOM_USUARIO
          FROM    GAT_RECHAZOS S, 
                  GE_CLIENTES CLI, 
                  GA_CATRIBUTCLIE CATRI
          WHERE   S.NUM_VENTA             >  0 
            AND   S.COD_TIPCOMIS          =  :szhCodTipVendedor  
            AND   S.FEC_RECHAZO           >  TO_DATE(:szhFechaInicio,'DD-MM-YYYY')
            AND   S.FEC_RECHAZO           <= TO_DATE(:szhFechaTermino,'DD-MM-YYYY')
            AND   CLI.COD_CLIENTE         =  S.COD_CLIENTE
            AND   CLI.COD_CLIENTE         =  CATRI.COD_CLIENTE
            AND   CATRI.FEC_DESDE         =  (SELECT MAX(E.FEC_DESDE)
                                              FROM   GA_CATRIBUTCLIE E
                                              WHERE  CATRI.COD_CLIENTE = E.COD_CLIENTE);
	                                               
        EXEC SQL OPEN CUR_UNIVERSO;
        while(iFetchedRows == iRetrievRows)
        {
			EXEC SQL for :lMaxFetch
                  FETCH CUR_UNIVERSO INTO
                        :lhNumVenta,                        
                        :lhNumAbonado,                      
                        :lhCodVendFinal:shIndCodVendFinal,  
                        :lhCodCliente,                      
                        :lhNumCelular,                      
                        :szhNumContrato:shIdNumContrato,    
                        :chNumSerie,                        
                        :lhCodComisionista,                 
                        :lhCodAgencia,                      
                        :szhFecVenta,                       
                        :szhFecRecepcion:shIndFecRecepcion, 
                        :szhFecRechazo,                     
                        :szhCodCausaRec,                    
                        :szhNumIdent,                       
                        :lhCodCategoria,                    
						:szhCodCatribut,                    
                        :szhIndProcequi,                    
                        :szhNomUsuario;                     
						                        
			iRetrievRows = sqlca.sqlerrd[2] - iLastRows;
            iLastRows = sqlca.sqlerrd[2];
                
            for (i=0; i < iRetrievRows; i++)
            {                
                paux = (stUniverso *) malloc(sizeof(stUniverso));
                 
                paux->iCodTipoRed     			= ihCodTipoRed;
				strcpy(paux->szCodTipComis      , szhCodTipComis);
				strcpy(paux->szCodTipVendedor   , szhCodTipVendedor);
				paux->lNumVenta        			= lhNumVenta[i];
				paux->lNumAbonado     			= lhNumAbonado[i];
                paux->lCodVendFinal             = lhCodVendFinal[i];
                paux->sIndCodVendFinal          = shIndCodVendFinal[i];
				paux->lCodCliente      			= lhCodCliente[i];
                paux->lNumCelular               = lhNumCelular[i];
				strcpy(paux->szNumContrato      , szfnTrim(szhNumContrato[i]));
                paux->sIdNumContrato            = shIdNumContrato[i];
                strcpy(paux->cNumSerie          , szfnTrim(chNumSerie[i]));
				paux->lCodComisionista			= lhCodComisionista[i];
                paux->lCodAgencia               = lhCodAgencia[i];
				strcpy(paux->szFecVenta       	, szfnTrim(szhFecVenta[i]));
				strcpy(paux->szFecRecepcion   	, szfnTrim(szhFecRecepcion[i]));
                paux->sIndFecRecepcion          = shIndFecRecepcion[i];
                strcpy(paux->szFecRechazo       , szfnTrim(szhFecRechazo[i]));
                strcpy(paux->szCodCausaRec      , szfnTrim(szhCodCausaRec[i]));
                strcpy(paux->szNumIdent         , szhNumIdent[i]);
                paux->lCodCategoria             = lhCodCategoria[i];
                strcpy(paux->szCodCatribut      , szhCodCatribut[i]);
                strcpy(paux->szIndProcequi      , szhIndProcequi[i]);
                strcpy(paux->szNomUsuario       , szhNomUsuario[i]);

                paux->cIndConsidera				= 'S';

                paux->abonado_sgte 				= NULL;
                paux->sgte 						= lstUniverso;
                lstUniverso 					= paux;
                iCantidad++;
			}
        }
        EXEC SQL close cur_universo;
        fprintf(pfLog, "\n(vSeleccionarUniverso)Tipo Comisionista:[%s] Cantidad de Rechazos Extraidos:[%ld].\n", szhCodTipComis, iCantidad);
}

/* **************************************************************************** */
/* Se asigna el plantarif desde tabla de abonados.                              */
/* **************************************************************************** */
void vGetPlan()
{
    stUniverso	* paux;

    EXEC SQL BEGIN DECLARE SECTION;
        char    szhCodPlanTarif[4]; 
	    long    lhNumAbonado;
    EXEC SQL END DECLARE SECTION;

    for (paux = lstUniverso; paux != NULL; paux = paux->sgte)
    {
        if (paux->cIndConsidera == 'S')
        {
          lhNumAbonado      	= paux->lNumAbonado;
 
          EXEC SQL SELECT COD_PLANTARIF
                   INTO   :szhCodPlanTarif
                   FROM   GA_HABOCEL
                   WHERE  NUM_ABONADO = :lhNumAbonado;

          if (sqlca.sqlcode)
          {
             EXEC SQL SELECT COD_PLANTARIF
                      INTO   :szhCodPlanTarif
                      FROM   GA_ABOCEL
                      WHERE  NUM_ABONADO = :lhNumAbonado;
        
             if (sqlca.sqlcode)
             {
                 paux->cIndConsidera = 'N';
             }
             else
             {
                 strcpy(paux->szCodPlanTarif, szhCodPlanTarif);
             }
          }
          else
          {
             strcpy(paux->szCodPlanTarif, szhCodPlanTarif);
          }
		}          
    }
}
/*****************************************************************************/
/* Obtencion de la Categoria Asociada al Cliente                             */
/*****************************************************************************/
char * vGet_Categoria(char * catribut)
{
    if (strcmp(catribut, "B")==0)
        return INDIVIDUAL;
    else
        return PYME;
}
/*****************************************************************************/
/* Insercion de valores en tabla de salida                                   */
/*****************************************************************************/
void vInsertaSeleccion()
{
    stUniverso	* paux;
	long		lCantRechazos = 0;
	
	EXEC SQL BEGIN DECLARE SECTION;
		long	lhNumSecuencia;
		char	szhCodTipComis[3];
		long	lhCodComisionista;
        long    lhCodAgencia;
		long  	lhCodCliente;
		char  	szhNumContrato[20];      
		long  	lhNumAbonado;
		long  	lhNumCelular;
		long  	lhNumVenta;
		char  	szhFecVenta[20];
		char  	szhFecRecepcion[20];
	    char    szhFecRechazo[20];
        char    szhCodCausaRec[3];
		char  	szhNumSerie[26];
		long	lhCodCiclComis;	
		char	szhIdCiclComis[11];
        long    lhCodVendFinal;		
        short   shIndCodVendFinal;
        char    szhNumIdent[21];
        char    szhCodCategoria[11];
        char    szhIndProcequi[2];
        char    szhNomUsuario[31];                
	    int		ihCodTipoRed;
		char	szhCodTipVendedor[3];
        char    szhCodPlanTarif[4]; 		
	EXEC SQL END DECLARE SECTION;
	
	lhCodCiclComis 			= stCiclo.lCodCiclComis;
    strcpy(szhIdCiclComis	, stCiclo.szIdCiclComis);
  
    for (paux = lstUniverso; paux != NULL; paux = paux->sgte)
    {
    	if (paux->cIndConsidera == 'S')
        {
		   strcpy(szhCodTipComis      	, paux->szCodTipComis);
		   lhCodComisionista    		= paux->lCodComisionista;   
           lhCodAgencia                 = paux->lCodAgencia;
		   lhCodCliente        		    = paux->lCodCliente;  	
		   lhNumAbonado    			    = paux->lNumAbonado;
		   lhNumCelular    			    = paux->lNumCelular;
		   lhNumVenta          		    = paux->lNumVenta;
		   strcpy(szhFecVenta         	, paux->szFecVenta);		  		   
		   strcpy(szhFecRecepcion    	, paux->szFecRecepcion); 
		   strcpy(szhFecRechazo      	, paux->szFecRechazo); 
           strcpy(szhCodCausaRec        , paux->szCodCausaRec);
		   strcpy(szhNumSerie     		, paux->cNumSerie);
           shIndCodVendFinal            = paux->sIndCodVendFinal;
		   strcpy(szhNumIdent       	, paux->szNumIdent); 
           strcpy(szhCodCategoria       , vGet_Categoria(paux->szCodCatribut));
		   strcpy(szhCodPlanTarif 		, paux->szCodPlanTarif);
		   strcpy(szhIndProcequi   		, paux->szIndProcequi);
           strcpy(szhNomUsuario         , paux->szNomUsuario);
           ihCodTipoRed        		    = paux->iCodTipoRed;  
		   strcpy(szhCodTipVendedor   	, paux->szCodTipVendedor);

		   if (paux->sIndCodVendFinal != -1)
               strcpy(szhNumContrato, paux->szNumContrato);
           else
               strcpy(szhNumContrato,"0");
           
           if (paux->sIndFecRecepcion != -1)
               strcpy(szhFecRecepcion, paux->szFecRecepcion);
           else
               strcpy(szhFecRecepcion, paux->szFecRechazo);

           EXEC SQL SELECT CMS_REG_SELECCION.NEXTVAL INTO :lhNumSecuencia FROM DUAL;
           lCantRechazos++;

           EXEC SQL INSERT INTO CMT_RECHAZOS_CELULAR(
                           NUM_GENERAL     , COD_TIPCOMIS  , COD_COMISIONISTA, 
                           COD_AGENCIA     , COD_CLIENTE   , NUM_CONTRATO    , 
                           NUM_ABONADO     , NUM_CELULAR   , NUM_VENTA       , 
                           FEC_VENTA       , 
                           FEC_RECEPCION   , 
                           FEC_RECHAZO     , 
                           COD_CAUSAREC    , NUM_SERIE     , COD_PERIODO     , 
                           ID_PERIODO      ,
                           COD_VEND_FINAL  , 
                           NUM_IDENT       , COD_CATEGCLIENTE, COD_PLANTARIF ,
                           IND_PROCEQUI    , NOM_USUARIO     , COD_TIPORED   , 
                           COD_TIPVENDEDOR )
                   VALUES ( 
                           :lhNumSecuencia, :szhCodTipComis , :lhCodComisionista,
                           :lhCodAgencia  , :lhCodCliente   , :szhNumContrato   ,
                           :lhNumAbonado  , :lhNumCelular   , :lhNumVenta       ,
                           to_date(:szhFecVenta, 'dd-mm-yyyy hh24:mi:ss')       , 
                           to_date(:szhFecRecepcion, 'dd-mm-yyyy hh24:mi:ss')   ,
                           to_date(:szhFecRechazo, 'dd-mm-yyyy hh24:mi:ss')     ,
                           :szhCodCausaRec, :szhNumSerie    , :lhCodCiclComis   ,
                           :szhIdCiclComis,
                           :lhCodVendFinal:shIndCodVendFinal, 
                           :szhNumIdent   , :szhCodCategoria, :szhCodPlanTarif  ,
                           :szhIndProcequi, :szhNomUsuario  , :ihCodTipoRed	    ,
                           :szhCodTipVendedor );
		}
         
	}
    stStatusProc.lCantRechazos = lCantRechazos;
    fprintf(stderr,"\n(vInsertaSeleccion)Cantidad de Rechazos Insertados:[%ld].\n",lCantRechazos);
    fprintf(pfLog ,"\n(vInsertaSeleccion)Cantidad de Rechazos Insertados:[%ld].\n",lCantRechazos);
}
/*****************************************************************************/
/* Rutina que devuelve la memoria utilizada por las listas de abonados.      */
/*****************************************************************************/
void vLiberaUniverso(stUniverso * qaux)
{
	if (qaux!=NULL)
	{
		vLiberaUniverso(qaux->sgte);
		free(qaux);
	}
}
/*****************************************************************************/
/* Rutina principal.                                                         */
/*****************************************************************************/
int     main (int argc, char *argv[])
{
/*---------------------------------------------------------------------------*/
/* Variables Globales.                                                       */
/*---------------------------------------------------------------------------*/
	long  lSegIni, lSegFin;         
	short ibiblio;                  
/*---------------------------------------------------------------------------*/
/* Recuperacion del tiempo de inicio del proceso, en segundos.               */
/*---------------------------------------------------------------------------*/
	lSegIni=lGetTimer();
/*---------------------------------------------------------------------------*/
/* Inicializacion de estructura de argumentos externos, de estadistica del   */
/* proceso y de alguna otra estructura.                                      */
/*---------------------------------------------------------------------------*/
	memset(&stCiclo, 0, sizeof(reg_ciclo));         
/*---------------------------------------------------------------------------*/
/* Manejo de argumentos ingresados como parametros externos.                 */
/*---------------------------------------------------------------------------*/
    memset(&stArgs, 0, sizeof(rg_argumentos));
    vManejaArgs(argc, argv);
/*---------------------------------------------------------------------------*/
/* Conexion a la base de datos Oracle.                                       */
/*---------------------------------------------------------------------------*/	
	strcpy(szhUser, stArgs.szUser);                                                      
	strcpy(szhPass, stArgs.szPass);                                                    
	if(fnOraConnect(szhUser, szhPass) == FALSE)                                          
	{                                                                                  
	        fprintf(stderr, "\nUsuario/Password Oracle no son validos. Se cancela.\n");
	        exit(EXIT_205);                                                            
	}                                                                                  
	else                                                                               
	{                                                                                  
	        fprintf(stderr, "\nConexion con la base de datos ha sido exitosa.\n");     
	        fprintf(stderr, "Username: %s\n\n", szhUser);                              
	}
/*---------------------------------------------------------------------------*/
/* Inicializacion estructura de Bloque(proceso).                             */
/*---------------------------------------------------------------------------*/
    vInicia_Estructura_Procesos(stArgs.szBloque, stArgs.szProceso,szhUser, stArgs.izSecuencia);
    ibiblio = iAccesa_Traza_Procesos(ABRIR_TRAZA,0,"",0,0);                                    
    if (ibiblio)                                                                               
    {                                                                                          
       fprintf(stderr, "Error al Abrir Traza");                                           
       fprintf(stderr, "Error [%d] al escribir Traza de Proceso.\n", ibiblio);            
       exit(ibiblio);                                                                     
    }                                                                                          
/*---------------------------------------------------------------------------*/
/* Preparacion de ambiente para archivos de log y datos.                     */
/*---------------------------------------------------------------------------*/
	fprintf(stderr, "Preparando ambiente para archivos de log, de datos y de configuracion ...\n");                    
	if((pszEnvLog = (char *)pszEnviron("XPCM_LOG", "")) == (char *)NULL)                                               
	{                                                                                                                  
	        exit(iAccesa_Traza_Procesos(CERRAR_TRAZA_NOK,EXIT_401,"VARIABLE DE AMBIENTE XPCM_LOG NO RECONOCIDA.",0,0));
	}                                                                                                                  
	fprintf(stderr, "Directorio de Logs         : [%s]\n", (char *)pszEnvLog);                                         
/*---------------------------------------------------------------------------*/
/* GENERACION DEL NOMBRE Y CREACION DEL ARCHIVO DE LOG.                      */
/*---------------------------------------------------------------------------*/
	strncpy(szFechaYYYYMMDD,szfnObtieneFecYYYYMMDD(),8);
        strncpy(szhSysDate, pszGetDateLog(),16);                                                            
	strcpy(stArgsLog.szProceso,LOGNAME);                                                                     
	strncpy(stArgsLog.szSysDate,szhSysDate,16);                                                                
	sprintf(stArgsLog.szPath,"%s%s/%s",pszEnvLog,stArgsLog.szProceso,szFechaYYYYMMDD);                       
	                                                                                                         
	if((pfLog = fAbreArchivoLog()) == (FILE *)NULL)                                                          
	{                                                                                                        
	    fprintf(stderr, "\nArchivo [%s] no pudo ser abierto.\n", szLogName);                                 
	    fprintf(stderr, "Revise su existencia.\n");                                                          
	    fprintf(stderr, "Error Numero: %d     %s\n", errno, strerror(errno));                                
	    fprintf(stderr, "Proceso finalizado con error.\n");                                                  
	}                                                                                                               
/*---------------------------------------------------------------------------*/
/* HEADER.                                                                   */
/*---------------------------------------------------------------------------*/ 
    vFechaHora();                                                               
    fprintf(stderr, "Procesando ...\n");                                        
    fprintf(pfLog, "%s\n", szRaya);                    
    fprintf(pfLog, "\n\n%s\n", (char *)pszFechaHora());
    fprintf(pfLog, "%s\n", GLOSA_PROG);                
    fprintf(pfLog, "VERSION %s\n", PROG_VERSION);      
    fprintf(pfLog, "Ultima Revision: [%s]\n", LAST_REVIEW);                
    fprintf(pfLog, "%s\n\n", szRaya);                  

    fprintf(pfLog, "\n Argumentos de Ejecucion\n");
    
    fprintf(pfLog, "Identificador de Ciclo 			<%s>\n", stArgs.szIdPeriodo);

    fprintf(pfLog, "Identificador de Proceso		<%s>\n", stArgs.szProceso);
    fprintf(pfLog, "Identificador de Bloque			<%s>\n", stArgs.szBloque);
    fprintf(pfLog, "Secuencia de Ejecucion			<%d>\n", stArgs.izSecuencia);
/*---------------------------------------------------------------------------*/
/* MODIFICACION DE CONFIGURACION AMBIENTAL, PARA MANEJO DE FECHAS EN ORACLE. */
/*---------------------------------------------------------------------------*/
	EXEC SQL ALTER SESSION SET NLS_DATE_FORMAT='dd-mm-yyyy';
/*---------------------------------------------------------------------------*/
/* CARGA ESTRUCTURA CICLOS DE PROCESO                                        */
/*---------------------------------------------------------------------------*/
    vFechaHora();
    fprintf(pfLog,  "\n\n%s\n", (char *)pszFechaHora());
    fprintf(pfLog,  "Carga estructura de ciclo de proceso...\n\n");       
    fprintf(stderr, "Carga estructura de ciclo de proceso...\n\n");       
    if (!vCargaCiclo(stArgs.szIdPeriodo,&stCiclo))    
    {
    	fprintf(pfLog, "\n\n[Main] Ciclo que pretende Ejecutar no existe.\n");
    	fprintf(pfLog, "[Main] Se cancela la ejecucion.\n");
    	fprintf(pfLog, "\n\n[Main] Ciclo que pretende Ejecutar no existe.\n");
    	fprintf(pfLog, "[Main] Se cancela la ejecucion.\n");
    	exit(EXIT_101);
    }
    szTipoPeriodo = stCiclo.cTipCiclComis;
/*---------------------------------------------------------------------------*/
/* CARGA TIPOS DE COMISIONISTAS                                              */
/*---------------------------------------------------------------------------*/
    vFechaHora();
    fprintf(pfLog,  "\n\n%s\n", (char *)pszFechaHora());
    fprintf(pfLog,  "Carga tipos de comisionistas a procesar...\n\n");       
    fprintf(stderr, "Carga tipos de comisionistas a procesar...\n\n");       
	vCargaTiposComis();
/*---------------------------------------------------------------------------*/
/* Recuperacion de los segundos reales ocupados por el proceso.              */
/*---------------------------------------------------------------------------*/ 
    lSegFin=lGetTimer();                         
    stStatusProc.lSegProceso = lSegFin - lSegIni;
/*---------------------------------------------------------------------------*/
/* Despliegue de la informacion estadistica del proceso.                     */
/*---------------------------------------------------------------------------*/
	fprintf(pfLog, "Estadistica del proceso\n");
	fprintf(pfLog, "------------------------\n");
	fprintf(pfLog, "Registros Finales Procesados   : [%d]\n", stStatusProc.lCantRechazos);
	fprintf(pfLog, "Segundos Reales Utilizados     : [%d]\n\n", stStatusProc.lSegProceso);

	fprintf(stderr, "Estadistica del proceso\n");
	fprintf(stderr, "------------------------\n");
	fprintf(stderr, "Registros Finales Procesados   : [%d]\n", stStatusProc.lCantRechazos);
	fprintf(stderr, "Segundos Reales Utilizados     : [%d]\n\n", stStatusProc.lSegProceso);

/*---------------------------------------------------------------------------*/
	ibiblio = iAccesa_Traza_Procesos(CERRAR_TRAZA_OK,EXIT_0,"",stStatusProc.lSegProceso,stStatusProc.lCantRechazos);
	if (ibiblio)
	        exit(iAccesa_Traza_Procesos(CERRAR_TRAZA_NOK,ibiblio,"ERROR CERRANDO TRAZA.",0,0));
	EXEC SQL COMMIT WORK RELEASE;
	
	vFechaHora();
	fprintf(stderr, "Programa [%s] finalizado ok.\n", basename(argv[0]));
	fprintf(pfLog, "\n\n%s\n", (char *)pszFechaHora());
	fprintf(pfLog, "Proceso [%s] finalizado ok.\n", basename(argv[0]));
	fclose(pfLog);
	return(EXIT_0);
}


/******************************************************************************************/
/** Información de Versionado *************************************************************/
/******************************************************************************************/
/** Pieza                                               : */
/**  %ARCHIVE% */
/** Identificador en PVCS                               : */
/**  %PID% */
/** Producto                                            : */
/**  %PP% */
/** Revisión                                            : */
/**  %PR% */
/** Autor de la Revisión                                : */
/**  %AUTHOR% */
/** Estado de la Revisión ($TO_BE_DEFINED es Check-Out) : */
/**  %PS% */
/** Fecha de Creación de la Revisión                    : */
/**  %DATE% */
/** Worksets ******************************************************************************/
/** %PIRW% */
/** Historia ******************************************************************************/
/** %PL% */
/******************************************************************************************/

