/************************************************************************/
/* Programa encargado de seleccionar las habilitaciones del producto    */
/* para luego pasar a la etapa de valoración.                           */ 
/*----------------------------------------------------------------------*/
/* Version 1 - Revision 00.                                             */
/* Inicio: Lunes 24 de Octubre del 2001.                                */
/* Fin:                                                                 */
/* Autor : Fabian Aedo Ramirez                                          */
/* Modificado :                                                         */ 
/* Jaime Vargas Morales  (enero-7-2003)                                 */
/* desccripcion : incorporacion de estructura miltiniveles              */
/************************************************************************/
/*---------------------------------------------------------------------------*/
/* Inclusion de libreria para definiciones generales del programa.           */
/*---------------------------------------------------------------------------*/
#include "Sel_Evaluaciones.h"
#include "GEN_biblioteca.h"
/*---------------------------------------------------------------------------*/
/* Inclusion de biblioteca para manejo de interaccion con Oracle.            */
/*---------------------------------------------------------------------------*/
EXEC SQL INCLUDE sqlca;
EXEC SQL WHENEVER SQLERROR DO vSqlError();
/*---------------------------------------------------------------------------*/
/* Definicion de variables globales para ser usadas con Oracle.              */
/*---------------------------------------------------------------------------*/
EXEC SQL BEGIN DECLARE SECTION;
	char    szhUser[30]="";
	char    szhPass[30]="";
	char    szhSysDate [17]="";
	char    szFechaYYYYMMDD[9]="";
EXEC SQL END DECLARE SECTION;
/*---------------------------------------------------------------------------*/
/* Lista de Tipos de Comisionistas para ejecucion de ciclo                   */
/*---------------------------------------------------------------------------*/
	stTiposComis * lstTiposComis = NULL;
/*---------------------------------------------------------------------------*/
/* Carga la estructura de tipos de comisionistas que serán procesados.       */
/* en funcion del tipo de ciclo en proceso, se ejecuta librería de carga de  */
/* tipos de comisionista a procesar.                                         */
/*---------------------------------------------------------------------------*/
void vCargaTiposComis()
{
    stTiposComis * paux;
    
    lstUniverso = NULL;
    switch(szTipoPeriodo)
    {
    	case PERIODICO:
    			fprintf(stderr,"\n(vCargaTiposComis) EJECUCION EN MODO PERIODICO.\n");
    			fprintf(pfLog ,"\n(vCargaTiposComis) EJECUCION EN MODO PERIODICO.\n");
    			lstTiposComis = stGetTipComisSelecPer(UNIVERSO, stCiclo);
				break;
    	case ESPORADICO:
    			fprintf(stderr,"\n(vCargaTiposComis) EJECUCION EN MODO ESPORADICO.\n");
    			fprintf(pfLog ,"\n(vCargaTiposComis) EJECUCION EN MODO ESPORADICO.\n");
    			lstTiposComis = stGetTipComisSelecProm(UNIVERSO, stCiclo);
    			break;
    }
	if (lstTiposComis==NULL)
		fprintf(pfLog, "\n[vCargaTiposComis] No existen Tipos de Comisionistas para procesar.");
	else
	{
		for (paux=lstTiposComis;paux != NULL; paux=paux->sgte)
        {
			fprintf(pfLog ,"\n(vCargaTiposComis) Carga las Ventas para TipComis:[%s] [%s].\n",paux->szCodTipComis,paux->szDesTipComis);
			fprintf(stderr,"\n(vCargaTiposComis) Carga las Ventas para TipComis:[%s] [%s].\n",paux->szCodTipComis,paux->szDesTipComis);
            vSeleccionarUniverso(paux->iCodTipoRed, paux->szCodTipComis, paux->szCodTipVendedor);
		}
/*---------------------------------------------------------------------------*/
		vFechaHora();
		fprintf(pfLog, "[%s]\n", (char *)pszGetDateLog());
		fprintf(pfLog ,"\n(vCargaTiposComis) Inserta Datos en Tabla de Seleccion.\n");
		fprintf(stderr,"\n(vCargaTiposComis) Inserta Datos en Tabla de Seleccion.\n");
		vInsertaSeleccion();
/*---------------------------------------------------------------------------*/
		vFechaHora();
		fprintf(pfLog, "[%s]\n", (char *)pszGetDateLog());
		fprintf(pfLog ,"\n(vCargaTiposComis) Libera la memori utilizada.\n");
		fprintf(stderr,"\n(vCargaTiposComis) Libera la memori utilizada.\n");
		vLiberaUniverso(lstUniverso);
		vLiberaTiposComis(lstTiposComis);
	}
}
/* -------------------------------------------------------------------------------------- */
/* Se extrae el universo DIRECTO inicial de registros a considerar para Comisiones.       */
/* -------------------------------------------------------------------------------------- */
void vSeleccionarUniverso(int piCodTipoRed, char * pszCodTipComis, char * pszCodTipVendedor)
{
    stUniverso 	* paux;
    long    	iCantidad = 0;

	int                        i;
	long        iLastRows    = 0;
	int         iFetchedRows = MAXFETCH;
	int         iRetrievRows = MAXFETCH;

    EXEC SQL BEGIN DECLARE SECTION;
        char    szhFechaInicio[11];
        char    szhFechaTermino[11];
        int     ihIndTipoSolic;
        long    lhNumSolicitud  [MAXFETCH];
	    char    szhFecSolicitud [MAXFETCH][20];
        int     ihCodEstado[MAXFETCH];
        char    szhNumIdent[MAXFETCH][21];     
        char    szhNomCliente[MAXFETCH][76];
		int     ihCodComisionista[MAXFETCH];
        long    lhNumVenta[MAXFETCH];   
		int		ihCodTipoRed;        
		char    szhCodTipComis[3];
		char	szhCodTipVendedor[3];
	    long    lMaxFetch;
		long    lhCodVendedor[MAXFETCH];
    EXEC SQL END DECLARE SECTION;
   
    strcpy(szhFechaInicio    , stCiclo.szFecDesdeAceptacion );  
    strcpy(szhFechaTermino   , stCiclo.szFecHastaAceptacion );  
    strcpy(szhCodTipComis	 , pszCodTipComis); 
    ihIndTipoSolic           = 1;

    ihCodTipoRed			 = piCodTipoRed;
    strcpy(szhCodTipVendedor , pszCodTipVendedor);    
    paux      = NULL;
	lMaxFetch = MAXFETCH;

    EXEC SQL DECLARE CUR_UNIVERSO CURSOR FOR
        SELECT DISTINCT
			   A.NUM_SOLICITUD,
               TO_CHAR(A.FEC_INGRESO_H,'DD-MM-YYYY HH24:MI:SS'),
               A.COD_ESTADO,
               A.NUM_IDENT_CLIENTE,
               NVL(B.DES_NOMBRE,'S/N'),
               C.NUM_VENTA
          FROM ERT_SOLICITUD_CAMPOS B  ,
               ERT_SOLICITUD_VENTA C   ,
               VE_VENDEDORES       VEN1,
               VE_VENDEDORES       VEN2,
               ERT_SOLICITUD       A   , 
			   VE_REDVENTAS_TD     RVEN
         WHERE A.FEC_INGRESO_H BETWEEN TO_DATE(:szhFechaInicio,'DD-MM-YYYY') 
           AND TO_DATE(:szhFechaTermino,'DD-MM-YYYY')
           AND A.NUM_SOLICITUD      = B.NUM_SOLICITUD
           AND A.NUM_SOLICITUD      = C.NUM_SOLICITUD(+)
           AND A.COD_VENDEDOR       = VEN1.COD_VENDEDOR
           AND VEN1.COD_VENDE_RAIZ  = VEN2.COD_VENDEDOR
           AND VEN2.COD_TIPCOMIS    = :szhCodTipVendedor
           AND A.IND_TIPO_SOLICITUD = :ihIndTipoSolic
		   AND VEN1.COD_VENDEDOR    = RVEN.COD_VENDEDOR		   		   
		   AND RVEN.COD_TIPORED     = :ihCodTipoRed
        UNION 		
        SELECT DISTINCT 
			   A.NUM_SOLICITUD,
               TO_CHAR(A.FEC_INGRESO_H,'DD-MM-YYYY HH24:MI:SS'),
               A.COD_ESTADO,
               A.NUM_IDENT_CLIENTE,
               NVL(B.DES_NOMBRE,'S/N'),
               C.NUM_VENTA
          FROM ERH_SOLICITUD_CAMPOS B    ,
               ERH_SOLICITUD_VENTA  C    ,
               VE_VENDEDORES        VEN1 ,
               VE_VENDEDORES        VEN2 ,
               ERH_SOLICITUD        A    ,
   			   VE_REDVENTAS_TD      RVEN
         WHERE A.FEC_INGRESO_H BETWEEN TO_DATE(:szhFechaInicio,'DD-MM-YYYY') 
           AND TO_DATE(:szhFechaTermino,'DD-MM-YYYY')
           AND A.NUM_SOLICITUD      = B.NUM_SOLICITUD
           AND A.NUM_SOLICITUD      = C.NUM_SOLICITUD(+)
           AND A.COD_VENDEDOR       = VEN1.COD_VENDEDOR
           AND VEN1.COD_VENDE_RAIZ  = VEN2.COD_VENDEDOR
           AND VEN2.COD_TIPCOMIS    = :szhCodTipVendedor
           AND A.IND_TIPO_SOLICITUD = :ihIndTipoSolic
		   AND VEN1.COD_VENDEDOR    = RVEN.COD_VENDEDOR		   		   
		   AND RVEN.COD_TIPORED     = :ihCodTipoRed;
                                               
    EXEC SQL OPEN CUR_UNIVERSO;

    while(iFetchedRows == iRetrievRows)
    {
		EXEC SQL for :lMaxFetch
               FETCH CUR_UNIVERSO INTO
                         :lhNumSolicitud,
                         :szhFecSolicitud,
                         :ihCodEstado,
                         :szhNumIdent,
                         :szhNomCliente,
                         :lhNumVenta;
                         
		iRetrievRows = sqlca.sqlerrd[2] - iLastRows;
        iLastRows    = sqlca.sqlerrd[2];
                
        for (i=0; i < iRetrievRows; i++)
        {                
            paux = (stUniverso *) malloc(sizeof(stUniverso));

            paux->lNumSolicitud           = lhNumSolicitud[i];
			strcpy(paux->szFecSolicitud   , szfnTrim(szhFecSolicitud[i]));                 
            paux->iCodTipo     			  = ihIndTipoSolic;
            paux->iCodEstado              = ihCodEstado[i];
            strcpy(paux->szNumIdent       , szfnTrim(szhNumIdent[i]));
            strcpy(paux->szNomCliente     , szfnTrim(szhNomCliente[i]));
            paux->lNumVenta               = lhNumVenta[i];
            strcpy(paux->szCodTipComis    , szfnTrim(szhCodTipComis));
            paux->iCodTipoRed     		  = ihCodTipoRed;
		    strcpy(paux->szCodTipVendedor , szhCodTipVendedor);
		    paux->lCodVendedor			  = lhCodVendedor[i];
            paux->iCodComisionista        = lObtieneVendedorPadre(paux->lCodVendedor, ihCodTipoRed, szhCodTipComis);
                        
            paux->sgte 					  = lstUniverso;
            lstUniverso 				  = paux;
            iCantidad++;			
		}
    }
    EXEC SQL CLOSE CUR_UNIVERSO;
    fprintf(pfLog, "\n(vSeleccionarUniverso)Tipo Comisionista:[%s] Cantidad de Evaluaciones Extraidas:[%ld].\n", szhCodTipComis, iCantidad);
}

/*****************************************************************************/
/* Insercion de valores en tabla de salida                                   */
/*****************************************************************************/
void vInsertaSeleccion()
{
    stUniverso	* paux;
	long		lCantAbonados = 0;
	
	EXEC SQL BEGIN DECLARE SECTION;
		long	lhNumSecuencia;
		long  	lhNumSolicitud;
		char  	szhFecSolicitud[20];
        int     ihCodTipo;
        int     ihCodEstado;
		char  	szhNumIdent[20];
        char    szhNomCliente[76];     
		char	szhCodTipComis[3];
		int  	ihCodComisionista;
		long  	lhNumVenta;
		long	lhCodCiclComis;	
		char	szhIdCiclComis[11];
		int		ihCodTipoRed;		
		char	szhCodTipVendedor[3];
		long	lhCodVendedor;	
	EXEC SQL END DECLARE SECTION;
	
	lhCodCiclComis 			= stCiclo.lCodCiclComis;
    strcpy(szhIdCiclComis	, stCiclo.szIdCiclComis);

    for (paux = lstUniverso; paux != NULL; paux = paux->sgte)
    {
         lhNumSolicitud              = paux->lNumSolicitud;
         strcpy(szhFecSolicitud      , szfnTrim(paux->szFecSolicitud));
         ihCodTipo                   = paux->iCodTipo;
         ihCodEstado                 = paux->iCodEstado;
         strcpy(szhNumIdent          , szfnTrim(paux->szNumIdent));
         strcpy(szhNomCliente        , szfnTrim(paux->szNomCliente));
         strcpy(szhCodTipComis       , szfnTrim(paux->szCodTipComis));
         ihCodComisionista           = paux->iCodComisionista;
         lhNumVenta                  = paux->lNumVenta;
         ihCodTipoRed          		 = paux->iCodTipoRed;  
 		 strcpy(szhCodTipVendedor    , paux->szCodTipVendedor);
		 lhCodVendedor       		 = paux->lCodVendedor; 

         EXEC SQL SELECT CMS_REG_SELECCION.NEXTVAL INTO :lhNumSecuencia FROM DUAL;
         lCantAbonados++;

         EXEC SQL INSERT INTO CMT_EVALUACIONES 
                            ( NUM_GENERAL       ,
                              NUM_SOLICITUD     ,
                              FEC_SOLICITUD     ,
                              IND_TIPO_SOLICITUD,
                              COD_ESTADO        ,
                              NUM_IDENT         ,
                              NOM_CLIENTE       ,
                              COD_TIPCOMIS      ,
                              COD_COMISIONISTA  , 
                              NUM_VENTA         ,
                              COD_PERIODO       ,
                              ID_PERIODO        , 
                              COD_TIPORED       ,
                              COD_TIPVENDEDOR   , 
                              COD_VENDEDOR      )
         VALUES 
                          (   :lhNumSecuencia,
                              :lhNumSolicitud,
                              TO_DATE(:szhFecSolicitud,'DD-MM-YYYY HH24:MI:SS'),
                              :ihCodTipo,
                              :ihCodEstado,
                              :szhNumIdent,
                              :szhNomCliente,
                              :szhCodTipComis,
                              :ihCodComisionista,
                              :lhNumVenta,
                              :lhCodCiclComis,
                              :szhIdCiclComis, 
                              :ihCodTipoRed,
                              :szhCodTipVendedor,
                              :lhCodVendedor);
	}
    stStatusProc.lCantAbonados = lCantAbonados;
    fprintf(stderr,"\n(vInsertaSeleccion)Cantidad de Evaluaciones Insertadas:[%ld].\n",lCantAbonados);
    fprintf(pfLog ,"\n(vInsertaSeleccion)Cantidad de Evaluaciones Insertadas:[%ld].\n",lCantAbonados);
}
/*---------------------------------------------------------------------------*/
/* Liberar Memoria Usada para Universo                                       */
/*---------------------------------------------------------------------------*/
void vLiberaUniverso(stUniverso * paux)
{
        if (paux == NULL)
                return;
        vLiberaUniverso(paux->sgte);
        free(paux);
}
/*---------------------------------------------------------------------------*/
/* Rutina principal.                                                         */
/*---------------------------------------------------------------------------*/
int main (int argc, char *argv[])
{
/*---------------------------------------------------------------------------*/
/* Variables Globales.                                                       */
/*---------------------------------------------------------------------------*/
	long  lSegIni, lSegFin;         
	short ibiblio;  
/*---------------------------------------------------------------------------*/
/* Recuperacion del tiempo de inicio del proceso, en segundos.               */
/*---------------------------------------------------------------------------*/
    lSegIni=lGetTimer();	                
/*---------------------------------------------------------------------------*/
/* Inicializacion de estructura de argumentos externos, de estadistica del   */
/* proceso y de alguna otra estructura.                                      */
/*---------------------------------------------------------------------------*/
    memset(&stCiclo, 0, sizeof(reg_ciclo));         
/*---------------------------------------------------------------------------*/
/* Manejo de argumentos ingresados como parametros externos.                 */
/*---------------------------------------------------------------------------*/
    memset(&stArgs, 0, sizeof(rg_argumentos)); 
    vManejaArgs(argc, argv);
/*---------------------------------------------------------------------------*/
/* Conexion a la base de datos Oracle.                                       */
/*---------------------------------------------------------------------------*/	
	strcpy(szhUser, stArgs.szUser);                                                      
	strcpy(szhPass, stArgs.szPass);                                                    
	if(fnOraConnect(szhUser, szhPass) == FALSE)                                          
	{                                                                                  
	        fprintf(stderr, "\nUsuario/Password Oracle no son validos. Se cancela.\n");
	        exit(EXIT_205);                                                            
	}                                                                                  
	else                                                                               
	{                                                                                  
	        fprintf(stderr, "\nConexion con la base de datos ha sido exitosa.\n");     
	        fprintf(stderr, "Username: %s\n\n", szhUser);                              
	}
/*---------------------------------------------------------------------------*/
/* Inicializacion estructura de Bloque(proceso).                             */
/*---------------------------------------------------------------------------*/
    vInicia_Estructura_Procesos(stArgs.szBloque, stArgs.szProceso,szhUser, stArgs.izSecuencia);
    ibiblio = iAccesa_Traza_Procesos(ABRIR_TRAZA,0,"",0,0);                                    
    if (ibiblio)                                                                               
    {                                                                                          
       fprintf(stderr, "Error al Abrir Traza");                                           
       fprintf(stderr, "Error [%d] al escribir Traza de Proceso.\n", ibiblio);            
       exit(ibiblio);                                                                     
    }                                                                                          
/*---------------------------------------------------------------------------*/
/* Configuracion de idioma espanol para tratamiento de fechas.               */
/*---------------------------------------------------------------------------*/
    if(strcmp(getenv("LC_TIME"), LC_TIME_SPANISH) == 0)
    {
       setlocale(LC_TIME, LC_TIME_SPANISH);
    }
/*---------------------------------------------------------------------------*/
/* Preparacion de ambiente para archivos de log y datos.                     */
/*---------------------------------------------------------------------------*/
    fprintf(stderr, "Preparando ambiente para archivos de log, de datos y de configuracion ...\n");
    if((pszEnvLog = (char *)pszEnviron("XPCM_LOG", "")) == (char *)NULL)
    {
        exit(iAccesa_Traza_Procesos(CERRAR_TRAZA_NOK,EXIT_401,"VARIABLE DE AMBIENTE XPCM_LOG NO RECONOCIDA.",0,0));
    }
    fprintf(stderr, "Directorio de Logs         : [%s]\n", (char *)pszEnvLog);
/*---------------------------------------------------------------------------*/
/* Generacion del nombre y creacion del archivo de log.                      */
/*---------------------------------------------------------------------------*/
	strncpy(szFechaYYYYMMDD,szfnObtieneFecYYYYMMDD(),8);
        strncpy(szhSysDate, pszGetDateLog(),16);                                                            
	strcpy(stArgsLog.szProceso,LOGNAME);                                                                     
	strncpy(stArgsLog.szSysDate,szhSysDate,16);                                                                
	sprintf(stArgsLog.szPath,"%s%s/%s",pszEnvLog,stArgsLog.szProceso,szFechaYYYYMMDD);                       
	                                                                                                         
	if((pfLog = fAbreArchivoLog()) == (FILE *)NULL)                                                          
	{                                                                                                        
	    fprintf(stderr, "\nArchivo [%s] no pudo ser abierto.\n", szLogName);                                 
	    fprintf(stderr, "Revise su existencia.\n");                                                          
	    fprintf(stderr, "Error Numero: %d     %s\n", errno, strerror(errno));                                
	    fprintf(stderr, "Proceso finalizado con error.\n");                                                  
	}                                                                                                               
/*---------------------------------------------------------------------------*/
/* Header.                                                                   */
/*---------------------------------------------------------------------------*/
    vFechaHora();                                                               
    fprintf(stderr, "Procesando ...\n");                                        
    fprintf(pfLog, "%s\n", szRaya);                    
    fprintf(pfLog, "\n\n%s\n", (char *)pszFechaHora());
    fprintf(pfLog, "%s\n", GLOSA_PROG);                
    fprintf(pfLog, "VERSION %s\n", PROG_VERSION);      
    fprintf(pfLog, "Ultima Revision: [%s]\n", LAST_REVIEW);                
    fprintf(pfLog, "%s\n\n", szRaya);                  

    fprintf(pfLog, "\n Argumentos de Ejecucion\n");
    
    fprintf(pfLog, "Identificador de Ciclo 			<%s>\n", stArgs.szIdPeriodo);

    fprintf(pfLog, "Identificador de Proceso		<%s>\n", stArgs.szProceso);
    fprintf(pfLog, "Identificador de Bloque			<%s>\n", stArgs.szBloque);
    fprintf(pfLog, "Secuencia de Ejecucion			<%d>\n", stArgs.izSecuencia);
/*---------------------------------------------------------------------------*/
/* Modificacion de configuracion ambiental, para manejo de fechas en Oracle. */
/*---------------------------------------------------------------------------*/
    EXEC SQL ALTER SESSION SET NLS_DATE_FORMAT='dd-mm-yyyy';
/*---------------------------------------------------------------------------*/
/* Procesamiento principal.                                                  */
/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
/* CARGA ESTRUCTURA CICLOS DE PROCESO                                        */
/*---------------------------------------------------------------------------*/
    vFechaHora();
    fprintf(pfLog,  "\n\n%s\n", (char *)pszFechaHora());
    fprintf(pfLog,  "Carga estructura de ciclo de proceso...\n\n");       
    fprintf(stderr, "Carga estructura de ciclo de proceso...\n\n");       
    if (!vCargaCiclo(stArgs.szIdPeriodo,&stCiclo))    
    {
    	fprintf(pfLog, "\n\n[Main] Ciclo que pretende Ejecutar no existe.\n");
    	fprintf(pfLog, "[Main] Se cancela la ejecucion.\n");
    	fprintf(pfLog, "\n\n[Main] Ciclo que pretende Ejecutar no existe.\n");
    	fprintf(pfLog, "[Main] Se cancela la ejecucion.\n");
    	exit(EXIT_101);
    }
    szTipoPeriodo = stCiclo.cTipCiclComis;
/*---------------------------------------------------------------------------*/
/* CARGA TIPOS DE COMISIONISTAS                                              */
/*---------------------------------------------------------------------------*/
    vFechaHora();
    fprintf(pfLog,  "\n\n%s\n", (char *)pszFechaHora());
    fprintf(pfLog,  "Carga tipos de comisionistas a procesar...\n\n");       
    fprintf(stderr, "Carga tipos de comisionistas a procesar...\n\n");       
	vCargaTiposComis();        
/*---------------------------------------------------------------------------*/
/* Recuperacion de los segundos reales ocupados por el proceso.              */
/*---------------------------------------------------------------------------*/ 
    lSegFin=lGetTimer();
    stStatusProc.lSegProceso = lSegFin - lSegIni;
/*---------------------------------------------------------------------------*/
/* Despliegue de la informacion estadistica del proceso.                     */
/*---------------------------------------------------------------------------*/
	fprintf(pfLog, "Estadistica del proceso\n");
	fprintf(pfLog, "------------------------\n");
	fprintf(pfLog, "Registros Finales Procesados   : [%d]\n", stStatusProc.lCantAbonados);
	fprintf(pfLog, "Segundos Reales Utilizados     : [%d]\n\n", stStatusProc.lSegProceso);

	fprintf(stderr, "Estadistica del proceso\n");
	fprintf(stderr, "------------------------\n");
	fprintf(stderr, "Registros Finales Procesados   : [%d]\n", stStatusProc.lCantAbonados);
	fprintf(stderr, "Segundos Reales Utilizados     : [%d]\n\n", stStatusProc.lSegProceso);

/*---------------------------------------------------------------------------*/
	ibiblio = iAccesa_Traza_Procesos(CERRAR_TRAZA_OK,EXIT_0,"",stStatusProc.lSegProceso,stStatusProc.lCantAbonados);
	if (ibiblio)
	        exit(iAccesa_Traza_Procesos(CERRAR_TRAZA_NOK,ibiblio,"ERROR CERRANDO TRAZA.",0,0));
	EXEC SQL COMMIT WORK RELEASE;
	
	vFechaHora();
	fprintf(stderr, "Programa [%s] finalizado ok.\n", basename(argv[0]));
	fprintf(pfLog, "\n\n%s\n", (char *)pszFechaHora());
	fprintf(pfLog, "Proceso [%s] finalizado ok.\n", basename(argv[0]));
	fclose(pfLog);
	return(EXIT_0);
}


/******************************************************************************************/
/** Información de Versionado *************************************************************/
/******************************************************************************************/
/** Pieza                                               : */
/**  %ARCHIVE% */
/** Identificador en PVCS                               : */
/**  %PID% */
/** Producto                                            : */
/**  %PP% */
/** Revisión                                            : */
/**  %PR% */
/** Autor de la Revisión                                : */
/**  %AUTHOR% */
/** Estado de la Revisión ($TO_BE_DEFINED es Check-Out) : */
/**  %PS% */
/** Fecha de Creación de la Revisión                    : */
/**  %DATE% */
/** Worksets ******************************************************************************/
/** %PIRW% */
/** Historia ******************************************************************************/
/** %PL% */
/******************************************************************************************/

