/************************************************************************/
/* Programa encargado de hacer el cierre estandar de comisiones         */ 
/*----------------------------------------------------------------------*/
/* Version 1 - Revision 01.                                             */
/* Inicio: Jueves 13 de Diciembre del 2001                              */
/* Por Richard Troncoso C.                                              */
/************************************************************************/
/* Modificado Por Fabian AEdo R.                                        */
/* - Se normalizan nombres de variables y funciones.                    */
/* - Se normalizan emisiones de log y mensajes por pantalla.            */
/* - Se incorpora almacenmiento de canidad de registros.                */
/* - Se normaliza nombre y ubicación de Log.                            */
/* - Se aplican nuevas definiciones de Ciclos de Comisiones             */
/************************************************************************/

/*---------------------------------------------------------------------------------------------*/
/* Inclusion de librería para definiciones generales del programa.                             */
/*---------------------------------------------------------------------------------------------*/
#include "CIE_estandar.h"
#include "GEN_biblioteca.h"
#include <geora.h>                      
/*---------------------------------------------------------------------------------------------*/
/* Inclusion de biblioteca para manejo de interaccion con Oracle.                              */
/*---------------------------------------------------------------------------------------------*/
EXEC SQL INCLUDE sqlca;                     
EXEC SQL WHENEVER SQLERROR DO vSqlError();

/*---------------------------------------------------------------------------------------------*/
/* Definicion de variables globales para ser usadas con Oracle.                                */
/*---------------------------------------------------------------------------------------------*/
EXEC SQL BEGIN DECLARE SECTION;     
char    szhUser[30]="";         
char    szhPass[30]="";         
char    szhSysDate[17]="";        
char    szFechaYYYYMMDD[9]="";  
EXEC SQL END DECLARE SECTION;      

/*---------------------------------------------------------------------------------------------*/
/* Se cierra tabla cmt_ajustes_comisiones.                                                     */
/*---------------------------------------------------------------------------------------------*/
void vCierraAjustes()
{
	EXEC SQL BEGIN DECLARE SECTION;
		char	szhIdCiclComis[11];
	EXEC SQL END DECLARE SECTION;

	strcpy(szhIdCiclComis, stCiclo.szIdCiclComis);

	EXEC SQL update cmt_ajustes_comisiones
         SET    COD_ESTADO = 'CER'
         WHERE  ID_PERIODO = :szhIdCiclComis
           AND  COD_ESTADO = 'LIQ';
	
	stStatusProc.lCantAjustes = sqlca.sqlerrd[2];  
}

/******************************************************************************
 * Se cierra tabla cmt_facturas_coap.
 ******************************************************************************/

void vCierraFacturasCoap()
{
	EXEC SQL BEGIN DECLARE SECTION;
		char	szhIdCiclComis[11];
	EXEC SQL END DECLARE SECTION;

	strcpy(szhIdCiclComis, stCiclo.szIdCiclComis);
	
    EXEC SQL UPDATE CMT_FACTURAS_COAP
     SET    COD_ESTADO = 'LIQ'
     WHERE  ID_PERIODO= :szhIdCiclComis
       AND  COD_ESTADO = 'LIQ';
    
    stStatusProc.lCantAjustes = sqlca.sqlerrd[2]; 
}
/*---------------------------------------------------------------------------------------------*/
/* Marca el los ANTICIPOS de COMISIONES como CERRADOS                                          */
/*---------------------------------------------------------------------------------------------*/
void vCierraAnticipos()
{

	EXEC SQL BEGIN DECLARE SECTION;
		char	szhIdCiclComis[11];
	EXEC SQL END DECLARE SECTION;

	strcpy(szhIdCiclComis, stCiclo.szIdCiclComis);
	
    EXEC SQL UPDATE CMT_ANTICIPOS
	SET    COD_ESTADO_LIQ = 'CER'
	WHERE  ID_PERIODO_LIQ= :szhIdCiclComis
	  AND  COD_ESTADO_LIQ = 'LIQ';
    stStatusProc.lCantAnticipos = sqlca.sqlerrd[2];
}

/*---------------------------------------------------------------------------------------------*/
/* Rutina principal.                                                                           */
/*---------------------------------------------------------------------------------------------*/
int     main (int argc, char *argv[])
{
/*---------------------------------------------------------------------------------------------*/
/* Inicializacion de estructura de argumentos externos, de estadistica del                     */
/* proceso y de alguna otra estructura.                                                        */
/*---------------------------------------------------------------------------------------------*/
    memset(&stArgs, 0, sizeof(rg_argumentos));
    memset(&stCiclo, 0, sizeof(reg_ciclo));
    memset(&stStatusProc, 0, sizeof(rg_estadistica));
    memset(&proceso, 0, sizeof(proceso));
    stArgs.bFlagUser     		= FALSE;
    
/*---------------------------------------------------------------------------------------------*/
/* Manejo de argumentos ingresados como parametros externos.                                   */
/*---------------------------------------------------------------------------------------------*/
    vManejaArgs(argc, argv); 
/*---------------------------------------------------------------------------------------------*/
/* Conexion a la base de datos Oracle.                                                         */
/*---------------------------------------------------------------------------------------------*/
    strcpy(szhUser, stArgs.szUser);
    strcpy(szhPass, stArgs.szPass);
    if(fnOraConnect(szhUser, szhPass) == FALSE)
    {
            fprintf(stderr, "\nUsuario/Password Oracle no son validos. Se cancela.\n");
            exit(EXIT_205);
    }
    else
    {
            fprintf(stderr, "\nConexion con la base de datos ha sido exitosa.\n");
            fprintf(stderr, "Username: %s\n\n", szhUser);
    }
/*---------------------------------------------------------------------------------------------*/
/* Inicia estructura de proceso y bloques.                                                     */
/*---------------------------------------------------------------------------------------------*/
    vInicia_Estructura_Procesos(stArgs.szBloque, stArgs.szProceso,szhUser, stArgs.izSecuencia);     
    ibiblio = iAccesa_Traza_Procesos(ABRIR_TRAZA,0,"",0,0);                                         
    if (ibiblio)                                                                                    
    {                                                                                               
        fprintf(stderr, "Error al Abrir Traza");                                                    
        fprintf(stderr, "Error [%d] al escribir en TRAZA de Proceso.\n", ibiblio);                     
        exit(ibiblio);                                                                              
    }                                                                                               
/*---------------------------------------------------------------------------------------------*/
/* Configuracion de idioma espanol para tratamiento de fechas.                                 */
/*---------------------------------------------------------------------------------------------*/
    if(strcmp(getenv("LC_TIME"), LC_TIME_SPANISH) == 0)
    {
            setlocale(LC_TIME, LC_TIME_SPANISH);
    }
/*---------------------------------------------------------------------------------------------*/
/* Preparacion de ambiente para archivos de log y datos.                                       */
/*---------------------------------------------------------------------------------------------*/
    fprintf(stderr, "Preparando ambiente para archivos de log, de datos y de configuracion ...\n");
    if((pszEnvLog = (char *)pszEnviron("XPCM_LOG", "")) == (char *)NULL)                                                      
    {                                                                                                                         
        exit(iAccesa_Traza_Procesos(CERRAR_TRAZA_NOK,EXIT_401,"VARIABLE DE AMBIENTE XPCM_LOG NO RECONOCIDA.",0,0));     
    }                                                                                                                         
    fprintf(stderr, "Directorio de Logs         : [%s]\n", (char *)pszEnvLog);                                          
/*---------------------------------------------------------------------------------------------*/
/* Ingresa parametros para estructura que crea archivo de Log                                  */
/*---------------------------------------------------------------------------------------------*/
    strncpy(szFechaYYYYMMDD,szfnObtieneFecYYYYMMDD(),8);
    strncpy(szhSysDate, pszGetDateLog(),16);
    strcpy(stArgsLog.szProceso,LOG_NAME);
    strncpy(stArgsLog.szSysDate,szhSysDate,16);
    sprintf(stArgsLog.szPath,"%s%s/%s",pszEnvLog,stArgsLog.szProceso,szFechaYYYYMMDD);
	if((pfLog = fAbreArchivoLog()) == (FILE *)NULL)
    {
        fprintf(stderr, "\nArchivo [%s] no pudo ser abierto.\n", szLogName);
        fprintf(stderr, "Revise su existencia.\n");
        fprintf(stderr, "Error Numero: %d     %s\n", errno, strerror(errno));
        fprintf(stderr, "Proceso finalizado con error.\n");
                exit(iAccesa_Traza_Procesos(CERRAR_TRAZA_NOK,EXIT_301,"ARCHIVO DE LOG NO PUDO SER ABIERTO.",0,0));
    }
/*---------------------------------------------------------------------------------------------*/
/* Recuperacion del tiempo de inicio del proceso, en segundos.                                 */
/*---------------------------------------------------------------------------------------------*/
	lSegIni=lGetTimer(); 
/*---------------------------------------------------------------------------------------------*/
/* Header.                                                                                     */
/*---------------------------------------------------------------------------------------------*/
    vFechaHora();
    fprintf(stderr, "Procesando ...\n");                                        
    fprintf(pfLog, "%s\n", szRaya);                    
    fprintf(pfLog, "\n\n%s\n", (char *)pszFechaHora());
    fprintf(pfLog, "%s\n", GLOSA_PROG);                
    fprintf(pfLog, "VERSION             : [%s]\n", PROG_VERSION);      
    fprintf(pfLog, "Ultima Revision     : [%s]\n", LAST_REVIEW);                
	fprintf(pfLog, "Base de datos       : [%s]\n", (strcmp(getenv((const char *)"TWO_TASK"), "")!=0?getenv((const char *)"TWO_TASK"):getenv((const char *)"ORACLE_SID")));
    fprintf(pfLog, "Usuario ORACLE      : [%s]\n",(char * )sysGetUserName()); 
    fprintf(pfLog, "%s\n\n", szRaya);                  

    fprintf(pfLog, "\n Argumentos de Ejecucion\n");
    
    fprintf(pfLog, "Identificador de Ciclo 			<%s>\n", stArgs.szIdPeriodo);

    fprintf(pfLog, "Identificador de Proceso		<%s>\n", stArgs.szProceso);
    fprintf(pfLog, "Identificador de Bloque			<%s>\n", stArgs.szBloque);
    fprintf(pfLog, "Secuencia de Ejecucion			<%d>\n", stArgs.izSecuencia);

/*---------------------------------------------------------------------------------------------*/
/* Modificacion de configuracion ambiental, para manejo de fechas en Oracle.                   */
/*---------------------------------------------------------------------------------------------*/
	EXEC SQL ALTER SESSION SET NLS_DATE_FORMAT='dd-mm-yyyy';
/*---------------------------------------------------------------------------------------------*/
/* Procesamiento principal.                                                                    */
/*---------------------------------------------------------------------------------------------*/
    fprintf(pfLog, "\n\n%s\n", (char *)pszFechaHora());
    fprintf(pfLog, "Inicio procesamiento principal ...\n\n");
/*---------------------------------------------------------------------------------------------*/
/*    - Recupera fechas que conforman periodo del parametro.                                   */
/*---------------------------------------------------------------------------------------------*/
    vFechaHora();
    fprintf(pfLog, "\n\n%s\n", (char *)pszFechaHora());
    fprintf(pfLog, "Carga fechas que definen el periodo actual...\n\n");
    fprintf(stderr, "Carga fechas que definen el periodo actual...\n\n");
    if (!vCargaCiclo(stArgs.szIdPeriodo,&stCiclo))
    {
    	fprintf(pfLog, "\n\n[Main] Ciclo que pretende Ejecutar no existe.\n");
    	fprintf(pfLog, "[Main] Se cancela la ejecucion.\n");
    	fprintf(pfLog, "\n\n[Main] Ciclo que pretende Ejecutar no existe.\n");
    	fprintf(pfLog, "[Main] Se cancela la ejecucion.\n");
    	exit(EXIT_101);
    }
/*---------------------------------------------------------------------------------------------*/
/*    - Marca el los AJUSTES de COMISIONES como CERRADOS                                       */
/*---------------------------------------------------------------------------------------------*/
    vFechaHora();                                                                                                                   
    fprintf(pfLog, "\n\n%s\n", (char *)pszFechaHora());
    fprintf(pfLog, "Marca el los AJUSTES de COMISIONES como CERRADOS.\n\n");  
    fprintf(stderr, "Marca el los AJUSTES de COMISIONES como CERRADOS.\n\n");                     
    vCierraAjustes();
/*---------------------------------------------------------------------------------------------*/
/*    - Marca el las FACTURAS COAP como CERRADAS                                               */
/*---------------------------------------------------------------------------------------------*/
    vFechaHora();                                                                                                                   
    fprintf(pfLog, "\n\n%s\n", (char *)pszFechaHora());
    fprintf(pfLog, "Marca el las FACTURAS COAP como CERRADAS.\n\n");  
    fprintf(stderr, "Marca el las FACTURAS COAP como CERRADAS.\n\n");                     
    vCierraFacturasCoap();
/*---------------------------------------------------------------------------------------------*/
/*    - Marca el los ANTICIPOS de COMISIONES como CERRADOS                                     */
/*---------------------------------------------------------------------------------------------*/
    vFechaHora();                                                                                                                   
    fprintf(pfLog, "\n\n%s\n", (char *)pszFechaHora());
    fprintf(pfLog, "Marca el los ANTICIPOS de COMISIONES como CERRADOS.\n\n");  
    fprintf(stderr, "Marca el los ANTICIPOS de COMISIONES como CERRADOS.\n\n");                     
	vCierraAnticipos();

/*---------------------------------------------------------------------------------------------*/
/* Recuperacion de los segundos reales ocupados por el proceso.                                */
/*---------------------------------------------------------------------------------------------*/
    lSegFin=lGetTimer();                            
    stStatusProc.lSegProceso = lSegFin - lSegIni;   
/*---------------------------------------------------------------------------------------------*/
/* Despliegue de la informacion estadistica del proceso.                                       */
/*---------------------------------------------------------------------------------------------*/
    fprintf(pfLog, "\nEstadistica del proceso\n");
    fprintf(pfLog, "-----------------------------------------\n");
    fprintf(pfLog, "Segundos Reales Utilizados              : [%ld]\n", stStatusProc.lSegProceso);
    fprintf(pfLog, "Cantidad Ajustes Modificados            : [%ld]\n", stStatusProc.lCantAjustes);
    fprintf(pfLog, "Cantidad Anticipos Modificados          : [%ld]\n", stStatusProc.lCantAnticipos);
    fprintf(pfLog, "Cantidad Facturas Coap Modificadas      : [%ld]\n", stStatusProc.lCantFacturasCoap);
/*---------------------------------------------------------------------------------------------*/
    fprintf(stderr, "\nEstadistica del proceso\n");
    fprintf(stderr, "-----------------------------------------\n");
    fprintf(stderr, "Segundos Reales Utilizados              : [%ld]\n", stStatusProc.lSegProceso);
    fprintf(stderr, "Cantidad Ajustes Modificados            : [%ld]\n", stStatusProc.lCantAjustes);
    fprintf(stderr, "Cantidad Anticipos Modificados          : [%ld]\n", stStatusProc.lCantAnticipos);
    fprintf(stderr, "Cantidad Facturas Coap Modificadas      : [%ld]\n", stStatusProc.lCantFacturasCoap);

    ibiblio = iAccesa_Traza_Procesos(CERRAR_TRAZA_OK,EXIT_0,"",stStatusProc.lSegProceso,1);
    if (ibiblio)
            exit(iAccesa_Traza_Procesos(CERRAR_TRAZA_NOK,ibiblio,"ERROR CERRANDO TRAZA.",0,0));
    EXEC SQL COMMIT WORK RELEASE;

    fprintf(pfLog , "\n\nProceso [%s] finalizado ok.\n", basename(argv[0]));
    fprintf(stderr, "\n\nProceso [%s] finalizado ok.\n", basename(argv[0]));
    fclose(pfLog);
    return(EXIT_0);
}


/******************************************************************************************/
/** Información de Versionado *************************************************************/
/******************************************************************************************/
/** Pieza                                               : */
/**  %ARCHIVE% */
/** Identificador en PVCS                               : */
/**  %PID% */
/** Producto                                            : */
/**  %PP% */
/** Revisión                                            : */
/**  %PR% */
/** Autor de la Revisión                                : */
/**  %AUTHOR% */
/** Estado de la Revisión ($TO_BE_DEFINED es Check-Out) : */
/**  %PS% */
/** Fecha de Creación de la Revisión                    : */
/**  %DATE% */
/** Worksets ******************************************************************************/
/** %PIRW% */
/** Historia ******************************************************************************/
/** %PL% */
/******************************************************************************************/

