/************************************************************************/
/* Actualiza estados de cartera: Estados y situaciones de abonados para */
/*                               ser considerados en proceso.           */
/* Ingresa nuevas ventas periodo: Para lo que recurre a Siscel para     */
/*                                recuperar las nuevas ventas.          */
/* Discrimina clientes/abonados a ser procesados.                       */
/*----------------------------------------------------------------------*/
/* Version 1 - Revision 00.                                             */
/* Inicio: Lunes 13 de Agosto del 2001.                                 */
/* Por Fabian Aedo Ramírez.                                             */
/*----------------------------------------------------------------------*/
/* 20031001 Marcelo Quiroz G. Versionado Cuzco.                         */
/* Se filtra reversa de tablas mediante el campo ID_PERIODO             */
/*                                                                      */
/************************************************************************/

#include "Rev_Seleccion.h"
#include "GEN_biblioteca.h"

/*---------------------------------------------------------------------------*/
/* Inclusion de biblioteca para manejo de interaccion con Oracle.            */
/*---------------------------------------------------------------------------*/
EXEC SQL INCLUDE sqlca;

/*---------------------------------------------------------------------------*/
/* Definicion de variables globales para ser usadas con Oracle.              */
/*---------------------------------------------------------------------------*/
EXEC SQL BEGIN DECLARE SECTION;
	char    szhUser[30]="";
	char    szhPass[30]="";
	char    szhSysDate [17]="";
	char    szFechaYYYYMMDD[9]="";
	char    szhIdPeriodo[11];
EXEC SQL END DECLARE SECTION;
                                                                                                                                     
/*****************************************************************************/
/* RUTINA PARA LIMPIEZA DEL UNIVERSO DE HABILITACIONES CELULAR.              */
/*****************************************************************************/
void    vRevHabCel()
{        
        EXEC SQL delete FROM CMT_HABIL_CELULAR
                WHERE ID_PERIODO = :szhIdPeriodo;
                
        stStatusProc.lCantHabCel = sqlca.sqlerrd[2];
}
/*****************************************************************************/
/* RUTINA PARA LIMPIEZA DEL UNIVERSO DE HABILITACIONES PREPAGO.              */
/*****************************************************************************/
void    vRevHabPre()
{
        EXEC SQL delete FROM CMT_HABIL_PREPAGO
                WHERE ID_PERIODO = :szhIdPeriodo;
                
                
        stStatusProc.lCantHabPre = sqlca.sqlerrd[2];
}
/*****************************************************************************/
/* RUTINA PARA LIMPIEZA DEL UNIVERSO DE BONOS POR CARTERA.                   */
/*****************************************************************************/
void    vRevBonosCartera()
{        
        EXEC SQL delete FROM CMT_BONOSCARTERA
                WHERE ID_PERIODO = :szhIdPeriodo;
                
        stStatusProc.lCantBonTraf = sqlca.sqlerrd[2];
}
/*****************************************************************************/
/* RUTINA PARA LIMPIEZA DEL UNIVERSO DE BAJAS PREMATURAS.                    */
/*****************************************************************************/
void    vRevBajasCel()
{
        EXEC SQL delete FROM CMT_BAJAS_CELULAR
                WHERE ID_PERIODO = :szhIdPeriodo;
                
        stStatusProc.lCantBajas = sqlca.sqlerrd[2];
}
/*****************************************************************************/
/* RUTINA PARA LIMPIEZA DEL UNIVERSO DE RECHAZOS DE VENTA.                   */
/*****************************************************************************/
void    vRevRechaCel()
{
        EXEC SQL delete FROM CMT_RECHAZOS_CELULAR
                WHERE ID_PERIODO = :szhIdPeriodo;
        
        stStatusProc.lCantRecha = sqlca.sqlerrd[2];
}
/*****************************************************************************/
/* RUTINA PARA LIMPIEZA DE LA CARTERA DE ABONADOS DE DISTRIBUIDORES.         */
/*****************************************************************************/
void    vRevCartera()
{
        EXEC SQL BEGIN DECLARE SECTION;
                char    szhFecDesde[22];        EXEC SQL VAR szhFecDesde IS STRING(22);
                char    szhFecHasta[22];        EXEC SQL VAR szhFecHasta IS STRING(22);         
        EXEC SQL END DECLARE SECTION;

        strcpy(szhFecDesde, stCiclo.szFecDesdeAceptacion);
        strcpy(szhFecHasta, stCiclo.szFecHastaAceptacion);
        
        EXEC SQL delete FROM CMT_CARTERA
                WHERE FEC_ACEPREC  > TO_DATE(:szhFecDesde,'DD-MM-YYYY')
                  AND FEC_ACEPREC <= TO_DATE(:szhFecHasta,'DD-MM-YYYY');
                  
        stStatusProc.lCantCartera = sqlca.sqlerrd[2];
}
/*****************************************************************************/
/* RUTINA PARA LIMPIEZA DE LA EVALUACIONES DE RIESGO.         */
/*****************************************************************************/
void    vRevEvaluaciones()
{
        EXEC SQL delete FROM CMT_EVALUACIONES
                WHERE ID_PERIODO = :szhIdPeriodo;
                  
        stStatusProc.lCantEvalua = sqlca.sqlerrd[2];
}
/*****************************************************************************/
/* RUTINA PARA LIMPIEZA DE LA EVALUACIONES DE CHURN.                         */
/*****************************************************************************/
void    vRevEvalChurn()
{        
        iCodError = EXIT_204;   
        EXEC SQL delete FROM CM_EVALUA_CHURN_TO
                WHERE ID_CICLCOMIS = :szhIdPeriodo;
                  
        stStatusProc.lCantChurn = sqlca.sqlerrd[2];
}
/*****************************************************************************/
/* RUTINA PARA LIMPIEZA DE LA CONVENIOS PAC.                                 */
/*****************************************************************************/
void    vRevEvalConvenios()
{
        EXEC SQL delete FROM CM_CONVENIOS_TO
                WHERE ID_PERIODO = :szhIdPeriodo;
                  
        stStatusProc.lCantConvenios = sqlca.sqlerrd[2];
}
/*****************************************************************************/
/* RUTINA PARA LIMPIEZA DE ENLACE DE COMISIONES.                             */
/*****************************************************************************/
void    vRevEnlaceHist()
{
        EXEC SQL delete FROM CM_ENLACEHIST_TO
                WHERE ID_PERIODO = :szhIdPeriodo;
                  
        stStatusProc.lCantEnlaces = sqlca.sqlerrd[2];
}
/*****************************************************************************/
/* RUTINA PARA LIMPIEZA DEL UNIVERSO DE VENTAS PENDIENTES.                   */
/*****************************************************************************/
void    vRevVtasPendientes()
{        
        EXEC SQL delete FROM CMT_VENTAS_PENDIENTES
                WHERE ID_PERIODO = :szhIdPeriodo;
                
        stStatusProc.lCantVtasPend = sqlca.sqlerrd[2];
}
/*****************************************************************************/
/* RUTINA PARA LIMPIEZA DEL UNIVERSO DE RETENCIONES.                         */
/*****************************************************************************/
void    vRevRetenciones()
{        
        EXEC SQL delete FROM CM_RETENCIONES_TO
                WHERE ID_PERIODO = :szhIdPeriodo;
                
        stStatusProc.lCantRetenciones = sqlca.sqlerrd[2];
}
/*****************************************************************************/
/* Rutina principal.                                                         */
/*****************************************************************************/
int     main (int argc, char *argv[])
{      
/*---------------------------------------------------------------------------*/
/* Variables Globales.                                                       */
/*---------------------------------------------------------------------------*/
        short ibiblio;
		long  lSegIni, lSegFin;	
/*---------------------------------------------------------------------------*/
/* Recuperacion del tiempo de inicio del proceso, en segundos.               */
/*---------------------------------------------------------------------------*/
        lSegIni=lGetTimer();				 
/*---------------------------------------------------------------------------*/
/* Inicializacion de estructura de argumentos externos, de estadistica del   */
/* proceso y de alguna otra estructura.                                      */
/*---------------------------------------------------------------------------*/
        memset(&stStatusProc, 0, sizeof(rg_estadistica));
        memset(&stCiclo, 0, sizeof(reg_ciclo));  
/*---------------------------------------------------------------------------*/
/* Manejo de argumentos ingresados como parametros externos.                 */
/*---------------------------------------------------------------------------*/
        memset(&stArgs, 0, sizeof(rg_argumentos));
        vManejaArgs(argc, argv);
/*---------------------------------------------------------------------------*/
/* Conexion a la base de datos Oracle.                                       */
/*---------------------------------------------------------------------------*/
		fprintf(stderr, "\nstArgs.szUser        [%s]\n", stArgs.szUser);
		fprintf(stderr, "\nstArgs.szPass        [%s]\n", stArgs.szPass);
	
		strcpy(szhUser, stArgs.szUser);                                                      
		strcpy(szhPass, stArgs.szPass);                                                    
		if(fnOraConnect(szhUser, szhPass) == FALSE)                                          
		{                                                                                  
		   	fprintf(stderr, "\nUsuario/Password Oracle no son validos. Se cancela.\n");
		   	exit(EXIT_205);                                                            
		}                                                                                  
		else                                                                               
		{                                                                                  
	   		fprintf(stderr, "\nConexion con la base de datos ha sido exitosa.\n");     
	   		fprintf(stderr, "Username: %s\n\n", szhUser);                              
		}
/*---------------------------------------------------------------------------*/
/* Inicia estructura de proceso y bloques.                                   */
/*---------------------------------------------------------------------------*/
        vInicia_Estructura_Procesos(stArgs.szBloque, stArgs.szProceso,szhUser, stArgs.izSecuencia);
        ibiblio = iAccesa_Traza_Procesos(ABRIR_TRAZA,0,"",0,0);
        if (ibiblio)
        {
            fprintf(stderr, "Error al Abrir Traza");
            fprintf(stderr, "Error [%d] al escribir Traza de Proceso.\n", ibiblio);
            exit(ibiblio);
        }
        
/*---------------------------------------------------------------------------*/
/* Configuracion de idioma espanol para tratamiento de fechas.               */
/*---------------------------------------------------------------------------*/
        if(strcmp(getenv("LC_TIME"), LC_TIME_SPANISH) == 0)
        {
                setlocale(LC_TIME, LC_TIME_SPANISH);
        }
/*---------------------------------------------------------------------------*/
/* Preparacion de ambiente para archivos de log y datos.                     */
/*---------------------------------------------------------------------------*/
        fprintf(stderr, "Preparando ambiente para archivos de log, de datos y de configuracion ...\n");
        if((pszEnvLog = (char *)pszEnviron("XPCM_LOG", "")) == (char *)NULL)
        {
                exit(iAccesa_Traza_Procesos(CERRAR_TRAZA_NOK,EXIT_401,"VARIABLE DE AMBIENTE XPCM_LOG NO RECONOCIDA.",0,0));
        }
        fprintf(stderr, "Directorio de Logs            : [%s]\n", (char *)pszEnvLog);
/*---------------------------------------------------------------------------*/
/* Generacion del nombre y creacion del archivo de log.                      */
/*---------------------------------------------------------------------------*/
		strncpy(szFechaYYYYMMDD,szfnObtieneFecYYYYMMDD(),8);
                strncpy(szhSysDate, pszGetDateLog(),16);                                                            
		strcpy(stArgsLog.szProceso,LOGNAME);                                                                     
		strncpy(stArgsLog.szSysDate,szhSysDate,16);                                                                  
		sprintf(stArgsLog.szPath,"%s%s/%s",pszEnvLog,stArgsLog.szProceso,szFechaYYYYMMDD);                       
	                                                                                                         
		if((pfLog = fAbreArchivoLog()) == (FILE *)NULL)                                                          
		{                                                                                                        
		    fprintf(stderr, "\nArchivo [%s] no pudo ser abierto.\n", LOGNAME);                                 
	    	fprintf(stderr, "Revise su existencia.\n");                                                          
	    	fprintf(stderr, "Error Numero: %d     %s\n", errno, strerror(errno));                                
	    	fprintf(stderr, "Proceso finalizado con error.\n");                                                  
        	exit(iAccesa_Traza_Procesos(CERRAR_TRAZA_NOK,EXIT_301,"ARCHIVO DE DATOS NO PUDO SER ABIERTO.",0,0));
		}                                                                                                               
/*---------------------------------------------------------------------------*/
/* Header.                                                                   */
/*---------------------------------------------------------------------------*/
    	vFechaHora();                                                               
    	fprintf(stderr, "Procesando ...\n");                                        
    	fprintf(pfLog, "%s\n", szRaya);                    
    	fprintf(pfLog, "\n\n%s\n", (char *)pszFechaHora());
    	fprintf(pfLog, "%s\n", GLOSA_PROG);                
    	fprintf(pfLog, "VERSION %s\n", PROG_VERSION);      
    	fprintf(pfLog, "Ultima Revision: [%s]\n", LAST_REVIEW);                
    	fprintf(pfLog, "%s\n\n", szRaya);                  

    	fprintf(pfLog, "\n Argumentos de Ejecucion\n");
    	fprintf(pfLog, "Identificador de Ciclo 			<%s>\n", stArgs.szIdPeriodo);
/*---------------------------------------------------------------------------*/
/* Modificacion de configuracion ambiental, para manejo de fechas en Oracle. */
/*---------------------------------------------------------------------------*/
        EXEC SQL ALTER SESSION SET NLS_DATE_FORMAT='dd-mm-yyyy hh24:mi:ss';
/*---------------------------------------------------------------------------*/
/* Procesamiento principal:                                                  */
/*---------------------------------------------------------------------------*/
    	vFechaHora();
    	fprintf(pfLog,  "\n\n%s\n", (char *)pszFechaHora());
    	fprintf(pfLog,  "Carga estructura de ciclo de proceso...\n\n");       
    	fprintf(stderr, "Carga estructura de ciclo de proceso...\n\n");       
    	if (!vCargaCiclo(stArgs.szIdPeriodo,&stCiclo))    
    	{
	    	fprintf(pfLog, "\n\n[Main] Ciclo que pretende Ejecutar no existe.\n");
    		fprintf(pfLog, "[Main] Se cancela la ejecucion.\n");
    		fprintf(pfLog, "\n\n[Main] Ciclo que pretende Ejecutar no existe.\n");
    		fprintf(pfLog, "[Main] Se cancela la ejecucion.\n");
    		exit(EXIT_101);
    	}
    	strcpy(szhIdPeriodo , stArgs.szIdPeriodo);   
        fprintf(pfLog,"Fecha DESDE (fec_acep_ant): [%s]\n", stCiclo.szFecDesdeAceptacion);
        fprintf(pfLog,"Fecha HASTA (fec_acep_act): [%s]\n", stCiclo.szFecHastaAceptacion);      
/*---------------------------------------------------------------------------*/
/* RUTINA PARA LIMPIEZA DEL UNIVERSO DE HABILITACIONES CELULAR.              */
/*---------------------------------------------------------------------------*/
    	vFechaHora();
		fprintf(pfLog, "[%s]\n", (char *)pszGetDateLog());
		fprintf(pfLog ,"\n(vRevHabCel) Eliminando registros desde CMT_HABIL_CELULAR...\n");
		fprintf(stderr,"\n(vRevHabCel) Eliminando registros desde CMT_HABIL_CELULAR...\n");
        vRevHabCel();
/*---------------------------------------------------------------------------*/
/* RUTINA PARA LIMPIEZA DEL UNIVERSO DE HABILITACIONES PREPAGO.              */
/*---------------------------------------------------------------------------*/
    	vFechaHora();
		fprintf(pfLog, "[%s]\n", (char *)pszGetDateLog());
		fprintf(pfLog ,"\n(vRevHabPre) Eliminando registros desde CMT_HABIL_PREPAGO...\n");
		fprintf(stderr,"\n(vRevHabPre) Eliminando registros desde CMT_HABIL_PREPAGO...\n");
        vRevHabPre();
/*---------------------------------------------------------------------------*/
/* RUTINA PARA LIMPIEZA DEL UNIVERSO DE BONOS POR CARTERA.                   */
/*---------------------------------------------------------------------------*/
    	vFechaHora();
		fprintf(pfLog, "[%s]\n", (char *)pszGetDateLog());
		fprintf(pfLog ,"\n(vRevBonosCartera) Eliminando registros desde CMT_BONOSCARTERA...\n");
		fprintf(stderr,"\n(vRevBonosCartera) Eliminando registros desde CMT_BONOSCARTERA...\n");
        vRevBonosCartera();
/*---------------------------------------------------------------------------*/
/* RUTINA PARA LIMPIEZA DEL UNIVERSO DE BAJAS PREMATURAS.                    */
/*---------------------------------------------------------------------------*/
    	vFechaHora();
		fprintf(pfLog, "[%s]\n", (char *)pszGetDateLog());
		fprintf(pfLog ,"\n(vRevBajasCel) Eliminando registros desde CMT_BAJAS_CELULAR...\n");
		fprintf(stderr,"\n(vRevBajasCel) Eliminando registros desde CMT_BAJAS_CELULAR...\n");
        vRevBajasCel();
/*---------------------------------------------------------------------------*/
/* RUTINA PARA LIMPIEZA DEL UNIVERSO DE RECHAZOS DE VENTA.                   */
/*---------------------------------------------------------------------------*/
    	vFechaHora();
		fprintf(pfLog, "[%s]\n", (char *)pszGetDateLog());
		fprintf(pfLog ,"\n(vRevRechaCel) Eliminando registros desde CMT_RECHAZOS_CELULAR...\n");
		fprintf(stderr,"\n(vRevRechaCel) Eliminando registros desde CMT_RECHAZOS_CELULAR...\n");
        vRevRechaCel();
/*---------------------------------------------------------------------------*/
/* RUTINA PARA LIMPIEZA DE LA CARTERA DE ABONADOS DE DISTRIBUIDORES.         */
/*---------------------------------------------------------------------------*/
    	vFechaHora();
		fprintf(pfLog, "[%s]\n", (char *)pszGetDateLog());
		fprintf(pfLog ,"\n(vRevCartera) Eliminando registros desde CMT_CARTERA...\n");
		fprintf(stderr,"\n(vRevCartera) Eliminando registros desde CMT_CARTERA...\n");
        vRevCartera();
/*---------------------------------------------------------------------------*/
/* RUTINA PARA LIMPIEZA DEL UNIVERSO DE VENTAS PENDIENTES.                   */
/*---------------------------------------------------------------------------*/
    	vFechaHora();
		fprintf(pfLog, "[%s]\n", (char *)pszGetDateLog());
		fprintf(pfLog ,"\n(vRevVtasPendientes) Eliminando registros desde CMT_VENTAS_PENDIENTES...\n");
		fprintf(stderr,"\n(vRevVtasPendientes) Eliminando registros desde CMT_VENTAS_PENDIENTES...\n");
        vRevVtasPendientes();
/*---------------------------------------------------------------------------*/
/* RUTINA PARA LIMPIEZA DEL UNIVERSO DE VENTAS PENDIENTES.                   */
/*---------------------------------------------------------------------------*/
    	vFechaHora();
		fprintf(pfLog, "[%s]\n", (char *)pszGetDateLog());
		fprintf(pfLog ,"\n(vRevEvalChurn) Eliminando registros desde CM_EVALUA_CHURN_TO...\n");
		fprintf(stderr,"\n(vRevEvalChurn) Eliminando registros desde CM_EVALUA_CHURN_TO...\n");
        vRevEvalChurn();
/*---------------------------------------------------------------------------*/
/* RUTINA PARA LIMPIEZA DEL UNIVERSO DE VENTAS PENDIENTES.                   */
/*---------------------------------------------------------------------------*/
    	vFechaHora();
		fprintf(pfLog, "[%s]\n", (char *)pszGetDateLog());
		fprintf(pfLog ,"\n(vRevEvalConvenios) Eliminando registros desde CM_CONVENIOS_TO...\n");
		fprintf(stderr,"\n(vRevEvalConvenios) Eliminando registros desde CM_CONVENIOS_TO...\n");
        vRevEvalConvenios();
/*---------------------------------------------------------------------------*/
/* RUTINA PARA LIMPIEZA DEL UNIVERSO DE VENTAS PENDIENTES.                   */
/*---------------------------------------------------------------------------*/
    	vFechaHora();
		fprintf(pfLog, "[%s]\n", (char *)pszGetDateLog());
		fprintf(pfLog ,"\n(vRevEvaluaciones) Eliminando registros desde CM_EVALUACIONES_TO...\n");
		fprintf(stderr,"\n(vRevEvaluaciones) Eliminando registros desde CM_EVALUACIONES_TO...\n");
        vRevEvaluaciones();
/*---------------------------------------------------------------------------*/
/* RUTINA PARA LIMPIEZA DEL UNIVERSO DE RETENCIONES.                         */
/*---------------------------------------------------------------------------*/
    	vFechaHora();
		fprintf(pfLog, "[%s]\n", (char *)pszGetDateLog());
		fprintf(pfLog ,"\n(vRevRetenciones) Eliminando registros desde CM_RETENCIONES_TO...\n");
		fprintf(stderr,"\n(vRevRetenciones) Eliminando registros desde CM_RETENCIONES_TO...\n");
        vRevRetenciones();
/*---------------------------------------------------------------------------*/
/* RUTINA PARA LIMPIEZA DEL UNIVERSO DE VENTAS PENDIENTES.                   */
/*---------------------------------------------------------------------------*/
    	vFechaHora();
		fprintf(pfLog, "[%s]\n", (char *)pszGetDateLog());
		fprintf(pfLog ,"\n(vRevEnlaceHist) Eliminando registros desde CM_ENLACEHIST_TO...\n");
		fprintf(stderr,"\n(vRevEnlaceHist) Eliminando registros desde CM_ENLACEHIST_TO...\n");
        vRevEnlaceHist();
/*---------------------------------------------------------------------------*/
/* Recuperacion de los segundos reales ocupados por el proceso.              */
/*---------------------------------------------------------------------------*/ 
        lSegFin=lGetTimer();
        stStatusProc.lSegProceso = lSegFin - lSegIni;
/*---------------------------------------------------------------------------*/
/* Despliegue de la informacion estadistica del proceso.                     */
/*---------------------------------------------------------------------------*/
        fprintf(pfLog, "\nEstadistica del proceso\n");
        fprintf(pfLog, "------------------------\n");
        fprintf(pfLog, "Segundos reales utilizados                      : [%d]\n", stStatusProc.lSegProceso);
        fprintf(pfLog, "Ventas Contrato eliminadas                      : [%d]\n", stStatusProc.lCantHabCel);
        fprintf(pfLog, "Habilitaciones Amistar eliminadas               : [%d]\n", stStatusProc.lCantHabPre);
        fprintf(pfLog, "Registros de recaudacion cartera eliminados     : [%d]\n", stStatusProc.lCantBonTraf);
        fprintf(pfLog, "Bajas de contrato prepamaturas eliminadas       : [%d]\n", stStatusProc.lCantBajas);
        fprintf(pfLog, "Rechazos de Venta eliminados                    : [%d]\n", stStatusProc.lCantRecha);
        fprintf(pfLog, "Ventas Pendientes eliminadas                    : [%d]\n", stStatusProc.lCantVtasPend);
        fprintf(pfLog, "Registros de cartera de abonado eliminados      : [%d]\n", stStatusProc.lCantCartera);
        fprintf(pfLog, "Evaluaciones de Riesgo eliminadas               : [%d]\n", stStatusProc.lCantEvalua);
        fprintf(pfLog, "Evaluaciones de la vble. CHURN eliminadas       : [%d]\n", stStatusProc.lCantChurn);
        fprintf(pfLog, "Retenciones eliminadas                          : [%d]\n", stStatusProc.lCantRetenciones);
        fprintf(pfLog, "Convenios PAC eliminados                        : [%d]\n", stStatusProc.lCantConvenios);
        fprintf(pfLog, "Registros de Enlace Historico eliminados        : [%d]\n", stStatusProc.lCantEnlaces);

        ibiblio = iAccesa_Traza_Procesos(CERRAR_TRAZA_OK,EXIT_0,"",stStatusProc.lSegProceso,0);
        if (ibiblio)
                exit(iAccesa_Traza_Procesos(CERRAR_TRAZA_NOK,ibiblio,"ERROR CERRANDO TRAZA.",0,0));
        EXEC SQL COMMIT WORK RELEASE; 
          
		vFechaHora();
		fprintf(stderr, "Programa [%s] finalizado ok.\n", basename(argv[0]));
		fprintf(pfLog, "\n\n%s\n", (char *)pszFechaHora());
		fprintf(pfLog, "Proceso [%s] finalizado ok.\n", basename(argv[0]));
		fclose(pfLog);
		return(EXIT_0);        
}


/******************************************************************************************/
/** Información de Versionado *************************************************************/
/******************************************************************************************/
/** Pieza                                               : */
/**  %ARCHIVE% */
/** Identificador en PVCS                               : */
/**  %PID% */
/** Producto                                            : */
/**  %PP% */
/** Revisión                                            : */
/**  %PR% */
/** Autor de la Revisión                                : */
/**  %AUTHOR% */
/** Estado de la Revisión ($TO_BE_DEFINED es Check-Out) : */
/**  %PS% */
/** Fecha de Creación de la Revisión                    : */
/**  %DATE% */
/** Worksets ******************************************************************************/
/** %PIRW% */
/** Historia ******************************************************************************/
/** %PL% */
/******************************************************************************************/

