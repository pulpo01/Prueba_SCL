/***************************************************************************/
/* Programa encargado de generar registros historicos de tabla ConvenioPAC */
/*-------------------------------------------------------------------------*/
/* Version 1 - Revision 00.                                                */
/* Inicio: 25092002                                                        */
/* Fin:                                                                    */
/* Autor :                                                                 */
/***************************************************************************/
/* 20030930 Marcelo Quiroz G. Versionado Cuzco.                            */
/* Se filtra carga de tablas historicas por los campos ID_PERIODO          */
/*                                                                         */
/***************************************************************************/

/*---------------------------------------------------------------------------*/
/* Inclusion de libreria para definiciones generales del programa.           */
/*---------------------------------------------------------------------------*/
#include "His_ConvenioPAC.h"
#include "GEN_biblioteca.h"
/*---------------------------------------------------------------------------*/
/* Inclusion de biblioteca para manejo de interaccion con Oracle.            */
/*---------------------------------------------------------------------------*/
EXEC SQL INCLUDE sqlca;
EXEC SQL WHENEVER SQLERROR DO vSqlError();
/*---------------------------------------------------------------------------*/
/* Definicion de variables globales para ser usadas con Oracle.              */
/*---------------------------------------------------------------------------*/
EXEC SQL BEGIN DECLARE SECTION;
	char    szhUser[30]="";
	char    szhPass[30]="";
	char    szhSysDate [17]="";
	char    szFechaYYYYMMDD[9]="";
EXEC SQL END DECLARE SECTION;

/*---------------------------------------------------------------------------*/
/* Carga Tablas Historicas                                                   */
/*---------------------------------------------------------------------------*/
int  iCargaTablasHist()
{
	EXEC SQL BEGIN DECLARE SECTION;
		char	szhIdPeriodo[11];
		char	szNomTablaProceso[31];
		char	szNomTablaHistorica[31];
	EXEC SQL END DECLARE SECTION;
	
	strcpy(szhIdPeriodo, stCiclo.szIdCiclComis);
	
	fprintf(pfLog , "\n[iCargaTablasHist] Carga los datos en Histórico Ciclo:[%s]\n", szhIdPeriodo);
	fprintf(stderr, "\n[iCargaTablasHist] Carga los datos en Histórico Ciclo:[%s]\n", szhIdPeriodo);
	
	EXEC SQL
    	INSERT INTO CM_CONVENIOS_TH
               (NUM_GENERAL,
                COD_TIPCOMIS,
                COD_COMISIONISTA,
                COD_CLIENTE,
                COD_PERIODO,
                ID_PERIODO,
                FEC_CONVENIO,
                COD_TIPORED, 
                COD_TIPVENDEDOR, 
                COD_VENDEDOR)
    	 SELECT NUM_GENERAL,
           		COD_TIPCOMIS,
           		COD_COMISIONISTA,
           		COD_CLIENTE,
           		COD_PERIODO,
           		ID_PERIODO,
           		FEC_CONVENIO,
           		COD_TIPORED, 
           		COD_TIPVENDEDOR, 
           		COD_VENDEDOR
    	   FROM CM_CONVENIOS_TO
          WHERE ID_PERIODO = :szhIdPeriodo;

    if ( sqlca.sqlcode != SQLOK && sqlca.sqlcode != SQLNOTFOUND )
    {
         fprintf(pfLog,  "Error al insertar en CM_CONVENIOS_TH ORA[%d]\n",sqlca.sqlcode);
         return FALSE;
    }
	strcpy(szNomTablaProceso, "CM_CONVENIOS_TO");
    strcpy(szNomTablaHistorica, "CM_CONVENIOS_TH");
	vCierraEnlace(szNomTablaProceso,szNomTablaHistorica,szhIdPeriodo);      
	
    stStatusProc.lRegInsertos = sqlca.sqlerrd[2] ;

    return TRUE;
}
/*---------------------------------------------------------------------------*/
/* Borra tablas actuales                                                    */
/*---------------------------------------------------------------------------*/

int iBorraTablasTo()
{
	EXEC SQL BEGIN DECLARE SECTION;
		char	szhIdPeriodo[11];
		int		iCantidad;		
	EXEC SQL END DECLARE SECTION;
	
	strcpy(szhIdPeriodo, stCiclo.szIdCiclComis);

    EXEC SQL DELETE FROM CM_CONVENIOS_TO WHERE ID_PERIODO = :szhIdPeriodo;

    if ( sqlca.sqlcode != SQLOK && sqlca.sqlcode != SQLNOTFOUND)
    {
         fprintf(pfLog ,  "\n[iBorraTablasTo] Error al borrar CM_CONVENIOS_TO ORA[%d]\n",sqlca.sqlcode);
         fprintf(stderr,  "\n[iBorraTablasTo] Error al borrar CM_CONVENIOS_TO ORA[%d]\n",sqlca.sqlcode);
         return FALSE;
    }
	iCantidad = sqlca.sqlerrd[2];
    fprintf(pfLog , "\n[iBorraTablasTo] Registros Eliminados:[%d].\n", iCantidad);
    fprintf(stderr, "\n[iBorraTablasTo] Registros Eliminados:[%d].\n", iCantidad);
    return TRUE ;
}

/*---------------------------------------------------------------------------*/
/* Rutina principal.                                                         */
/*---------------------------------------------------------------------------*/
int     main (int argc, char *argv[])
{
/*---------------------------------------------------------------------------*/
/* Variables Globales.                                                       */
/*---------------------------------------------------------------------------*/
	long  lSegIni, lSegFin;         
	short ibiblio;                      
    int  iRetorno;
/*---------------------------------------------------------------------------*/
/* Recuperacion del tiempo de inicio del proceso, en segundos.               */
/*---------------------------------------------------------------------------*/
        lSegIni=lGetTimer();
/*---------------------------------------------------------------------------*/
/* Inicializacion de estructura de argumentos externos, de estadistica del   */
/* proceso y de alguna otra estructura.                                      */
/*---------------------------------------------------------------------------*/
    memset(&stCiclo, 0, sizeof(reg_ciclo)); 
    memset(&stStatusProc,   0, sizeof(rg_estadistica));
    memset(&proceso, 0, sizeof(proceso));
/*---------------------------------------------------------------------------*/
/* Manejo de argumentos ingresados como parametros externos.                 */
/*---------------------------------------------------------------------------*/
    memset(&stArgs,                 0, sizeof(rg_argumentos));
    vManejaArgs(argc, argv);
/*---------------------------------------------------------------------------*/
/* Conexion a la base de datos Oracle.                                       */
/*---------------------------------------------------------------------------*/
	fprintf(stderr, "\nstArgs.szUser        [%s]\n", stArgs.szUser);
	fprintf(stderr, "\nstArgs.szPass        [%s]\n", stArgs.szPass);
	
	strcpy(szhUser, stArgs.szUser);                                                      
	strcpy(szhPass, stArgs.szPass);                                                    
	if(fnOraConnect(szhUser, szhPass) == FALSE)                                          
	{                                                                                  
	   fprintf(stderr, "\nUsuario/Password Oracle no son validos. Se cancela.\n");
	   exit(EXIT_205);                                                            
	}                                                                                  
	else                                                                               
	{                                                                                  
	   fprintf(stderr, "\nConexion con la base de datos ha sido exitosa.\n");     
	   fprintf(stderr, "Username: %s\n\n", szhUser);                              
	}
/*---------------------------------------------------------------------------*/
/* Inicia estructura de proceso y bloques.                                   */
/*---------------------------------------------------------------------------*/
    vInicia_Estructura_Procesos(stArgs.szBloque, stArgs.szProceso,szhUser, stArgs.izSecuencia);
    ibiblio = iAccesa_Traza_Procesos(ABRIR_TRAZA,0,"",0,0);
    if (ibiblio)
    {
       fprintf(stderr, "Error al Abrir Traza");
       fprintf(stderr, "Error [%d] al escribir Traza de Proceso.\n", ibiblio);
       exit(ibiblio);
    }        
/*---------------------------------------------------------------------------*/
/* Configuracion de idioma espanol para tratamiento de fechas.               */
/*---------------------------------------------------------------------------*/
    if(strcmp(getenv("LC_TIME"), LC_TIME_SPANISH) == 0)
    {
       setlocale(LC_TIME, LC_TIME_SPANISH);
    }
/*---------------------------------------------------------------------------*/
/* Preparacion de ambiente para archivos de log y datos.                     */
/*---------------------------------------------------------------------------*/
    fprintf(stderr, "Preparando ambiente para archivos de log, de datos y de configuracion ...\n");
    if((pszEnvLog = (char *)pszEnviron("XPCM_LOG", "")) == (char *)NULL)
    {
       exit(iAccesa_Traza_Procesos(CERRAR_TRAZA_NOK,EXIT_401,"VARIABLE DE AMBIENTE XPCM_LOG NO RECONOCIDA.",0,0));
    }
    if((pszEnvCfg = (char *)pszEnviron("XPCM_CFG", "")) == (char *)NULL)
    {
       exit(iAccesa_Traza_Procesos(CERRAR_TRAZA_NOK,EXIT_401,"VARIABLE DE AMBIENTE XPCM_CFG NO RECONOCIDA.",0,0));
    }

    fprintf(stderr, "Directorio de Logs         : [%s]\n", (char *)pszEnvLog);
/*------------------------------------------------------------*/
/* Ingresa parametros para estructura que crea archivo de Log */
/*------------------------------------------------------------*/
	strncpy(szFechaYYYYMMDD,szfnObtieneFecYYYYMMDD(),8);
        strncpy(szhSysDate, pszGetDateLog(),16);                                                           
	strcpy(stArgsLog.szProceso,LOGNAME);                                                                     
	strncpy(stArgsLog.szSysDate,szhSysDate,16);                                                                  
	sprintf(stArgsLog.szPath,"%s%s/%s",pszEnvLog,stArgsLog.szProceso,szFechaYYYYMMDD);                       
	                                                                                                         
	if((pfLog = fAbreArchivoLog()) == (FILE *)NULL)                                                          
	{                                                                                                        
	    fprintf(stderr, "\nArchivo [%s] no pudo ser abierto.\n", LOGNAME);                                 
	    fprintf(stderr, "Revise su existencia.\n");                                                          
	    fprintf(stderr, "Error Numero: %d     %s\n", errno, strerror(errno));                                
	    fprintf(stderr, "Proceso finalizado con error.\n");                                                  
        exit(iAccesa_Traza_Procesos(CERRAR_TRAZA_NOK,EXIT_301,"ARCHIVO DE DATOS NO PUDO SER ABIERTO.",0,0));
	}                                                                                                                   
/*---------------------------------------------------------------------------*/
/* Header.                                                                   */
/*---------------------------------------------------------------------------*/
    vFechaHora();                                                               
    fprintf(stderr, "Procesando ...\n");                                        
    fprintf(pfLog, "%s\n", szRaya);                    
    fprintf(pfLog, "\n\n%s\n", (char *)pszFechaHora());
    fprintf(pfLog, "%s\n", GLOSA_PROG);                
    fprintf(pfLog, "VERSION %s\n", PROG_VERSION);      
    fprintf(pfLog, "Ultima Revision: [%s]\n", LAST_REVIEW);                
    fprintf(pfLog, "%s\n\n", szRaya);                  

    fprintf(pfLog, "\n Argumentos de Ejecucion\n");
    fprintf(pfLog, "Identificador de Ciclo 			<%s>\n", stArgs.szIdPeriodo);
/*---------------------------------------------------------------------------*/
/* Modificacion de configuracion ambiental, para manejo de fechas en Oracle. */
/*---------------------------------------------------------------------------*/
     EXEC SQL ALTER SESSION SET NLS_DATE_FORMAT='dd-mm-yyyy';
/*---------------------------------------------------------------------------*/
/* Procesamiento principal.                                                  */
/*---------------------------------------------------------------------------*/
    vFechaHora();
    fprintf(pfLog,  "\n\n%s\n", (char *)pszFechaHora());
    fprintf(pfLog,  "Carga estructura de ciclo de proceso...\n\n");       
    fprintf(stderr, "Carga estructura de ciclo de proceso...\n\n");       
    if (!vCargaCiclo(stArgs.szIdPeriodo,&stCiclo))    
    {
    	fprintf(pfLog, "\n\n[Main] Ciclo que pretende Ejecutar no existe.\n");
    	fprintf(pfLog, "[Main] Se cancela la ejecucion.\n");
    	fprintf(pfLog, "\n\n[Main] Ciclo que pretende Ejecutar no existe.\n");
    	fprintf(pfLog, "[Main] Se cancela la ejecucion.\n");
    	exit(EXIT_101);
    }
/*---------------------------------------------------------------------------*/
/*    - Carga tablas                                                         */
/*---------------------------------------------------------------------------*/
    vFechaHora();
	fprintf(pfLog, "[%s]\n", (char *)pszGetDateLog());
	fprintf(pfLog ,"\n(vCargaTablasHist) Carga Tabla Historica.\n");
	fprintf(stderr,"\n(vCargaTablasHist) Carga Tabla Historica.\n");
    iRetorno = iCargaTablasHist();        
/*---------------------------------------------------------------------------*/
/*    - Borra tablas ya pasadas a historico                                  */
/*---------------------------------------------------------------------------*/
    if ( iRetorno )
    {
    	vFechaHora();
		fprintf(pfLog, "[%s]\n", (char *)pszGetDateLog());
		fprintf(pfLog ,"\n(iBorraTablasTo) Borra Tabla Actual.\n");
		fprintf(stderr,"\n(iBorraTablasTo) Borra Tabla Actual.\n");        
        iRetorno = iBorraTablasTo(); 
    }
    else
        fprintf(pfLog ,"No Carga tablas Historicas , proceso con ERROR\n");
/*---------------------------------------------------------------------------*/
/* Recuperacion de los segundos reales ocupados por el proceso.              */
/*---------------------------------------------------------------------------*/
    lSegFin=lGetTimer();
    stStatusProc.lSegProceso = lSegFin - lSegIni;
/*---------------------------------------------------------------------------*/
/* Despliegue de la informacion estadistica del proceso.                     */
/*---------------------------------------------------------------------------*/
	fprintf(pfLog,  "Estadistica del proceso\n");
	fprintf(pfLog,  "------------------------\n");
	fprintf(pfLog,  "Segundos Reales Utilizados                  : [%d]\n\n", stStatusProc.lSegProceso);
	fprintf(pfLog,  "Registros pasados a historico Convenio PAC  : [%d]\n"  , stStatusProc.lRegInsertos); 

	fprintf(stderr, "Estadistica del proceso\n");
	fprintf(stderr,"------------------------\n");
	fprintf(stderr, "Segundos Reales Utilizados                  : [%d]\n\n", stStatusProc.lSegProceso);
	fprintf(stderr, "Registros pasados a historico Convenio PAC  : [%d]\n"  , stStatusProc.lRegInsertos);

/*---------------------------------------------------------------------------*/
	ibiblio = iAccesa_Traza_Procesos(CERRAR_TRAZA_OK,EXIT_0,"",stStatusProc.lSegProceso,stStatusProc.lRegInsertos);
	if (ibiblio)
	        exit(iAccesa_Traza_Procesos(CERRAR_TRAZA_NOK,ibiblio,"ERROR CERRANDO TRAZA.",0,0));
	EXEC SQL COMMIT WORK RELEASE;
	
	vFechaHora();
	fprintf(stderr, "Programa [%s] finalizado ok.\n", basename(argv[0]));
	fprintf(pfLog, "\n\n%s\n", (char *)pszFechaHora());
	fprintf(pfLog, "Proceso [%s] finalizado ok.\n", basename(argv[0]));
	fclose(pfLog);
	return(EXIT_0);        
}




/******************************************************************************************/
/** Información de Versionado *************************************************************/
/******************************************************************************************/
/** Pieza                                               : */
/**  %ARCHIVE% */
/** Identificador en PVCS                               : */
/**  %PID% */
/** Producto                                            : */
/**  %PP% */
/** Revisión                                            : */
/**  %PR% */
/** Autor de la Revisión                                : */
/**  %AUTHOR% */
/** Estado de la Revisión ($TO_BE_DEFINED es Check-Out) : */
/**  %PS% */
/** Fecha de Creación de la Revisión                    : */
/**  %DATE% */
/** Worksets ******************************************************************************/
/** %PIRW% */
/** Historia ******************************************************************************/
/** %PL% */
/******************************************************************************************/

