/*****************************************************************************/
/* Fichero    :  prebilcon.pc                                                */ 
/* Descripcion:  Proceso de Prebilling de PVENTA||CONTADO                    */
/*****************************************************************************/

#define _PREBILCON_PC_
#include <prebilco.h>
EXEC SQL INCLUDE sqlca;

/* ------------------------------------------------------------------------- */
/*                    funcion : bPreBillingClienteContado                    */ 
/*      Valores Retorno: FALSE - Error                                       */
/*                       TRUE  - Ningun Error                                */
/* ------------------------------------------------------------------------- */
BOOL bPreBillingClienteContado (long         lNumProceso,  VENTAS       stVenta  ,
                                TRANSCONTADO stTransC   ,  int          iTipoFact)
{
   long  lNumAbonado ;
   short iCodProducto;
   int   iRegInsert = 0;

   vInitAnomProceso(&stAnomProceso);
   vInitEstructuras();
   strcpy(stAnomProceso.szDesProceso,"PreBilling Contado");

   vDTrazasLog (szExeName,
   "\n\t\t*** FACTURA CONTADO ***"
   "\n\t\t=>  CLIENTE: [%ld]   \n",LOG03,stCliente.lCodCliente);
   
   vDTrazasError (szExeName,
   "\n\t\t*** FACTURA CONTADO ***"
   "\n\t\t=>  CLIENTE: [%ld]   \n",LOG03,stCliente.lCodCliente);

   vInitEstructurasCargos ();
   lNumAbonado = -1;
   iCodProducto= -1;
   if(!bIFCargos (stVenta,stTransC,lNumAbonado,iCodProducto,iTipoFact))
   {   vDTrazasLog (szExeName,"\tCliente %ld sin procesar",LOG01, stCliente.lCodCliente);
       vFreeCargos (); 
       return FALSE ;   }
       
   /**************************************************************************/
   /* Si hay dos modalidades en la Venta (Contado y Credito) introducimos un */
   /* proceso por modalidad, esto lo marca el campo stCliente.iModVenta = 2  */
   /* que se rellena en bIFCargos, donde se recupera un numero de proceso de */
   /* la secuencia (fa_seq_numpro) y se asocia a cada carga el numero de pro-*/
   /* ceso al que pertenece.                                                 */
   /**************************************************************************/
   if (!bGenProcesoII ()) 
   {   vDTrazasLog (szExeName,"\n\t*** Error GenProcesoII ***\n"
                    "\t=> Cliente [%ld] sin procesar",LOG01, stCliente.lCodCliente);
       vFreeCargos();
       return FALSE;   }
      
   if(!bEMCargos ()) 
   {   vDTrazasLog (szExeName,"\tCliente %ld sin procesar", LOG01,stCliente.lCodCliente);
       vFreeCargos ();
       return FALSE ;   }

   /* Calculo de Impuestos             */
   if (!bImptosIvaClienteGeneral (iTipoFact))
   {   vDTrazasLog(szExeName,"\nProceso Impuestos incompleto.\n",LOG01);
       vFreeCargos ();
       return FALSE  ;   }
       
   if (!bInsertPreFactura ()) return FALSE;

   vFreeCargos ();

   vDTrazasLog (szExeName,"\n\t*** Proceso CONTADO OK ***\n",LOG03);

   return TRUE;
}

/* -------------------------------------------------------------------------- */
/*   bGetCodMunicipio (char*)                                                 */
/*      Valores Retorno: FALSE - Error                                        */
/*                       TRUE  - Ningun Error                                 */
/* -------------------------------------------------------------------------- */
BOOL bGetCodMunicipio (long lCodCliente,char* szCodMunicipio)
{
   long lCodDireccion;

   if (!bFindDirecCli (lCodCliente, &lCodDireccion))
   {  vDTrazasLog (szExeName,"No encontro Cod.Direccion para el"\
                    " Cliente ['%ld']",LOG01,lCodCliente);
       return FALSE;
   }
   
   if (!bFindDirecciones (lCodDireccion, szCodMunicipio))
   {    vDTrazasLog (szExeName,"No encontro Cod.Municipio para el"\
                     " Cod.Direccion ['%ld'] (Ge_Direcciones)",LOG01, lCodDireccion);
        return FALSE;   }
   
   return TRUE; 
}


/*****************************************************************************/
/*                       funcion : bFindDirecCli                             */
/* -Funcion que busqueda en memoria (DIRECCLI* pstDirecCli) un reg. a partir */
/*  del CodCliente.                                                          */
/* -Valores Retorno : Error->FALSE, !Error->TRUE                             */
/*****************************************************************************/
BOOL bFindDirecCli (long lCodCliente,long* lCodDireccli)
{
  DIRECCLI stkey;
  DIRECCLI *pDir = (DIRECCLI *)NULL;
  stkey.lCodCliente = lCodCliente;

  if ((pDir = (DIRECCLI *)bsearch (&stkey,pstDirecCli,NUM_DIRECCLI,
               sizeof (DIRECCLI),iCmpDirecCli))==(DIRECCLI *)NULL)
  {    iDError (szExeName,ERR021,vInsertarIncidencia,"pstDirecCli (Ga_Direccli)");
       return FALSE;  }
  *lCodDireccli = pDir->lCodDireccion;
  return TRUE;
}


/*****************************************************************************/
/*                         funcion : bFindDirecciones                        */
/* -Funcion que recupera en memoria (DIRECCIONES* pstDirecciones) un reg. a  */
/*  partir del CodDireccion.                                                 */
/* -Valores de Retorno : Error->FALSE, !Error->TRUE                          */
/*****************************************************************************/
BOOL bFindDirecciones (long lCodDireccion, char* szCodMunicipio)
{
  DIRECCIONES stkey;
  DIRECCIONES *pDir = (DIRECCIONES *)NULL;
  if ((pDir = (DIRECCIONES *)bsearch(&stkey,pstDirecciones,NUM_DIRECCIONES,
               sizeof(DIRECCIONES),iCmpDirecciones))==(DIRECCIONES *)NULL)
  {    iDError (szExeName,ERR021,vInsertarIncidencia, "pstDirecciones(Ge_Direcciones");
       return FALSE;  }

  /* provisional deberia ir CodMunicipio envez de CodCiudad */
  strcpy (szCodMunicipio, pDir->szCodCiudad);
  return TRUE;
}


/* -------------------------------------------------------------------------- */
/*   vFreeCargos (void)                                                       */
/* -------------------------------------------------------------------------- */
void vFreeCargos (void)
{
  if (stCliente.pCargos != (CARGOS*)NULL) 
  {   free (stCliente.pCargos)         ;
      stCliente.pCargos = (CARGOS*)NULL;  }
  stCliente.iNumCargos = 0;
}

/* ------------------------------------------------------------------------- */
/*   vInitEstructurasCargos (void)                                           */
/* ------------------------------------------------------------------------- */
void vInitEstructurasCargos (void)
{  stCliente.pCargos      = (CARGOS*)NULL;
   stCliente.iNumCargos   = 0;
   stEstTotCar.iNumClientes   = 0;
   stEstTotCar.iRegProcesados = 0;
   stEstTotCar.iRegCorrectos  = 0;
   stEstTotCar.iRegAnomalos   = 0;
   stEstTotCar.dImpProcesados = 0;
   stEstTotCar.dImpCorrectos  = 0;
   stEstTotCar.dImpAnomalos   = 0;
}


/******************************************************************************************/
/** Información de Versionado *************************************************************/
/******************************************************************************************/
/** Pieza                                               : */
/**  %ARCHIVE% */
/** Identificador en PVCS                               : */
/**  %PID% */
/** Producto                                            : */
/**  %PP% */
/** Revisión                                            : */
/**  %PR% */
/** Autor de la Revisión                                : */
/**  %AUTHOR% */
/** Estado de la Revisión ($TO_BE_DEFINED es Check-Out) : */
/**  %PS% */
/** Fecha de Creación de la Revisión                    : */
/**  %DATE% */
/** Worksets ******************************************************************************/
/** %PIRW% */
/** Historia ******************************************************************************/
/** %PL% */
/******************************************************************************************/

