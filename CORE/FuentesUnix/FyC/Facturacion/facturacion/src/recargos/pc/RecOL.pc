/****************************************************************************/
/*                                                                          */
/*    Programa    : Conceptos.                                              */
/*    Modulo      : COBROS.                                                 */
/*    Fichero     : RecOL.pc                                                */
/*    Descripcion : Programa para generar los concepto generados.           */
/*    Programador : Julia Serrano Pozo.                                     */
/*    Fecha       : 05-12-1996                                              */
/*                                                                          */
/****************************************************************************/

#include <stdio.h>
#include <stdarg.h>
#include <string.h>
#include <stdlib.h>

#include <GenORA.h>
#include <coerr.h>
#include "recargos.h"

EXEC SQL INCLUDE sqlca;
/*****************************************************************************/
/* Estos defines son solo para pruebas. Este programa no debe usarse.*/
/*********************************************************************/
#define USERID         "COBROS"
#define PASSWORD       "COBROS"

/*****************************************************************************/
int ifnInitProceCon(int argc,char *argv[]);
/**
Descripcion: Funcion que comprueba si se le pasan bien los parametros al
             programa y se conecta bien con ORACLE.
Entrada:     argc, contador de parametros de la linea de comandos.
             argv, array de parametros de la linea de comandos.
Salida:      TRUE, si todo ha ido bien.
             ERR_xxx, si falla algo.
**/

/*****************************************************************************/
int main(int argc, char *argv[])
{
	int	iResul;
	int	iRes;
	char	szFec[9];
	long	lCodCliente;
	int	iCodCredito;


	/* Inicializacion del proceso. */
	fprintf(stdout,"inicializacion del proceso\n");
	iResul = ifnInitProceCon(argc,argv);
	if (iResul)
		return iResul;

	lCodCliente = atol(argv[1]);
	strcpy(szFec,argv[2]);
	iCodCredito = atoi(argv[3]);

	fprintf(stdout,"recargos\n"); 

	iResul = ifnDBCompCliente(lCodCliente,szFec,iCodCredito);
	if (iResul)
	{
		fprintf(stderr,"* Error al generar recargos\n");

		EXEC SQL ROLLBACK;
		if (sqlca.sqlcode != SQLOK)
		{
			fprintf(stderr,"* Error al hacer ROLLBACK FINAL %s\n",szfnORAerror());
			return ERR_ROLLBACK;
		}
	}
	else
	{
		EXEC SQL COMMIT;

		if (sqlca.sqlcode != SQLOK)
		{
			fprintf(stderr,"* Error al hacer COMMIT FINAL %s\n",szfnORAerror());
			return ERR_COMMIT;
		}
	}
	fprintf(stderr,"iResul: %d\n",iResul);

	/* GAC 17-05-2002 */
	/*iRes = ifnDisConnORA();
	if (iRes == -1)
	{
		fprintf(stderr,"* Error :Fallo en desconexion ORACLE\n");
		return ERR_DESCONEXION;
	}*/

	if( ifnDisConnORA()!=0 )  {
        fprintf(stdout,"iRet [%d]. Fallo Desconexion Oracle.\n",ERR_DESCONEXION);
        return ERR_DESCONEXION ;
	} else	{
		fprintf(stdout, "\n\t-------------------------------------------------------"
						"\n\tDesconectado de  ORACLE"
						"\n\t-------------------------------------------------------");
	}

	return iResul;

} /* Fin main() */
/****************************************************************************/

int ifnInitProceCon(int argc, char *argv[])
/**
Descripcion: Funcion que comprueba si se le pasan bien los parametros al
             programa y se conecta bien con ORACLE.
Entrada:     argc, contador de parametros de la linea de comandos.
             argv, array de parametros de la linea de comandos.
Salida:      TRUE, si todo va bien.
             ERR_xxx, si falla algo.
**/
{
	int iResul;

	/* Comprobacion de la linea de comandos. */
	if (argc != 6)
	{
		fprintf(stderr,"\n\tProcesar %s con Parametros :\n\t\tCodCliente  Fecha  CodCredito  Usuario  PassWord\n",
							argv[0]);
		return ERR_PARAMETROS;
	}

	/* Conexion a ORACLE */
	/*fprintf(stdout,"antes de conectarme\n");
	iResul = ifnConnectORA(argv[4],argv[5]);
	if (iResul == -1)
	{
		fprintf(stderr,"* Error :Fallo en conexion ORACLE: %s\n",szfnORAerror());
		return ERR_CONEXION;
	}*/

	if( !ifnConnectORA(argv[4],argv[5]) )	{
		fprintf(stderr, "\n\tUsuario/Passwd Invalido\n\t\t  <usuario> <passwd> \n ");
		return ERR_CONEXION;

	} else {
		printf(	"\n\t----------------------------------------------------  "
				"\n\tConectado a ORACLE: Usuario %s Passwd xxxxxxxx        "
				"\n\t----------------------------------------------------\n",argv[14]);
	}

	return OK;

}/* Fin bfnInitProceCon() */
/****************************************************************************/
int ifnDBCompCliente(long lCodCliente, char *szFecValor,int iCodCredito)
/**
Descripcion: Comprueba primero si el cliente tiene pago mediante PAC.
				 En caso negativo llama a la funcion que genera recargos.
Salida     : Si todo va bien devuelve OK y en caso contrario ERR_XXXX.
**/
{

   EXEC SQL BEGIN DECLARE SECTION; 

      long   lhCodCliente;

   EXEC SQL END DECLARE SECTION;

	int        iResul = OK;
	double		dImporte = 0.0;

	lhCodCliente = lCodCliente;

   EXEC SQL
     SELECT COD_CLIENTE
       INTO :lhCodCliente
      FROM GE_CLIENTES
      WHERE COD_CLIENTE = :lhCodCliente
		AND	IND_DEBITO = 'A';

   if (sqlca.sqlcode < 0)
   {
      /* fprintf(stderr,"Error en Select de Cliente %s\n",szfnORAerror()); */
      return ERR_DEBCLI;
   }

   if (sqlca.sqlcode == NOT_FOUND)
	{
/*		iResul = ifnDBCompRecargos(lCodCliente,szFecValor,iCodCredito,"CO",
												&dImporte);*/
	}

	/* fprintf(stdout,"IMPORTE %f\n",dImporte); */
	return iResul;

}/* Fin ifnDBCompCliente() */


/******************************************************************************************/
/** Información de Versionado *************************************************************/
/******************************************************************************************/
/** Pieza                                               : */
/**  %ARCHIVE% */
/** Identificador en PVCS                               : */
/**  %PID% */
/** Producto                                            : */
/**  %PP% */
/** Revisión                                            : */
/**  %PR% */
/** Autor de la Revisión                                : */
/**  %AUTHOR% */
/** Estado de la Revisión ($TO_BE_DEFINED es Check-Out) : */
/**  %PS% */
/** Fecha de Creación de la Revisión                    : */
/**  %DATE% */
/** Worksets ******************************************************************************/
/** %PIRW% */
/** Historia ******************************************************************************/
/** %PL% */
/******************************************************************************************/

