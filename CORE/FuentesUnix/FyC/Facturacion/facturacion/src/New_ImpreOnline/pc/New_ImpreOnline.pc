/* ******************************************************************************/
/*	ImpreOnline  ('Impresion On-line')					*/
/*										*/
/*    Recibe 3 parametros : -u usuario/password  ; -l loglevel ; -e codmodgener	*/
/*										*/
/*	14 de Diciembre de 1999							*/
/*										*/
/*										*/
/***************************************************************************** */
/* ************************************************************************** */
/* *  05-05-2000:   Modificacion de Cursor de Documentos para agregar       * */
/* *  (MVV)         la seleccion de los tipos de Documentos en Consignación * */
/* *                ya que estos documentos se deben marcar como impresos   * */
/* *                independiente del modod de generacion de Doctos.        * */
/* ************************************************************************** */
/* ************************************************************************** */
/* *	Incorporacion del campo COD_APLIC en las llamadas 		    * */
/* *			a las sgtes. funciones:				    * */
/* *		bfnGetInterFact		bfnGetIntQueueProc		    * */
/* *		bfnUpdInterFact 	bfnCambiaEstCola		    * */
/* *	Patricio Gonzalez G.	29-01-2002			            * */
/* ************************************************************************** */
/******************************************************************************/


#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <string.h>
#include <strings.h>
#include <math.h>
#include <time.h>
#include <predefs.h>
#include <deftypes.h>
#include <New_Interfact.h>
#include <unistd.h>
#include <GenFA.h>

#include "New_ImpreOnline.h"

EXEC SQL INCLUDE sqlca;

long pid;

/* ********************************************************************************************* */
/* modulo principal */
/* ********************************************************************************************* */
int main(int argc,char *argv[])
{
	char modulo[]="main";

	 int sts;
	 int iLogLevel          =3;
	char szOraAccount   [32]="";
	char szOraPasswd    [32]="";
	char szCodModGener  [4] ="";
	char status         [16]="";


	pid=getpid();
	fprintf( stdout, "\n*** New_ImpreOnline. ***\n"
	                   "%s\n** pid : [ %8ld ] **\n"
	                   "************************\n",
	         cfnGetTime(1),pid );

	sts = ifnValidaParametros(argc,argv,szOraAccount, szOraPasswd, &iLogLevel, szCodModGener);
	if ( sts != 0 ) return sts;
	
	sts = ifnAbreArchivosLog(iLogLevel);
	if ( sts != 0 ) return sts;

	vDTrazasLog(modulo,"Despues del ifnAbreArchivosLog ", LOG04);

	sts = ifnImpresionOnline(szOraAccount,szOraPasswd,iLogLevel,szCodModGener);
	if (sts != 0)
	{
    	vDTrazasError(modulo,"%s[%ld] Termino Anormal de la Impresion", LOG03, cfnGetTime(1),pid);
	}
	else
	{
    	vDTrazasLog  (modulo,"%s[%ld] Termino Controlado de la Impresion", LOG03, cfnGetTime(1),pid);
	}

	fprintf(stdout,"\n");
	return sts;

} /* main */



/* ********************************************************************************************* */
/* ifnValidaParametros () */
/* ********************************************************************************************* */
int ifnValidaParametros ( int argc, char *argv[], char *szOraAccount, char *szOraPasswd,
						  int *iLogLevel, char *szCodModGener  )

{
	char modulo[]="ifnValidaParametros";

	extern char *optarg;
	extern int  optind, opterr, optopt;
	char        opt[] = ":u:l:e:";
	int         iOpt=0,ihCodProc;
	char        *psztmp = "";
	char        szUser [64] = "";

	int  Userflag       =FALSE;
	int  Logflag        =FALSE;
	int  Modflag        =FALSE;

	char szAccount  [32]="";
	char szPasswd   [32]="";

	opterr=0;

	if(argc == 1)
	{
		fprintf (stderr,"\n<< Error : Parametros insuficientes >>\n%s\n",szUsage);
		return -1;
	}

	while ( (iOpt = getopt(argc, argv, opt) ) != EOF)
	{
		switch(iOpt)
		{
			case 'u':
				if(Userflag==FALSE)
				{
					strcpy(szUser, optarg);
					Userflag=TRUE;
				}
				else
				{
					fprintf (stderr,"\n<< Error : opcion '-%c' duplicada >>\n%s\n",optopt,szUsage);
					return -2;
				}
				break;

			case 'l':
				if(Logflag==FALSE)
				{
					*iLogLevel=atoi(optarg);
					Logflag=TRUE;
				}
				else
				{
					fprintf (stderr,"\n<< Error : opcion '-%c' duplicada >>\n%s\n",optopt,szUsage);
					return -2;
				}
				break;

			case 'e':
				if(Modflag==FALSE)
				{
					strcpy(szCodModGener,optarg);
					Modflag=TRUE;
				}
				else
				{
					fprintf (stderr,"\n<< Error : opcion '-%c' duplicada >>\n%s\n",optopt,szUsage);
					return -2;
				}
				break;

			case '?':
				fprintf(stdout,"\n<< Error: opcion '-%c' es desconocida >>\n%s\n",optopt,szUsage);
				return -3;

			case ':':
				fprintf(stdout,"\n<< Error: falta parametro para opcion '-%c' >>\n%s\n",optopt,szUsage);
				return -4;

		}/* endswitch */

	} /* enwhile */


	if(Modflag==FALSE)
	{
		fprintf (stderr,"\n<< Error : falta opcion '-m' >>\n%s\n",szUsage);
		return -1;
	}

	if(Logflag==FALSE)
	{
		fprintf (stderr,"\n<< Error : falta opcion '-l' >>\n%s\n",szUsage);
		return -1;
	}

	if(Userflag==TRUE)
	{
		if ( (psztmp=(char *)strstr(szUser,"/") )==(char *)NULL )
		{
			fprintf (stderr,"\n<< Error : usuario no valido. Requiere \"/\" >>\n%s\n",szUsage);
			return -5;
		}
		else
		{
			strncpy (szOraAccount,szUser,psztmp-szUser);
			strcpy  (szOraPasswd, psztmp+1);
		}
	}

	return 0; /* Validacion ok */

} /* ifnValidaParamatros */


/* ******************************************************************************** */
/* ifnAbreArchivosLog : Crea para escritura o appendea archivos de Log y de Errores */
/* ******************************************************************************** */
int ifnAbreArchivosLog(int iLogLevel)
{
	char modulo[]="ifnAbreArchivosLog";

	char *pathDir;
	char szArchivo  [32] ="";
	char szPath     [128]="";
	char szComando  [128]="";

	memset(szArchivo,'\0',sizeof(szArchivo));
	sprintf(szArchivo,"New_ImpreOnline");

	pathDir=(char *)malloc(128);
	pathDir=szGetEnv("XPF_LOG");
	sprintf(szPath,"%s/New_ImpreOnline/%s",pathDir,cfnGetTime(2)); /* '....log/New_ImpreOnline/YYYYMMDD/' */
	free(pathDir);

	fprintf(stdout, "\nCrea Directorio Log  : %s\n", szPath);
	sprintf(szComando,"mkdir -p %s", szPath);
	system (szComando);

	fprintf(stdout, "\nCrea Archivo Log/Err : %s\n\n", szArchivo);

	stStatus.LogNivel = iLogLevel;

	sprintf(stStatus.ErrName,"%s/%s.err",szPath,szArchivo);
	if((stStatus.ErrFile = fopen(stStatus.ErrName,"a")) == (FILE*)NULL )/* "wb+" */
	{
	    fprintf(stderr, "\n<< No pudo crearse el archivo de errores %s >> \n", stStatus.ErrName);
		return -7;
	}

	vDTrazasError(modulo, "\n%s[%ld] << Abre Archivo de Errores >>", LOG04, cfnGetTime(1),pid);

	sprintf(stStatus.LogName,"%s/%s.log",szPath,szArchivo);
	if((stStatus.LogFile = fopen(stStatus.LogName,"a")) == (FILE*)NULL ) /* "wb+" */
	{	fprintf(stderr, "\n<< No pudo crearse el archivo de log %s >>\n", stStatus.LogName);
		vDTrazasError(modulo, "\n<< No pudo crearse el archivo de log %s >>\n", LOG01, stStatus.LogName);
		return -8;    }

	vDTrazasLog(modulo, "\n%s[%ld] << Abre Archivo de Log New_ImpreOnline >>", LOG04, cfnGetTime(1),pid);

	return 0 ; /* Validacion ok */
}


/* ***************************************************************************** */
/* ifnImpresionOnline()*/
/* ***************************************************************************** */
ifnImpresionOnline(char *szAccount, char *szPasswd, int iLogLevel, char *szCodModGener)
{
	char modulo[]="ImpresionOnline";

	 int iCont=0;
	 int iStatusFin=iESTAQUEUE_WAIT;

	EXEC SQL BEGIN DECLARE SECTION;

		long lhNumProceso=0;
		 int ihFactOk=0;

		 int ihCodEstaDocEnt=0;
		 int ihCodEstaDocSal=0;
		 int ihCodNivLog;

		char szhNomUsuarOra[30];
		char szhPasUsuarOra[30];
		char szhCodModGener[4];

		 int ihCodProceso;

	     int ihNumDeltaHoras;

	EXEC SQL END DECLARE SECTION;

	ihFactOk = iESTAPROC_TERMINADO_OK ;

	strcpy(szhNomUsuarOra,szAccount);
	strcpy(szhPasUsuarOra,szPasswd);
	strcpy(szhCodModGener,szCodModGener);
	ihCodNivLog = iLogLevel;

	ihCodProceso = iPROCESO_INT_IMPRESION; 	/* 300 */

	if (!fnOraConnect(szAccount,szPasswd))
	{
	    vDTrazasError   (modulo, "%s No Hay Conexion a la Base de Datos"
	                    ,LOG01,cfnGetTime(3));
		return -10;
	}

	vDTrazasLog (modulo,"%s[%ld] Conectado a la Base de Datos"
	            ,LOG04, cfnGetTime(1),pid);
    vDTrazasLog (modulo,"%s[%ld] Obtencion datos cola  "
                ,LOG04, cfnGetTime(1),pid);
    memset(&stIntQueueProc,0,sizeof(INTQUEUEPROC)      );
    strcpy( stIntQueueProc.szCodModGener , szCodModGener);
            stIntQueueProc.lCodProceso   = ihCodProceso;
    strcpy(stIntQueueProc.szCodAplic,"FAC"); /* Incorporado por PGonzaleg 29-01-2002 */            
            
    if(!bfnGetIntQueueProc(&stIntQueueProc))
    {
		return -14;
	}

    ihCodEstaDocEnt	= stIntQueueProc.iCodEstaDocEnt;
    ihNumDeltaHoras = stIntQueueProc.iNumDeltaHoras;

	vDTrazasLog (modulo,"%s[%ld] Preparando Cursor sobre FA_INTERFACT [%s][%d]"
	            ,LOG04, cfnGetTime(1),pid,szhCodModGener,ihCodEstaDocEnt);
	EXEC SQL DECLARE Cur_FaInterFact CURSOR FOR
			 SELECT NUM_PROCESO
			   FROM FA_INTERFACT
			  WHERE COD_MODGENER = :szhCodModGener      	/* 'xxx'    */
			    AND COD_ESTADOC  = :ihCodEstaDocEnt     	/* Facturada*/
			    AND COD_ESTPROC  = :ihFactOk            	/* Fact Ok  */
			    AND COD_APLIC    = 'FAC'			/* Incorporado por PGonzaleg 31-01-2002 */
			    AND FEC_FACTURACION < (SYSDATE - (:ihNumDeltaHoras / 24)) ; /* nuevo delta de tiempo */

	if (SQLCODE)
	{
	    vDTrazasError   (modulo,"Al declarar Cursor\n%s\n"
	                    ,LOG01,sqlca.sqlerrm.sqlerrmc);
		return -14;
	}

	EXEC SQL OPEN Cur_FaInterFact;

	if (SQLCODE)
	{
	    vDTrazasError   (modulo,"Al Abrir Cursor\n%s\n"
	                    ,LOG01,sqlca.sqlerrm.sqlerrmc);
		return -15;
	}

	while (1)
	{
		EXEC SQL FETCH Cur_FaInterFact
			      INTO :lhNumProceso;

		if (sqlca.sqlcode == SQLNOTFOUND)
		{
			iStatusFin=iESTAQUEUE_WAIT;
			break;
		}
		else if (sqlca.sqlcode)
		{
			vDTrazasError   (modulo,"En el Fetch del Cursor\n%s\n"
			                ,LOG01,sqlca.sqlerrm.sqlerrmc);
			iStatusFin=iESTAQUEUE_ERROR;
			break;
		}

        memset(&stInterFact,0,sizeof(INTERFACT));
        stInterFact.lNumProceso     = lhNumProceso ;
	strcpy(stInterFact.szCodAplic,"FAC"); /* Incorporado por PGonzaleg 29-01-2002 */
	
        if (!bfnGetInterFact(&stInterFact))
        {
            vDTrazasError(szExeName,"Error obtencion de FA_INTERFACT [%ld] [%s]"
                         ,LOG01,SQLCODE,szfnORAerror());
            vDTrazasLog  (szExeName,"Error obtencion de FA_INTERFACT [%ld] [%s]"
                         ,LOG01,SQLCODE,szfnORAerror());
            break;
        }

			  				   /* impresa */
		stInterFact.iCodEstaDoc = stIntQueueProc.iCodEstaDocSal;
	    stInterFact.iCodEstaProc= iESTAPROC_PROCESANDO ;
	    strcpy(stInterFact.szCodAplic,"FAC"); /* Incorporado por PGonzaleg 29-01-2002 */
	    
		if (!bfnUpdInterFact(stInterFact))
		{
			vDTrazasLog  ( modulo, " Al Marcar registro como 'Procesando' ",LOG01);
			vDTrazasError( modulo, " Al Marcar registro como 'Procesando' ",LOG01);
    	    fnOraRollBack();
		}
		else
		{
			if (!bfnOraCommit())
			{
				vDTrazasLog  ( modulo, " Al hacer Commit sobre la Interfact ",LOG01);
				vDTrazasError( modulo, " Al hacer Commit sobre la Interfact ",LOG01);
			}
			else
			{
				EXEC SQL UPDATE FA_FACTDOCU_NOCICLO
	    		    SET IND_IMPRESA = 1
	    		  WHERE NUM_PROCESO = :lhNumProceso
					AND IND_ANULADA = 0
					AND IND_IMPRESA = 0 ;

	    		if (SQLCODE)
    			{
        			vDTrazasLog  (modulo," En el UPDATE de la FA_FACTDOCU_NOCICLO "
        		                         "\n=> Error : [%d]  [%s] ",LOG01,SQLCODE,SQLERRM);
        			vDTrazasError(modulo," En el UPDATE de la FA_FACTDOCU_NOCICLO "
            	    	                 "\n=> Error : [%d]  [%s] ",LOG01,SQLCODE,SQLERRM);
					bfnOraRollBack();
					fnGrabaAnomalia(lhNumProceso, 0,"New_ImpreOnline"
                                    , strcat(cfnGetTime(1), "=> update FA_FACTDOCU_NOCICLO err:") );
					stInterFact.iCodEstaProc     = iESTAPROC_TERMINADO_ERROR ;
					strcpy(stInterFact.szCodAplic,"FAC"); /* Incorporado por PGonzaleg 29-01-2002 */
					
					bfnUpdInterFact(stInterFact);
					bfnOraCommit();
					iStatusFin=iESTAQUEUE_ERROR;
					/*break;*/
    			}
    			else 
    			{
                    stInterFact.iCodEstaProc     = iESTAPROC_TERMINADO_OK ;
    			    strcpy(stInterFact.szFecImpresion, cfnGetTime(7)) ;
    			    strcpy(stInterFact.szCodAplic,"FAC"); /* Incorporado por PGonzaleg 29-01-2002 */
    			    
    			    if(!bfnUpdInterFact(stInterFact))
				    {
    					vDTrazasLog  ( modulo, " Al Marcar registro como 'Terminado OK' ",LOG01);
					    vDTrazasError( modulo, " Al Marcar registro como 'Terminado OK' ",LOG01);
    	    		    bfnOraRollBack();
				    }
				    else
				    {
    					if (!bfnOraCommit())
					    {
    						vDTrazasLog     ( modulo, " Al hacer Commit sobre la Interfact ",LOG01);
		    				vDTrazasError   (modulo, " Al hacer Commit sobre la Interfact " ,LOG01);
				    	}
				    }
				}
			}
		}
		vDTrazasLog  ( modulo, " Registro [%ld] Procesado ",LOG03, lhNumProceso);
	} /* end while */

	vDTrazasLog (modulo,"%s[%ld] Cerrando Cursor " , LOG04, cfnGetTime(1),pid);

	EXEC SQL CLOSE Cur_FaInterFact;

	if (sqlca.sqlcode)
	{
	    vDTrazasError(modulo,"Al cerrar el Cursor\n%s\n",LOG01,sqlca.sqlerrm.sqlerrmc);
		return -18;
	}
    vDTrazasLog (modulo,"%s[%ld] Cambiando cola [%s / %d / %d / %d ]"
	            , LOG04, cfnGetTime(1),pid,szhCodModGener, ihCodProceso, iESTAQUEUE_RUNNING, iStatusFin);	             
	if (!bfnCambiaEstCola(szhCodModGener, ihCodProceso, iESTAQUEUE_RUNNING, iStatusFin, "FAC")) /* Incorporacion del ultimo parametro por PGonzaleg 29-01-2002 */
	{
		if (!fnOraRollBackRelease())
	    	vDTrazasError   (modulo,"En Rollback release\n%s\n" ,LOG01, sqlca.sqlerrm.sqlerrmc);
	    return -11;
	}
	else
	{	if (!fnOraCommitRelease())
		{	
		    vDTrazasError   (modulo,"En Commit release\n%s\n",LOG01, sqlca.sqlerrm.sqlerrmc);
			if (!fnOraRollBackRelease())
	    		vDTrazasError   (modulo,"En Rollback release\n%s\n", LOG01, sqlca.sqlerrm.sqlerrmc);
			return -11;
		}
	}

 	return 0;

} /* ifnImpresionOnline() */



/******************************************************************************************/
/** Información de Versionado *************************************************************/
/******************************************************************************************/
/** Pieza                                               : */
/**  %ARCHIVE% */
/** Identificador en PVCS                               : */
/**  %PID% */
/** Producto                                            : */
/**  %PP% */
/** Revisión                                            : */
/**  %PR% */
/** Autor de la Revisión                                : */
/**  %AUTHOR% */
/** Estado de la Revisión ($TO_BE_DEFINED es Check-Out) : */
/**  %PS% */
/** Fecha de Creación de la Revisión                    : */
/**  %DATE% */
/** Worksets ******************************************************************************/
/** %PIRW% */
/** Historia ******************************************************************************/
/** %PL% */
/******************************************************************************************/

