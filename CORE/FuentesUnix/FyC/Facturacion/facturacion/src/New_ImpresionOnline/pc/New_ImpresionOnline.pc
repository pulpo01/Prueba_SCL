/* ******************************************************************************** */
/*	New_ImresionOnline ('mascara sobre ImpresionScl.ksh')			    */
/*										    */
/*  Parametros : -u usuario/password  ; -l loglevel ; -m codmodgener		    */
/*	 20 de Septiembre de 2005						    */
/********************************************************************************** */
/*  22032001 :Se modifca la obtencion de los estado de doc. de entrada y salida     */
/*  para ser tomados desde la cola de ejecucion					    */
/********************************************************************************** */
/*	Incorporacion del Campo COD_APLIC en las llamadas a las funciones	  * */
/*		bfnGetInterFact			bfnGetIntQueueProc  		  * */
/*		bfnUpdInterFact			bfnCambiaEstCola		  * */		
/********************************************************************************** */


#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <string.h>
#include <strings.h>
#include <math.h>
#include <time.h>
#include <deftypes.h>
#include <predefs.h>
#include <unistd.h>

#include <New_Interfact.h>
#include <GenFA.h>
#include "New_ImpresionOnline.h"

EXEC SQL INCLUDE sqlca;

 long pid;

FILE *fpShell; /* SAAM-20030805 */
char szCodModGenerGlobal[4] ="" ; /* SAAM-20030805 */


/* ******************************************************************************** */
/* modulo principal                                                                 */
/* ******************************************************************************** */
int main(int argc,char *argv[])
{
	char modulo[]="main";

	 int sts;
	 int iLogLevel          =3  ;
	char szOraAccount   [32]="" ;
	char szOraPasswd    [32]="" ;
	char szCodModGener  [4] ="" ;


	pid=getpid();
	
  fprintf(stderr, "\n  New_ImpresionOnline  " __DATE__ " " __TIME__ " COL\n\n"); 
	fprintf( stdout, "\n***** Impresion_Online. *****\n"
	                   "%s\n** pid : [ %8ld ] **\n"
	                   "************************\n",
	         cfnGetTime(1),pid );
	sts = ifnValidaParametros   (argc,argv
	                            ,szOraAccount
	                            ,szOraPasswd
	                            ,&iLogLevel
	                            ,szCodModGener);
	                            
	 vDTrazasLog(modulo, "\n%s[%ld] << Retorno ifnValidaParametros : %d >>"
	 			,LOG03, cfnGetTime(1),pid,sts);                           
	                            
	if ( sts != 0 ) return sts;


	sts = ifnAbreArchivosLog    (iLogLevel, szCodModGener);
	if ( sts != 0 ) return sts;

	vDTrazasLog(modulo, "\n%s[%ld] << Inicia  Ejecucion >>", LOG03, cfnGetTime(1),pid);
	sprintf(szCodModGenerGlobal,"%s",szCodModGener); /* SAAM-20030805 */

	sts = ifnImpresionOnline  (szOraAccount
	                            ,szOraPasswd
	                            ,iLogLevel
	                            ,szCodModGener);

	vDTrazasLog(modulo, "%s[%ld] << Termina Ejecucion >>", LOG03, cfnGetTime(1),pid);

	fprintf(stdout,"\n");
	return sts;

} /* main */




/* ****************************************************************************** */
/* ifnAbreArchivosLog : Crea para escritura o append archivos de Log y de Errores */
/* ****************************************************************************** */
int ifnAbreArchivosLog(int iLogLevel, char *szCodModGener)
{
	char modulo[]="ifnAbreArchivosLog";

	char *pathDir;
	char szArchivo  [32]    ="";
	char szPath     [128]   ="";
	char szComando  [128]   ="";

	memset(szArchivo,'\0',sizeof(szArchivo));
	sprintf(szArchivo,"New_ImpresionOnline_%s", szCodModGener); 


	pathDir=szGetEnv("XPF_LOG");
	sprintf(szPath,"%s/New_ImpresionOnline/%s",pathDir,cfnGetTime(2)); /* '....log/New_ImpresionOnline/YYYYMMDD/' */
	free(pathDir);

	fprintf(stdout, "\nCrea Directorio Log  : %s\n", szPath);
	sprintf(szComando,"mkdir -p %s", szPath);
	system (szComando);

	fprintf(stdout, "\nCrea Archivo Log/Err : %s\n\n", szArchivo);

	stStatus.LogNivel = iLogLevel;

	sprintf(stStatus.ErrName,"%s/%s.err",szPath,szArchivo);
	if((stStatus.ErrFile = fopen(stStatus.ErrName,"a")) == (FILE*)NULL )/* "wb+" */
	{	fprintf(stderr, "\n<< No pudo crearse el archivo de errores %s >> \n", stStatus.ErrName);
		return -7;    }

	vDTrazasError(modulo, "\n%s[%ld] << Abre Archivo de Errores >>", LOG04, cfnGetTime(1),pid);
	vDTrazasError ( modulo ,"\n\n\t**********************************************"
                           "\n\n\t****          Archivo de Errores New_ImpresionOnline **"
                           "\n\n\t****         " __DATE__ " " __TIME__ "            **"
                           "\n\n\t**********************************************"
                           ,LOG03);

	sprintf(stStatus.LogName,"%s/%s.log",szPath,szArchivo);
	if((stStatus.LogFile = fopen(stStatus.LogName,"a")) == (FILE*)NULL ) /* "wb+" */
	{	fprintf(stderr, "\n<< No pudo crearse el archivo de log %s >>\n", stStatus.LogName);
		vDTrazasError(modulo, "\n<< No pudo crearse el archivo de log %s >>\n", LOG01, stStatus.LogName);
		return -8;    }

    vDTrazasLog(modulo, "\n%s[%ld] << Abre Archivo de Log >>", LOG04, cfnGetTime(1),pid);
    vDTrazasLog(modulo, "\n\n%s\tVersion [%s] con fecha [%s]\n", LOG03, __FILE__, szVersionActual,szUltimaModificacion);
    vDTrazasLog  ( modulo ,"\n\n\t**********************************************"
                           "\n\n\t****          Archivo de Log New_ImpresionOnline **"
                           "\n\n\t****         " __DATE__ " " __TIME__ "            **"
                           "\n\n\t**********************************************"
                           ,LOG03);        
	

	return 0; /* Validacion ok */
}

int  iShellEjecucion(char *szLineaComando,char *szNombreLog)
{
	char modulo[]="iShellEjecucion";

	char *pathDir;
	char szArchivo  [128]    ="";
	char szArchivoCompleto  [256]    ="";
	char szPath     [128]   ="";
	char szComando  [128]   ="";
	char szRaya		[51]	="";

	strcpy (szRaya , "--------------------------------------------------");
	
	vDTrazasLog(modulo, "\n\t%s\n\t%s\n",LOG04,modulo,szRaya);

	memset(szArchivo,'\0',sizeof(szArchivo));
	sprintf(szArchivo,"New_ImpresionOnline_%s_%s.ksh",szCodModGenerGlobal,cfnGetTime(5)); 

	pathDir=szGetEnv("XPF_KSH");
	

	sprintf(szArchivoCompleto,"%s/%s",pathDir,szArchivo);
	
/* HB-200311180185 20040107  Se libera Malloc  */
	free(pathDir);	
	vDTrazasLog(modulo, "\tCrea Archivo Ksh : %s", LOG04, szArchivoCompleto);

	if((fpShell = fopen(szArchivoCompleto,"w")) == (FILE*)NULL ){
		vDTrazasLog(modulo, "\t<< No pudo crearse el archivo de shell %s \n\t%s\n>>",LOG04,szArchivoCompleto,szRaya);
		vDTrazasError(modulo,"\t<< No pudo crearse el archivo de shell %s >>",LOG04,szArchivoCompleto);
		return (1);
	}

	fprintf(fpShell,"echo '\tEjecucisn de Comando : %s' >> %s 2>&1\n", szLineaComando, szNombreLog); 
	fprintf(fpShell,"echo '+++++++++++++++++++++++++'`date`'+++++++++++++++++++++++++' >> %s 2>&1\n",szNombreLog); 
	fprintf(fpShell,"%s >> %s 2>&1 &\n", szLineaComando, szNombreLog);/*AFGS - 62056*/
	
	fprintf(fpShell,"echo ' ' >> %s 2>&1\n", szNombreLog); 
	fprintf(fpShell,"echo ' ' >> %s 2>&1\n", szNombreLog); 
	fprintf(fpShell,"echo '+++++++++++++++++++++++++'`date`'+++++++++++++++++++++++++' >> %s 2>&1\n",szNombreLog); 
	fprintf(fpShell,"echo '\tFin de Ejecucisn de Comando' >> %s 2>&1\n", szNombreLog); 

	fclose(fpShell);

	sprintf(szComando,"/usr/bin/chmod 777 %s", szArchivoCompleto);
	vDTrazasLog(modulo, "\tComando : %s",LOG04,szComando);

	if (system (szComando))
	{
		vDTrazasLog(modulo,"\t<< Fallo en cambios de permisos del Archivo [%s] >>"
        				   "\n\t<< Error Numero: %d     %s >>"
						   "\n\t%s\n",LOG04,szArchivoCompleto,errno,strerror(errno),szRaya);
		vDTrazasError(modulo,"\t<< Fallo en cambios de permisos del Archivo [%s] >>"
        					 "\n\t<< Error Numero: %d     %s >>"
        					 ,LOG04,szArchivoCompleto,errno,strerror(errno));
        return (1);
    	}

	memset(szComando,'\0',sizeof(szComando));

	sprintf(szComando,"%s", szArchivoCompleto);
	vDTrazasLog(modulo, "\tComando : %s",LOG04,szArchivoCompleto);

	if (system (szComando))
	{
		vDTrazasLog(modulo, "\t<< Fallo en la ejecucion de [%s] >>"
        					"\n\t<< Error Numero: %d     %s >>\n\t%s"
        					,LOG04,szComando,errno,strerror(errno),szRaya);
    	vDTrazasError(modulo,"\t<< Fallo en la ejecucion de [%s] >>"
        					 "\n\t<< Error Numero: %d     %s >>"
        					 ,LOG04,szComando,errno,strerror(errno));
	            return (1);
    	}

	memset(szComando,'\0',sizeof(szComando));
	
	sprintf(szComando,"rm -f %s", szArchivoCompleto);
	
	vDTrazasLog(modulo, "\tComando : %s",LOG04,szComando);

	if (system (szComando))
	{
		vDTrazasLog(modulo, "\tFallo en el borrado de shell [%s]"
        					"\t<< Error Numero: %d     %s >>\n\t%s\n"
        					,LOG04,szArchivo,errno,strerror(errno),szRaya);
		vDTrazasError(modulo,"\tFallo en el borrado de shell [%s]"
        					 "\t<< Error Numero: %d     %s >>"
        					 ,LOG04,szArchivo,errno,strerror(errno));
                return (1);
   	}
	
	vDTrazasLog(modulo, "\t%s\n",LOG04,szRaya);
	return (0); /* Validacion ok */
}


/* **************************************************************************** */
/* ifnImpresionOnline()                                                       */
/* **************************************************************************** */
int ifnImpresionOnline( char  *szAccount
                    	, char  *szPasswd
                    	, int   iLogLevel
                    	, char  *szCodModGener)
{
	char    modulo      []  ="ImpresionOnline";

	int    iCont           =0;
	int    iStatusFin      =iESTAQUEUE_WAIT;

	char    szUsuario   [64]="";
	char    szAux       [16]="";
	char    *psztmp         ="";
	int    num_rows        =0;
	int    tnumrows        =0;
  BOOL    bNotFound       =FALSE;
    
  char    szCmd[99]; /*AFGS - 62056*/
  FILE    *ptr;      /*AFGS - 62056*/

		EXEC SQL BEGIN DECLARE SECTION;
		 int iIntInstans = 0        ;
		 int ihCodEstProc = 0       ;
		 int ihIngrOk     = 0       ;
		 int ihCodEstaDocEnt        ;
		 int ihNumDeltaHoras        ;
		 int ihCodNivLog            ;
     char szhNomUsuarOra [32]   ;
     char szhPasUsuarOra [32]   ;
		 char szhCodModGener [4]    ;
		 int ihCodProceso           ;
	   reg_FaInterFact ha_FaInterFact  ;
	   int ihCantProc = 0; /*AFGS - 62056*/
	   int ihCod_Param      = 305 ;
	   int ihEstado         = 400 ;
	   int ihEncolados      = 0   ;
	   int ihUno            = 1   ;
	   int ihCodEstaAnte    = 300 ;
	   int ihCodEstaProcOK  = 3   ;
	   int iExiste          = 0   ;   
	EXEC SQL END DECLARE SECTION;

    ihIngrOk = iESTAPROC_TERMINADO_OK ;

	strcpy (szhNomUsuarOra  ,szAccount);
	strcpy (szhPasUsuarOra  ,szPasswd);
	strcpy (szhCodModGener  ,szCodModGener);
	        ihCodNivLog     =iLogLevel;
	        ihCodProceso    =iPROCESO_INT_IMPRESION_ONLINE; 	/* 330 */

    memset(szUsuario,0,sizeof(szUsuario));

	if ( (psztmp=(char *)strstr(szhNomUsuarOra,"\\$") )!=(char *)NULL )
	{
		sprintf(szUsuario,"%s/%s",szhNomUsuarOra,szhPasUsuarOra);
	}
	else if ((psztmp=(char *)strchr(szhNomUsuarOra,'$') )!=(char *)NULL )
	{
		memset(szAux,0,sizeof(szAux));
		strncpy (szAux,szhNomUsuarOra,psztmp-szhNomUsuarOra);
		sprintf (szUsuario,"%s\\%s/%s",szAux,psztmp,szhPasUsuarOra);
	}
	else
	{
		sprintf(szUsuario,"%s/%s",szhNomUsuarOra,szhPasUsuarOra);
	}

	vDTrazasLog (modulo,"%s Usuario : [%s] "
	            ,LOG04, cfnGetTime(1),szUsuario);

	if (!fnOraConnect(szAccount,szPasswd))
	{	vDTrazasError   (modulo, "%s No Hay Conexion a la Base de Datos"
	                    ,LOG01,cfnGetTime(3));
		return -10;	}

	vDTrazasLog (modulo,"%s[%ld] Conectado a la Base de Datos"
	            ,LOG04, cfnGetTime(1),pid);

    /***********************/
    /* Fa_IntQueueProc RAO */
    /***********************/
    vDTrazasLog(modulo,"%s[%ld] Obtencion datos cola  ", LOG04, cfnGetTime(1),pid);
    memset(&stIntQueueProc,0,sizeof(INTQUEUEPROC)      );
    strcpy( stIntQueueProc.szCodModGener , szCodModGener);
            stIntQueueProc.lCodProceso   = iPROCESO_INT_IMPRESION_ONLINE;
    strcpy(stIntQueueProc.szCodAplic, "FAC");  /* Agregado por Pgonzaleg 28-01-2002 */
    
    if(!bfnGetIntQueueProc(&stIntQueueProc))
    {
		return -14;
	}
    ihNumDeltaHoras = stIntQueueProc.iNumDeltaHoras ;
    ihCodEstaDocEnt	= stIntQueueProc.iCodEstaDocEnt ;

	vDTrazasLog (modulo,"%s[%ld] Preparando Cursor sobre FA_INTERFACT "
			    " CodModGener [%s]\n"
			    " CodEstadoc  [%d]\n"
			    " CodEstProc  [%d]\n"
	            ,LOG04, cfnGetTime(1),pid,szhCodModGener,ihCodEstaDocEnt,ihIngrOk);


EXEC SQL
SELECT COUNT(1)
INTO :iExiste
FROM FA_INTERFACT A
WHERE A.COD_ESTADOC = :ihEstado
AND A.COD_ESTPROC = :ihUno
AND EXISTS (SELECT NULL
            FROM FA_INTERIMPRESION_TD B
			WHERE B.COD_ESTADO = :ihCodEstaProcOK
			AND A.NUM_PROCESO = B.NUM_PROCESO)
AND ROWNUM = :ihUno;

if (SQLCODE && SQLCODE != SQLNOTFOUND)
	{	
	    vDTrazasError(modulo,"Al COUNT de Procesos Encolados\n\t%s\n",LOG01,sqlca.sqlerrm.sqlerrmc);
		return (-21);	
	}
	
if (iExiste > 0 )
{
EXEC SQL
UPDATE FA_INTERFACT X
SET X.COD_ESTPROC = :ihCodEstaProcOK
WHERE EXISTS (SELECT NULL
              FROM FA_INTERFACT A
					    WHERE A.COD_ESTADOC = :ihEstado
					    AND A.COD_ESTPROC = :ihUno
					    AND X.NUM_PROCESO = A.NUM_PROCESO
					    AND EXISTS (SELECT NULL
					              FROM FA_INTERIMPRESION_TD B
								  WHERE B.COD_ESTADO = :ihCodEstaProcOK
								  AND A.NUM_PROCESO = B.NUM_PROCESO));
								  
if (SQLCODE && SQLCODE != SQLNOTFOUND)
	{	
	    vDTrazasError(modulo,"Al Cambiar de 401 a 403\n\t%s\n",LOG01,sqlca.sqlerrm.sqlerrmc);
		return (-22);
	}

EXEC SQL COMMIT;
if (SQLCODE)
	{	
	    vDTrazasError(modulo,"Al Commit UPDATE 401 - 403\n\t%s\n",LOG01,sqlca.sqlerrm.sqlerrmc);
		return (-23);
	}
}
/*AFGS - 62056 Chequea candtidad de procesos ejecutandose para asignar cantidad de impresores a ejecutar*/
/*sprintf(szCmd, "ps -fea|grep -w 'ImpresionScl'|grep -v grep");63998 CJG*/
sprintf(szCmd, "ImpresionScl");

EXEC SQL
	SELECT NVL(VAL_NUMERICO,10)
	INTO :iIntInstans
	FROM FAD_PARAMETROS
	WHERE COD_PARAMETRO = :ihCod_Param;

 do
 {
    ihCantProc = iBuscaProceso(szCmd);
 } while (ihCantProc >= iIntInstans);
  
  if(ihCantProc < iIntInstans)
      ihCantProc = iIntInstans - ihCantProc;
 
  vDTrazasLog(modulo, "\nPID[%d]Cantidad de Instancias del Impresor a Levantar[%d]", LOG04, pid,ihCantProc);
/*FIN AFGS - 62056*/	

	EXEC SQL DECLARE Cur_FaInterFact CURSOR FOR
			 SELECT NUM_PROCESO     ,
				COD_TIPMOVIMIEN , 
				COD_TIPDOCUM
			   FROM FA_INTERFACT
			  WHERE COD_MODGENER = :szhCodModGener    /* 'DAF' */
			    AND COD_ESTADOC  = :ihCodEstaDocEnt   /* Ingresada*/
			    AND COD_ESTPROC  = :ihIngrOk          /* terminada Ok */
			    AND COD_APLIC    = 'FAC' /* Agregado por Pgonzaleg 31-01-2002 */
			    AND ROWNUM <= :ihCantProc;/*63998 CJG */
		
	if (SQLCODE)
	{	
	    vDTrazasError(modulo,"Al declarar Cursor Cur_FaInterFact\n\t%s\n",LOG01,sqlca.sqlerrm.sqlerrmc);
		return -14;	
	}


	EXEC SQL OPEN Cur_FaInterFact;

	if (SQLCODE)
	{	
	    vDTrazasError(modulo,"Al Abrir Cursor Cur_FaInterFact\n\t%s\n",LOG01,sqlca.sqlerrm.sqlerrmc);
		return -15;	
	}

	vDTrazasLog(modulo,"%s[%ld] Recorriendo Cursor y formando Comandos ", LOG04, cfnGetTime(1),pid);

	for (;;)
	{
	    memset(&ha_FaInterFact,0,sizeof(reg_FaInterFact));
	    
		EXEC SQL FETCH Cur_FaInterFact
			      INTO :ha_FaInterFact;
			      
        if (SQLCODE != SQLOK && SQLCODE != SQLNOTFOUND && SQLCODE != SNAPSHOT)
	    {
            vDTrazasLog (modulo,"%s %ld Error Oracle FETCH",LOG01, cfnGetTime(1),SQLCODE);
            
            if (!bfnCambiaEstCola(szhCodModGener, ihCodProceso, iESTAQUEUE_RUNNING, iESTAQUEUE_ERROR, "FAC" ))
	            vDTrazasError(modulo,"Al declarar Cursor\n\t%s\n",LOG01,sqlca.sqlerrm.sqlerrmc);
	        else
	        {
			    if (!bfnOraCommit())
				{
		    	    vDTrazasError(modulo,"En Commit \n\t%s\n", LOG01, sqlca.sqlerrm.sqlerrmc);
					if (!fnOraRollBackRelease())
			    	    vDTrazasError(modulo,"En Rollback release\n\t%s\n", LOG01, sqlca.sqlerrm.sqlerrmc);
				    return -11;
				}
            }
		    return -14;
		    	
        }
        
        if (SQLCODE == SQLNOTFOUND) 
            bNotFound=TRUE;

        num_rows=sqlca.sqlerrd[2] - tnumrows;
        tnumrows = tnumrows + num_rows;
	    vDTrazasLog (modulo,"%s %d Cantidad de Filas ",LOG04, cfnGetTime(1),num_rows);

        if (num_rows>0 && SQLCODE != SNAPSHOT)
        {
            if (!bfnEjeComando  ( num_rows
                                , szUsuario
                                , ihCodNivLog
                                , ha_FaInterFact
                                , stIntQueueProc.iCodEstaDocSal ) )
            {
			    vDTrazasLog (modulo,"Entre al if",LOG04);
			    if (!bfnCambiaEstCola   (szhCodModGener
			                            , ihCodProceso
			                            , iESTAQUEUE_RUNNING
			                            , iESTAQUEUE_ERROR 
			                            , "FAC" ))
				{
				    if (!fnOraRollBackRelease())
					    vDTrazasError   (modulo,"En Rollback release\n\t%s\n",LOG01, sqlca.sqlerrm.sqlerrmc);
					return -11;
    			}
	    		else
				{
					if (!bfnOraCommit())
					{
		    		    vDTrazasError(modulo,"En Commit \n\t%s\n", LOG01, sqlca.sqlerrm.sqlerrmc);
						if (!fnOraRollBackRelease())
			    			vDTrazasError(modulo,"En Rollback release\n\t%s\n", LOG01, sqlca.sqlerrm.sqlerrmc);
				    	return -11;
					}
			    }
    			return -19;
    			
    		}
    		else
    		{
                vDTrazasLog (modulo,"Entre al else",LOG04);
                if (!bfnOraCommit())
				{
		    	    vDTrazasError(modulo,"En Commit \n\t%s\n", LOG01, sqlca.sqlerrm.sqlerrmc);
					if (!fnOraRollBackRelease())
			    	    vDTrazasError(modulo,"En Rollback release\n\t%s\n", LOG01, sqlca.sqlerrm.sqlerrmc);
				    return -11;
				}
				else
				    vDTrazasLog (modulo,"COMMIT correcto ",LOG04);
				
            }    		    
    		    
    	}
        if (bNotFound)
		{
			break;
		}

    } /* end for */

    vDTrazasLog (modulo,"%s %d Total de Filas procesadas",LOG03, cfnGetTime(1),tnumrows);

	vDTrazasLog(modulo,"%s[%ld] Cerrando Cursor ", LOG04, cfnGetTime(1),pid);

	EXEC SQL CLOSE Cur_FaInterFact;

	if (sqlca.sqlcode)
	{	
	    vDTrazasError(modulo,"Al cerrar el Cursor\n\t%s\n",LOG01,sqlca.sqlerrm.sqlerrmc);
		return -17;	
	}


	if (!bfnCambiaEstCola(szhCodModGener, ihCodProceso, iESTAQUEUE_RUNNING,  iESTAQUEUE_WAIT, "FAC" ))
	{
		if (!fnOraRollBackRelease())
	    	vDTrazasError(modulo,"En Rollback release\n\t%s\n", LOG01, sqlca.sqlerrm.sqlerrmc);
	    return -11;
	}
	else
	{	if (!bfnOraCommit())
		{	
		    vDTrazasError(modulo,"En Commit \n\t%s\n", LOG01, sqlca.sqlerrm.sqlerrmc);
			if (!fnOraRollBackRelease())
	    		vDTrazasError(modulo,"En Rollback release\n\t%s\n", LOG01, sqlca.sqlerrm.sqlerrmc);
			return -11;
		}
	}
	

} /* ImpresionOnline() */



/* ******************************************************************************************** */
/* ifnValidaParametros ()                                                                       */
/*												*/
/* ******************************************************************************************** */
int ifnValidaParametros (   int     argc            ,
                            char    *argv[]         ,
                            char    *szOraAccount   ,
                            char    *szOraPasswd    ,
                            int     *iLogLevel      ,
                            char    *szCodModGener  )

{
	char modulo[]="ifnValidaParametros";

	extern char     *optarg;
	extern int      optind, opterr, optopt;
	char            opt         []  = ":u:l:e:";
	int             iOpt=0,ihCodProc;
	char            *psztmp         = "";
	char            szUser      [64]= "";

	int             Userflag        =FALSE;
	int             Logflag         =FALSE;
	int             Modflag         =FALSE;

	char            szAccount   [32]="";
	char            szPasswd    [32]="";

	opterr=0;

	if(argc == 1)
	{
		fprintf (stderr,"\n\t<< Error : Parametros insuficientes >>\n%s\n",szUsage);
		return -1;
	}

	while ( (iOpt = getopt(argc, argv, opt) ) != EOF)
	{
		switch(iOpt)
		{
			case 'u':
				if(Userflag==FALSE)
				{
					strcpy(szUser, optarg);
					Userflag=TRUE;
				}
				else
				{
					fprintf (stderr,"\n\t<< Error : opcion '-%c' duplicada >>\n%s\n",optopt,szUsage);
					return -2;
				}
				break;

			case 'l':
				if(Logflag==FALSE)
				{
					*iLogLevel=atoi(optarg);
					Logflag=TRUE;
				}
				else
				{
					fprintf (stderr,"\n\t<< Error : opcion '-%c' duplicada >>\n%s\n",optopt,szUsage);
					return -2;
				}
				break;

			case 'e':
				if(Modflag==FALSE)
				{
					strcpy(szCodModGener,optarg);
					Modflag=TRUE;
				}
				else
				{
					fprintf (stderr,"\n\t<< Error : opcion '-%c' duplicada >>\n%s\n",optopt,szUsage);
					return -2;
				}
				break;

			case '?':
				fprintf(stdout,"\n\t<< Error: opcion '-%c' es desconocida >>\n%s\n",optopt,szUsage);
				return -3;

			case ':':
				fprintf(stdout,"\n\t<< Error: falta parametro para opcion '-%c' >>\n%s\n",optopt,szUsage);
				return -4;

		}/* endswitch */

	} /* enwhile */


	if  (   Modflag==FALSE
	    ||  Logflag==FALSE)
	{
		fprintf (stderr,"\n\t<< Error : falta opcion '-%c' >>\n%s\n",optopt,szUsage);
		return -1;
	}

	if(Userflag==TRUE)
	{
		if ( (psztmp=(char *)strstr(szUser,"/") )==(char *)NULL )
		{
			fprintf (stderr,"\n\t<< Error : usuario no valido. Requiere \"/\" >>\n%s\n",szUsage);
			return -5;
		}
		else
		{
			strncpy (szOraAccount,szUser,psztmp-szUser);
			strcpy  (szOraPasswd, psztmp+1);
		}
	}

	return 0; /* Validacion ok */

} /* ifnValidaParamatros */



/********************************************************/
/*  Compone y ejecuta el comando de Impresion           */
/********************************************************/
BOOL bfnEjeComando  (int num_rows
                    ,char *pszUsuario
                    ,int ihCodNivLog
                    ,reg_FaInterFact ha_FaInterFact
                    ,int iCodEstaDocSal)
{
    char     modulo[]       ="bfnEjeComando";
    char     szComando [128]="";
     int     x;
     int     iIngrPrc       =iESTAPROC_PROCESANDO;      
   INTERFACT stInterFact;
   
    for (x=0;x<num_rows;x++)
    {
        memset(&stInterFact,0,sizeof(INTERFACT));
        stInterFact.lNumProceso     = ha_FaInterFact.lNumProceso    [x];
        strcpy(stInterFact.szCodAplic,"FAC"); /* Agregado por Pgonzaleg 28-01-2002 */
        
        if (!bfnGetInterFact(&stInterFact))
        {
            vDTrazasError(szExeName,"Error obtencion de FA_INTERFACT [%ld] [%s]"
                         ,LOG01,SQLCODE,szfnORAerror());
            vDTrazasLog  (szExeName,"Error obtencion de FA_INTERFACT [%ld] [%s]"
                         ,LOG01,SQLCODE,szfnORAerror());
            return FALSE;
        }
    	vDTrazasLog (modulo,"%s Usuario : [%s] "
	            ,LOG04, cfnGetTime(1),pszUsuario);


        sprintf(szComando,"%s %ld %d \0","ksh ImpresionSclOnline.ksh", stInterFact.lNumProceso, ha_FaInterFact.iCodTipDocumento[x]); 

	   
        
        
	/**********************************************************************************************/
	/* Marca FA_INTERFACT como procesando							  */
        /**************************************************************************************************/
        stInterFact.iCodEstaDoc     =   iCodEstaDocSal;
        stInterFact.iCodEstaProc    =   iIngrPrc;
	    strcpy(stInterFact.szCodAplic,"FAC");  /* Agregado por Pgonzaleg 28-01-2002 */
	
        /*
        if (!bfnUpdInterFact(stInterFact))
        {
            vDTrazasError(szExeName,"Error en marca de FA_INTERFACT [%ld] [%s]"
                         ,LOG01,SQLCODE,szfnORAerror());
            vDTrazasLog  (szExeName,"Error en marca de FA_INTERFACT [%ld] [%s]"
                         ,LOG01,SQLCODE,szfnORAerror());
            return FALSE;
        }
        else
        {
            if (!bfnOraCommit())
			{
		        vDTrazasError(modulo,"En Commit \n\t%s\n", LOG01, sqlca.sqlerrm.sqlerrmc);
				if (!fnOraRollBackRelease())
			        vDTrazasError(modulo,"En Rollback release\n\t%s\n", LOG01, sqlca.sqlerrm.sqlerrmc);
				return -11;
		         }
	    }
        */
        
	    if (iShellEjecucion(szComando,stStatus.LogName)!=0)
	    {
	    	vDTrazasError (modulo,"%s[%ld] Falls Comando:[ %s ]" ,LOG03,cfnGetTime(1),pid,szComando);
		return FALSE;
	    }
   }
    
    return TRUE;
 
}

/*************************************************************************************/
int iBuscaProceso(char *szComando) /*AFGS - 62056*/
{
	char cmd[99];
	char buf[BUFSIZ];
	FILE *ptr;
	int cnt=0;
	
	sprintf(cmd, "ps -fea|grep -w '%s'|grep -v grep",szComando);
	if ((ptr = popen(cmd, "r")) != NULL)
	{
			while (fgets(buf, BUFSIZ, ptr) != NULL)
			{
				cnt++;
			}
	}
	pclose(ptr);
	return(cnt);
}


