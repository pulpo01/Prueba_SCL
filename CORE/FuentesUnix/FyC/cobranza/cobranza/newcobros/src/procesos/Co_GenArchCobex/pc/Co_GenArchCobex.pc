/* ================================================================================================================ */
/*
   Tipo        :  COLA DE PROCESO
   Nombre      :  Co_GenArchCobex.pc
   Parametros  :  Usuario/Password. ( por defecto asume los de la cuenta )
                  Nivel de Log ( por defecto asume 3 : Log Normal ) 
                  Nombre de la Cola (Opcional), para nombrar archivos de log
   Autor       :  
   Fecha       :  01-Septiembre-2009
*/ 
/* ================================================================================================================ */
#define _COLIBGENERALES_PC_
#define _COLIBPROCESOS_PC_

#include "Co_GenArchCobex.h"

LINEACOMANDO  	stLineaComando;     		/* Datos con los que se invoco al proceso */
char 			szgCodProceso[6]  = "";
char            *pathDir ;
char            szPathDat   [128] = "";
char            szPathLog   [128] = "";

EXEC SQL INCLUDE sqlca;

EXEC SQL BEGIN DECLARE SECTION;
    char	szhCodEstado          [2]; EXEC SQL VAR szhCodEstado          IS STRING (2);
    char    szhGacob              [6]; EXEC SQL VAR szhGacob              IS STRING (6);
    char    szhWait               [2]; EXEC SQL VAR szhWait               IS STRING (2);
    char    szhYYYYMMDD           [9]; EXEC SQL VAR szhYYYYMMDD           IS STRING (9);
    char    szFechayyyymmdd       [9]; EXEC SQL VAR szFechayyyymmdd       IS STRING (9);    
    char    szVIS                 [4]; EXEC SQL VAR szVIS                 IS STRING (4);   
    char    szREA                 [4]; EXEC SQL VAR szREA                 IS STRING (4);   
    char    szMOROSOS            [11]; EXEC SQL VAR szMOROSOS             IS STRING(11);   
    char    szCLIENTES           [12]; EXEC SQL VAR szCLIENTES            IS STRING(12);       
    char    szGCATEGORIAS        [14]; EXEC SQL VAR szGCATEGORIAS         IS STRING(14);       
    char    szGPRESTACIONES      [19]; EXEC SQL VAR szGPRESTACIONES       IS STRING(19);       
    char    szCATEGORIA          [14]; EXEC SQL VAR szCATEGORIA           IS STRING(14);       
    char    szSEGMENTO           [13]; EXEC SQL VAR szCATEGORIA           IS STRING(13);           
    char    szPRESTACION         [15]; EXEC SQL VAR szPRESTACION          IS STRING(15);           
    char    szhBAA                [4]; EXEC SQL VAR szhBAA                IS STRING (4);    
    char    szhBAP                [4]; EXEC SQL VAR szhBAP                IS STRING (4);    
    char    szhTM                 [3]; EXEC SQL VAR szhTM                 IS STRING (3);    
    char    szhNULL               [2]; EXEC SQL VAR szhNULL               IS STRING (2);    
    char    szhGA                 [3]; EXEC SQL VAR szhGA                 IS STRING (3);      
    char    szhACTIVO             [7]; EXEC SQL VAR szhACTIVO             IS STRING (7);      
    char    szhBAJA               [5]; EXEC SQL VAR szhBAJA               IS STRING (5);            
    char    szhSININFORMACION    [16]; EXEC SQL VAR szhSININFORMACION     IS STRING(16);            
    char    szhSI                 [4]; EXEC SQL VAR szhSI                 IS STRING (4);            
    char    szhYYYY               [5]; EXEC SQL VAR szhYYYY               IS STRING (5);            
    int     ihUno                    ;
    int     ihDos                    ;
    int     ihSeis                   ;
EXEC SQL END DECLARE SECTION;

td_Detafac     sthDetafac;          /* Estructura de Archivo DETAFAC             */
td_Facturas    sthFactura;          /* Estructura de Archivo FACTURAS            */
td_Cuentas     sthCuentas;          /* Estructura de Archivo CUENTAS             */    
td_Telefonos   sthTelefono;         /* Estructura de Archivo TELEFONOS           */    
td_TelesCuenta sthTCuentas;         /* Estructura de Archivo TELESCUENTA         */    

long        lIndDetafac;            /* Indice de archivos DETAFAC                */
long        lIndFactura;            /* Indice de archivos FACTURAS               */
long        lIndCuentas;            /* Indice de archivos CUENTAS                */
long        lIndTelefon;            /* Indice de archivos TELEFONOS              */
long        lIndTeleCta;            /* Indice de archivos TELESCUENTAS           */

/* ============================================================================= */
/*  main                                                                         */
/* ============================================================================= */
int main( int argc, char *argv[] )
{
char modulo[] = "main";
int iResult = 0;

    fprintf(stdout, "\n%s GACOB pid(%ld) VERSION [%s]\n", szGetTime(1),getpid(),szVERSION);
    fflush (stdout);

    /*- Inicializacion de parametros  -*/    
    memset(szgCodProceso,0,sizeof(szgCodProceso));    
    strcpy(szgCodProceso,"GACOB"); 
    rtrim(szgCodProceso);
    
    /*- Validacion de parametros de entrada -*/
    memset(&stLineaComando,0,sizeof(LINEACOMANDO));
    if (ifnValidaParametros(argc,argv,&stLineaComando) != 0) {
        fprintf (stdout,"\n\tError >> Fallo la Validacion de Parametros \n");
        fflush  (stdout);
        iResult = 1; /* Fallo validacion */
   } else {   
        /*- Conexion a la Base de Datos -*/
        if (ifnConexionDB(&stLineaComando) != 0)   {
            fprintf (stdout,"\n\tError >> Fallo la Conexion a la Base \n");
            fflush  (stdout);
            iResult = 2; /* Fallo conexion */

        } else  {
    	    /* Inicializacion de Parametros */
    	    vfnInicializacionParametros();    
    	
            /*- Prepara Archivo de Log -*/ 
            if (ifnAbreArchivoLog() != 0)    {
                fprintf (stdout,"\n\tError >> Fallo Archivo de Log (Local al proceso) \n");
                fflush  (stdout);
                iResult = 3;  /* Fallo Log */
            
	        } else {
                /*- Ejecuta el proceso propiamente tal -*/
				if (ifnEjecutaCola() != 0)   {
                    fprintf (stdout,"\n\tError >> Fallo el proceso \n");
                    fflush  (stdout);
                    iResult = 4; /* Fallo Proceso */
				} else {
             	
					EXEC SQL 
		            SELECT COD_ESTADO 
		            INTO :szhCodEstado
		            FROM CO_COLASPROC 
		            WHERE COD_PROCESO=:szhGacob;
		            
		            if (SQLCODE)  {
		                fprintf (stdout,"\n\tError >> Fallo el proceso ( Validacion Cola Wait ) \n");
		                fflush  (stdout);
		                iResult = 5; /* Fallo Proceso */
		
		            } else {
		
		                if ( strcmp(szhCodEstado,"W")!=0 ) {
		                    /* LA COLA ESTA EN UN ESTADO DISTINTO DE WAIT         */
		                    /* SEÑALAR ESTO COMO ERROR E INTENTAR FORZARLA A WAIT */
		                    ifnTrazasLog(modulo,"Regresando la Cola a Espera (%s)",LOG02,szhCodEstado);
		                    EXEC SQL 
		                    UPDATE CO_COLASPROC
		                       SET COD_ESTADO = :szhWait
		                     WHERE COD_PROCESO = :szhGacob;
		
		                    if (SQLCODE) {
		                        fprintf (stdout,"\n\tError >> Fallo el proceso ( Update Cola Wait ) %s\n",SQLERRM );
		                        fflush  (stdout);
		                        iResult = 6; /* Fallo Proceso */
		                    }                            
		
		                    EXEC SQL COMMIT;
		                    if (SQLCODE) {
		                        fprintf (stdout,"\n\tError >> Fallo el proceso ( Commit Cola Wait ) %s\n", SQLERRM );
		                        fflush  (stdout);
		                        iResult = 7; /* Fallo Proceso */
		                     }                            
		                     ifnTrazasLog(modulo,"OK. Cola forzada a espera",LOG02);
		                 }
		             }
                } /* end ifnEjecutaCola */
                vfnCierraArchivoLog();
            } /* end ifnAbreArchivoLog */
        } /* end ifnConexionDB*/
   } /* end ifnValidaParametros */

    return iResult;
   
} /* end main */    

/* ============================================================================= */
/* ifnValidaParametros : Realiza la validacion de los Parametros de Entrada      */
/* ============================================================================= */
int ifnValidaParametros( int argc, char *argv[], LINEACOMANDO *pstLC )
{
char modulo[]="ifnValidaParametros";

/*-- Definicion de variables para controlar la lista de argumentos recibidos ----*/
extern  char *optarg;
extern  int  optind, opterr, optopt;
        int  iOpt=0;
        char opt[] = ":u:l:n:";
/*-- Variables locales -----------------------------------------------------------*/  
char  *psztmp = "";
/*-- Flags de los valores recibidos ----------------------------------------------*/
int  Userflag=0;
int  Logflag=0;

/*-- Seteo de Valores Iniciles y por defecto -------------------------------------*/
    opterr=0;
    stStatus.iLogNivel = iLOGNIVEL_DEF ;
    
/*-- En caso de Invocacion sin Parametros ----------------------------------------*/
    if(argc == 1)   {
        return 0; /*ok asume valores por defecto */
    }

/*-- Analisis de los argumentos recibidos ----------------------------------------*/
    while ((iOpt=getopt(argc, argv, opt))!=EOF)    {

        switch(iOpt)
        {
            case 'u':  /*-- Usuario/Password --*/
                if(!Userflag) {
                    strcpy(pstLC->szUsuarioOra, optarg);                      
                    Userflag=1;
                    
                    if ((psztmp=(char *)strchr(pstLC->szUsuarioOra,'/'))==(char *)NULL) {
                        fprintf (stderr,"\n\tError >> Usuario no valido. Requiere '/' \n");
                        fflush  (stderr);
                        return -1;
                    
                    } else {
                        strncpy (pstLC->szOraAccount,pstLC->szUsuarioOra,psztmp-pstLC->szUsuarioOra);
                        strcpy  (pstLC->szOraPasswd, psztmp+1);
                    }
         
                } else {
                    fprintf (stderr,"\n\tError >> opcion '-%c' duplicada\n",optopt);
                    fflush  (stderr);
                    return -1;
                }
                break;

            case 'l': /*-- Nivel de Log --*/
                if(!Logflag) {
                    stStatus.iLogNivel = (atoi(optarg) > 0)? atoi(optarg):iLOGNIVEL_DEF ;
                    Logflag=1;
                
                } else {
                    fprintf (stderr,"\n\tError >> opcion '-%c' duplicada\n",optopt);
                    fflush  (stderr);
                    return -1;
                }
                break;
            case 'n': /*-- Nombre de la Cola (codigo del proceso) --*/
                strcpy(szgCodProceso,optarg);
                break;
            case '?':
                fprintf (stderr,"\n\tError >> opcion '-%c' es desconocida\n",optopt);
                fflush  (stderr);
                return -1;

            case ':':
                fprintf (stderr,"\n\tError >> falta argumento para opcion '-%c'\n",optopt);
                fflush  (stderr);
                return -1;
        }
    } /* end while */
    pstLC->iLogLevel=stStatus.iLogNivel;
    return 0;

} /* ifnValidaParametros */

/* ============================================================================= */
/* ifnConexionDB() : Intenta Conectarse a la Base de Datos                       */
/* ============================================================================= */
int ifnConexionDB(LINEACOMANDO *pstLC)
{
char modulo[]="ifnConexionDB";
    
    if( bfnOraConnect(pstLC->szOraAccount,pstLC->szOraPasswd) == FALSE )    {
        fprintf (stderr,"\nNo hay conexion a ORACLE \n");
        fflush  (stderr);
        return -1;
    }
    
    return 0;
} /* end ifnConexionDB */

/* ============================================================================= */
/* vfnInicializacionParametros():                                                */
/* ============================================================================= */
void vfnInicializacionParametros(void)
{
char modulo[]="vfnInicializacionParametros";
EXEC SQL BEGIN DECLARE SECTION;
    char szhPathLogSched[256]; EXEC SQL VAR szhPathLogSched IS STRING (256);
EXEC SQL END DECLARE SECTION;
    
    strcpy(szhGacob         ,GACOB);
  	strcpy(szhYYYYMMDD      ,"YYYYMMDD");
    strcpy(szhWait          ,W );
    strcpy(szVIS            ,VIS);
    strcpy(szREA            ,REA);
    strcpy(szMOROSOS        ,CO_MOROSOS);
    strcpy(szCLIENTES       ,GE_CLIENTES);
    strcpy(szGCATEGORIAS    ,GE_CATEGORIAS);
    strcpy(szGPRESTACIONES  ,GE_PRESTACIONES_TD);
    strcpy(szCATEGORIA      ,COD_CATEGORIA);    
    strcpy(szSEGMENTO       ,COD_SEGMENTO);
    strcpy(szPRESTACION     ,GRP_PRESTACION);
    strcpy(szhBAA           ,BAA);
    strcpy(szhBAP           ,BAP);
    strcpy(szhTM            ,TM);
    strcpy(szhNULL          ,NULO);
    strcpy(szhGA            ,GA);
    strcpy(szhACTIVO        ,ACTIVO);
    strcpy(szhBAJA          ,BAJA);
    strcpy(szhSININFORMACION,SIN_INFORMACION);    
    strcpy(szhSI            ,SI);    
    strcpy(szhYYYY          ,"YYYY");
                                                                                                 
    ihUno = UNO;
    ihDos = DOS;
    ihSeis= SEIS;
    
    EXEC SQL EXECUTE
		BEGIN
			:szFechayyyymmdd :=TO_CHAR(SYSDATE  ,:szhYYYYMMDD);
		END;
	END-EXEC;
	
	lIndDetafac = 0;
    lIndFactura = 0;
    lIndCuentas = 0;
    lIndTelefon = 0;
    lIndTeleCta = 0;

	sprintf(stStatus.szFileName   ,"%s",szgCodProceso);
	sprintf(szhPathLogSched       ,"%s/CO_SCHEDULER",getenv("XPC_LOG"));    
	sprintf(stStatus.szLogPathGene,"%s",szhPathLogSched);
    
  	pathDir =(char *)malloc(228);
	pathDir =szGetEnv("HOME");

    sprintf(szPathDat  ,"%s/newcobros/dat/ArchivosCOBEX/%s",pathDir,szFechayyyymmdd);
    sprintf(szPathLog  ,"%s/%s",stStatus.szLogPathGene,szFechayyyymmdd);

    return;
} /* end vfnInicializacionParametros */

/* ============================================================================= */
/* ifnAbreArchivoLog(): Abre archivos de log, errores y estadisticas modo append */
/* if iCreaDir != 0 : crear directorio antes que el archivo                      */
/* ============================================================================= */
int ifnAbreArchivoLog()
{
char modulo[]="ifnAbreArchivoLog";
char szArchivoErr[256]=""; /* errores  */
char szArchivoLog[256]=""; /* log      */
char szComando   [256]="";

    sprintf(szComando,"mkdir -p %s",szPathLog);

    if (system (szComando)!=0) {
        fprintf (stderr,"Error al intentar crear directorio de Log\n");
        fflush  (stderr);
        return -1;
    }

    sprintf(szComando,"mkdir -p %s",szPathDat);

    if (system (szComando)!=0) {
        fprintf (stderr,"Error al intentar crear directorio de Dat\n");
        fflush  (stderr);
        return -1;
    }

	free(pathDir);    

    memset(szArchivoLog,0,sizeof(szArchivoLog)); /* log                       */         
    memset(szArchivoErr,0,sizeof(szArchivoErr)); /* errores                   */     

    sprintf(szArchivoLog,"%s/%s.log",szPathLog,stStatus.szFileName);
    sprintf(szArchivoErr,"%s/%s.err",szPathLog,stStatus.szFileName);
    
    if((stStatus.LogFile = fopen(szArchivoLog,"a")) == (FILE*)NULL ) {    
        fprintf (stderr,"Error al crear archivo de Log\n");
        fflush  (stderr);
        return -1;    
    }
    
    if((stStatus.ErrFile = fopen(szArchivoErr,"a")) == (FILE*)NULL ) {    
        fprintf (stderr,"Error al crear archivo de Errores\n");
        fflush  (stderr);
        return -1;    
    }
    
    ifnTrazasLog(modulo, "%s - APERTURA DE ARCHIVO <%ld> -\n", LOG03,szGetTime(1),getpid());

    return 0;
    
}/* end ifnAbreArchivoLog */

/* ============================================================================= */
/* vfnCierraArchivoLog(): cierra los descriptores de los archivos de logs        */
/* ============================================================================= */
void vfnCierraArchivoLog(void)
{
char modulo[]="vfnCierraArchivoLog";
    
    ifnTrazasLog(modulo, "%s -  CIERRE  DE ARCHIVO <%ld> -\n\n", LOG03,szGetTime(1),getpid());

    if ( fclose(stStatus.LogFile) != 0 )    {    
        fprintf (stderr,"Error al cerrar archivo de Log\n");
        fflush  (stderr);
    }

    if ( fclose(stStatus.ErrFile) != 0 )    {    
        fprintf (stderr,"Error al cerrar archivo de Errores\n");
        fflush  (stderr);
    }
        
    return ;    
} /* end vfnCierraArchivoLog */

/* ============================================================================= */
/*  ifnEjecutaCola() : Ejecuta la cola de acciones                               */
/* ============================================================================= */
int ifnEjecutaCola(void)
{
char  modulo[]="ifnEjecutaCola";
char  szIniProc[9], szFinProc[9], szTmpProc[9];
int   iDifSegs = 0;

	sprintf( szIniProc, "%s", szSysDate( "HH24:MI:SS" ) );

	ifnTrazasLog( modulo, "Corriendo la cola lanzada ", LOG03 );
	ifnTrazasLog(modulo,"GACOB VERSION [%s]\n",LOG03, szVERSION);
	if( !bfnCambiaEstadoCola( szgCodProceso, "L", "R" ) ) {
	    if( !bfnOraRollBack() ) ifnTrazasLog( modulo, "En Rollback 'L->R' : %s", LOG00, SQLERRM );
	        return -1;
    }	else	{    
	    if( !bfnOraCommit() )   {    
	        ifnTrazasLog( modulo, "En Commit 'L->R' : %s", LOG00, SQLERRM );
	        if( !bfnOraRollBack() ) ifnTrazasLog( modulo, "En Rollback : %s", LOG00, SQLERRM );
	            return FALSE;    
    	}
	}

	/* Carga la estructura de manejo de decimales para la operadora local */
	if( !bGetParamDecimales() )	{
		ifnTrazasLog( modulo, "Error al realizar carga de bGetParamDecimales().", LOG03 );
		return -1;
    }
	
	if (ifnGeneraUniverso() !=0 ) {
		ifnTrazasLog( modulo, "Error en Llamada a ifnGeneraUniverso().", LOG03 );
		return -1;
	}
		
	/* Inicio Requerimiento MIX-09003 - 140082 - 21.07.2010 - MQG*/
	if (ifnRevisaEstadoCliente() !=0 ) {
		ifnTrazasLog( modulo, "Error en Llamada a ifnRevisaEstadoCliente().", LOG03 );
		return -1;
	}	
	/* Fin Requerimiento MIX-09003 - 140082 - 21.07.2010 - MQG*/
		
	if (ifnGeneraUnivArchCob() !=0 ) {
		ifnTrazasLog( modulo, "Error en Llamada a ifnGeneraUnivArchCob().", LOG03 );
		return -1;
	}		
	
	/* Informacion Estadistica */
	sprintf( szFinProc, "%s", szSysDate( "HH24:MI:SS" ) );    
	if( (iDifSegs=ifnRestaHoras(szIniProc,szFinProc,szTmpProc)) >= 0 )	{
	    ifnTrazasLog(modulo,"\n\tRESUMEN DEL PROCESO GACOB"
	                        "\n\t       HORA INICIO  : %s "
	                        "\n\t       HORA TERMINO : %s "
	                        "\n\t       TIEMPO TOTAL : %s  (%d segs)"
	                        "\n",EST00
	                        ,szIniProc,szFinProc,szTmpProc,iDifSegs);
	}

	ifnTrazasLog( modulo, "Volviendo la cola a espera ", LOG03 );
	if( !bfnCambiaEstadoCola( szgCodProceso, "R", "W") ) 	{
		if( !bfnOraRollBack() ) ifnTrazasLog( modulo, "En Rollback 'R->W' : %s", LOG00, SQLERRM );
		return -1;
	}

	EXEC SQL COMMIT;
	if (SQLCODE) {
	    fprintf (stdout,"\n\tError >> Fallo el Commit -  %s\n", SQLERRM );
	    fflush  (stdout);
	    return -1;
	}                            

	ifnTrazasLog( modulo, "Saliendo de %s ( Cola Wait )\n", LOG02, szgCodProceso );
	return 0;
	
} /* end ifnEjecutaCola */

/* ============================================================================= */
/*  ifnGeneraUniverso() : Funcion que rescata los datos de la empresa de cobranza*/
/* ============================================================================= */
int ifnGeneraUniverso()
{
char modulo[]   = "ifnGeneraUniverso";
int  iError     = 0;     
int  iRes       = 0;    

EXEC SQL BEGIN DECLARE SECTION;   
   char   shCodEntidad    [6]; EXEC SQL VAR shCodEntidad  IS STRING (6);
   char   shDesEntidad   [31]; EXEC SQL VAR shDesEntidad  IS STRING(31);
EXEC SQL END DECLARE SECTION;                                                 

    ifnTrazasLog( modulo, "\n\tEn funcion %s", LOG03,modulo);                      

    /************************************************************************/
    /* Obtiene el Universo de Entidades de Cobranzas                        */
    /************************************************************************/
    EXEC SQL DECLARE Cur_UniCob CURSOR for        
    SELECT COD_ENTIDAD, DES_ENTIDAD
      FROM CO_ENTCOB 
     WHERE SYSDATE BETWEEN FEC_INI_VIGENCIA AND FEC_FIN_VIGENCIA                                     
     ORDER BY COD_ENTIDAD ; 

    if( SQLCODE != SQLOK ) {
        ifnTrazasLog( modulo, "\tDECLARE Cur_UniCob - %s", LOG00,SQLERRM );
        return -1;
    }
    
    EXEC SQL OPEN Cur_UniCob;
    if( SQLCODE != SQLOK ) {
        ifnTrazasLog( modulo, "\tOPEN Cur_UniCob - %s", LOG00,SQLERRM );
        return -1;
    }

	while(1) {

        EXEC SQL FETCH Cur_UniCob INTO :shCodEntidad  , :shDesEntidad;            
      
		if( SQLCODE  == SQLNOTFOUND) {
			break; /* No hay mas empresas de cobranzas externa */
		}

        if( SQLCODE != SQLOK && SQLCODE != SQLNOTFOUND )  {
	       ifnTrazasLog( modulo, "en FETCH : %s", LOG00, SQLERRM );
		   break;
	    }

		ifnTrazasLog( modulo, " =============================================================", LOG03);
		ifnTrazasLog( modulo, " Entidad [%s] - [%s]", LOG03, shCodEntidad,  shDesEntidad);
	    	    	    	    
        /* Inicializacion de Array por Tipo de Archivos */
        /* Archivo DETAFAC */
        strcpy(sthDetafac.sCodAgente[lIndDetafac], shCodEntidad);
        sthDetafac.lNumRegistr [lIndDetafac] = 0;
        sthDetafac.lEstRegistro[lIndDetafac] = 0; /* Requerimiento MIX-09003 - 140082 - 19.07.2010 - MQG*/     
        
        /* Archivo FACTURA */        
        strcpy(sthFactura.sCodAgente[lIndFactura], shCodEntidad);
        sthFactura.lNumRegistr[lIndFactura] = 0;
        
        /* Archivo CUENTAS */        
        strcpy(sthCuentas.sCodAgente[lIndCuentas], shCodEntidad);
        sthCuentas.lNumRegistr[lIndCuentas] = 0;
                       
        /* Archivo TELEFONOS */
        strcpy(sthTelefono.sCodAgente[lIndTelefon], shCodEntidad);
        sthTelefono.lNumRegistr[lIndTelefon] = 0;
                                              
        /* Archivo TELESCUENTA */
        strcpy(sthTCuentas.sCodAgente[lIndTeleCta], shCodEntidad);
        sthTCuentas.lNumRegistr[lIndTeleCta] = 0;
                                                                                                                                          
        lIndDetafac = lIndDetafac + 1;
        lIndFactura = lIndFactura + 1;
        lIndCuentas = lIndCuentas + 1;
        lIndTelefon = lIndTelefon + 1;
        lIndTeleCta = lIndTeleCta + 1;
                             
        iRes = ifnGeneraDetalle(shCodEntidad);
        if( iRes < 0 ) break;        	    	   	                                                            
                                           
        /* Fin de registro por Entidad de Cobranza */
        lIndDetafac = lIndDetafac + 1;
        lIndFactura = lIndFactura + 1;
        lIndCuentas = lIndCuentas + 1;
        lIndTelefon = lIndTelefon + 1;
        lIndTeleCta = lIndTeleCta + 1;

        sthDetafac.lNumRegistr[lIndDetafac] = -1;
        sthFactura.lNumRegistr[lIndFactura] = -1; 
        sthCuentas.lNumRegistr[lIndCuentas] = -1; 
        sthTelefono.lNumRegistr[lIndTelefon] = -1; 
        sthTCuentas.lNumRegistr[lIndTeleCta] = -1; 

        strcpy(sthDetafac.sCodAgente[lIndDetafac], shCodEntidad);        
        strcpy(sthFactura.sCodAgente[lIndFactura], shCodEntidad);
        strcpy(sthCuentas.sCodAgente[lIndCuentas], shCodEntidad);
        strcpy(sthTelefono.sCodAgente[lIndTelefon], shCodEntidad);
        strcpy(sthTCuentas.sCodAgente[lIndTeleCta], shCodEntidad);

	} /* endwhile */
	      
	EXEC SQL CLOSE Cur_UniCob;
	if( SQLCODE )
	{
		ifnTrazasLog( modulo, "en CLOSE : %s", LOG00, SQLERRM );
		return -1;
	}
           	
    return iError;
  
} /* end ifnGeneraUniverso() */

/* ============================================================================= */
/*  ifnGeneraDetalle() : Funcion que busca el detalle por tipo de archivo        */
/* ============================================================================= */
int ifnGeneraDetalle(char *phCodEntidad)
{
char modulo[]   = "ifnGeneraDetalle";
int  iError     = 0;     
int  iRes       = 0;    

EXEC SQL BEGIN DECLARE SECTION;   
   long   lhCodCliente     ;
   long   lhNumSecuencia   ;
   char   shCodEntidad  [6]; EXEC SQL VAR shCodEntidad  IS STRING(6);
EXEC SQL END DECLARE SECTION;                                                 

    ifnTrazasLog( modulo, "\n\tEn funcion %s", LOG03,modulo);                      
    strcpy(shCodEntidad, phCodEntidad);

    /************************************************************************/
    /* Obtiene el Universo de Entidades de Cobranzas                        */
    /************************************************************************/
    EXEC SQL DECLARE Cur_Det CURSOR for        
    SELECT B.COD_CLIENTE, B.NUM_SECUENCIA 
      FROM CO_PARAM_COBEX_TO A, CO_GESTION_COBEX_TO B
     WHERE B.COD_ENTIDAD  = :shCodEntidad
       AND A.COD_ESTADO IN  (:szVIS, :szREA)
       AND A.NUM_SECUENCIA= B.NUM_SECUENCIA  
       AND B.FEC_TERMINO IS NULL     
       AND EXISTS (SELECT 1 FROM CO_CARTERA F 
                    WHERE F.COD_CLIENTE   = B.COD_CLIENTE
                      AND F.IND_FACTURADO = 1
                      AND F.COD_CONCEPTO NOT IN (:ihDos,:ihSeis))
     ORDER BY A.COD_ENTIDAD; 

    if( SQLCODE != SQLOK ) {
        ifnTrazasLog( modulo, "\tDECLARE Cur_Det - %s", LOG00,SQLERRM );
        return -1;
    }
    
    EXEC SQL OPEN Cur_Det;
    if( SQLCODE != SQLOK ) {
        ifnTrazasLog( modulo, "\tOPEN Cur_Det - %s", LOG00,SQLERRM );
        return -1;
    }

	while(1) {

        EXEC SQL FETCH Cur_Det INTO :lhCodCliente, :lhNumSecuencia;            
      
		if( SQLCODE  == SQLNOTFOUND) {
	        ifnTrazasLog( modulo, "\t No existen mas registros a procesar...", LOG03 );
			break; /* No hay mas empresas de cobranzas externa */
		}

        if( SQLCODE != SQLOK && SQLCODE != SQLNOTFOUND )  {
	       ifnTrazasLog( modulo, "en FETCH : %s", LOG00, SQLERRM );
		   break;
	    }

        ifnTrazasLog( modulo, " - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -", LOG05);
        ifnTrazasLog( modulo, "Cliente - Secuencia [%ld] - [%ld]", LOG05, lhCodCliente, lhNumSecuencia);
        ifnTrazasLog( modulo, "lIndDetafac [%ld] ", LOG09, lIndDetafac);
	    	    	    	    	 
        strcpy(sthDetafac.sCodAgente[lIndDetafac], shCodEntidad);
        sthDetafac.lCodCliente  [lIndDetafac] = lhCodCliente;
        sthDetafac.lNumSecuencia[lIndDetafac] = lhNumSecuencia;
        sthDetafac.lEstRegistro [lIndDetafac] = 0; /* Requerimiento MIX-09003 - 140082 - 15.07.2010 - MQG*/     
        
        iRes = ifnDetalleDETAFAC(lhCodCliente);
        if( iRes < 0 ) break;        	    	   	

        if( sthDetafac.lEstRegistro [lIndDetafac] == 0 ) {        	    	   	
           iRes = ifnDetalleFACTURA(lhCodCliente, shCodEntidad, lhNumSecuencia);
           if( iRes < 0 ) break;        	    	   	
           
           strcpy(sthCuentas.sCodAgente[lIndCuentas], shCodEntidad);
           sthCuentas.lCodCliente  [lIndCuentas] = lhCodCliente;
           sthCuentas.lNumSecuencia[lIndCuentas] = lhNumSecuencia;
           sthCuentas.lEstRegistro [lIndCuentas] = 0; /* Requerimiento MIX-09003 - 140082 - 15.07.2010 - MQG*/     
           
           iRes = ifnDetalleCUENTAS(lhCodCliente);
           if( iRes < 0 ) break;        	    	   	
           
           if( sthCuentas.lEstRegistro [lIndCuentas] == 0 ) {        	    	   	
               iRes = ifnDetalleTELEFONOS(lhCodCliente, shCodEntidad, lhNumSecuencia);
               if( iRes < 0 ) break;        	    	   	
               
               iRes = ifnDetalleTELESCUENTA(lhCodCliente, shCodEntidad, lhNumSecuencia);
               if( iRes < 0 ) break;   
               
               lIndDetafac = lIndDetafac + 1;        
               lIndCuentas = lIndCuentas + 1;
               lIndTelefon = lIndTelefon + 1;
           }
    	}
    
	} /* endwhile */
	      
	EXEC SQL CLOSE Cur_Det;
	if( SQLCODE )
	{
		ifnTrazasLog( modulo, "en CLOSE : %s", LOG00, SQLERRM );
		return -1;
	}
           	
    return iError;
  
} /* end ifnGeneraDetalle() */

/* ============================================================================= */
/*  ifnDetalleDETAFAC : Funcion que busca el detalle para el archivo DETAFAC     */
/* ============================================================================= */
int ifnDetalleDETAFAC(long lhCodCliente)
{
char  modulo[]   = "ifnDetalleDETAFAC";
int   iError     = 0;     
int   iRes       = 0;    
long  lCodCliente   ;

    ifnTrazasLog( modulo, "\n\tEn funcion %s", LOG09,modulo);                      
    lCodCliente = lhCodCliente;

    iRes = ifnBuscaClasificacion(lCodCliente);
    if( iRes < 0 ) return -1;        	    

    /* Inicio Requerimiento MIX-09003 - 140082 - 15.07.2010 - MQG*/     
    if (sthDetafac.lEstRegistro [lIndDetafac] == 0) {
       iRes = ifnBuscaMontoDocMora(lCodCliente);
       if( iRes < 0 ) return -1;        	    
    }

    if (sthDetafac.lEstRegistro [lIndDetafac] == 0) {
       iRes = ifnBuscaProducto(lCodCliente);
       if( iRes < 0 ) return -1;        	    
    }
    /* Fin Requerimiento MIX-09003 - 140082 - 15.07.2010 - MQG*/                    	
    
    sthDetafac.lNumRegistr[lIndDetafac] = lIndDetafac;
                       	
    return iError;
  
} /* end ifnDetalleDETAFAC() */

/* ============================================================================= */
/*  ifnDetalleFACTURA : Funcion que busca las facturas en mora del cliente       */
/* ============================================================================= */
int ifnDetalleFACTURA(long lhCodCliente, char *sCodEntidad, long lSecuencia)
{
char    modulo[]   = "ifnDetalleFACTURA";
int     iError     = 0;     

EXEC SQL BEGIN DECLARE SECTION;   
   long   lCodCliente      ;
   long   lhNumFolio       ;
   long   lhNumSecuencia   ;
   double dhSaldoFactura   ;
   char   shFecVence   [11]; EXEC SQL VAR shFecVence    IS STRING(11); /* Requerimiento MIX-09003 - 140082 - 15.07.2010 - MQG*/
   char   shCodEntidad  [6]; EXEC SQL VAR shCodEntidad  IS STRING (6);
EXEC SQL END DECLARE SECTION;                                                 

    ifnTrazasLog( modulo, "\n\tEn funcion %s", LOG09,modulo);                      
    lCodCliente   = lhCodCliente;
    lhNumSecuencia= lSecuencia;
    strcpy(shCodEntidad, sCodEntidad);

    EXEC SQL DECLARE Cur_Fact CURSOR for        
    SELECT NUM_FOLIO, SUM(IMPORTE_DEBE-IMPORTE_HABER), TO_CHAR(MIN(FEC_VENCIMIE) , 'DD-MM-YYYY') /* Requerimiento MIX-09003 - 140082 - 15.07.2010 - MQG*/
      FROM CO_CARTERA 
     WHERE COD_CLIENTE   = :lCodCliente   
       AND IND_FACTURADO = :ihUno
       AND COD_CONCEPTO NOT IN (:ihDos,:ihSeis)
     GROUP BY NUM_FOLIO;   

    if( SQLCODE != SQLOK ) {
        ifnTrazasLog( modulo, "\tDECLARE Cur_Fact - %s", LOG00,SQLERRM );
        return -1;
    }
   
    EXEC SQL OPEN Cur_Fact;
    if( SQLCODE != SQLOK ) {
        ifnTrazasLog( modulo, "\tOPEN Cur_Fact - %s", LOG00,SQLERRM );
        return -1;
    }

	while(1) {

        EXEC SQL FETCH Cur_Fact INTO :lhNumFolio, dhSaldoFactura, shFecVence;            
      
		if( SQLCODE  == SQLNOTFOUND) {
			break; /* No hay mas empresas de cobranzas externa */
		}

        if( SQLCODE != SQLOK && SQLCODE != SQLNOTFOUND )  {
	       ifnTrazasLog( modulo, "en FETCH : %s", LOG00, SQLERRM );
		   break;
	    }	    	    	    	    	 

        ifnTrazasLog( modulo, " lhNumFolio     [%ld]" , LOG09,lhNumFolio);                      
        ifnTrazasLog( modulo, " dhSaldoFactura [%.2f]", LOG09,dhSaldoFactura);                      
        ifnTrazasLog( modulo, " shFecVence     [%s]"  , LOG09,shFecVence);                      
        
        strcpy(sthFactura.sCodAgente[lIndFactura], shCodEntidad);
        strcpy(sthFactura.sFecVencim[lIndFactura], shFecVence);
        sthFactura.lCodCliente  [lIndFactura] = lCodCliente;
        sthFactura.lNumSecuencia[lIndFactura] = lhNumSecuencia;
        sthFactura.dSaldoMora   [lIndFactura] = dhSaldoFactura;
        sthFactura.lNumFolio    [lIndFactura] = lhNumFolio;
        sthFactura.lNumRegistr  [lIndFactura] = lIndFactura;
        sthFactura.lEstRegistro [lIndFactura] = 0; /* Requerimiento MIX-09003 - 140082 - 15.07.2010 - MQG*/     
        lIndFactura = lIndFactura + 1;
        
	} /* endwhile */
	      
	EXEC SQL CLOSE Cur_Fact;
	if( SQLCODE )
	{
		ifnTrazasLog( modulo, "en CLOSE : %s", LOG00, SQLERRM );
		return -1;
	}
                       	
    return iError;
  
} /* end ifnDetalleFACTURA() */

/* ============================================================================= */
/*  ifnDetalleCUENTAS : Funcion que busca las informacion de la cuenta del       */
/* cliente                                                                       */
/* ============================================================================= */
int ifnDetalleCUENTAS(long lhCodCliente)
{
char  modulo[]   = "ifnDetalleCUENTAS";
int   iError     = 0;     
int   iRes       = 0;

EXEC SQL BEGIN DECLARE SECTION;   
   long   lCodCliente          ;      
EXEC SQL END DECLARE SECTION;                                                 

    ifnTrazasLog( modulo, "\n\tEn funcion %s", LOG03,modulo);                      
    lCodCliente = lhCodCliente;

    iRes = ifnBuscaDatosCliente(lCodCliente, lIndCuentas);
    if( iRes < 0 ) return -1;        	    

    /* Inicio Requerimiento MIX-09003 - 140082 - 15.07.2010 - MQG*/     
    if (sthCuentas.lEstRegistro [lIndCuentas] == 0) {
      iRes = ifnVerificaEmpresa(lCodCliente, lIndCuentas);
      if( iRes < 0 ) return -1;        	    
    }   
    
    if (sthCuentas.lEstRegistro [lIndCuentas] == 0) {
      iRes = ifnBuscaDirecciones(lCodCliente, lIndCuentas);
      if( iRes < 0 ) return -1;        	    
    }
    /* Fin Requerimiento MIX-09003 - 140082 - 15.07.2010 - MQG*/     
        
    sthCuentas.lNumRegistr[lIndCuentas] = lIndCuentas;
        
    return iError;
    
} /* end ifnDetalleCUENTAS */

/* ============================================================================= */
/*  ifnDetalleTELEFONOS : Funcion que busca los telefonos del cliente            */
/* ============================================================================= */
int ifnDetalleTELEFONOS(long lCodCliente, char *sCodEntidad, long lSecuencia)
{
char  modulo[] = "ifnDetalleTELEFONOS";
int   iError   = 0;     
int   iRes     = 0;

EXEC SQL BEGIN DECLARE SECTION;   
   long   lhCodCliente         ;
   long   lhNumSecuencia       ;
   long   lhNumCelular         ;   
   char   shProducto        [6]; EXEC SQL VAR shProducto         IS STRING(6);
   /*char   shClasifica  [513]; EXEC SQL VAR shClasifica   IS STRING(513);  Requerimiento MIX-09003 - 140082 - 19.07.2010 - MQG*/      
   char   shCodEntidad      [6]; EXEC SQL VAR shCodEntidad       IS STRING(6);
   char   shDes_Segmento  [101]; EXEC SQL VAR shDes_Segmento     IS STRING(101); /*Requerimiento MIX-09003 - 140082 - 19.07.2010 - MQG*/      
   char   shCod_Calificacion[6]; EXEC SQL VAR shCod_Calificacion IS STRING(6);   /*Requerimiento MIX-09003 - 140082 - 19.07.2010 - MQG*/       
EXEC SQL END DECLARE SECTION;                                                 

    ifnTrazasLog( modulo, "\n\tEn funcion %s", LOG03,modulo); 
    memset(shDes_Segmento    ,'\0',sizeof(shDes_Segmento));
    memset(shCod_Calificacion,'\0',sizeof(shCod_Calificacion));                     
    lhCodCliente   = lCodCliente;
    lhNumSecuencia = lSecuencia ;
    strcpy(shCodEntidad, sCodEntidad);

    EXEC SQL DECLARE Cur_Fono CURSOR for        
    SELECT /*+ RULE */ 
          NUM_CELULAR, 
          NVL(COD_PRESTACION ,'-1')
     FROM GA_ABOCEL 
    WHERE COD_SITUACION NOT IN (:szhBAP, :szhBAA)
      AND COD_CLIENTE = :lhCodCliente;

    if( SQLCODE != SQLOK && SQLCODE != SQLNOTFOUND )  {
        ifnTrazasLog( modulo, "\tDECLARE Cur_Fono - %s", LOG00,SQLERRM );
        return -1;
    }

    /* Inicio Requerimiento MIX-09003 - 140082 - 19.07.2010 - MQG*/         
    EXEC SQL
    SELECT NVL(B.DES_SEGMENTO, :szhSININFORMACION ) 
      INTO :shDes_Segmento
      FROM GE_CLIENTES A,  GE_SEGMENTACION_CLIENTES_TD B
     WHERE A.COD_CLIENTE = :lhCodCliente
       AND A.COD_SEGMENTO= B.COD_SEGMENTO
       AND A.COD_TIPO    = B.COD_TIPO; /* Requerimiento MIX-09003 - 140082 - 22.07.2010 - MQG*/
      
    if( SQLCODE != SQLOK && SQLCODE != SQLNOTFOUND ) {
	   ifnTrazasLog( modulo, "\t En funcion sfnBuscaSegmentoTelefono - %s", LOG00, SQLERRM );
	   return -1;				
    }
    
    if( SQLCODE == SQLNOTFOUND ) {
       strcpy(shDes_Segmento, SIN_INFORMACION);
    }
    
    ifnTrazasLog( modulo, "\t shDes_Segmento - [%s]", LOG09, shDes_Segmento );    	   
          	    
    EXEC SQL
    SELECT NVL(COD_CALIFICACION, :szhSI)
      INTO :shCod_Calificacion
      FROM GE_CLIENTES 
     WHERE COD_CLIENTE = :lhCodCliente;
      
    if( SQLCODE != SQLOK && SQLCODE != SQLNOTFOUND ) { 
      ifnTrazasLog( modulo, "\t En funcion shCod_Calificacion - %s", LOG00, SQLERRM ); 
	  return -1;				
    }
    
    if( SQLCODE == SQLNOTFOUND ) {
       strcpy(shCod_Calificacion, SI);
    }
    
    ifnTrazasLog( modulo, "\t shCod_Calificacion - [%s]", LOG09, shCod_Calificacion );    	   
    /* Fin Requerimiento MIX-09003 - 140082 - 19.07.2010 - MQG*/     
   
    EXEC SQL OPEN Cur_Fono;
    if( SQLCODE != SQLOK ) {
        ifnTrazasLog( modulo, "\tOPEN Cur_Fono - %s", LOG00,SQLERRM );
        return -1;
    }

	while(1) {

        EXEC SQL FETCH Cur_Fono INTO :lhNumCelular, :shProducto;            
      
		if( SQLCODE  == SQLNOTFOUND) {
			break; /* No hay mas empresas de cobranzas externa */
		}

        if( SQLCODE != SQLOK && SQLCODE != SQLNOTFOUND )  {
	       ifnTrazasLog( modulo, "en FETCH : %s", LOG00, SQLERRM );
		   break;
	    }	    	    	    	    	 

        sthTelefono.lCodCliente  [lIndTelefon] = lhCodCliente;    
        sthTelefono.lNumSecuencia[lIndTelefon] = lhNumSecuencia;    
        sthTelefono.lNumCelular  [lIndTelefon] = lhNumCelular;

        strcpy(sthTelefono.sCodAgente    [lIndTelefon], shCodEntidad);
        /* Inicio Requerimiento MIX-09003 - 140082 - 19.07.2010 - MQG*/     
        /* strcpy(sthTelefono.sDesSegment   [lIndTelefon], sthCuentas.sDesSegment   [lIndCuentas]);
        strcpy(sthTelefono.sClasificacion[lIndTelefon], sthCuentas.sClasificacion[lIndCuentas]); */
        strcpy(sthTelefono.sDesSegment   [lIndTelefon], shDes_Segmento);
        strcpy(sthTelefono.sCalificacion [lIndTelefon], shCod_Calificacion); 
        /* Fin Requerimiento MIX-09003 - 140082 - 19.07.2010 - MQG*/     

        sthTelefono.lNumRegistr [lIndTelefon] = lIndTelefon;
        sthTelefono.lEstRegistro[lIndTelefon] = 0; /* Requerimiento MIX-09003 - 140082 - 19.07.2010 - MQG*/     
                        
        ifnTrazasLog( modulo, " lCodCliente     [%ld]", LOG09,lhCodCliente);                          
        ifnTrazasLog( modulo, " lNumCelular     [%ld]", LOG09,lhNumCelular);                      
        ifnTrazasLog( modulo, " sCodAgente      [%s]", LOG09,shCodEntidad);                      
        /* Inicio Requerimiento MIX-09003 - 140082 - 19.07.2010 - MQG*/     
        /*ifnTrazasLog( modulo, " sDesSegment     [%s]", LOG09,sthCuentas.sDesSegment    [lIndCuentas]);                      
        ifnTrazasLog( modulo, " sClasificacion  [%s]", LOG09,sthCuentas.sClasificacion [lIndCuentas]); */                                     
        ifnTrazasLog( modulo, " sDesSegment     [%s]", LOG09,sthTelefono.sDesSegment    [lIndTelefon]);                      
        ifnTrazasLog( modulo, " sCalificacion   [%s]", LOG09,sthTelefono.sCalificacion  [lIndTelefon]);                                     
        /* Fin Requerimiento MIX-09003 - 140082 - 19.07.2010 - MQG*/     

        iRes = ifnBBuscaProducto(shProducto, lIndTelefon);
        if( iRes < 0 ) return -1;        	    
        
        lIndTelefon = lIndTelefon + 1;
        
	} /* endwhile */
	      
	EXEC SQL CLOSE Cur_Fono;
	if( SQLCODE )
	{
		ifnTrazasLog( modulo, "en CLOSE : %s", LOG00, SQLERRM );
		return -1;
	}
                       	
    return iError;
  
} /* end ifnDetalleTELEFONOS() */

/* ============================================================================= */
/*  ifnBBuscaProducto() : Funcion que busca descripcion del producto             */
/* ============================================================================= */
int ifnBBuscaProducto(char *sCodProducto, long j)
{
char modulo[]="ifnBBuscaProducto";
	
EXEC SQL BEGIN DECLARE SECTION;                                               
  char   shCodProducto   [6]; EXEC SQL VAR shCodProducto IS STRING(6);      
  char   shDesProducto  [51]; EXEC SQL VAR shDesProducto IS STRING(51);      
EXEC SQL END DECLARE SECTION;                                                 
	
   strcpy(shCodProducto, sCodProducto);

   ifnTrazasLog( modulo, "\n\t En funcion %s", LOG09, modulo );
   ifnTrazasLog( modulo, " shCodProducto  [%s]", LOG09, shCodProducto );
                                                                
   EXEC SQL
   SELECT DES_PRESTACION
     INTO :shDesProducto
     FROM GE_PRESTACIONES_TD
    WHERE COD_PRESTACION = :shCodProducto;
       
   if( SQLCODE != SQLOK && SQLCODE != SQLNOTFOUND ) {
	  ifnTrazasLog( modulo, "\t En funcion ifnBBuscaProducto - %s", LOG00, SQLERRM );
	  return -1;				
    }
    
   if( SQLCODE == SQLNOTFOUND ) {
       strcpy(shDesProducto, SIN_INFORMACION);
   }
    
   ifnTrazasLog( modulo, " shDesProducto - [%s]", LOG09, shDesProducto );    	   
   strcpy(sthTelefono.sDesProducto[j], shDesProducto);
   
   return 0;	
   
} /* end ifnBBuscaProducto */

/* ============================================================================= */
/*  ifnDetalleTELESCUENTA : Funcion que busca los servicios del cliente          */
/* ============================================================================= */
int ifnDetalleTELESCUENTA(long lhCodCliente, char *sCodEntidad, long lSecuencia)
{
char    modulo[]   = "ifnDetalleTELESCUENTA";
int     iError     = 0;     

EXEC SQL BEGIN DECLARE SECTION;   
   long   lCodCliente        ;
   long   lCodCliente1       ;
   char   shCodEntidad    [6]; EXEC SQL VAR shCodEntidad  IS STRING(6);
   char   shDesProducto [513]; EXEC SQL VAR shDesProducto IS STRING(513);   
   long   lhNumSecuencia     ;
EXEC SQL END DECLARE SECTION;                                                 

    ifnTrazasLog( modulo, "\n\tEn funcion %s", LOG03,modulo);                      
    lCodCliente    = lhCodCliente;
    lhNumSecuencia = lSecuencia;
    strcpy(shCodEntidad, sCodEntidad);

    EXEC SQL DECLARE Cur_TCta CURSOR for        
    SELECT A.COD_CLIENTE, C.DES_VALOR 
      FROM GA_ABOCEL A, GE_PRESTACIONES_TD B,
         (SELECT COD_VALOR, DES_VALOR FROM GED_CODIGOS
           WHERE NOM_TABLA   = :szGPRESTACIONES
           AND   NOM_COLUMNA = :szPRESTACION
           AND   COD_MODULO  = :szhGA) C
    WHERE A.COD_PRESTACION = B.COD_PRESTACION
      AND B.GRP_PRESTACION = C.COD_VALOR
      AND A.COD_CLIENTE    = :lCodCliente;

    if( SQLCODE != SQLOK ) {
        ifnTrazasLog( modulo, "\tDECLARE Cur_TCta - %s", LOG00,SQLERRM );
        return -1;
    }
   
    EXEC SQL OPEN Cur_TCta;
    if( SQLCODE != SQLOK ) {
        ifnTrazasLog( modulo, "\tOPEN Cur_Fono - %s", LOG00,SQLERRM );
        return -1;
    }

	while(1) {

        EXEC SQL FETCH Cur_TCta INTO :lCodCliente1, :shDesProducto;            
      
		if( SQLCODE  == SQLNOTFOUND) {
			break; /* No hay mas empresas de cobranzas externa */
		}

        if( SQLCODE != SQLOK && SQLCODE != SQLNOTFOUND )  {
	       ifnTrazasLog( modulo, "en FETCH : %s", LOG00, SQLERRM );
		   break;
	    }	    	    	    	    	 

        sthTCuentas.lCodCliente  [lIndTeleCta] = lCodCliente1;        
        sthTCuentas.lNumSecuencia[lIndTeleCta] = lhNumSecuencia;        

        strcpy(sthTCuentas.sCodAgente    [lIndTeleCta], shCodEntidad);
        strcpy(sthTCuentas.sDesProducto  [lIndTeleCta], shDesProducto);
        sthTCuentas.lNumRegistr [lIndTeleCta] = lIndTeleCta;        
        sthTCuentas.lEstRegistro[lIndTeleCta] = 0;      /* Requerimiento MIX-09003 - 140082 - 19.07.2010 - MQG*/     
        
        lIndTeleCta = lIndTeleCta + 1;
        
        ifnTrazasLog( modulo, " shDesProducto [%s]", LOG09,shDesProducto);                      
        
        
	} /* endwhile */
	      
	EXEC SQL CLOSE Cur_TCta;
	if( SQLCODE )
	{
		ifnTrazasLog( modulo, "en CLOSE : %s", LOG00, SQLERRM );
		return -1;
	}
                       	
    return iError;
  
} /* end ifnDetalleTELESCUENTA() */

/* ============================================================================= */
/*  ifnBuscaDatosCliente : Funcion que busca datos generales del cliente         */
/* ============================================================================= */
int ifnBuscaDatosCliente(long lhCodCliente, long j)
{
char  modulo[]   = "ifnBuscaDatosCliente";
int   iError     = 0;     
int   iRes       = 0;
int   iValido    = 0; /* Requerimiento MIX-09003 - 140082 - 15.07.2010 - MQG */

EXEC SQL BEGIN DECLARE SECTION;   
   long   lCodCliente     ;
   char   shEstado          [7]; EXEC SQL VAR shEstado         IS STRING(7);
   char   shApellido1      [42]; EXEC SQL VAR shApellido1      IS STRING(42);
   char   shApellido2      [42]; EXEC SQL VAR shApellido2      IS STRING(42);
   char   shApellidos      [42]; EXEC SQL VAR shApellidos      IS STRING(42);
   char   shNombres        [52]; EXEC SQL VAR shNombres        IS STRING(52);
   char   shNumIdent       [21]; EXEC SQL VAR shNumIdent       IS STRING(21);   
   char   shTipDoc         [21]; EXEC SQL VAR shTipDoc         IS STRING(21);
   char   shNumDoc         [21]; EXEC SQL VAR shNumDoc         IS STRING(21);   
   char   shTelCliente     [16]; EXEC SQL VAR shTelCliente     IS STRING(16);   
   char   shTelCliente1    [16]; EXEC SQL VAR shTelCliente1    IS STRING(16);/* Requerimiento MIX-09003 - 140082 - 15.07.2010 - MQG*/   
   char   shTelCliente2    [16]; EXEC SQL VAR shTelCliente2    IS STRING(16);/* Requerimiento MIX-09003 - 140082 - 15.07.2010 - MQG*/   
   char   shNomRefer1      [51]; EXEC SQL VAR shNomRefer1      IS STRING(51);   
   char   shTelRefer1      [16]; EXEC SQL VAR shTelRefer1      IS STRING(16);   
   char   shTelRefer2      [16]; EXEC SQL VAR shTelRefer2      IS STRING(16);   
   char   shCodOcupacion    [4]; EXEC SQL VAR shCodOcupacion   IS STRING(4);   
   char   shEdad            [3]; EXEC SQL VAR shEdad           IS STRING(4);   
   char   shCodColor        [6]; EXEC SQL VAR shCodColor       IS STRING(6);/* Requerimiento MIX-09003 - 140082 - 19.07.2010 - MQG*/      
   /* int    ihCodSegmento        ; Requerimiento MIX-09003 - 140082 - 15.07.2010 - MQG*/
   char    shCodCategoria       ;
EXEC SQL END DECLARE SECTION;                                                 

    ifnTrazasLog( modulo, "\n\tEn funcion %s", LOG09,modulo);                      
    lCodCliente = lhCodCliente;

    EXEC SQL      
    SELECT DECODE(A.FEC_BAJA, NULL, :szhACTIVO, :szhBAJA )                   AS ESTADO    , 
           NVL(A.NOM_APECLIEN1, :szhSININFORMACION)                          AS APELLIDOS1, 
           NVL(A.NOM_APECLIEN2, :szhSININFORMACION)                          AS APELLIDOS2, 
           NVL(A.NOM_CLIENTE  , :szhSININFORMACION)                          AS NOMBRES   , 
           NVL(A.NUM_IDENT    , :szhSININFORMACION)                          AS NIT       , 
           /*B.DES_TIPIDENT                                                    AS TIPO_DOCUMENTO,Requerimiento MIX-09003 - 140082 - 15.07.2010 - MQG*/ 
           /*A.NUM_IDENT                                                       AS NUM_DOCUMENTO,   Requerimiento MIX-09003 - 140082 - 15.07.2010 - MQG*/
           NVL(A.TEF_CLIENTE1 , :szhSININFORMACION)                          AS TEL_CLIENTE1, /* Requerimiento MIX-09003 - 140082 - 15.07.2010 - MQG*/
           NVL(A.TEF_CLIENTE2 , :szhSININFORMACION)                          AS TEL_CLIENTE2, /* Requerimiento MIX-09003 - 140082 - 15.07.2010 - MQG*/
           NVL(A.NOM_REFER1   , :szhSININFORMACION)                          AS NOM_REFER1,
           NVL(A.TEF_REFER1   , :szhSININFORMACION)                          AS TEL_REFER1,
           NVL(A.TEF_REFER2   , :szhSININFORMACION)                          AS TEL_REFER2, 
           /*NVL(A.COD_SEGMENTO , 0)                                           AS COD_SEGMENTO, Requerimiento MIX-09003 - 140082 - 15.07.2010 - MQG*/
           /*A.COD_CATEGORIA                                                   AS CATEGORIA ,   Requerimiento MIX-09003 - 190082 - 15.07.2010 - MQG*/
           NVL(A.COD_COLOR    , '-1')                                        AS COLOR     ,  /* Requerimiento MIX-09003 - 190082 - 19.07.2010 - MQG*/
           NVL(A.COD_OCUPACION, '-1')                                        AS OCUPACION , 
           /*NVL(TO_CHAR(sysdate,:szhYYYY) - TO_CHAR(FEC_NACIMIEN,:szhYYYY), '-1') AS EDAD */  
           DECODE(FEC_NACIMIEN, NULL, '-1', NVL(TO_CHAR(sysdate,'YYYY') - TO_CHAR(FEC_NACIMIEN,'YYYY'), '-1')) AS EDAD /* Requerimiento MIX-09003 - 190082 - 20.07.2010 - MQG*/      
      INTO :shEstado      ,  
           :shApellido1   , 
           :shApellido2   , 
           :shNombres     , 
           :shNumIdent    , 
           /* :shTipDoc      , Requerimiento MIX-09003 - 140082 - 15.07.2010 - MQG*/ 
           /* :shNumDoc      , Requerimiento MIX-09003 - 140082 - 15.07.2010 - MQG*/ 
           :shTelCliente1 , 
           :shTelCliente2 , 
           :shNomRefer1   , 
           :shTelRefer1   , 
           :shTelRefer2   , 
           /*:ihCodSegmento , Requerimiento MIX-09003 - 140082 - 15.07.2010 - MQG*/
           /*:ihCodCategoria, Requerimiento MIX-09003 - 140082 - 19.07.2010 - MQG*/ 
           :shCodColor    , /* Requerimiento MIX-09003 - 140082 - 19.07.2010 - MQG*/ 
           :shCodOcupacion, 
           :shEdad
      FROM GE_CLIENTES A /*, GE_TIPIDENT B     Requerimiento MIX-09003 - 190082 - 19.07.2010 - MQG*/
     WHERE A.COD_CLIENTE  = :lCodCliente;
       /*AND A.COD_TIPIDENT = B.COD_TIPIDENT;  Requerimiento MIX-09003 - 190082 - 19.07.2010 - MQG*/
                                          
    if( SQLCODE != SQLOK && SQLCODE != SQLNOTFOUND ) {
	   /*ifnTrazasLog( modulo, "\t En funcion %s - %s", LOG00, modulo, SQLERRM );*/
       /*return -1;	*/
       sthCuentas.lEstRegistro [j] = 1;
       iValido = 1;
       ifnTrazasLog( modulo, "\t INVALIDO - Cliente con error - %ld", LOG03, lCodCliente );        	
    }

    /* Inicio Requerimiento MIX-09003 - 140082 - 15.07.2010 - MQG*/
    if( SQLCODE == SQLNOTFOUND ) {
       ifnTrazasLog( modulo, "\t INVALIDO - Cliente no existe - %ld", LOG03, lCodCliente );        	
        sthCuentas.lEstRegistro [j] = 1;
        iValido = 1;
    }
    /* Fin Requerimiento MIX-09003 - 140082 - 15.07.2010 - MQG*/

    if (iValido == 0) {
        strcpy(sthCuentas.sEstado       [j], shEstado);
        strcpy(sthCuentas.sEstatus      [j], shEstado);
        
        sprintf(shApellidos,"%s %s",shApellido1,shApellido2);
        
        strcpy(sthCuentas.sApellidos    [j], shApellidos);
        strcpy(sthCuentas.sNombreClie   [j], shNombres);
        strcpy(sthCuentas.sNIT          [j], shNumIdent);
        
        /* Inicio Requerimiento MIX-09003 - 140082 - 15.07.2010 - MQG*/        
        /*strcpy(sthCuentas.sTipDocumento [j], shTipDoc);  Requerimiento MIX-09003 - 140082 - 19.07.2010 - MQG*/
        /*strcpy(sthCuentas.sNumDocumento [j], shNumDoc);  Requerimiento MIX-09003 - 140082 - 19.07.2010 - MQG*/
        iRes = ifnBBuscaNumDocumento(lCodCliente,j); 
        if (iRes < -1) return -1;        
        /* Fin Requerimiento MIX-09003 - 140082 - 15.07.2010 - MQG*/        
        
        strcpy(sthCuentas.sEdad         [j], shEdad);

        /* Inicio Requerimiento MIX-09003 - 140082 - 15.07.2010 - MQG*/        
        if  (strcmp(shTelCliente1,szhSININFORMACION)== 0) {
             strcpy(shTelCliente, shTelCliente2);        	
        } else {
             strcpy(shTelCliente, shTelCliente1);        	
        }
        /* Fin Requerimiento MIX-09003 - 140082 - 15.07.2010 - MQG*/        
        
        strcpy(sthCuentas.sTelTitular   [j], shTelCliente);
        strcpy(sthCuentas.sNomRefere1   [j], shNomRefer1);
        strcpy(sthCuentas.sTelRefere1   [j], shTelRefer1);
        strcpy(sthCuentas.sTelRefere2   [j], shTelRefer2);
        strcpy(sthCuentas.sColor        [j], shCodColor); /* Requerimiento MIX-09003 - 190082 - 15.07.2010 - MQG*/
            
        /* sthCuentas.iCodSegment  [j] = ihCodSegmento; Requerimiento MIX-09003 - 140082 - 15.07.2010 - MQG*/
        
        ifnTrazasLog( modulo, " shEstado      [%s]", LOG09,shEstado);                      
        ifnTrazasLog( modulo, " shApellidos   [%s]", LOG09,shApellidos);                      
        ifnTrazasLog( modulo, " shNombres     [%s]", LOG09,shNombres);                      
        ifnTrazasLog( modulo, " shNumIdent    [%s]", LOG09,shNumIdent);                      
        ifnTrazasLog( modulo, " shTipDoc      [%s]", LOG09,shTipDoc);   
        ifnTrazasLog( modulo, " shNumDoc      [%s]", LOG09,shNumDoc);   
        ifnTrazasLog( modulo, " sEdad         [%s]", LOG09,shEdad);                      
        ifnTrazasLog( modulo, " shTelCliente  [%s]", LOG09,shTelCliente);                      
        ifnTrazasLog( modulo, " shNomRefer1   [%s]", LOG09,shNomRefer1);                      
        ifnTrazasLog( modulo, " shTelRefer1   [%s]", LOG09,shTelRefer1);                      
        ifnTrazasLog( modulo, " shTelRefer2   [%s]", LOG09,shTelRefer2);                      
        ifnTrazasLog( modulo, " shCodColor    [%s]", LOG09,shCodColor);  /* Requerimiento MIX-09003 - 190082 - 19.07.2010 - MQG*/                    
                            
        /*ifnTrazasLog( modulo, " ihCodSegmento [%d]", LOG09,ihCodSegmento); Requerimiento MIX-09003 - 140082 - 15.07.2010 - MQG*/                         
        /* iRes = ifnBBuscaSegmento(ihCodSegmento,j); Requerimiento MIX-09003 - 140082 - 15.07.2010 - MQG*/
        iRes = ifnBBuscaSegmento(lCodCliente,j); 
        if (iRes < -1) return -1;
        
        /* Inicio Requerimiento MIX-09003 - 190082 - 19.07.2010 - MQG*/
        /*ifnTrazasLog( modulo, " ihCodCategoria[%d]", LOG09,ihCodCategoria);          
        iRes = ifnBBuscaClasificacion(ihCodCategoria,j);*/
        ifnTrazasLog( modulo, " shCodColor[%s]", LOG09,shCodColor);       
        iRes = ifnBBuscaColor(shCodColor,j);      
        if (iRes < -1) return -1;
        /* Fin Requerimiento MIX-09003 - 190082 - 19.07.2010 - MQG*/
        
        ifnTrazasLog( modulo, " shCodOcupacion[%s]", LOG09,shCodOcupacion);       
        iRes = ifnBBuscaOcupacion(shCodOcupacion,j);
        if (iRes < -1) return -1;

	} /* end if (iValido == 0) */

    return iError;
  
} /* end ifnBuscaDatosCliente() */

/* ============================================================================= */
/*  ifnBBuscaOcupacion() : Funcion que busca ocupacion del cliente               */
/* ============================================================================= */
int ifnBBuscaOcupacion(char *sCodOcupacion, long j)
{
char modulo[]="ifnBBuscaOcupacion";
	
EXEC SQL BEGIN DECLARE SECTION;                                               
  char   shCodOcupacion   [4]; EXEC SQL VAR shCodOcupacion    IS STRING(4);      
  char   shDesOcupacion  [31]; EXEC SQL VAR shDesOcupacion    IS STRING(31);      
EXEC SQL END DECLARE SECTION;                                                 
	
   strcpy(shCodOcupacion, sCodOcupacion);

   ifnTrazasLog( modulo, "\n\t En funcion %s", LOG09, modulo );
   ifnTrazasLog( modulo, " shCodOcupacion  [%s]", LOG09, shCodOcupacion );
                                                                
   EXEC SQL
     SELECT DES_OCUPACION
       INTO :shDesOcupacion
       FROM GE_OCUPACIONES
      WHERE COD_OCUPACION = :shCodOcupacion;
    
   if( SQLCODE != SQLOK && SQLCODE != SQLNOTFOUND ) {
	  ifnTrazasLog( modulo, "\t En funcion ifnBBuscaOcupacion - %s", LOG00, SQLERRM );
	  return -1;				
    }
    
   if( SQLCODE == SQLNOTFOUND ) {
       strcpy(shDesOcupacion, SIN_INFORMACION);
   }
    
   ifnTrazasLog( modulo, "\t shDesOcupacion - [%s]", LOG09, shDesOcupacion );    	   
   strcpy(sthCuentas.sOcupacion[j], shDesOcupacion);
   
   return 0;	
   
} /* end ifnBBuscaOcupacion */

/* Inicio Requerimiento MIX-09003 - 190082 - 19.07.2010 - MQG*/
/* ============================================================================= */
/*  ifnBBuscaClasificacion() : Funcion que busca clasificacion del cliente       */
/* ============================================================================= */
/*int ifnBBuscaClasificacion(int iCodCategoria, long j)
{
char modulo[]="ifnBBuscaClasificacion";
	
EXEC SQL BEGIN DECLARE SECTION;                                               
  int    ihCodCategoria       ;    
  char   shDesClasific   [513]; EXEC SQL VAR shDesClasific    IS STRING(513);      
EXEC SQL END DECLARE SECTION;                                                 
	
   ihCodCategoria = iCodCategoria;

   ifnTrazasLog( modulo, "\n\t En funcion %s", LOG09, modulo );
   ifnTrazasLog( modulo, " ihCodCategoria  [%d]", LOG09, ihCodCategoria );
                                                                
   EXEC SQL
   SELECT DES_VALOR 
     INTO :shDesClasific
     FROM GED_CODIGOS 
    WHERE NOM_TABLA   = 'GE_CATEGORIAS' 
      AND NOM_COLUMNA = 'COD_CATEGORIA' 
      AND COD_MODULO  = 'GA'
      AND COD_VALOR   = :ihCodCategoria;

   if( SQLCODE != SQLOK && SQLCODE != SQLNOTFOUND ) {
	  ifnTrazasLog( modulo, "\t En funcion ifnBBuscaClasificacion - %s", LOG00, SQLERRM );
	  return -1;				
    }
    
   if( SQLCODE == SQLNOTFOUND ) {
       strcpy(shDesClasific, SIN_INFORMACION);
   }
    
   ifnTrazasLog( modulo, "\t shDesClasific - [%s]", LOG09, shDesClasific );    	   
   strcpy(sthCuentas.sClasificacion[j], shDesClasific);
   
   return 0;	
   
} *//* end ifnBBuscaClasificacion */

/* ============================================================================= */
/*  ifnBBuscaColor() : Funcion que busca descripcion del color                   */
/* ============================================================================= */
int ifnBBuscaColor(char *sCodColor, long j)
{
char modulo[]="ifnBBuscaColor";
	
EXEC SQL BEGIN DECLARE SECTION;                                               
  char   shCodColor     [6]; EXEC SQL VAR shCodColor    IS STRING (6);         
  char   shDesColor    [31]; EXEC SQL VAR shDesColor    IS STRING(31);      
EXEC SQL END DECLARE SECTION;                                                 
	
   strcpy(shCodColor, sCodColor);

   ifnTrazasLog( modulo, "\n\t En funcion %s", LOG09, modulo );
   ifnTrazasLog( modulo, " shCodColor  [%s]", LOG09, shCodColor );
                                                                
   EXEC SQL
   SELECT DES_COLOR 
     INTO :shDesColor
     FROM GE_COLOR_TD 
    WHERE COD_COLOR   = :shCodColor;

   if( SQLCODE != SQLOK && SQLCODE != SQLNOTFOUND ) {
	  ifnTrazasLog( modulo, "\t En funcion ifnBBuscaColor - %s", LOG00, SQLERRM );
	  return -1;				
    }
    
   if( SQLCODE == SQLNOTFOUND ) {
       strcpy(shDesColor, SIN_INFORMACION);
   }
    
   ifnTrazasLog( modulo, "\t shDesColor - [%s]", LOG09, shDesColor );    	   
   strcpy(sthCuentas.sDesColor[j], shDesColor);
   
   return 0;	
   
} /* end ifnBBuscaColor */
/* Fin Requerimiento MIX-09003 - 190082 - 19.07.2010 - MQG*/

/* ============================================================================= */
/*  ifnBBuscaSegmento() : Funcion que busca segmento del cliente                 */
/* ============================================================================= */
/* Inicio Requerimiento MIX-09003 - 140082 - 15.07.2010 - MQG*/     
/* int ifnBBuscaSegmento(int iCodSegmento, long j)*/     
int ifnBBuscaSegmento(long lCodCliente, long j)
{
char modulo[]="ifnBBuscaSegmento";
	
EXEC SQL BEGIN DECLARE SECTION;                                               
/*  int    ihCod_Segmento     ; */                                                                      
  char   shDes_Segmento[101]; EXEC SQL VAR shDes_Segmento IS STRING(101);
  long   lhCod_Cliente; 
EXEC SQL END DECLARE SECTION;                                                 
	
   /*ihCod_Segmento = iCodSegmento;*/
   lhCod_Cliente = lCodCliente;

   ifnTrazasLog( modulo, "\n\t En funcion %s", LOG09, modulo );
   /*ifnTrazasLog( modulo, " ihCod_Segmento  [%d]", LOG09, ihCod_Segmento );*/
   ifnTrazasLog( modulo, " lhCod_Cliente  [%ld]", LOG09, lhCod_Cliente );

   /*EXEC SQL
   SELECT DES_SEGMENTO
     INTO :shDes_Segmento
     FROM GE_SEGMENTACION_CLIENTES_TD 
    WHERE COD_SEGMENTO = :ihCod_Segmento;*/
    
   EXEC SQL
   SELECT COD_CATEGORIA
     INTO :shDes_Segmento
     FROM CO_MOROSOS  
    WHERE COD_CLIENTE = :lhCod_Cliente;
    
   if( SQLCODE != SQLOK && SQLCODE != SQLNOTFOUND ) {
	  ifnTrazasLog( modulo, "\t En funcion ifnBBuscaSegmento - %s", LOG00, SQLERRM );
	  return -1;				
    }
    
   if( SQLCODE == SQLNOTFOUND ) {
       strcpy(shDes_Segmento, SIN_INFORMACION);
   }
    
   ifnTrazasLog( modulo, "\t shDes_Segmento - [%s]", LOG09, shDes_Segmento );    	   
   strcpy(sthCuentas.sDesSegment [j], shDes_Segmento);
   
   return 0;	
   
} /* end ifnBBuscaSegmento */

/* ============================================================================= */
/*  sfnBuscaSegmentoTelefono() : Funcion que busca descripcion del segmento      */
/* ============================================================================= */
char* sfnBuscaSegmentoTelefono(long lCodCliente)
{
char modulo[]="sfnBuscaSegmentoTelefono";
	
EXEC SQL BEGIN DECLARE SECTION;                                               
  char   shDes_Segmento[101]; EXEC SQL VAR shDes_Segmento IS STRING(101);
  long   lhCod_Cliente; 
EXEC SQL END DECLARE SECTION;                                                 
	
   lhCod_Cliente = lCodCliente;

   ifnTrazasLog( modulo, "\n\t En funcion %s", LOG09, modulo );
   ifnTrazasLog( modulo, " lhCod_Cliente  [%ld]", LOG09, lhCod_Cliente );

   EXEC SQL
   SELECT NVL(B.DES_SEGMENTO, :szhSININFORMACION ) 
     INTO :shDes_Segmento
     FROM GE_CLIENTES A,  GE_SEGMENTACION_CLIENTES_TD B
    WHERE A.COD_CLIENTE = :lhCod_Cliente
      AND A.COD_SEGMENTO= B.COD_SEGMENTO
      AND A.COD_TIPO    = B.COD_TIPO; /* Requerimiento MIX-09003 - 140082 - 22.07.2010 - MQG*/
     
   if( SQLCODE != SQLOK && SQLCODE != SQLNOTFOUND ) {
	  ifnTrazasLog( modulo, "\t En funcion sfnBuscaSegmentoTelefono - %s", LOG00, SQLERRM );
	  return "-1";				
    }
    
   if( SQLCODE == SQLNOTFOUND ) {
       strcpy(shDes_Segmento, SIN_INFORMACION);
   }
    
   ifnTrazasLog( modulo, "\t shDes_Segmento - [%s]", LOG09, shDes_Segmento );    	   
   
   return(shDes_Segmento);	
   
} /* end sfnBuscaSegmentoTelefono */

/* ============================================================================= */
/*  sfnBuscaCalificacionTelefono() : Funcion que busca la calificacion           */
/* ============================================================================= */
char* sfnBuscaCalificacionTelefono(long lCodCliente)
{
char modulo[]="sfnBuscaCalificacionTelefono";
	
EXEC SQL BEGIN DECLARE SECTION;                                               
  char   shCod_Calificacion[6]; EXEC SQL VAR shCod_Calificacion IS STRING(6);
  long   lhCod_Cliente; 
EXEC SQL END DECLARE SECTION;                                                 
	
   lhCod_Cliente = lCodCliente;

   ifnTrazasLog( modulo, "\n\t En funcion %s", LOG09, modulo );
   ifnTrazasLog( modulo, " lhCod_Cliente  [%ld]", LOG09, lhCod_Cliente );

   EXEC SQL
   SELECT NVL(COD_CALIFICACION, :szhSI)
     INTO :shCod_Calificacion
     FROM GE_CLIENTES 
    WHERE COD_CLIENTE = :lhCod_Cliente;
      
   if( SQLCODE != SQLOK && SQLCODE != SQLNOTFOUND ) {
	  ifnTrazasLog( modulo, "\t En funcion shCod_Calificacion - %s", LOG00, SQLERRM );
	  return "-1";				
    }
    
   if( SQLCODE == SQLNOTFOUND ) {
       strcpy(shCod_Calificacion, SI);
   }
    
   ifnTrazasLog( modulo, "\t shCod_Calificacion - [%s]", LOG09, shCod_Calificacion );    	   
   
   return(shCod_Calificacion);	
   
} /* end sfnBuscaCalificacionTelefono */
/* Fin Requerimiento MIX-09003 - 140082 - 15.07.2010 - MQG*/     

/* ============================================================================= */
/*  ifnVerificaEmpresa : Funcion que verifica si cliente corresponde a empresa   */
/* ============================================================================= */
int ifnVerificaEmpresa(long lhCodCliente, long j)
{
char  modulo[]   = "ifnVerificaEmpresa";
int   iError     = 0;  
int   iValido    = 0; /* Requerimiento MIX-09003 - 140082 - 15.07.2010 - MQG*/

EXEC SQL BEGIN DECLARE SECTION;   
   long   lCodCliente     ;
   char   shNomEmpresa     [52]; EXEC SQL VAR shNomEmpresa     IS STRING(52);
   char   shTipDoc         [21]; EXEC SQL VAR shTipDoc         IS STRING(21);
   char   shNumDoc         [21]; EXEC SQL VAR shNumDoc         IS STRING(21);      
EXEC SQL END DECLARE SECTION;                                                 

    ifnTrazasLog( modulo, "\n\tEn funcion %s", LOG03,modulo);                      
    lCodCliente = lhCodCliente;

    EXEC SQL      
    SELECT DES_EMPRESA
      INTO :shNomEmpresa
      FROM GA_EMPRESA
     WHERE COD_CLIENTE = :lCodCliente
       AND ROWNUM < 2;  /* Requerimiento MIX-09003 - 140082 - 23.07.2010 - MQG*/
                     
    if( SQLCODE != SQLOK && SQLCODE != SQLNOTFOUND ) {
	   ifnTrazasLog( modulo, "\t En funcion %s (1) - %s", LOG00, modulo, SQLERRM );
       return -1;				
    }

    if( SQLCODE == SQLNOTFOUND ) {
        strcpy(sthCuentas.sNombreEmpr [j], SIN_INFORMACION);            	
    } else  {

        /* Inicio Requerimiento MIX-09003 - 140082 - 15.07.2010 - MQG*/     
        /*EXEC SQL      
    	SELECT B.DES_TIPIDENT    AS TIPO_DOCUMENTO, 
               A.NUM_IDENTAPOR   AS NUM_DOCUMENTO 
          INTO :shTipDoc   , 
               :shNumDoc    
          FROM GE_CLIENTES A, GE_TIPIDENT B
         WHERE A.COD_CLIENTE      = :lCodCliente
           AND A.COD_TIPIDENTAPOR = B.COD_TIPIDENT;*/

        EXEC SQL      
    	SELECT NVL(B.DES_TIPIDENT, :szhSININFORMACION)   AS TIPO_DOCUMENTO, 
               NVL(A.NUM_IDENT2  , :szhSININFORMACION)   AS NUM_DOCUMENTO 
          INTO :shTipDoc   , 
               :shNumDoc    
          FROM GE_CLIENTES A, GE_TIPIDENT B
         WHERE A.COD_CLIENTE   = :lCodCliente
           AND A.COD_TIPIDENT2 = B.COD_TIPIDENT;

        /* Fin Requerimiento MIX-09003 - 140082 - 15.07.2010 - MQG*/         	

        if( SQLCODE != SQLOK && SQLCODE != SQLNOTFOUND ) {
	       ifnTrazasLog( modulo, "\t En funcion %s (2) - %s", LOG00, modulo, SQLERRM );
           return -1;				
        }

        /* Inicio Requerimiento MIX-09003 - 140082 - 21.07.2010 - MQG*/
        if( SQLCODE == SQLNOTFOUND ) {
            iValido = 1;
            strcpy(sthCuentas.sTipDocumento[j], SIN_INFORMACION);
            strcpy(sthCuentas.sNumDocumento[j], SIN_INFORMACION);   
        }
        /* Fin Requerimiento MIX-09003 - 140082 - 15.07.2010 - MQG*/

        if( iValido == 0 ) {
           strcpy(sthCuentas.sNombreEmpr  [j], shNomEmpresa);             
           strcpy(sthCuentas.sTipDocumento[j], shTipDoc);
           strcpy(sthCuentas.sNumDocumento[j], shNumDoc);   
           strcpy(sthCuentas.sApellidos   [j], SIN_INFORMACION);
           strcpy(sthCuentas.sNombreClie  [j], SIN_INFORMACION);
    	}	    	        
    } 
      
    ifnTrazasLog( modulo, " shNomEmpresa  [%s]", LOG03,sthCuentas.sNombreEmpr  [j]);                      
    ifnTrazasLog( modulo, " sTipDocumento [%s]", LOG03,sthCuentas.sTipDocumento[j]);                      
    ifnTrazasLog( modulo, " sNumDocumento [%s]", LOG03,sthCuentas.sNumDocumento[j]);                      
      
    return iError;
  
} /* end ifnVerificaEmpresa() */

/* Inicio Requerimiento MIX-09003 - 140082 - 19.07.2010 - MQG*/
/* ============================================================================= */
/*  ifnBBuscaNumDocumento :                                                      */
/* ============================================================================= */
int ifnBBuscaNumDocumento(long lhCodCliente, long j)
{
char  modulo[]   = "ifnBBuscaNumDocumento";
int   iError     = 0;  
int   iValido    = 0; 

EXEC SQL BEGIN DECLARE SECTION;   
   long   lCodCliente     ;
   char   shTipDoc    [21]; EXEC SQL VAR shTipDoc         IS STRING(21);
   char   shNumDoc    [21]; EXEC SQL VAR shNumDoc         IS STRING(21);      
EXEC SQL END DECLARE SECTION;                                                 

    ifnTrazasLog( modulo, "\n\tEn funcion %s", LOG03,modulo);                      
    lCodCliente = lhCodCliente;

    EXEC SQL      
   	SELECT NVL(B.DES_TIPIDENT, :szhSININFORMACION)   AS TIPO_DOCUMENTO, 
           NVL(A.NUM_IDENT2  , :szhSININFORMACION)   AS NUM_DOCUMENTO 
      INTO :shTipDoc   , 
           :shNumDoc    
      FROM GE_CLIENTES A, GE_TIPIDENT B
     WHERE A.COD_CLIENTE   = :lCodCliente
       AND A.COD_TIPIDENT2 = B.COD_TIPIDENT;

    if( SQLCODE != SQLOK && SQLCODE != SQLNOTFOUND ) {
      ifnTrazasLog( modulo, "\t En funcion %s - %s", LOG00, modulo, SQLERRM );
      return -1;				
    }

    if( SQLCODE == SQLNOTFOUND ) {
        strcpy(sthCuentas.sTipDocumento[j], szhSININFORMACION);
        strcpy(sthCuentas.sNumDocumento[j], szhSININFORMACION);   
    } else {    
        strcpy(sthCuentas.sTipDocumento[j], shTipDoc);
        strcpy(sthCuentas.sNumDocumento[j], shNumDoc);   
    } 
           
    return iError;
  
} /* end ifnBBuscaNumDocumento() */
/* Fin Requerimiento MIX-09003 - 140082 - 19.07.2010 - MQG*/

/* ============================================================================= */
/*  ifnBuscaDirecciones : Funcion que busca direcciones del cliente              */
/* ============================================================================= */
int ifnBuscaDirecciones(long lhCodCliente, long j)
{
char  modulo[]   = "ifnBuscaDirecciones";
int   iError     = 0;     
int   iValido    = 0; /* Requerimiento MIX-09003 - 140082 - 19.07.2010 - MQG*/

EXEC SQL BEGIN DECLARE SECTION;   
   long   lCodCliente     ;
   char   shDireccion1     [81]; EXEC SQL VAR shDireccion1  IS STRING(81);
   char   shDireccion2     [81]; EXEC SQL VAR shDireccion2  IS STRING(81);
   char   shZona           [31]; EXEC SQL VAR shZona        IS STRING(31);
   char   shDepartamen     [31]; EXEC SQL VAR shDepartamen  IS STRING(31);
   char   shMunicipio      [31]; EXEC SQL VAR shMunicipio   IS STRING(31);
EXEC SQL END DECLARE SECTION;                                                 

    ifnTrazasLog( modulo, "\n\tEn funcion %s", LOG03,modulo);                      
    lCodCliente = lhCodCliente;

    EXEC SQL      
    SELECT B.NOM_CALLE||' '||B.NUM_CALLE||' '||B.NUM_PISO AS DIRECCION, 
           E.DES_CIUDAD AS ZONA, 
           F.DES_REGION AS DEPARTAMENTO, 
           G.DES_PROVINCIA AS MUNICIPIO
      INTO :shDireccion1, 
           :shZona, 
           :shDepartamen, 
           :shMunicipio
      FROM GE_DIRECCIONES B, GA_DIRECCLI C, GE_TIPDIRECCION D, 
           GE_CIUDADES    E, GE_REGIONES F, GE_PROVINCIAS   G     
     WHERE C.COD_CLIENTE   = :lCodCliente
       AND B.COD_DIRECCION = C.COD_DIRECCION
       AND C.COD_TIPDIRECCION = D.COD_TIPDIRECCION 
       AND C.COD_TIPDIRECCION = :ihUno
       AND B.COD_PROVINCIA = E.COD_PROVINCIA
       AND B.COD_REGION    = E.COD_REGION
       AND B.COD_CIUDAD    = E.COD_CIUDAD
       AND B.COD_REGION    = F.COD_REGION
       AND B.COD_REGION    = G.COD_REGION 
       AND B.COD_PROVINCIA = G.COD_PROVINCIA;
                     
    if( SQLCODE != SQLOK && SQLCODE != SQLNOTFOUND ) {
	   ifnTrazasLog( modulo, "\t En funcion %s (1) - %s", LOG00, modulo, SQLERRM );
       return -1;				
    }

    /* Inicio Requerimiento MIX-09003 - 140082 - 15.07.2010 - MQG*/
    if( SQLCODE == SQLNOTFOUND ) {
    	/* Inicio Requerimiento MIX-09003 - 140082 - 22.07.2010 - MQG*/
        /* ifnTrazasLog( modulo, "\t INVALIDO - Direccion(1) del cliente no existe - %ld", LOG03, lCodCliente );        	
        sthCuentas.lEstRegistro [j] = 1;
        iValido = 1;*/
        strcpy(shDireccion1, szhSININFORMACION);
        strcpy(shZona      , szhSININFORMACION);
        strcpy(shDepartamen, szhSININFORMACION);
        strcpy(shMunicipio , szhSININFORMACION);        
    	/* Fin Requerimiento MIX-09003 - 140082 - 22.07.2010 - MQG*/
                       
    }
    /* Fin Requerimiento MIX-09003 - 140082 - 15.07.2010 - MQG*/

    if( iValido == 0 ) {
        EXEC SQL      
        SELECT B.NOM_CALLE||' '||B.NUM_CALLE||' '||B.NUM_PISO AS DIRECCION   
          INTO :shDireccion2
          FROM GE_DIRECCIONES B, GA_DIRECCLI C, GE_TIPDIRECCION D   
         WHERE C.COD_CLIENTE      = :lCodCliente
           AND B.COD_DIRECCION    = C.COD_DIRECCION
           AND C.COD_TIPDIRECCION = D.COD_TIPDIRECCION 
           AND C.COD_TIPDIRECCION = :ihDos;
        
        if( SQLCODE != SQLOK && SQLCODE != SQLNOTFOUND ) {
	       ifnTrazasLog( modulo, "\t En funcion %s (2) - %s", LOG00, modulo, SQLERRM );
           return -1;				
        }

        /* Inicio Requerimiento MIX-09003 - 140082 - 15.07.2010 - MQG*/
        if( SQLCODE == SQLNOTFOUND ) {
        	/* Inicio Requerimiento MIX-09003 - 140082 - 23.07.2010 - MQG*/
            /*ifnTrazasLog( modulo, "\t INVALIDO - Direccion(2) del cliente no existe - %ld", LOG03, lCodCliente );        	
            sthCuentas.lEstRegistro [j] = 1;
            iValido = 1;*/
        	/* Fin Requerimiento MIX-09003 - 140082 - 23.07.2010 - MQG*/
            strcpy(shDireccion2, szhSININFORMACION);
        }
        /* Fin Requerimiento MIX-09003 - 140082 - 15.07.2010 - MQG*/
    }

    if( iValido == 0 ) {
       strcpy(sthCuentas.sDireccion1 [j], shDireccion1);
       strcpy(sthCuentas.sDireccion2 [j], shDireccion2);
       strcpy(sthCuentas.sZona       [j], shZona);
       strcpy(sthCuentas.sDepartamen [j], shDepartamen);
       strcpy(sthCuentas.sMunicipio  [j], shMunicipio);
       
       ifnTrazasLog( modulo, " shDireccion1  [%s]", LOG09,shDireccion1);                      
       ifnTrazasLog( modulo, " shDireccion2  [%s]", LOG09,shDireccion2);                      
       ifnTrazasLog( modulo, " shZona        [%s]", LOG09,shZona);                      
       ifnTrazasLog( modulo, " shDepartamen  [%s]", LOG09,shDepartamen);                      
       ifnTrazasLog( modulo, " shMunicipio   [%s]", LOG09,shMunicipio);                      
    } 
    return iError;
  
} /* end ifnBuscaDirecciones */

/* ============================================================================= */
/*  ifnBuscaClasificacion : Funcion que busca la clasificacion de cobros         */
/* ============================================================================= */
int ifnBuscaClasificacion(long lhCodCliente)
{
char  modulo[]   = "ifnBuscaClasificacion";
int   iError     = 0;     
int   iValido    = 0; /* Requerimiento MIX-09003 - 140082 - 15.07.2010 - MQG*/     

EXEC SQL BEGIN DECLARE SECTION;   
   long   lCodCliente     ;
   char   shClasificacion[6]; EXEC SQL VAR shClasificacion IS STRING(6);   
EXEC SQL END DECLARE SECTION;                                                 

    ifnTrazasLog( modulo, "\n\tEn funcion %s", LOG09,modulo);                      
    lCodCliente = lhCodCliente;

    EXEC SQL      
    SELECT COD_VALOR
      INTO :shClasificacion
      FROM CO_MOROSOS A, CO_CODIGOS B 
     WHERE A.COD_CLIENTE  = :lCodCliente
       AND A.COD_CATEGORIA= B.COD_VALOR 
       AND B.NOM_TABLA    = 'CO_MOROSOS'
       AND B.NOM_COLUMNA  = 'COD_CATEGORIA';
                     
    if( SQLCODE != SQLOK && SQLCODE != SQLNOTFOUND ) {
	  ifnTrazasLog( modulo, "\t En funcion ifnBuscaClasificacion(1) - %s", LOG00, SQLERRM );
	  return -1;				
    }

    if( SQLCODE == SQLNOTFOUND ) {
    	
        EXEC SQL      
        SELECT DES_VALOR
          INTO :shClasificacion
          FROM GE_CLIENTES A, CO_CODIGOS B 
         WHERE A.COD_CLIENTE  = :lCodCliente
           AND A.COD_CATEGORIA= B.COD_VALOR 
           AND B.NOM_TABLA    = 'GE_CLIENTES'
           AND B.NOM_COLUMNA  = 'COD_CATEGORIA';

        if( SQLCODE != SQLOK && SQLCODE != SQLNOTFOUND ) {
	      ifnTrazasLog( modulo, "\t En funcion ifnBuscaClasificacion(2) - %s", LOG00, SQLERRM );
	      return -1;				
        }

        /* Inicio Requerimiento MIX-09003 - 140082 - 15.07.2010 - MQG*/     
        if( SQLCODE == SQLNOTFOUND ) {
        	/* Inicio Requerimiento MIX-09003 - 140082 - 23.07.2010 - MQG*/     
	        /*ifnTrazasLog( modulo, "\t INVALIDO - Clasificacion no se encuentra para el cliente - %ld", LOG03, lCodCliente );        	
	        sthDetafac.lEstRegistro [lIndDetafac] = 1;
	        iValido = 1;*/
            strcpy(shClasificacion, szhSI);
            /* Fin Requerimiento MIX-09003 - 140082 - 23.07.2010 - MQG*/     
        }
        /* Fin Requerimiento MIX-09003 - 140082 - 15.07.2010 - MQG*/     
    }

    /* Inicio Requerimiento MIX-09003 - 140082 - 15.07.2010 - MQG*/     
    if (iValido == 0) {
       ifnTrazasLog( modulo, "shClasificacion [%s]", LOG09,shClasificacion);                      

       strcpy(sthDetafac.sClasificac[lIndDetafac], shClasificacion);
    } /* end if*/
    /* Fin Requerimiento MIX-09003 - 140082 - 15.07.2010 - MQG*/     
    
    return iError;
  
} /* end ifnBuscaClasificacion() */

/* ============================================================================= */
/*  ifnBuscaMontoMora : Funcion que busca el monto, documentos y dias en mora de */ 
/*  un cliente determinado                                                       */
/* ============================================================================= */
int ifnBuscaMontoDocMora(long lhCodCliente)
{
char  modulo[]   = "ifnBuscaMontoDocMora";
int   iError     = 0;     
int   iValido    = 0; /* Requerimiento MIX-09003 - 140082 - 15.07.2010 - MQG*/     

EXEC SQL BEGIN DECLARE SECTION;   
  long   lCodCliente       ;
  int    iTotDocVencidos   ;
  int    iDiasMora         ;
  double dDeudaVencida     ;
EXEC SQL END DECLARE SECTION;                                                 

    ifnTrazasLog( modulo, "\n\tEn funcion %s", LOG03,modulo);                      
    lCodCliente = lhCodCliente;

    EXEC SQL	
    SELECT COUNT(DISTINCT NUM_SECUENCI), NVL(SUM(IMPORTE_DEBE-IMPORTE_HABER),0), NVL(TRUNC(SYSDATE - MIN(FEC_VENCIMIE)),0)
      INTO :iTotDocVencidos,  :dDeudaVencida, :iDiasMora
      FROM CO_CARTERA 
     WHERE COD_CLIENTE   = :lCodCliente
       AND IND_FACTURADO = :ihUno
       AND COD_CONCEPTO NOT IN (:ihDos,:ihSeis);

    if( SQLCODE != SQLOK && SQLCODE != SQLNOTFOUND ) {
	  ifnTrazasLog( modulo, "\t SELECT DISTINCT COUNT(NUM_SECUENCI) - %s", LOG00, SQLERRM );
	  return -1;				
    }

    /* Inicio Requerimiento MIX-09003 - 140082 - 15.07.2010 - MQG*/     
    if( iTotDocVencidos == 0 ) {
       ifnTrazasLog( modulo, "\t INVALIDO - Cliente no cuenta con deuda - %ld", LOG03, lCodCliente );        	
        sthDetafac.lEstRegistro [lIndDetafac] = 1;
        iValido = 1;
    }

    if (iValido == 0) {
       ifnTrazasLog( modulo, "iTotDocVencidos [%d]", LOG09,iTotDocVencidos);                      
       ifnTrazasLog( modulo, "dDeudaVencida   [%.2f]", LOG09,dDeudaVencida);                      
       ifnTrazasLog( modulo, "iDiasMora       [%d]", LOG09,iDiasMora);                      

       sthDetafac.iTotFactMor[lIndDetafac] = iTotDocVencidos;
       sthDetafac.dMontoMora [lIndDetafac] = dDeudaVencida;
       sthDetafac.iDiasenMora[lIndDetafac] = iDiasMora;
    }
    /* Fin Requerimiento MIX-09003 - 140082 - 15.07.2010 - MQG*/     
    
    return iError;
  
} /* end ifnBuscaMontoDocMora() */

/* ============================================================================= */
/*  ifnBuscaProducto : Funcion que busca datos de los productos del cliente      */
/* ============================================================================= */
int ifnBuscaProducto(long lhCodCliente)
{
char  modulo[]   = "ifnBuscaProducto";
int   iError     = 0;     

EXEC SQL BEGIN DECLARE SECTION;   
  long   lCodCliente         ;
  char   shCod_Prestacion [6]; EXEC SQL VAR shCod_Prestacion IS STRING(6);
  char   shDes_Prestacion[51]; EXEC SQL VAR shDes_Prestacion IS STRING(51);
  int    ihMovil             ;
  int    ihNoMovil           ;
EXEC SQL END DECLARE SECTION;                                                 

    ifnTrazasLog( modulo, "\n\tEn funcion %s", LOG09,modulo);                      
    lCodCliente = lhCodCliente;

    EXEC SQL	
    SELECT A.COD_PRESTACION , B.DES_PRESTACION 
      INTO :shCod_Prestacion, :shDes_Prestacion 
      FROM GA_ABOCEL A, GE_PRESTACIONES_TD B 
     WHERE A.COD_PRESTACION = B.COD_PRESTACION 
       AND A.COD_CLIENTE    = :lCodCliente
       AND A.FEC_ALTA       = (SELECT MIN(FEC_ALTA) FROM GA_ABOCEL WHERE COD_CLIENTE = :lCodCliente)
       AND ROWNUM < 2;     /* Requerimiento MIX-09003 - 140082 - 22.07.2010 - MQG*/

    if( SQLCODE != SQLOK && SQLCODE != SQLNOTFOUND ) {
       ifnTrazasLog( modulo, "\t Buscando el Producto - %s", LOG00,SQLERRM );
       return -1;
    }

    if( SQLCODE == SQLNOTFOUND ) {
       strcpy(shCod_Prestacion, SI);
       strcpy(shDes_Prestacion, SIN_INFORMACION);
    }
   
    EXEC SQL                       
     SELECT COUNT(1)
     INTO :ihMovil
     FROM GA_ABOCEL A, GE_PRESTACIONES_TD B  
    WHERE A.COD_CLIENTE    = :lCodCliente
      AND A.COD_SITUACION NOT IN (:szhBAA, :szhBAP)
      AND A.COD_PRESTACION = B.COD_PRESTACION
      AND B.GRP_PRESTACION = :szhTM;

   if( SQLCODE != SQLOK && SQLCODE != SQLNOTFOUND ) {
	  ifnTrazasLog( modulo, "\t SELECT COUNT(MOVIL) - %s", LOG00, SQLERRM );
	  return -1;				
    }

    if( SQLCODE == SQLNOTFOUND ) {
       ihMovil = 0;
    }

    EXEC SQL                       
    SELECT COUNT(1)
     INTO :ihNoMovil
     FROM GA_ABOCEL A, GE_PRESTACIONES_TD B  
    WHERE A.COD_CLIENTE    = :lCodCliente
      AND A.COD_SITUACION NOT IN (:szhBAA, :szhBAP)
      AND A.COD_PRESTACION = B.COD_PRESTACION
      AND B.GRP_PRESTACION <> :szhTM;

    if( SQLCODE != SQLOK && SQLCODE != SQLNOTFOUND ) {
	  ifnTrazasLog( modulo, "\t SELECT COUNT(NOMOVIL) - %s", LOG00, SQLERRM );
	  return -1;				
    }

    if( SQLCODE == SQLNOTFOUND ) {
       ihNoMovil = 0;
    }

    ifnTrazasLog( modulo, " shCod_Prestacion [%s]", LOG09,shCod_Prestacion);                      
    ifnTrazasLog( modulo, " shDes_Prestacion [%s]", LOG09,shDes_Prestacion);                      
    ifnTrazasLog( modulo, " ihMovil          [%ld]", LOG09,ihMovil);                      
    ifnTrazasLog( modulo, " ihNoMovil        [%ld]", LOG09,ihNoMovil);                      

    strcpy(sthDetafac.sCodProducto[lIndDetafac], shCod_Prestacion);
    strcpy(sthDetafac.sDesProducto[lIndDetafac], shDes_Prestacion);
    sthDetafac.iTotLinMovil[lIndDetafac] = ihMovil;    
    sthDetafac.iTotNotMovil[lIndDetafac] = ihNoMovil;    
    
    return iError;
  
} /* end ifnBuscaProducto() */

/* ============================================================================= */
/*  ifnGeneraArchivosEntidad()                                                   */
/* ============================================================================= */
int ifnGeneraArchivosEntidad(long lNumSecuencia, char *sTipGestion)
{
char modulo[]= "ifnGeneraArchivosEntidad";
int  iError  = 0 ;     
int  iRes    = 0 ;

EXEC SQL BEGIN DECLARE SECTION;   
   	char  shCodEntidad    [6]; EXEC SQL VAR shCodEntidad IS STRING(6);
EXEC SQL END DECLARE SECTION;                                                 

    ifnTrazasLog( modulo, "\n\tEn funcion %s", LOG09,modulo);                      

    /************************************************************************/
    /* Obtiene el Universo de Entidades de Cobranzas                        */
    /************************************************************************/
    EXEC SQL DECLARE Cur_EntCobEx2 CURSOR for        
    SELECT COD_ENTIDAD
      FROM CO_ENTCOB      
     WHERE SYSDATE BETWEEN FEC_INI_VIGENCIA AND FEC_FIN_VIGENCIA                                           
     ORDER BY COD_ENTIDAD; 

    if( SQLCODE != SQLOK ) {
        ifnTrazasLog( modulo, "\tDECLARE Cur_EntCobEx2 - %s", LOG00,SQLERRM );
        return -1;
    }
    
    EXEC SQL OPEN Cur_EntCobEx2;

    if( SQLCODE != SQLOK ) {
        ifnTrazasLog( modulo, "\tOPEN Cur_EntCobEx2 - %s", LOG00,SQLERRM );
        return -1;
    }
       
	while(1) {

        EXEC SQL FETCH Cur_EntCobEx2 INTO :shCodEntidad;

		if (SQLCODE  == SQLNOTFOUND) {
			break; /* No hay mas empresas de cobranzas externa */
		}

        if (SQLCODE != SQLOK && SQLCODE != SQLNOTFOUND )
        {
	       ifnTrazasLog( modulo, "en FETCH : %s", LOG00, SQLERRM );
		   break;
	    }
	    
	    iRes = ifnGeneraArchCob(shCodEntidad, lNumSecuencia, sTipGestion);
	    if( iRes < 0 ) {
           iError = -1;
           break;           
        }
        
	} /* endwhile */
	      
	EXEC SQL CLOSE Cur_EntCobEx2;
	if( SQLCODE )
	{
		ifnTrazasLog( modulo, "en CLOSE : %s", LOG00, SQLERRM );
		return -1;
	}
          	
    return iError;

} /* end ifnGeneraArchivosEntidad */

/* ============================================================================= */
/*  ifnGeneraUnivArchCob() : Funcion que el universo genera los archivos de      */
/*  cobranza                                                                     */
/* ============================================================================= */
int ifnGeneraUnivArchCob()
{
char modulo[]= "ifnGeneraUnivArchCob";
int  iError  = 0 ;     
int  iRes    = 0 ;
char shEstado [4];

EXEC SQL BEGIN DECLARE SECTION;   
   	char  shCodEntidad    [6]; EXEC SQL VAR shCodEntidad IS STRING(6);
   	char  shTipGestion    [2]; EXEC SQL VAR shTipGestion IS STRING(2); 
   	long  lhNumSecuencia     ;
EXEC SQL END DECLARE SECTION;                                                 

    ifnTrazasLog( modulo, "\n\tEn funcion %s", LOG09,modulo);                      

    /************************************************************************/
    /* Obtiene el Universo de Numero de Procesos a imprimir                 */
    /************************************************************************/
    EXEC SQL DECLARE Cur_EntCobEx3 CURSOR for        
    SELECT NUM_SECUENCIA, NVL(COD_ENTIDAD, '-1'), TIP_GESTION  
      FROM CO_PARAM_COBEX_TO
     WHERE COD_ESTADO IN (:szVIS, :szREA)
     ORDER BY NUM_SECUENCIA;

    if( SQLCODE != SQLOK ) {
        ifnTrazasLog( modulo, "\tDECLARE Cur_EntCobEx3 - %s", LOG00,SQLERRM );
        return -1;
    }
    
    EXEC SQL OPEN Cur_EntCobEx3;

    if( SQLCODE != SQLOK ) {
        ifnTrazasLog( modulo, "\tOPEN Cur_EntCobEx3 - %s", LOG00,SQLERRM );
        return -1;
    }
       
	while(1) {

        EXEC SQL FETCH Cur_EntCobEx3 INTO :lhNumSecuencia, :shCodEntidad, :shTipGestion;

		if (SQLCODE  == SQLNOTFOUND) {
			break; /* No hay mas empresas de cobranzas externa */
		}

        if (SQLCODE != SQLOK && SQLCODE != SQLNOTFOUND )
        {
	       ifnTrazasLog( modulo, "en FETCH : %s", LOG00, SQLERRM );
		   break;
	    }
	    
        if  (strcmp(shCodEntidad,CARNULL)== 0) {
            /* cursor por entidad*/
            iRes = ifnGeneraArchivosEntidad(lhNumSecuencia, shTipGestion);
        } else {
        	iRes = ifnGeneraArchCob(shCodEntidad, lhNumSecuencia, shTipGestion);
        } /* end if  (strcmp(shCodEntidad,CARNULL)== 0) */
                
        if  (iRes == 0) strcpy(shEstado, TERMINADO);
        else strcpy(shEstado, ERROR);
        	
        iRes = ifnActualizaEstado(lhNumSecuencia, shEstado);
        if  (iRes < 0) {
        	iError = -1;
        	break;
        }
        
        if  (strcmp(shEstado, TERMINADO)== 0) {
            iRes = ifnActualizaEntidadMorosos(lhNumSecuencia);
            if  (iRes < 0) {
            	iError = -1;
            	break;
            }             	
		} /* end if  (strcmp(shEstado, TERMINADO)== 0) */               
		
	} /* endwhile */
	      
	EXEC SQL CLOSE Cur_EntCobEx3;
	if( SQLCODE )
	{
		ifnTrazasLog( modulo, "en CLOSE : %s", LOG00, SQLERRM );
		return -1;
	}
            	
    return iError;

} /* end ifnGeneraUnivArchCob( */

/* ============================================================================= */
/*  ifnActualizaEntidadMorosos()                                                 */
/* ============================================================================= */
int ifnActualizaEntidadMorosos(long lNumSecuencia)
{
char modulo[]   = "ifnActualizaEntidadMorosos";
int  iError     = 0;     
long i;

EXEC SQL BEGIN DECLARE SECTION;   
   long   lhCodCliente     ;
   char   shCodEntidad  [6]; EXEC SQL VAR shCodEntidad  IS STRING(6);
   long   lhNumSecuencia   ;
EXEC SQL END DECLARE SECTION;                                                 

    ifnTrazasLog( modulo, "\n\tEn funcion %s", LOG03,modulo);                      
    lhNumSecuencia = lNumSecuencia;

    /************************************************************************/
    /* Obtiene el Universo de Clientes a actualizar                         */
    /************************************************************************/
/*    EXEC SQL DECLARE Cur_Moro CURSOR for    
    SELECT B.COD_CLIENTE, B.COD_ENTIDAD
      FROM CO_PARAM_COBEX_TO A, CO_GESTION_COBEX_TO B
     WHERE A.NUM_SECUENCIA= :lhNumSecuencia
       and A.NUM_SECUENCIA= B.NUM_SECUENCIA;  
        
    if( SQLCODE != SQLOK ) {
        ifnTrazasLog( modulo, "\tDECLARE Cur_Moro - %s", LOG00,SQLERRM );
        return -1;
    }
    
    EXEC SQL OPEN Cur_Moro;
    if( SQLCODE != SQLOK ) {
        ifnTrazasLog( modulo, "\tOPEN Cur_Moro - %s", LOG00,SQLERRM );
        return -1;
    }

	while(1) {
		

        EXEC SQL FETCH Cur_Moro INTO :lhCodCliente, :shCodEntidad;            
      
		if( SQLCODE  == SQLNOTFOUND) {
	        ifnTrazasLog( modulo, "\t No existen mas registros a procesar...", LOG03 );
			break;  No hay mas empresas de cobranzas externa 
		}

        if( SQLCODE != SQLOK && SQLCODE != SQLNOTFOUND )  {
	       ifnTrazasLog( modulo, "en FETCH : %s", LOG00, SQLERRM );
		   break;
	    }

        ifnTrazasLog( modulo, "Cliente - Secuencia - Entidad [%ld] - [%ld] - [%s]", LOG09, lhCodCliente, lhNumSecuencia, shCodEntidad);

        EXEC SQL	
        UPDATE CO_MOROSOS 
           SET COD_AGENTE = :shCodEntidad
         WHERE COD_CLIENTE = :lhCodCliente;
        
        if( SQLCODE != SQLOK && SQLCODE != SQLNOTFOUND ) {
          ifnTrazasLog( modulo, " UPDATE CO_MOROSOS - %s", LOG00, SQLERRM );
	      return -1;				
        }
            
	    }  endwhile 
	      
	EXEC SQL CLOSE Cur_Moro;
	if( SQLCODE )
	{
		ifnTrazasLog( modulo, "en CLOSE : %s", LOG00, SQLERRM );
		return -1;
	}
*/

    for (i=0;i<=lIndDetafac;i++)   {
 
        /* Solo clientes validos */	/* Requerimiento MIX-09003 - 140082 - 20.07.2010 - MQG*/
        if ((sthDetafac.lEstRegistro [i] == 0) && (sthDetafac.lNumRegistr[i] > 0)) {
        	
        	lhCodCliente   = sthDetafac.lCodCliente[i];
       	    strcpy(shCodEntidad, sthDetafac.sCodAgente[i]);
        	        	
            EXEC SQL	
            UPDATE CO_MOROSOS 
               SET COD_AGENTE = :shCodEntidad
             WHERE COD_CLIENTE = :lhCodCliente;
            
            if( SQLCODE != SQLOK && SQLCODE != SQLNOTFOUND ) {
              ifnTrazasLog( modulo, " UPDATE CO_MOROSOS - %s", LOG00, SQLERRM );
	          return -1;				
            }

    	} /* end if (sthDetafac.lEstRegistro [i] == 0) */
        
    } /* end for */       
                   	
    return iError;
  
} /* end ifnActualizaEntidadMorosos() */

/* ============================================================================= */
/*  ifnActualizaEstado                                                           */ 
/* ============================================================================= */
int ifnActualizaEstado(long lNumSecuencia, char *sEstado)
{
char  modulo[]   = "ifnActualizaEstado";
int   iError     = 0;     

EXEC SQL BEGIN DECLARE SECTION;   
  long   lhNumSecuencia   ;
  char   shEstado      [4]; EXEC SQL VAR shEstado IS STRING(4);  
EXEC SQL END DECLARE SECTION;                                                 

    ifnTrazasLog( modulo, "\n\tEn funcion %s", LOG03,modulo);                      
    lhNumSecuencia = lNumSecuencia;
    strcpy(shEstado, sEstado);

    ifnTrazasLog( modulo, "lhNumSecuencia [%ld]", LOG09,lhNumSecuencia);                      
    ifnTrazasLog( modulo, "shEstado       [%s]", LOG09,shEstado);                      

    EXEC SQL	
    UPDATE CO_PARAM_COBEX_TO
       SET COD_ESTADO = :shEstado
     WHERE NUM_SECUENCIA = :lhNumSecuencia;

    if( SQLCODE != SQLOK && SQLCODE != SQLNOTFOUND ) {
      ifnTrazasLog( modulo, " UPDATE CO_PARAM_COBEX_TO - %s", LOG00, SQLERRM );
	  return -1;				
    }

    return iError;
  
} /* end ifnActualizaEstado() */

/* ============================================================================= */
/*  ifnGeneraArchCob() : Funcion que genera archivos de cobranza                 */
/* ============================================================================= */
int ifnGeneraArchCob(char *sCodEntidad, long lNumSecuencia, char *sTipGestion)
{
char modulo[]= "ifnGeneraArchCob";
int  iError  = 0 ;     
int  iRes    = 0 ;

    ifnTrazasLog( modulo, "\n\tEn funcion %s", LOG09,modulo);                      

    iRes = ifnGenArchivosDetafac(sCodEntidad, lNumSecuencia, sTipGestion);     /* Requerimiento MIX-09003 - 140082 - 15.07.2010 - MQG*/
    if( iRes < 0 ) return -1;
        
    iRes = ifnGenArchivosFacturas(sCodEntidad, lNumSecuencia, sTipGestion);    /* Requerimiento MIX-09003 - 140082 - 15.07.2010 - MQG*/
    if( iRes < 0 ) return -1;
        
    iRes = ifnGenArchivosCuentas(sCodEntidad, lNumSecuencia, sTipGestion);     /* Requerimiento MIX-09003 - 140082 - 15.07.2010 - MQG*/;
    if( iRes < 0 ) return -1;
        
    iRes = ifnGenArchivosTelefonos(sCodEntidad, lNumSecuencia, sTipGestion);   /* Requerimiento MIX-09003 - 140082 - 15.07.2010 - MQG*/;
    if( iRes < 0 ) return -1;
       
    iRes = ifnGenArchivosTelesCuenta(sCodEntidad, lNumSecuencia, sTipGestion); /* Requerimiento MIX-09003 - 140082 - 15.07.2010 - MQG*/;
    if( iRes < 0 ) return -1;
            	
    return iError;

} /* end ifnGeneraArchCob( */

/****************************************************************************/
/*   Rutina que rescata el valor de una variable de Ambiente Host           */
/****************************************************************************/
char* szGetEnv(char * VarHost)
{
    char *ValVarHost;

    ValVarHost=(char *)malloc(1024);
    if (getenv(VarHost) == NULL)
    {
        printf( "\n\t-------------------------------------------------------"
                "\n\t  No Existe Variable de Ambiente %s    "
                "\n\t-------------------------------------------------------\n",
                VarHost);
        return ((char *) NULL);
    }

    strcpy(ValVarHost,getenv(VarHost));
    return (ValVarHost);
} /* szGetEnv */

/* Inicio Requerimiento MIX-09003 - 140082 - 15.07.2010 - MQG*/
/* ============================================================================= */
/*  szRango                                                                      */
/* ============================================================================= */
char* szRango(long pSecuencia)
{
char  modulo[]="szRango";
EXEC SQL BEGIN DECLARE SECTION;   
  long  lhNumSecuencia;    
  char  shRango   [10]; EXEC SQL VAR shRango IS STRING(10);  
EXEC SQL END DECLARE SECTION;                                                 

    lhNumSecuencia = pSecuencia;
	
	EXEC SQL	
	SELECT TO_CHAR(DIA_INICIAL||'-'||DIA_FINAL)
	  INTO :shRango
      FROM CO_PARAM_COBEX_TO A, CO_RANGOS_COBEX_TD B
      WHERE A.NUM_SECUENCIA = :lhNumSecuencia
        AND A.COD_RANGO     = B.COD_RANGO; 

    if( SQLCODE != SQLOK && SQLCODE != SQLNOTFOUND ) {
       ifnTrazasLog( modulo, " ERROR AL CONSULTAR RANGO - %s", LOG00, SQLERRM );
	   return "-1";				
    }
    return(shRango);        
}/* end szRango*/
/* Fin Requerimiento MIX-09003 - 140082 - 15.07.2010 - MQG*/

/* ============================================================================= */
/*  ifnGenArchivosDetafac                                                        */
/* ============================================================================= */
int ifnGenArchivosDetafac(char *pCodEntidad, long lNumSecuencia, char *sTipGestion)
{
char  szArchivoDetafac[256]=""; /* DETAFAC */
char  modulo[]="ifnGenArchivosDetafac";
char  shCodEntidad    [6]; 
int   iHayRegistro;
int   iError;
long  i;
int   iPaso   ;    /* Requerimiento MIX-09003 - 140082 - 22.07.2010 - MQG*/
char  *shRango;    /* Requerimiento MIX-09003 - 140082 - 19.07.2010 - MQG*/

EXEC SQL BEGIN DECLARE SECTION;   
  long  lhNumSecuencia;    
EXEC SQL END DECLARE SECTION;                                                 

    ifnTrazasLog( modulo, "\n\tEn funcion %s", LOG03,modulo);   
    memset( shCodEntidad, '\0',sizeof(shCodEntidad));
    strcpy(shCodEntidad, pCodEntidad);

    lhNumSecuencia = lNumSecuencia;
	
    /* Abrir archivo por empresa de cobranza para Archivo DETAFAC por rango, si MORA o PREMORA */
    memset(szArchivoDetafac,0,sizeof(szArchivoDetafac));    /* DETAFAC */
	if (strcmp(sTipGestion,MORA)==0) {
	
	     /* Inicio Requerimiento MIX-09003 - 140082 - 15.07.2010 - MQG*/
	     shRango =(char *)malloc(10);
	     shRango = szRango(lhNumSecuencia);
	     if (strcmp(shRango,"-1")==0) return -1;
	     /* Fin Requerimiento MIX-09003 - 140082 - 15.07.2010 - MQG*/
         sprintf(stStatusArch.NomArchDetafac,"%s%s%s%ld%s%s","Detafac_",shCodEntidad,"_",lhNumSecuencia, "_",shRango);	
	
	} else {
         sprintf(stStatusArch.NomArchDetafac,"%s%s%s%ld","Detafac_",shCodEntidad, "_",lhNumSecuencia);	
	}
    sprintf(szArchivoDetafac,"%s/%s_%s.txt",szPathDat,stStatusArch.NomArchDetafac,szFechayyyymmdd);
    
    if((ArchDetafac = fopen(szArchivoDetafac,"a")) == (FILE*)NULL ) {    
       fprintf (stderr,"Error al crear archivo Detafac \n");
       fflush  (stderr);
       return -1;    
    }
    
    ifnTrazasLog(modulo, "[%s] - APERTURA DE ARCHIVO - [%s] \n", LOG09, szFechayyyymmdd, stStatusArch.NomArchDetafac);
    ifnTrazasLog(modulo, "Entidad - Secuencia [%s] - [%ld] \n", LOG09, shCodEntidad, lhNumSecuencia);

    ifnTrazasLog(modulo, "lIndDetafac  [%ld]", LOG09, lIndDetafac);
	   
	iHayRegistro = 0;
	iPaso        = 0;
    for (i=0;i<=lIndDetafac;i++)   {
 
        /* Solo clientes validos */	/* Requerimiento MIX-09003 - 140082 - 15.07.2010 - MQG*/
        if (sthDetafac.lEstRegistro [i] == 0) {

            ifnTrazasLog(modulo, "sthDetafac.sCodAgente    [%ld] [%s]", LOG09, i, sthDetafac.sCodAgente[i]);
            ifnTrazasLog(modulo, "sthDetafac.lNumRegistr   [%ld] [%ld]", LOG09, i, sthDetafac.lNumRegistr[i]);
            ifnTrazasLog(modulo, "sthDetafac.lNumSecuencia [%ld] [%ld]", LOG09, i, sthDetafac.lNumSecuencia[i]);
            
		    /* if (((strcmp(sthDetafac.sCodAgente[i],shCodEntidad)==0) && (sthDetafac.lNumRegistr[i] == 0)) || (iPaso == 0)) {  Requerimiento MIX-09003 - 140082 - 28.07.2010 - MQG*/
		    if (iPaso == 0) {
               if ( (fprintf( ArchDetafac, "CUENTA|CLASIFICACION|MONTO MORA| N°FACT.MORA|DIAS MORA|TIPO PRODUCTO|LINEAS MOV.ACTIVAS|LINEAS NO MOV.ACTIVOS\n") ) == -1 ){	
		    	    ifnTrazasLog(modulo,"Error al Escribir en Fin de Fichero ",LOG01);
		    		return FALSE;            			
		    	}		    	
		    	iPaso = 1; /* Requerimiento MIX-09003 - 140082 - 22.07.2010 - MQG*/
      	    }
       	    
		    if (( strcmp(sthDetafac.sCodAgente[i],shCodEntidad)==0) && (sthDetafac.lNumRegistr[i] > 0) && (sthDetafac.lNumSecuencia[i] == lhNumSecuencia)){
            
                iHayRegistro = 1;
                ifnTrazasLog(modulo, "sthDetafac.sCodAgente  [%ld] [%s]",  LOG09, i,sthDetafac.sCodAgente[i]);
                ifnTrazasLog(modulo, "sthDetafac.lCodCliente [%ld] [%ld]", LOG09, i,sthDetafac.lCodCliente[i]);
                ifnTrazasLog(modulo, "sthDetafac.sClasificac [%ld] [%s] ", LOG09, i,sthDetafac.sClasificac[i]);
                ifnTrazasLog(modulo, "sthDetafac.dMontoMora  [%ld] [%.2f] ", LOG09, i,sthDetafac.dMontoMora[i]);
                ifnTrazasLog(modulo, "sthDetafac.iTotFactMor [%ld] [%d] ", LOG09, i,sthDetafac.iTotFactMor[i]);
                ifnTrazasLog(modulo, "sthDetafac.iDiasenMora [%ld] [%d] ", LOG09, i,sthDetafac.iDiasenMora[i]);
                ifnTrazasLog(modulo, "sthDetafac.sCodProducto[%ld] [%s] ", LOG09, i,sthDetafac.sCodProducto[i]);
                ifnTrazasLog(modulo, "sthDetafac.sDesProducto[%ld] [%s] ", LOG09, i,sthDetafac.sDesProducto[i]);/* Requerimiento MIX-09003 - 135020 - 12.07.2010 - MQG*/
                ifnTrazasLog(modulo, "sthDetafac.iTotLinMovil[%ld] [%d] ", LOG09, i,sthDetafac.iTotLinMovil[i]);
                ifnTrazasLog(modulo, "sthDetafac.iTotNotMovil[%ld] [%d] \n", LOG09, i,sthDetafac.iTotNotMovil[i]);
                
                    /*                        1  |  2  |  3       |  4  |  5  |  6  |  7  |  8  */
               	if( (fprintf( ArchDetafac, "%ld %s %s %s %10.02f %s %d %s %d %s %s %s %d %s %d \n"
                                     ,sthDetafac.lCodCliente[i]
                                     ,szPipe
                                     ,sthDetafac.sClasificac[i]
                                     ,szPipe
                                     ,sthDetafac.dMontoMora[i]
                                     ,szPipe
                                     ,sthDetafac.iTotFactMor[i]
                                     ,szPipe 								 	 
                                     ,sthDetafac.iDiasenMora[i]
                                     ,szPipe
                                     ,sthDetafac.sDesProducto[i]
                                     ,szPipe
                                     ,sthDetafac.iTotLinMovil[i]
                                     ,szPipe
                                     ,sthDetafac.iTotNotMovil[i]		
                       		)   ) == -1 ){	
		    	   ifnTrazasLog(modulo,"Error al Escribir en Fin de Fichero (1)",LOG01);
		    	   return FALSE;            			
		    	}
		    		 				 				 
            } /* end if ( (ArchDetafac.sCodAgente[i],shCodEntidad)==0) )  {*/
                
            if ((iHayRegistro == 0) && (sthDetafac.lNumRegistr[i] == -1))   {
               if ( (fprintf( ArchDetafac, " ***********   NO EXISTEN DATOS PARA EL DIA DE HOY   *********** \n") ) == -1 ){	
		           ifnTrazasLog(modulo,"Error al Escribir en Fin de Fichero (2)",LOG01);
		    	   return FALSE;            			
		       }		    	
            }

        } /* end if (sthDetafac.lEstRegistro [i] == 0) {*/
    } /* end for lIndDetafac */			
    ifnTrazasLog(modulo, " Total Registros [%ld] \n", LOG09, i);

    if ( fclose(ArchDetafac) != 0 )    {    
       fprintf (stderr,"Error al cerrar archivo Detafac %s\n", shCodEntidad);
       fflush  (stderr);
    }

	return iError;	
	
} /* end ifnGenArchivosDetafac */

/* ============================================================================= */
/*  ifnGenArchivosFacturas                                                       */
/* ============================================================================= */
int ifnGenArchivosFacturas(char *pCodEntidad, long lNumSecuencia, char *sTipGestion)
{
char szArchivoFacturas[256]=""; /* FACTURAS */
char modulo[]="ifnGenArchivosFacturas";
int  iHayRegistro;
long i;
int  iError;
char shCodEntidad    [6]; 
char *shRango   ; /* Requerimiento MIX-09003 - 140082 - 15.07.2010 - MQG*/	
int   iPaso     ; /* Requerimiento MIX-09003 - 140082 - 23.07.2010 - MQG*/


/* Inicio Requerimiento MIX-09003 - 140082 - 15.07.2010 - MQG*/
EXEC SQL BEGIN DECLARE SECTION;   
  long  lhNumSecuencia;    
EXEC SQL END DECLARE SECTION;                                                 
/* Fin Requerimiento MIX-09003 - 140082 - 15.07.2010 - MQG*/
    
    ifnTrazasLog( modulo, "\n\tEn funcion %s", LOG03,modulo);   
    memset( shCodEntidad, '\0',sizeof(shCodEntidad));
    strcpy(shCodEntidad, pCodEntidad);

    lhNumSecuencia = lNumSecuencia;

    /* Inicio Requerimiento MIX-09003 - 140082 - 15.07.2010 - MQG*/	
    /* Abrir archivo por empresa de cobranza para Archivo FACTURAS      */
    memset(szArchivoFacturas,0,sizeof(szArchivoFacturas));  /* FACTURAS */

	if (strcmp(sTipGestion,MORA)==0) {

	     shRango =(char *)malloc(10);	
	     shRango = szRango(lhNumSecuencia);
	     if (strcmp(shRango,"-1")==0) return -1;
         sprintf(stStatusArch.NomArchFactura,"%s%s%s%ld%s%s","Factura_",shCodEntidad,"_",lhNumSecuencia, "_",shRango);	
	
	} else {        
         sprintf(stStatusArch.NomArchFactura,"%s%s%s%ld","Factura_", shCodEntidad, "_",lhNumSecuencia);
    }
    /* Fin Requerimiento MIX-09003 - 140082 - 15.07.2010 - MQG*/

    sprintf(szArchivoFacturas,"%s/%s_%s.txt",szPathDat,stStatusArch.NomArchFactura,szFechayyyymmdd);
    
    if((ArchFactura = fopen(szArchivoFacturas,"a")) == (FILE*)NULL ) {    
       fprintf (stderr,"Error al crear archivo Factura \n");
       fflush  (stderr);
       return -1;    
    }
    
    ifnTrazasLog(modulo, "[%s] - APERTURA DE ARCHIVO - [%s] \n", LOG09, szFechayyyymmdd, stStatusArch.NomArchFactura);
    ifnTrazasLog(modulo, "shCodEntidad [%s] -[%ld] \n", LOG09, shCodEntidad, lhNumSecuencia);
	   
	iHayRegistro = 0;
	iPaso        = 0; /* Requerimiento MIX-09003 - 140082 - 28.07.2010 - MQG*/
    for (i=0;i<=lIndFactura;i++)   {

        /* Solo clientes validos */	/* Requerimiento MIX-09003 - 140082 - 15.07.2010 - MQG*/
        if (sthFactura.lEstRegistro [i] == 0) {
 
		    /* if (((strcmp(sthFactura.sCodAgente[i],shCodEntidad)==0) && (sthFactura.lNumRegistr[i] == 0)) || (iPaso == 0)) { Requerimiento MIX-09003 - 140082 - 28.07.2010 - MQG*/
		    if (iPaso == 0) {
               if ( (fprintf( ArchFactura, "CUENTA|FOLIO|SALDO MORA|FECHA VENCIMIENTO\n") ) == -1 ){	
		    	    ifnTrazasLog(modulo,"Error al Escribir en Fin de Fichero ",LOG01);
		    		return FALSE;            			
		    	}		    	
		    	iPaso = 1; /* Requerimiento MIX-09003 - 140082 - 23.07.2010 - MQG*/
      	    }
       	    
		    if (( strcmp(sthFactura.sCodAgente[i],shCodEntidad)==0) && (sthFactura.lNumRegistr[i] > 0) && (sthFactura.lNumSecuencia[i] == lhNumSecuencia)) {
            
                iHayRegistro = 1;            
                 ifnTrazasLog(modulo, "sthFactura.sCodAgente  [%ld] [%s]"  , LOG09, i,sthFactura.sCodAgente[i]);
                 ifnTrazasLog(modulo, "sthFactura.lCodCliente [%ld] [%ld]" , LOG09, i,sthFactura.lCodCliente[i]);
                 ifnTrazasLog(modulo, "sthFactura.lNumFolio   [%ld] [%ld]" , LOG09, i,sthFactura.lNumFolio[i]);
                 ifnTrazasLog(modulo, "sthFactura.dSaldoMora  [%ld] [%.2f]", LOG09, i,sthFactura.dSaldoMora[i]);
                 ifnTrazasLog(modulo, "sthFactura.sFecVencim  [%ld] [%s] " , LOG09, i,sthFactura.sFecVencim[i]);
                    /*                       1   |  2   |  3       |  4 */
               	if( (fprintf( ArchFactura, "%ld %s %ld %s %10.02f %s %s \n"
                                     ,sthFactura.lCodCliente[i]
                                     ,szPipe
                                     ,sthFactura.lNumFolio[i]
                                     ,szPipe
                                     ,sthFactura.dSaldoMora[i]
                                     ,szPipe
                                     ,sthFactura.sFecVencim[i]
                       		)   ) == -1 ){	
		    	   ifnTrazasLog(modulo,"Error al Escribir en Fin de Fichero (1)",LOG01);
		    	   return FALSE;            			
		    	}
		    		 				 				 
            } /* end if ( (ArchFactura.sCodAgente[i],shCodEntidad)==0) )  {*/
                
            if ((iHayRegistro == 0) && (sthFactura.lNumRegistr[i] == -1))  {
              if ( (fprintf( ArchFactura, " ***********   NO EXISTEN DATOS PARA EL DIA DE HOY   *********** \n") ) == -1 ){	
		          ifnTrazasLog(modulo,"Error al Escribir en Fin de Fichero (2)",LOG01);
		    	  return FALSE;            			
		       }		    	
            }

        } /* end if (sthFactura.lEstRegistro [i] == 0) {*/

    } /* end for lIndFactura */			
    ifnTrazasLog(modulo, " Total Registros [%ld] \n", LOG09, i);

    if ( fclose(ArchFactura) != 0 )    {    
       fprintf (stderr,"Error al cerrar archivo Factura %s\n", shCodEntidad);
       fflush  (stderr);
    }

	return iError;	
	
} /* end ifnGenArchivosFacturas */

/* ============================================================================= */
/*  ifnGenArchivosCuentas                                                        */
/* ============================================================================= */
int ifnGenArchivosCuentas(char *pCodEntidad, long lNumSecuencia, char *sTipGestion)
{
char szArchivoCuentas[256]=""; /* CUENTAS */
char modulo[]="ifnGenArchivosCuentas";
int  iHayRegistro;
long i;
int  iError;
char shCodEntidad    [6]; 
char *shRango   ; /* Requerimiento MIX-09003 - 140082 - 15.07.2010 - MQG*/		
int   iPaso;    /* Requerimiento MIX-09003 - 140082 - 23.07.2010 - MQG*/


/* Inicio Requerimiento MIX-09003 - 140082 - 15.07.2010 - MQG*/
EXEC SQL BEGIN DECLARE SECTION;   
  long  lhNumSecuencia;    
EXEC SQL END DECLARE SECTION;                                                 
/* Fin Requerimiento MIX-09003 - 140082 - 15.07.2010 - MQG*/
    
    ifnTrazasLog( modulo, "\n\tEn funcion %s", LOG03,modulo);   
    memset( shCodEntidad, '\0',sizeof(shCodEntidad));
    strcpy(shCodEntidad, pCodEntidad);
    lhNumSecuencia = lNumSecuencia;
	
    /* Inicio Requerimiento MIX-09003 - 140082 - 15.07.2010 - MQG*/		
    /* Abrir archivo por empresa de cobranza para Archivo CUENTAS      */
    memset(szArchivoCuentas,0,sizeof(szArchivoCuentas));    /* CUENTAS */
   	if (strcmp(sTipGestion,MORA)==0) {
	
	     shRango =(char *)malloc(10);	
	     shRango = szRango(lhNumSecuencia);
	     if (strcmp(shRango,"-1")==0) return -1;
         sprintf(stStatusArch.NomArchCuentas,"%s%s%s%ld%s%s","Cuentas_",shCodEntidad,"_",lhNumSecuencia, "_",shRango);	
	
	} else {        
         sprintf(stStatusArch.NomArchCuentas,"%s%s%s%ld","Cuentas_", shCodEntidad, "_",lhNumSecuencia);
    }
    /* Fin Requerimiento MIX-09003 - 140082 - 15.07.2010 - MQG*/	

    sprintf(szArchivoCuentas,"%s/%s_%s.txt",szPathDat,stStatusArch.NomArchCuentas,szFechayyyymmdd);
    
    if((ArchCuentas = fopen(szArchivoCuentas,"a")) == (FILE*)NULL ) {    
       fprintf (stderr,"Error al crear archivo Cuentas \n");
       fflush  (stderr);
       return -1;    
    }
    
    ifnTrazasLog(modulo, "[%s] - APERTURA DE ARCHIVO - [%s] \n", LOG09, szFechayyyymmdd, stStatusArch.NomArchCuentas);
    ifnTrazasLog(modulo, "shCodEntidad [%s] \n", LOG09, shCodEntidad);
	   
	iHayRegistro = 0;
	iPaso        = 0;
    for (i=0;i<=lIndCuentas;i++)   {

        /* Solo clientes validos */	/* Requerimiento MIX-09003 - 140082 - 15.07.2010 - MQG*/
        if (sthCuentas.lEstRegistro [i] == 0) {
 
		    /* if (((strcmp(sthCuentas.sCodAgente[i],shCodEntidad)==0) && (sthCuentas.lNumRegistr[i] == 0)) || (iPaso == 0)) { Requerimiento MIX-09003 - 140082 - 28.07.2010 - MQG*/
		    if (iPaso == 0) {
               if ( (fprintf( ArchCuentas, "CUENTA|ESTADO|APELLIDOS|NOMBRES|NOMBRE EMPRESA|NIT|DIRECCION 1|DIRECCION 2|ZONA|DEPARTAMENTO|MUNICIPIO|TIPO DOCUMENTO|NRO DOCTO|EDAD|OCUPACION|TELEFONO TITULAR|REFERENCIA|TELEFONO REF 1|TELEFONO REF 2|SEGMENTO|CLASIFICACION|ESTATUS \n") ) == -1 ){	
		    	    ifnTrazasLog(modulo,"Error al Escribir en Fin de Fichero ",LOG01);
		    		return FALSE;            			
		    	}		    	
		    	iPaso = 1; /* Requerimiento MIX-09003 - 140082 - 23.07.2010 - MQG*/
      	    }
       	    
		    if (( strcmp(sthCuentas.sCodAgente[i],shCodEntidad)==0) && (sthCuentas.lNumRegistr[i] > 0) && (sthCuentas.lNumSecuencia[i] == lhNumSecuencia)) {
            
                iHayRegistro = 1;
                ifnTrazasLog(modulo, "sthCuentas.sCodAgente    [%ld] [%s]" , LOG09, i,sthCuentas.sCodAgente[i]);
                ifnTrazasLog(modulo, "sthCuentas.lCodCliente   [%ld] [%ld]", LOG09, i,sthCuentas.lCodCliente[i]);
                ifnTrazasLog(modulo, "sthCuentas.sEstado       [%ld] [%s] ", LOG09, i,sthCuentas.sEstado[i]);
                ifnTrazasLog(modulo, "sthCuentas.sApellidos    [%ld] [%s] ", LOG09, i,sthCuentas.sApellidos[i]);
                ifnTrazasLog(modulo, "sthCuentas.sNombreClie   [%ld] [%s] ", LOG09, i,sthCuentas.sNombreClie[i]);
                ifnTrazasLog(modulo, "sthCuentas.sNombreEmpr   [%ld] [%s] ", LOG09, i,sthCuentas.sNombreEmpr[i]);
                ifnTrazasLog(modulo, "sthCuentas.sNIT          [%ld] [%s] ", LOG09, i,sthCuentas.sNIT[i]);
                ifnTrazasLog(modulo, "sthCuentas.sDireccion1   [%ld] [%s] ", LOG09, i,sthCuentas.sDireccion1[i]);
                ifnTrazasLog(modulo, "sthCuentas.sDireccion2   [%ld] [%s] ", LOG09, i,sthCuentas.sDireccion2[i]);
                ifnTrazasLog(modulo, "sthCuentas.sZona         [%ld] [%s] ", LOG09, i,sthCuentas.sZona[i]);
                ifnTrazasLog(modulo, "sthCuentas.sDepartamen   [%ld] [%s] ", LOG09, i,sthCuentas.sDepartamen[i]);
                ifnTrazasLog(modulo, "sthCuentas.sMunicipio    [%ld] [%s] ", LOG09, i,sthCuentas.sMunicipio[i]);
                ifnTrazasLog(modulo, "sthCuentas.sTipDocumento [%ld] [%s] ", LOG09, i,sthCuentas.sTipDocumento[i]);
                ifnTrazasLog(modulo, "sthCuentas.sNumDocumento [%ld] [%s] ", LOG09, i,sthCuentas.sNumDocumento[i]);
                ifnTrazasLog(modulo, "sthCuentas.sEdad         [%ld] [%s] ", LOG09, i,sthCuentas.sEdad[i]);
                ifnTrazasLog(modulo, "sthCuentas.sOcupacion    [%ld] [%s] ", LOG09, i,sthCuentas.sOcupacion[i]);
                ifnTrazasLog(modulo, "sthCuentas.sTelTitular   [%ld] [%s] ", LOG09, i,sthCuentas.sTelTitular[i]);
                ifnTrazasLog(modulo, "sthCuentas.sNomRefere1   [%ld] [%s] ", LOG09, i,sthCuentas.sNomRefere1[i]);
                ifnTrazasLog(modulo, "sthCuentas.sTelRefere1   [%ld] [%s] ", LOG09, i,sthCuentas.sTelRefere1[i]);
                ifnTrazasLog(modulo, "sthCuentas.sTelRefere2   [%ld] [%s] ", LOG09, i,sthCuentas.sTelRefere2[i]);
                ifnTrazasLog(modulo, "sthCuentas.sDesSegment   [%ld] [%s] ", LOG09, i,sthCuentas.sDesSegment[i]);
                /* ifnTrazasLog(modulo, "sthCuentas.sClasificacion[i] [%s] ", LOG09, sthCuentas.sClasificacion[i]); Requerimiento MIX-09003 - 140082 - 19.07.2010 - MQG*/		
                ifnTrazasLog(modulo, "sthCuentas.sDesColor     [%ld] [%s] ", LOG09, i,sthCuentas.sDesColor[i]);      /* Requerimiento MIX-09003 - 140082 - 19.07.2010 - MQG*/		        
                ifnTrazasLog(modulo, "sthCuentas.sEstatus      [%ld] [%s] ", LOG09, i,sthCuentas.sEstatus[i]);
            
                     /*                       1  |  2  |  3  |  4  |  5  |  6  |  7  |  8  |  9  | 10  | 11  | 12  | 13  |  14  | 15  |  16 |  17 |  18 |  19 |  20 |  21 |  22 */
               	if( (fprintf( ArchCuentas, "%ld %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s  %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s\n"
                                     ,sthCuentas.lCodCliente[i]
                                     ,szPipe
                                     ,sthCuentas.sEstado[i]
                                     ,szPipe
                                     ,sthCuentas.sApellidos[i]
                                     ,szPipe
                                     ,sthCuentas.sNombreClie[i]
                                     ,szPipe 								 	 
                                     ,sthCuentas.sNombreEmpr[i]
                                     ,szPipe
                                     ,sthCuentas.sNIT[i]
                                     ,szPipe
                                     ,sthCuentas.sDireccion1[i]
                                     ,szPipe
                                     ,sthCuentas.sDireccion2[i]		
                                     ,szPipe
                                     ,sthCuentas.sZona[i]		
                                     ,szPipe
                                     ,sthCuentas.sDepartamen[i]		
                                     ,szPipe
                                     ,sthCuentas.sMunicipio[i]		
                                     ,szPipe
                                     ,sthCuentas.sTipDocumento[i]		
                                     ,szPipe
                                     ,sthCuentas.sNumDocumento[i]		
                                     ,szPipe
                                     ,sthCuentas.sEdad[i]		
                                     ,szPipe
                                     ,sthCuentas.sOcupacion[i]		
                                     ,szPipe
                                     ,sthCuentas.sTelTitular[i]		
                                     ,szPipe
                                     ,sthCuentas.sNomRefere1[i]		
                                     ,szPipe
                                     ,sthCuentas.sTelRefere1[i]		
                                     ,szPipe
                                     ,sthCuentas.sTelRefere2[i]		
                                     ,szPipe
                                     ,sthCuentas.sDesSegment[i]		
                                     ,szPipe
                                     ,sthCuentas.sDesColor[i]		
                                     ,szPipe
                                     ,sthCuentas.sEstatus[i]		                                                                  
                       		)   ) == -1 ){	
		    	   ifnTrazasLog(modulo,"Error al Escribir en Fin de Fichero (1)",LOG01);
		    	   return FALSE;            			
		    	}
		    		 				 				 
            } /* end if ( (ArchCuentas.sCodAgente[i],shCodEntidad)==0) )  {*/
                
            if ((iHayRegistro == 0) && (sthCuentas.lNumRegistr[i] == -1))  {
                if ( (fprintf( ArchCuentas, " ***********   NO EXISTEN DATOS PARA EL DIA DE HOY   *********** \n") ) == -1 ){	
		           ifnTrazasLog(modulo,"Error al Escribir en Fin de Fichero (2)",LOG01);
		    	   return FALSE;            			
		        }		    	
            }

        } /* end if (sthCuentas.lEstRegistro [i] == 0) */
    } /* end for lIndCuentas */			
    ifnTrazasLog(modulo, " Total Registros [%ld] \n", LOG09, i);

    if ( fclose(ArchCuentas) != 0 )    {    
       fprintf (stderr,"Error al cerrar archivo Cuentas %s\n", shCodEntidad);
       fflush  (stderr);
    }

	return iError;	
	
} /* end ifnGenArchivosCuentas */

/* ============================================================================= */
/*  ifnGenArchivosTelefonos                                                      */
/* ============================================================================= */
int ifnGenArchivosTelefonos(char *pCodEntidad, long lNumSecuencia, char *sTipGestion)
{
char  szArchivoTelefono[256]=""; /* TELEFONOS */
char  modulo[]="ifnGenArchivosTelefonos";
int   iHayRegistro;
long  i;
int   iError;
char  shCodEntidad    [6]; 
char  *shRango   ; /* Requerimiento MIX-09003 - 140082 - 19.07.2010 - MQG*/
int   iPaso;       /* Requerimiento MIX-09003 - 140082 - 23.07.2010 - MQG*/

/* Inicio Requerimiento MIX-09003 - 140082 - 15.07.2010 - MQG*/
EXEC SQL BEGIN DECLARE SECTION;   
  long  lhNumSecuencia;    
EXEC SQL END DECLARE SECTION;                                                 
/* Fin Requerimiento MIX-09003 - 140082 - 15.07.2010 - MQG*/
    
    ifnTrazasLog( modulo, "\n\tEn funcion %s", LOG03,modulo);   
    memset( shCodEntidad, '\0',sizeof(shCodEntidad));
    strcpy(shCodEntidad, pCodEntidad);
    lhNumSecuencia = lNumSecuencia;

    /* Inicio Requerimiento MIX-09003 - 140082 - 15.07.2010 - MQG*/			
    /* Abrir archivo por empresa de cobranza para Archivo TELEFONOS      */
    memset(szArchivoTelefono,0,sizeof(szArchivoTelefono));/* TELEFONOS */
   	if (strcmp(sTipGestion,MORA)==0) {
	
	     shRango =(char *)malloc(10);	
	     shRango = szRango(lhNumSecuencia);
	     if (strcmp(shRango,"-1")==0) return -1;
         sprintf(stStatusArch.NomArchTelefon,"%s%s%s%ld%s%s","Telefono_",shCodEntidad,"_",lhNumSecuencia, "_",shRango);	
	
	} else {            
         sprintf(stStatusArch.NomArchTelefon,"%s%s%s%ld","Telefono_", shCodEntidad, "_",lhNumSecuencia);
    }
    /* Fin Requerimiento MIX-09003 - 140082 - 15.07.2010 - MQG*/		

    sprintf(szArchivoTelefono,"%s/%s_%s.txt",szPathDat,stStatusArch.NomArchTelefon,szFechayyyymmdd);
    
    if((ArchTelefono = fopen(szArchivoTelefono,"a")) == (FILE*)NULL ) {    
       fprintf (stderr,"Error al crear archivo Telefono \n");
       fflush  (stderr);
       return -1;    
    }
    
    ifnTrazasLog(modulo, "[%s] - APERTURA DE ARCHIVO - [%s] \n", LOG09, szFechayyyymmdd, stStatusArch.NomArchTelefon);
    ifnTrazasLog(modulo, "shCodEntidad [%s] \n", LOG09, shCodEntidad);
	   
	iHayRegistro = 0;
	iPaso        = 0; /* Requerimiento MIX-09003 - 140082 - 28.07.2010 - MQG */
    for (i=0;i<=lIndTelefon;i++)   {

        /* Solo clientes validos */	/* Requerimiento MIX-09003 - 140082 - 19.07.2010 - MQG*/
        if (sthTelefono.lEstRegistro [i] == 0) {

		    /* if (((strcmp(sthTelefono.sCodAgente[i],shCodEntidad)==0) && (sthTelefono.lNumRegistr[i] == 0)) || (iPaso == 0)) { Requerimiento MIX-09003 - 140082 - 28.07.2010 - MQG*/
		    if (iPaso == 0) {
               if ( (fprintf( ArchTelefono, "CUENTA|TELEFONO|SEGMENTO|PRODUCTO|CALIFICACION\n") ) == -1 ){	
		    	    ifnTrazasLog(modulo,"Error al Escribir en Fin de Fichero ",LOG01);
		    		return FALSE;            			
		    	}		
		    	iPaso = 1; /* Requerimiento MIX-09003 - 140082 - 23.07.2010 - MQG*/		    	    	
      	    }
       	    
		    if (( strcmp(sthTelefono.sCodAgente[i],shCodEntidad)==0) && (sthTelefono.lNumRegistr[i] > 0) && (sthTelefono.lNumSecuencia[i] == lhNumSecuencia)) {
            
                 iHayRegistro = 1;            
                 ifnTrazasLog(modulo, "sthTelefono.sCodAgente    [%ld] [%s] ", LOG09, i,sthTelefono.sCodAgente[i]);
                 ifnTrazasLog(modulo, "sthTelefono.lCodCliente   [%ld] [%ld]", LOG09, i,sthTelefono.lCodCliente[i]);
                 ifnTrazasLog(modulo, "sthTelefono.lNumCelular   [%ld] [%ld]", LOG09, i,sthTelefono.lNumCelular[i]);
                 ifnTrazasLog(modulo, "sthTelefono.sDesSegment   [%ld] [%s] ", LOG09, i,sthTelefono.sDesSegment[i]);
                 ifnTrazasLog(modulo, "sthTelefono.sDesProducto  [%ld] [%s] ", LOG09, i,sthTelefono.sDesProducto[i]);
                 /* ifnTrazasLog(modulo, "sthTelefono.sClasificacion[i] [%s] ", LOG09, sthTelefono.sClasificacion[i]);  Requerimiento MIX-09003 - 140082 - 19.07.2010 - MQG*/
                 ifnTrazasLog(modulo, "sthTelefono.sCalificacion [%ld] [%s] ", LOG09, i,sthTelefono.sCalificacion[i]);   /* Requerimiento MIX-09003 - 140082 - 19.07.2010 - MQG*/
            
                    /*                       1   |  2   |  3  |  4  |  5*/
               	if( (fprintf( ArchTelefono, "%ld %s %ld %s %s %s %s %s %s\n"
                                     ,sthTelefono.lCodCliente[i]
                                     ,szPipe
                                     ,sthTelefono.lNumCelular[i]
                                     ,szPipe
                                     ,sthTelefono.sDesSegment[i]
                                     ,szPipe
                                     ,sthTelefono.sDesProducto[i]
                                     ,szPipe
                                     ,sthTelefono.sCalificacion[i]
                       		)   ) == -1 ){	
		    	   ifnTrazasLog(modulo,"Error al Escribir en Fin de Fichero (1)",LOG01);
		    	   return FALSE;            			
		    	}
		    		 				 				 
            } /* end if ( (sthTelefono.sCodAgente[i],shCodEntidad)==0) )  {*/
                
            if ((iHayRegistro == 0) && (sthTelefono.lNumRegistr[i] == -1)) {
                if ( (fprintf( ArchTelefono, " ***********   NO EXISTEN DATOS PARA EL DIA DE HOY   *********** \n") ) == -1 ){	
		            ifnTrazasLog(modulo,"Error al Escribir en Fin de Fichero (2)",LOG01);
		      	  return FALSE;            			
		         }		    	
            }
            
        } /* end if (sthTelefono.lEstRegistro [i] == 0) {*/
    } /* end for lIndTelefon */			
    ifnTrazasLog(modulo, " Total Registros [%ld] \n", LOG09, i);

    if ( fclose(ArchTelefono) != 0 )    {    
       fprintf (stderr,"Error al cerrar archivo Telefono %s\n", shCodEntidad);
       fflush  (stderr);
    }

	return iError;	
	
} /* end ifnGenArchivosTelefonos */

/* ============================================================================= */
/*  ifnGenArchivosTelesCuenta                                                    */
/* ============================================================================= */
int ifnGenArchivosTelesCuenta(char *pCodEntidad, long lNumSecuencia, char *sTipGestion)
{
char szArchivoTelesCuenta[256]=""; /* TELESCUENTA */
char modulo[]="ifnGenArchivosTelesCuenta";
int  iHayRegistro;
long i;
int  iError;
char shCodEntidad    [6]; 
char  *shRango ;  /* Requerimiento MIX-09003 - 140082 - 19.07.2010 - MQG*/
int   iPaso;      /* Requerimiento MIX-09003 - 140082 - 23.07.2010 - MQG*/

/* Inicio Requerimiento MIX-09003 - 140082 - 15.07.2010 - MQG*/
EXEC SQL BEGIN DECLARE SECTION;   
  long  lhNumSecuencia;    
EXEC SQL END DECLARE SECTION;                                                 
/* Fin Requerimiento MIX-09003 - 140082 - 15.07.2010 - MQG*/
    
    ifnTrazasLog( modulo, "\n\tEn funcion %s", LOG03,modulo);   
    memset( shCodEntidad, '\0',sizeof(shCodEntidad));
    strcpy(shCodEntidad, pCodEntidad);
    lhNumSecuencia = lNumSecuencia; 

    /* Inicio Requerimiento MIX-09003 - 140082 - 15.07.2010 - MQG*/				
    /* Abrir archivo por empresa de cobranza para Archivo TELESCUENTA          */
    memset(szArchivoTelesCuenta,0,sizeof(szArchivoTelesCuenta));/* TELESCUENTA */
   	if (strcmp(sTipGestion,MORA)==0) {
	
	     shRango =(char *)malloc(10);
	     shRango = szRango(lhNumSecuencia);
	     if (strcmp(shRango,"-1")==0) return -1;
         sprintf(stStatusArch.NomArchTeleCta,"%s%s%s%ld%s%s","TelesCuenta_",shCodEntidad,"_",lhNumSecuencia, "_",shRango);	
	
	} else {                
         sprintf(stStatusArch.NomArchTeleCta,"%s%s%s%ld","TelesCuenta_", shCodEntidad, "_",lhNumSecuencia);
    }
    /* Fin Requerimiento MIX-09003 - 140082 - 15.07.2010 - MQG*/			

    sprintf(szArchivoTelesCuenta,"%s/%s_%s.txt",szPathDat,stStatusArch.NomArchTeleCta,szFechayyyymmdd);
    
    if((ArchTelesCta = fopen(szArchivoTelesCuenta,"a")) == (FILE*)NULL ) {    
       fprintf (stderr,"Error al crear archivo TelesCuenta \n");
       fflush  (stderr);
       return -1;    
    }
    
    ifnTrazasLog(modulo, "[%s] - APERTURA DE ARCHIVO - [%s] \n", LOG09, szFechayyyymmdd, stStatusArch.NomArchTeleCta);
    ifnTrazasLog(modulo, "shCodEntidad [%s] \n", LOG09, shCodEntidad);
	   
	iHayRegistro = 0;
	iPaso        = 0; /* Requerimiento MIX-09003 - 140082 - 28.07.2010 - MQG */
    for (i=0;i<=lIndTeleCta;i++)   {

		/* if (((strcmp(sthTCuentas.sCodAgente[i],shCodEntidad)==0) && (sthTCuentas.lNumRegistr[i] == 0)) || (iPaso == 0)) {  Requerimiento MIX-09003 - 140082 - 28.07.2010 - MQG*/
		if (iPaso == 0) {
           if ( (fprintf( ArchTelesCta, "CUENTA|SERVICIO\n") ) == -1 ){	
			    ifnTrazasLog(modulo,"Error al Escribir en Fin de Fichero ",LOG01);
				return FALSE;            			
			}		
		    iPaso = 1; /* Requerimiento MIX-09003 - 140082 - 23.07.2010 - MQG*/		    	    				    	
      	}
       	
		if (( strcmp(sthTCuentas.sCodAgente[i],shCodEntidad)==0) && (sthTCuentas.lNumRegistr[i] > 0)&& (sthTCuentas.lNumSecuencia[i] == lhNumSecuencia) ) {

             iHayRegistro = 1;            
             ifnTrazasLog(modulo, "sthTCuentas.sCodAgente    [%ld] [%s]" , LOG09, i,sthTCuentas.sCodAgente[i]);
             ifnTrazasLog(modulo, "sthTCuentas.lCodCliente   [%ld] [%ld]", LOG09, i,sthTCuentas.lCodCliente[i]);
             ifnTrazasLog(modulo, "sthTCuentas.sDesProducto  [%ld] [%s]" , LOG09, i,sthTCuentas.sDesProducto[i]);

                /*                       1   |  2  */
           	if( (fprintf( ArchTelesCta, "%ld %s %s \n"
                                 ,sthTCuentas.lCodCliente[i]
                                 ,szPipe
                                 ,sthTCuentas.sDesProducto[i]
                   		)   ) == -1 ){	
			   ifnTrazasLog(modulo,"Error al Escribir en Fin de Fichero (1)",LOG01);
			   return FALSE;            			
			}
				 				 				 
      } /* end if ( (sthTCuentas.sCodAgente[i],shCodEntidad)==0) )  {*/
            
      if ((iHayRegistro == 0) && (sthTCuentas.lNumRegistr[i] == -1)) {
          if ( (fprintf( ArchTelesCta, " ***********   NO EXISTEN DATOS PARA EL DIA DE HOY   *********** \n") ) == -1 ){	
		      ifnTrazasLog(modulo,"Error al Escribir en Fin de Fichero (2)",LOG01);
			  return FALSE;            			
		   }		    	
      }

    } /* end for lIndTeleCta */			
    ifnTrazasLog(modulo, " Total Registros [%ld] \n", LOG09, i);

    if ( fclose(ArchTelesCta) != 0 )    {    
       fprintf (stderr,"Error al cerrar archivo TelesCuenta %s\n", shCodEntidad);
       fflush  (stderr);
    }

	return iError;	
	
} /* end ifnGenArchivosTelesCuenta */

/* ============================================================================= */
/*  ifnRevisaEstadoCliente                                                       */
/* ============================================================================= */
int ifnRevisaEstadoCliente()
{
char   modulo[]="ifnRevisaEstadoCliente";
long   i;
long   j;
long   lhCodCliente;
int    iError = 0;

    for (i=0;i<=lIndCuentas;i++)   {
        
        if (sthCuentas.lEstRegistro [i] == 1) {      
        	  	
        	lhCodCliente = sthCuentas.lCodCliente[i];
            for (j=0;j<=lIndFactura;j++)   {

                if (sthFactura.lCodCliente[j] == lhCodCliente) {      
                   sthFactura.lEstRegistro[j] = 1;	    
                }                
            } /* end for lIndFactura */			        
            
        } /* end if (sthCuentas.lEstRegistro [i] == 1) */
    } /* end for lIndCuentas */		
	

    for (i=0;i<=lIndFactura;i++)   {
        
        if (sthFactura.lEstRegistro [i] == 1) {      
        	  	
        	lhCodCliente = sthFactura.lCodCliente[i];
            for (j=0;j<=lIndDetafac;j++)   {

                if (sthDetafac.lCodCliente[j] == lhCodCliente) {      
                   sthDetafac.lEstRegistro[j] = 1;	    
                   break;
                }                
            } /* end for lIndDetafac */			        
            
        } /* end if (sthFactura.lEstRegistro [i] == 1) */
    } /* end for lIndFactura */		

	return iError;	
	
} /* end ifnRevisaEstadoCliente */

/******************************************************************************************/
/** Información de Versionado *************************************************************/
/******************************************************************************************/
/** Pieza                                               : */
/**  %ARCHIVE% */
/** Identificador en PVCS                               : */
/**  %PID% */
/** Producto                                            : */
/**  %PP% */
/** Revisión                                            : */
/**  %PR% */
/** Autor de la Revisión                                : */
/**  %AUTHOR% */
/** Estado de la Revisión ($TO_BE_DEFINED es Check-Out) : */
/**  %PS% */
/** Fecha de Creación de la Revisión                    : */
/**  %DATE% */
/** Worksets ******************************************************************************/
/** %PIRW% */
/** Historia ******************************************************************************/
/** %PL% */
/******************************************************************************************/
