/* ============================================================================= */
/*
    Tipo        :  APLICACION DE APOYO

    Nombre      :  regucola.pc

    Descripcion :  Se ejecuta al determinarse que una cola de proceso termino
				   con error(retorno > 0). De ser asi, este proceso le cambia el
				   estado a la cola a W para que se pueda volver a ejecutar
				   automaticamente cuando corresponda segun sea la definicion de
				   la cola.

    Recibe      :  Usuario/Password. ( por defecto asume los de la cuenta )
                   Nivel de Log ( por defecto asume 3 : Log Normal ) 
                   Punto de Gestion.
                   Accion.
                       
    Devuelve    :  
    
    Autor       :  Jorge Lizama Rojas
    Fecha       :  11 - Diciembre - 2000
*/ 
/* ============================================================================= */


#define _COLIBGENERALES_PC_
#define _COLIBPROCESOS_PC_
#include "regucola.h"

#define iLOGNIVEL_DEF 	3       /* Define el nivel de Log por Defecto */
LINEACOMANDO  stLineaComando;   /* Datos con los que se invoco al proceso */

char gszColaProc[6]="";   /* NOMBRE DE COLA DE PROCESO A REGULARIZAR */

EXEC SQL INCLUDE sqlca;

int main(int argc,char *argv[])
{
     char modulo[]="main";
    int iResult = 0;
    
    fprintf(stdout, "\n%s - REGUCOLA -\n", szGetTime(1));

    /*- Validacion de parametros de entrada -*/
    memset(&stLineaComando,0,sizeof(LINEACOMANDO));
    if (ifnValidaParametros(argc,argv,&stLineaComando) != 0)    
    {
        iResult = 1; /* Fallo validacion */
    }
	else
	{    
        /*- Conexion a la Base de Datos -*/
        if (ifnConexionDB(&stLineaComando) != 0)   
        {
            iResult = 2; /* Fallo conexion */
        }
        else
        {
            /*- Prepara Archivo de Log -*/ 
            if (ifnPreparaArchivoLog() != 0)    
            {
                iResult = 3;  /* Fallo Log */
            }
            else
            {
                fprintf(stdout, "\n\n%s INICIO EJECUCION\n", szGetTime(1));

                if (!bfnCambiaEstadoCola(gszColaProc,"?","W")) /* de cualquiera a W */   
                {
					fprintf (stdout,"\n\tError >> Fallo bfnCambiaEstadoCola : %s\n", SQLERRM );
					fflush  (stdout);
                    iResult = 4; /* Fallo la Ejecucion */
                }
				else
				{
					EXEC SQL COMMIT;
					if (SQLCODE)
					{
						fprintf (stdout,"\n\tError >> Fallo Commit : %s\n", SQLERRM );
						fflush  (stdout);
						iResult = 5; /* Fallo Proceso */
					}
				}
                fprintf(stdout, "\n\n%s FIN EJECUCION\n\n", szGetTime(1));

                vfnCierraArchivoLog();
            }
        }
    }

    fprintf(stdout, "\n%s - REGUCOLA -\n", szGetTime(1));

    return iResult;
   
} /* end main */    
/* ============================================================================= */

/* ============================================================================= */
/* ifnValidaParametros : Realiza la validacion de los Parametros de Entrada      */
/* ============================================================================= */
int ifnValidaParametros( int argc, char *argv[], LINEACOMANDO *pstLC )
{
    char modulo[]="ifnValidaParametros";

/*-- Definicion de variables para controlar la lista de argumentos recibidos ----*/
	extern char  *optarg;
	extern  int  optind, opterr, optopt;
	        int  iOpt=0;
	       char  opt[] = ":u:l:n:"; 

/*-- Variables locales -----------------------------------------------------------*/  
  	       char  *psztmp = "";
/*-- Flags de los valores recibidos ----------------------------------------------*/
	        int  Userflag=0;
 	        int  Logflag=0;
 	        int  Colaflag=0;
 	        
/*--Variables para controlar los nuevos parametros--------------------------------*/

/*-- Seteo de Valores Iniciles y por defecto -------------------------------------*/
	opterr=0;
    stStatus.iLogNivel = iLOGNIVEL_DEF ;
    
/*-- En caso de Invocacion sin Parametros ----------------------------------------*/
	if(argc == 1)
	{
        fprintf(stdout, "\nPARAMETROS");
        fprintf(stdout, "\n\t Cola de Proceso      : [XXXXX]"
        				"\n\t Usuario (default)    : [/]"
                        "\n\t Nivel de Log (def)   : [%d]",iLOGNIVEL_DEF );
        return 0; 
	}

/*-- Analisis de los argumentos recibidos ----------------------------------------*/
	while ((iOpt=getopt(argc, argv, opt))!=EOF)
	{
		switch(iOpt)
		{
			case 'u':  /*-- Usuario/Password --*/
 				if(!Userflag)
				{
	                strcpy(pstLC->szUsuarioOra, optarg);                      
    	            Userflag=1;
					if ((psztmp=(char *)strchr(pstLC->szUsuarioOra,'/'))==(char *)NULL)
					{
						fprintf (stderr,"\n\tError >> Usuario no valido. Requiere '/'");
						return -1;
					}
					else
					{
						strncpy (pstLC->szOraAccount,pstLC->szUsuarioOra,psztmp-pstLC->szUsuarioOra);
						strcpy  (pstLC->szOraPasswd, psztmp+1);
					}
				}
				else
				{
					fprintf (stderr,"\n\tError >> opcion '-%c' duplicada",optopt);
					return -1;
				}
				break;

			case 'l': /*-- Nivel de Log --*/
				if(!Logflag)
				{
                    stStatus.iLogNivel = (atoi(optarg) > 0)? atoi(optarg):iLOGNIVEL_DEF ;
                    Logflag=1;
				}
				else
				{
					fprintf (stderr,"\n\tError >> opcion '-%c' duplicada",optopt);
					return -1;
				}
				break;
				
			case 'n': /*-- Cola de Proceso --*/
				if(!Colaflag)
				{
	                strcpy(gszColaProc, optarg);                      
    	            Colaflag=1;
				}
				else
				{
					fprintf (stderr,"\n\tError >> opcion '-%c' duplicada",optopt);
					return -1;
				}
				break;
				
			case '?':
				fprintf (stderr,"\n\tError >> opcion '-%c' es desconocida",optopt);
				return -1;

			case ':':
				fprintf (stderr,"\n\tError >> falta argumento para opcion '-%c'",optopt);
				return -1;
		}
	} 
    pstLC->iLogLevel=stStatus.iLogNivel;

    fprintf(stdout, "\nPARAMETROS"
                    "\n\t Cola de Proceso      : [%s]"
                    "\n\t Usuario              : [%s/%s]"
                    "\n\t Nivel de Log         : [%d]" 
                    ,gszColaProc
                    ,pstLC->szOraAccount,  pstLC->szOraPasswd
                    ,pstLC->iLogLevel);
   	return 0;

} /* bfnValidaParamatros */
/* ============================================================================= */

/* ============================================================================= */
/* ifnConexionDB() : Intenta Conectarse a la Base de Datos                       */
/* ============================================================================= */
int ifnConexionDB(LINEACOMANDO *pstLC)
{
    char modulo[]="ifnConexionDB";
    
    if ( bfnOraConnect(pstLC->szOraAccount,pstLC->szOraPasswd) == FALSE  )
    {
        fprintf(stderr,"\nNo hay conexion a ORACLE");
        return -1;
    }
    
    return 0;
}
/* ============================================================================= */

/* ============================================================================= */
/* ifnPreparaArchivoLog(): Obtiene las Paths y define el nombre del archivo log  */
/* ============================================================================= */
int ifnPreparaArchivoLog()
{
    char modulo[]="ifnPreparaArchivoLog";

    EXEC SQL BEGIN DECLARE SECTION;
        char szhPathLogSched[128]; EXEC SQL VAR szhPathLogSched IS STRING (128);
    EXEC SQL END DECLARE SECTION;
    
	sprintf(szhPathLogSched,"%s/CO_SCHEDULER\0",getenv("XPC_LOG"));

    sprintf(stStatus.szLogPathGene,"%s",szhPathLogSched);
    sprintf(stStatus.szFileName,"%s",gszColaProc);
   
    return ifnAbreArchivoLog();
    
} /* end ifnPreparaArchivoLog */
/* ============================================================================= */

/* ============================================================================= */
/* ifnAbreArchivoLog(): Crea directorio por fecha y abre ahi el archivo de log   */
/* ============================================================================= */
int ifnAbreArchivoLog()
{
    char modulo[]="ifnAbreArchivoLog";
    char szArchivo[256]="";
    char szComando[256]="";
    static char szAux[9];
    
    strcpy (szAux,(char *)szSysDate("YYYYMMDD"));
    sprintf(szComando,"mkdir -p %s/%s",stStatus.szLogPathGene,szAux);
    if (system (szComando)!=0) 
    {
        fprintf (stderr,"\nError al intentar crear directorio de Log");
		fflush  (stderr);
        return -1;
    }

    memset(szArchivo,0,sizeof(szArchivo));
    sprintf(szArchivo,"%s/%s/%s.log",stStatus.szLogPathGene,szAux,stStatus.szFileName);
  	if((stStatus.LogFile = fopen(szArchivo,"a")) == (FILE*)NULL )
	{	
	    fprintf(stderr,"\nError al crear archivo de Log");
		fflush  (stderr);
		return -1;    
	}
	
    fprintf(stdout, "\n\t Archivo de Log       : %s", szArchivo );

	ifnTrazasLog(modulo, "- APERTURA DEL ARCHIVO DE LOG <%ld> -", LOG03,getpid());
    return 0;
 
}/* end ifnAbreArchivoLog */
/* ============================================================================= */

/* ============================================================================= */
/*  void vfnCierraArchivoLog(void)   cierra los descriptores de archivo de logs  */
/* ============================================================================= */
void vfnCierraArchivoLog(void)
{
    char modulo[]="vfnCierraArchivoLog";
    
    ifnTrazasLog(modulo, "- CIERRE DEL ARCHIVO DE LOG <%ld> -", LOG03,getpid());

	if ( fclose(stStatus.LogFile) != 0 )
	{	
	    fprintf(stderr,"\n\tError al cerrar archivo de Log");
	}
    return;    
} /* end vfnCierraArchivoLog */
/* ============================================================================= */


/******************************************************************************************/
/** Información de Versionado *************************************************************/
/******************************************************************************************/
/** Pieza                                               : */
/**  %ARCHIVE% */
/** Identificador en PVCS                               : */
/**  %PID% */
/** Producto                                            : */
/**  %PP% */
/** Revisión                                            : */
/**  %PR% */
/** Autor de la Revisión                                : */
/**  %AUTHOR% */
/** Estado de la Revisión ($TO_BE_DEFINED es Check-Out) : */
/**  %PS% */
/** Fecha de Creación de la Revisión                    : */
/**  %DATE% */
/** Worksets ******************************************************************************/
/** %PIRW% */
/** Historia ******************************************************************************/
/** %PL% */
/******************************************************************************************/

