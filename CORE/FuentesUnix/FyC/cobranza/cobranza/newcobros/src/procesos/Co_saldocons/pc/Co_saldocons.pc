/* ================================================================================================================ */
/*
   Tipo        :  COLA DE PROCESO
   Nombre      :  Co_saldocons.pc
   Parametros  :  Usuario/Password. ( por defecto asume los de la cuenta )
                  Nivel de Log ( por defecto asume 3 : Log Normal ) 
                  Nombre de la Cola (Opcional), para nombrar archivos de log
   Autor       :  GAC
   Fecha       :  Diciembre-2003
*/ 
/* ================================================================================================================ */
#define _COLIBGENERALES_PC_
#define _COLIBPROCESOS_PC_

#include "Co_saldocons.h"

LINEACOMANDO  	stLineaComando;     		/* Datos con los que se invoco al proceso */
char 			szgCodProceso[6]  = "";
char 			szArchivoLog[256] = ""; 	/* log */

EXEC SQL INCLUDE sqlca;

EXEC SQL BEGIN DECLARE SECTION;
	  char	szhCodEstado[2]; 		EXEC SQL VAR szhCodEstado IS STRING (2);
     char   szhSalco        [6];
     char   szhWait         [2];
     char   szhCo_cartera   [11];
     char   szhCod_tipdocum [13];
	  int    ihValor_Cero = 0 ;
	  int    ihValor_Uno  = 1 ;
EXEC SQL END DECLARE SECTION;

int main( int argc, char *argv[] )
{
char modulo[] = "main";
int iResult = 0;

    fprintf(stdout, "\n%s SALCO pid(%ld) VERSION [%s]\n", szGetTime(1),getpid(),szVERSION);
    fflush (stdout);
    
    strcpy(szhSalco,SALCO);
    strcpy(szhWait ,W );
    strcpy(szhCo_cartera ,CO_CARTERA);
    strcpy(szhCod_tipdocum,COD_TIPDOCUM);

    
    /*- Validacion de parametros de entrada -*/
    memset(&stLineaComando,0,sizeof(LINEACOMANDO));
    if (ifnValidaParametros(argc,argv,&stLineaComando) != 0) {
        fprintf (stdout,"\n\tError >> Fallo la Validacion de Parametros \n");
        fflush  (stdout);
        iResult = 1; /* Fallo validacion */
    } else {    
        /*- Conexion a la Base de Datos -*/
        if (ifnConexionDB(&stLineaComando) != 0)   {
            fprintf (stdout,"\n\tError >> Fallo la Conexion a la Base \n");
            fflush  (stdout);
            iResult = 2; /* Fallo conexion */

        } else  {
            /*- Prepara Archivo de Log -*/ 
            if (ifnPreparaArchivoLog() != 0)    {
                fprintf (stdout,"\n\tError >> Fallo Archivo de Log (Local al proceso) \n");
                fflush  (stdout);
                iResult = 3;  /* Fallo Log */
            
	    } else {
                /*- Ejecuta el proceso propiamente tal -*/
					if (ifnEjecutaCola() != 0)   {
			                    fprintf (stdout,"\n\tError >> Fallo el proceso \n");
			                    fflush  (stdout);
			                    iResult = 4; /* Fallo Proceso */
					} else {
               	
						EXEC SQL 
		            SELECT COD_ESTADO 
		            INTO :szhCodEstado
		            FROM CO_COLASPROC 
		            WHERE COD_PROCESO=:szhSalco;
		            
		            if (SQLCODE)  {
		                fprintf (stdout,"\n\tError >> Fallo el proceso ( Validacion Cola Wait ) \n");
		                fflush  (stdout);
		                ifnMailAlert("SALCO","TODOS","FALLO LA VALIDACION FINAL DE LA COLA.");
		                iResult = 5; /* Fallo Proceso */
		
		            } else {
		
		                if ( strcmp(szhCodEstado,"W")!=0 ) {
		                    /* LA COLA ESTA EN UN ESTADO DISTINTO DE WAIT */
		                    /* SEÑALAR ESTO COMO ERROR E INTENTAR FORZARLA A WAIT */
		                    ifnTrazasLog(modulo,"Regresando la Cola a Espera (%s)",LOG02,szhCodEstado);
		                    EXEC SQL 
		                    UPDATE CO_COLASPROC
		                    SET COD_ESTADO = :szhWait
		                    WHERE COD_PROCESO = :szhSalco;
		
		                    if (SQLCODE) {
		                        fprintf (stdout,"\n\tError >> Fallo el proceso ( Update Cola Wait ) %s\n",SQLERRM );
		                        fflush  (stdout);
		                        ifnMailAlert("SALCO","TODOS","FALLO AL ACTUALIZAR LA COLA A 'WAIT'.");
		                        iResult = 6; /* Fallo Proceso */
		                    }                            
		
		                    EXEC SQL COMMIT;
		                    if (SQLCODE) {
		                        fprintf (stdout,"\n\tError >> Fallo el proceso ( Commit Cola Wait ) %s\n", SQLERRM );
		                        fflush  (stdout);
		                        ifnMailAlert("SALCO","TODOS","FALLO EL COMMIT DE LA COLA 'WAIT'.");
		                        iResult = 7; /* Fallo Proceso */
		                     }                            
		                     ifnTrazasLog(modulo,"OK. Cola forzada a espera",LOG02);
		                 }
		             }
                }
                vfnCierraArchivoLog();
            }
        }
    }

    return iResult;
   
} /* end main */    
/* ============================================================================= */

/* ============================================================================= */
/* ifnValidaParametros : Realiza la validacion de los Parametros de Entrada      */
/* ============================================================================= */
int ifnValidaParametros( int argc, char *argv[], LINEACOMANDO *pstLC )
{
char modulo[]="ifnValidaParametros";

/*-- Definicion de variables para controlar la lista de argumentos recibidos ----*/
extern  char  *optarg;
extern  int  optind, opterr, optopt;
        int  iOpt=0;
        char  opt[] = ":u:l:n:";
/*-- Variables locales -----------------------------------------------------------*/  
char  *psztmp = "";
/*-- Flags de los valores recibidos ----------------------------------------------*/
int  Userflag=0;
int  Logflag=0;

/*-- Seteo de Valores Iniciles y por defecto -------------------------------------*/
    opterr=0;
    stStatus.iLogNivel = iLOGNIVEL_DEF ;
    memset(szgCodProceso,0,sizeof(szgCodProceso));
    strcpy(szgCodProceso,"SALCO"); /*valor por defecto es "SALCO" por SALCO */
    rtrim(szgCodProceso);

    
/*-- En caso de Invocacion sin Parametros ----------------------------------------*/
    if(argc == 1)   {
        return 0; /*ok asume valores por defecto */
    }

/*-- Analisis de los argumentos recibidos ----------------------------------------*/
    while ((iOpt=getopt(argc, argv, opt))!=EOF)    {

        switch(iOpt)
        {
            case 'u':  /*-- Usuario/Password --*/
                if(!Userflag) {
                    strcpy(pstLC->szUsuarioOra, optarg);                      
                    Userflag=1;
                    
                    if ((psztmp=(char *)strchr(pstLC->szUsuarioOra,'/'))==(char *)NULL) {
                        fprintf (stderr,"\n\tError >> Usuario no valido. Requiere '/' \n");
                        fflush  (stderr);
                        return -1;
                    
                    } else {
                        strncpy (pstLC->szOraAccount,pstLC->szUsuarioOra,psztmp-pstLC->szUsuarioOra);
                        strcpy  (pstLC->szOraPasswd, psztmp+1);
                    }
         
                } else {
                    fprintf (stderr,"\n\tError >> opcion '-%c' duplicada\n",optopt);
                    fflush  (stderr);
                    return -1;
                }
                break;

            case 'l': /*-- Nivel de Log --*/
                if(!Logflag) {
                    stStatus.iLogNivel = (atoi(optarg) > 0)? atoi(optarg):iLOGNIVEL_DEF ;
                    Logflag=1;
                
                } else {
                    fprintf (stderr,"\n\tError >> opcion '-%c' duplicada\n",optopt);
                    fflush  (stderr);
                    return -1;
                }
                break;
            case 'n': /*-- Nombre de la Cola (codigo del proceso) --*/
                strcpy(szgCodProceso,optarg);
                break;
            case '?':
                fprintf (stderr,"\n\tError >> opcion '-%c' es desconocida\n",optopt);
                fflush  (stderr);
                return -1;

            case ':':
                fprintf (stderr,"\n\tError >> falta argumento para opcion '-%c'\n",optopt);
                fflush  (stderr);
                return -1;
        }
    } 
    pstLC->iLogLevel=stStatus.iLogNivel;
       return 0;

} /* bfnValidaParamatros */
/* ============================================================================= */

/* ============================================================================= */
/* ifnConexionDB() : Intenta Conectarse a la Base de Datos                       */
/* ============================================================================= */
int ifnConexionDB(LINEACOMANDO *pstLC)
{
char modulo[]="ifnConexionDB";
    
    if( bfnOraConnect(pstLC->szOraAccount,pstLC->szOraPasswd) == FALSE )    {
        fprintf (stderr,"\nNo hay conexion a ORACLE \n");
        fflush  (stderr);
        return -1;
    }
    
    return 0;
}
/* ============================================================================= */

/* ============================================================================= */
/* ifnPreparaArchivoLog(): Obtiene las Paths y define el nombre del archivo log  */
/* ============================================================================= */
int ifnPreparaArchivoLog()
{
char modulo[]="ifnPreparaArchivoLog";
int sts=0;
    
EXEC SQL BEGIN DECLARE SECTION;
    char szhPathLogSched[256]; EXEC SQL VAR szhPathLogSched IS STRING (256);
EXEC SQL END DECLARE SECTION;
 
	sprintf(stStatus.szFileName,"%s",szgCodProceso);

	sprintf(szhPathLogSched,"%s/CO_SCHEDULER",getenv("XPC_LOG"));
    
	sprintf(stStatus.szLogPathGene,"%s",szhPathLogSched);
	sts = ifnAbreArchivoLog(1); 
    
	return sts;
    
} /* end ifnPreparaArchivoLog */
/* ============================================================================= */

/* ============================================================================= */
/* ifnAbreArchivoLog(): Abre archivos de log, errores y estadisticas modo append */
/* if iCreaDir != 0 : crear directorio antes que el archivo                      */
/* ============================================================================= */
int ifnAbreArchivoLog(int iCrearDir)
{
char modulo[]="ifnAbreArchivoLog";
char szArchivoErr[256]=""; /* errores */
char szArchivoEst[256]=""; /* estadisticas */
char szComando[256]="";
static char szAux[9];
    
    memset(szArchivoLog,0,sizeof(szArchivoLog)); /* log */         
    memset(szArchivoErr,0,sizeof(szArchivoErr)); /* errores */     
    memset(szArchivoEst,0,sizeof(szArchivoEst)); /* estadisticas */

    strcpy (szAux,(char *)szSysDate("YYYYMMDD"));
    sprintf(szComando,"mkdir -p %s/%s",stStatus.szLogPathGene,szAux);

    if (system (szComando)!=0) {
        fprintf (stderr,"Error al intentar crear directorio de Log\n");
        fflush  (stderr);
        return -1;
    }

    sprintf(szArchivoLog,"%s/%s/%s.log",stStatus.szLogPathGene,szAux,stStatus.szFileName);
    sprintf(szArchivoErr,"%s/%s/%s.err",stStatus.szLogPathGene,szAux,stStatus.szFileName);
    sprintf(szArchivoEst,"%s/%s/%s.est",stStatus.szLogPathGene,szAux,stStatus.szFileName);
    
    if((stStatus.LogFile = fopen(szArchivoLog,"a")) == (FILE*)NULL ) {    
        fprintf (stderr,"Error al crear archivo de Log\n");
        fflush  (stderr);
        return -1;    
    }
    
    if((stStatus.ErrFile = fopen(szArchivoErr,"a")) == (FILE*)NULL ) {    
        fprintf (stderr,"Error al crear archivo de Errores\n");
        fflush  (stderr);
        return -1;    
    }

    if((stStatus.EstFile = fopen(szArchivoEst,"a")) == (FILE*)NULL ) {    
        fprintf (stderr,"Error al crear archivo de Estadisticas\n");
        fflush  (stderr);
        return -1;    
    }
    
    ifnTrazasLog(modulo, "%s - APERTURA DE ARCHIVO <%ld> -\n", LOG03,szGetTime(1),getpid());

    return 0;
    
}/* end ifnAbreArchivoLog */
/* ============================================================================= */

/* ============================================================================= */
/* vfnCierraArchivoLog(): cierra los descriptores de los archivos de logs  */
/* ============================================================================= */
void vfnCierraArchivoLog(void)
{
char modulo[]="vfnCierraArchivoLog";
    
    ifnTrazasLog(modulo, "%s -  CIERRE  DE ARCHIVO <%ld> -\n\n", LOG03,szGetTime(1),getpid());

    if ( fclose(stStatus.LogFile) != 0 )    {    
        fprintf (stderr,"Error al cerrar archivo de Log\n");
        fflush  (stderr);
    }

    if ( fclose(stStatus.ErrFile) != 0 )    {    
        fprintf (stderr,"Error al cerrar archivo de Errores\n");
        fflush  (stderr);
    }

    if ( fclose(stStatus.EstFile) != 0 )    {    
        fprintf (stderr,"Error al cerrar archivo de Estadisticas\n");
        fflush  (stderr);
    }
        
    return ;    
} /* end vfnCierraArchivoLog */
/* ============================================================================= */

/* ============================================================================= */
/*  ifnEjecutaCola() : Ejecuta la cola de acciones                               */
/* ============================================================================= */
int ifnEjecutaCola(void)
{
char modulo[]="ifnEjecutaCola";
char	szIniProc[9], szFinProc[9], szTmpProc[9];
int   iDifSegs = 0;

	sprintf( szIniProc, "%s", szSysDate( "HH24:MI:SS" ) );

	ifnTrazasLog( modulo, "Corriendo la cola lanzada ", LOG03 );
	ifnTrazasLog(modulo,"SALCO VERSION [%s]\n",LOG03, szVERSION);
	/*'Launched->Running'*/
	if( !bfnCambiaEstadoCola( szgCodProceso, "L", "R" ) ) {
	    if( !bfnOraRollBack() ) ifnTrazasLog( modulo, "En Rollback 'L->R' : %s", LOG00, SQLERRM );
	    return -1;

	}	else	{    
	    if( !bfnOraCommit() )   {    
	        ifnTrazasLog( modulo, "En Commit 'L->R' : %s", LOG00, SQLERRM );
	        if( !bfnOraRollBack() ) ifnTrazasLog( modulo, "En Rollback : %s", LOG00, SQLERRM );
	        return FALSE;    
	    }
	}
	/* Carga la estructura de manejo de decimales para la operadora local */
	if( !bGetParamDecimales() )	{
		ifnTrazasLog( modulo, "Error al realizar carga de bGetParamDecimales().", LOG03 );
		return -1;
	}
	
	if (ifnSaldoCliente() !=0 ) {
		ifnTrazasLog( modulo, "Error en Llamada a ifnSaldoCliente().", LOG03 );
		return -1;
	}
	
	/* Informacion Estadistica */
	sprintf( szFinProc, "%s", szSysDate( "HH24:MI:SS" ) );    
	if ( (iDifSegs=ifnRestaHoras(szIniProc,szFinProc,szTmpProc)) >= 0 )	{
	    ifnTrazasLog(modulo,"\n\tRESUMEN DEL PROCESO SALCO"
	                        "\n\t       HORA INICIO  : %s "
	                        "\n\t       HORA TERMINO : %s "
	                        "\n\t       TIEMPO TOTAL : %s  (%d segs)"
	                        "\n",EST00
	                        ,szIniProc,szFinProc,szTmpProc,iDifSegs);
	}


	ifnTrazasLog( modulo, "Volviendo la cola a espera ", LOG03 );
	/*'Running->Wait'*/
	if( !bfnCambiaEstadoCola( szgCodProceso, "R", "W") ) 	{
		if( !bfnOraRollBack() ) ifnTrazasLog( modulo, "En Rollback 'R->W' : %s", LOG00, SQLERRM );
		return -1;
	}

	EXEC SQL COMMIT;
	if (SQLCODE) {
	    fprintf (stdout,"\n\tError >> Fallo el Commit -  %s\n", SQLERRM );
	    fflush  (stdout);
		 return -1;
	}                            

	ifnTrazasLog( modulo, "Saliendo de %s ( Cola Wait )\n", LOG02, szgCodProceso );
	return 0;
}

/* ============================================================================= */
/*  ifnSaldoCliente() : Funcion que rescata los datos necesarios para poblar la  */
/*  tabla co_saldocons_to                                                           */
/* ============================================================================= */
int ifnSaldoCliente()
{
char modulo[]="ifnSaldoCliente";
long i, lTotalRows=0, lRowsThisLoop=0, lRowsProcessed=0, iRetSQLCODE=0; 
EXEC SQL BEGIN DECLARE SECTION;
		long   lhaCod_Cliente  [MAX_REG];
		char   szhaFec_Vencim  [MAX_REG][20];
		double dhaSaldo_Ven	  [MAX_REG];
EXEC SQL END DECLARE SECTION;    

	if (ifnDeleteSaldosCons()!=0) return -1;

	ifnTrazasLog( modulo, "Procedemos a Insertar \n\t", LOG03);
	/*EXEC SQL DECLARE curClientes CURSOR FOR */
	EXEC SQL
	INSERT INTO CO_SALDOCONS_TO
			(COD_CLIENTE    , 
			 FEC_VENCIMIE   , 
			 SALDO_VENCIDO  ,
			 SALDO_NOVENCIDO,
			 FEC_SALDO      )
	SELECT COD_CLIENTE,
	       MIN(FEC_VENCIMIE),
		    SUM(IMPORTE_DEBE - IMPORTE_HABER),
		    :ihValor_Cero ,
		    SYSDATE
	FROM   CO_CARTERA 
	WHERE  TRUNC(FEC_VENCIMIE) < TRUNC(SYSDATE)
	AND    NOT EXISTS (SELECT COD_VALOR		 FROM  CO_CODIGOS
					 		 WHERE  NOM_TABLA     = :szhCo_cartera
	                 	 AND    NOM_COLUMNA   = :szhCod_tipdocum 
					 		 AND    TO_CHAR(COD_TIPDOCUM) = COD_VALOR)							   						   
	AND    IND_FACTURADO = :ihValor_Uno
	GROUP BY  COD_CLIENTE
	HAVING SUM(IMPORTE_DEBE - IMPORTE_HABER) > :ihValor_Cero;


	lTotalRows = SQLROWS;    
	if( SQLCODE != SQLOK && SQLCODE != SQLNOTFOUND)	{
	    ifnTrazasLog(modulo,"Insert Select Co_SaldoCons_To - %s",LOG01,SQLERRM);
	    return -1;
	}

	ifnTrazasLog( modulo, "Total de registros insertados [%d]\n\t", LOG03, lTotalRows);

	if (ifnUpdateSaldoNoven()!=0) return -1;
	
	return 0;
}

/* ============================================================================= */
/*  ifnDeleteSaldosCons() : Funcion que borra la tabla co_saldocons_to              */
/* ============================================================================= */
int ifnDeleteSaldosCons()
{
char modulo[]="ifnSaldoCliente";

	ifnTrazasLog( modulo, "Eliminando Datos de CO_SALDOCONS_TO.\n", LOG03 );
	EXEC SQL
	DELETE FROM CO_SALDOCONS_TO;	
	if( SQLCODE != SQLOK && SQLCODE != SQLNOTFOUND)	{
	    ifnTrazasLog(modulo,"DELETE FROM CO_SALDOCONS_TO - %s",LOG01,SQLERRM);
	    return -1;
	}

	return 0;
}


/* ============================================================================= */
/*  ifnUpdateSaldoNoven() : Funcion que actualiza el saldo no vencido del cliente*/
/* ============================================================================= */
int ifnUpdateSaldoNoven()
{
char modulo[]="ifnUpdateSaldoNoven";
int  iRetSQLCODE = 0, i=0;
long lTotalRows = 0, lRowsThisLoop = 0, lRowsProcessed = 0;
EXEC SQL BEGIN DECLARE SECTION;
	  long    lahClientes   [MAX_REG];
	  double  dahSaldoNoven [MAX_REG];
EXEC SQL END DECLARE SECTION;

	ifnTrazasLog( modulo, "Cargando clientes de CO_SALDOCONS_TO.\n", LOG03 );
	EXEC SQL DECLARE c_ClientesNV CURSOR FOR
	SELECT COD_CLIENTE,SUM(IMPORTE_DEBE - IMPORTE_HABER)
	FROM   CO_CARTERA 
	/*WHERE  FEC_VENCIMIE > TRUNC(SYSDATE)*/
	WHERE  FEC_VENCIMIE >= TRUNC(SYSDATE)    /*HM-200505160045 18-05-2005 Soporte RyC PRM. Homologación de incidencia xc-200502250235 */
	AND    EXISTS (SELECT COD_CLIENTE FROM CO_SALDOCONS_TO)
	AND    NOT EXISTS (SELECT COD_VALOR	FROM  CO_CODIGOS
							 WHERE  NOM_TABLA     = :szhCo_cartera
				          AND    NOM_COLUMNA   = :szhCod_tipdocum 
							 AND    TO_CHAR(COD_TIPDOCUM) = COD_VALOR)							   						   
	AND    IND_FACTURADO = :ihValor_Uno
	GROUP BY COD_CLIENTE
	HAVING SUM(IMPORTE_DEBE - IMPORTE_HABER) > :ihValor_Cero;

	if( SQLCODE != SQLOK && SQLCODE != SQLNOTFOUND )	{
		ifnTrazasLog( modulo, "Error CURSOR c_ClientesNV %s.", LOG00, SQLERRM );  
		return -1;
	}	
	
	EXEC SQL OPEN c_ClientesNV;
	if( SQLCODE != SQLOK && SQLCODE != SQLNOTFOUND )	{
		ifnTrazasLog( modulo, "Error OPEN c_ClientesNV %s.", LOG00, SQLERRM );  
		return -1;
	}	

	while( 1 ) 
	{
		EXEC SQL 
		FETCH c_ClientesNV
	   INTO :lahClientes,
	   	  :dahSaldoNoven;

		if( SQLCODE != SQLOK && SQLCODE != SQLNOTFOUND ) {
			ifnTrazasLog( modulo, "\tEn FETCH c_ClientesNV\n\t %s", LOG01, SQLERRM );
			return -1;
		}

		lTotalRows = SQLROWS;    /* Total de filas recuperadas */
     	iRetSQLCODE = SQLCODE;
     	lRowsThisLoop = ( lTotalRows - lRowsProcessed );    /* filas recuperadas en esta iteracion (Total-Procesadas) */
		ifnTrazasLog( modulo, "lTotalRows = [%d], lRowsThisLoop = [%d]\n\t", LOG03, lTotalRows, lRowsThisLoop );


		for( i = 0; i < lRowsThisLoop; i++ ) {

				ifnTrazasLog( modulo, "\tlahClientes[i]     [%d]", LOG06, lahClientes[i] );
				EXEC SQL
				UPDATE CO_SALDOCONS_TO SET
						 SALDO_NOVENCIDO = :dahSaldoNoven[i]
				WHERE  COD_CLIENTE = :lahClientes[i];
				if( SQLCODE != SQLOK && SQLCODE != SQLNOTFOUND ) {
					ifnTrazasLog( modulo, "\tEn UPDATE CO_SALDOCONS_TO SET\n\t %s", LOG01, SQLERRM );
					return -1;
				}
		}

      lRowsProcessed = lTotalRows; /* Resetea Contador, Total las filas recuperadas se han procesado */
		if( iRetSQLCODE == SQLNOTFOUND )  {
			ifnTrazasLog( modulo, "\tFin de Datos c_ClientesNV.\n", LOG03 );
			break;
		}
	} 

	EXEC SQL CLOSE c_ClientesNV;
	if( SQLCODE != SQLOK && SQLCODE != SQLNOTFOUND )	{
		ifnTrazasLog( modulo, "Error CLOSE c_ClientesNV %s.", LOG00, SQLERRM );  
		return -1;
	}	

	return 0;
}

/******************************************************************************************/
/** Información de Versionado *************************************************************/
/******************************************************************************************/
/** Pieza                                               : */
/**  %ARCHIVE% */
/** Identificador en PVCS                               : */
/**  %PID% */
/** Producto                                            : */
/**  %PP% */
/** Revisión                                            : */
/**  %PR% */
/** Autor de la Revisión                                : */
/**  %AUTHOR% */
/** Estado de la Revisión ($TO_BE_DEFINED es Check-Out) : */
/**  %PS% */
/** Fecha de Creación de la Revisión                    : */
/**  %DATE% */
/** Worksets ******************************************************************************/
/** %PIRW% */
/** Historia ******************************************************************************/
/** %PL% */
/******************************************************************************************/
