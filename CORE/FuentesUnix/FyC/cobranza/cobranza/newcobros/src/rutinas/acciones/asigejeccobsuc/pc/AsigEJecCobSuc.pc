/* ============================================================================= */
/*
    Tipo        :  ACCION
    Nombre      :  AsigEJecCobSuc.pc ("AEJCS"->szfnAsigEJecCobSuc)
    Descripcion :  ASIGna un EJECutivo de COBranza por SUCursal
                   a todos los abonados del cliente dado
    Recibe      :  by Val -> Cod Cliente 
    Devuelve    :  "SQL"  -> Ocurrio un error de oracle ( queda registrado en el log )
                   "NOAGE"-> Fue imposible asignar un agente (entidad)
                   "NODIR"-> Fue imposible determinar la direccion (comuna) del cliente
                   "OK"   -> La accion se ejecuto correctamente
    Autor       :  Roy Barrera Richards
    Fecha       :  10 - Agosto - 2000 
Modificacion    :  12-11-2004
						 Por proyecto P_MAS-04037 se agregan 2 parametros a la accion
                   Puntero de archivo log tipo Hilo. 
                   Variable de contexto para instancia de BD tipo hilo
    
*/ 
/* ============================================================================= */

#define _COLIBGENERALES_PC_ /* Agregado por PGonzalez 20-10-2004 MAS-04037 */
#define _COLIBACCIONES_PC_  /* Agregado por PGonzalez 20-10-2004 MAS-04037 */
#include "AsigEJecCobSuc.h"
#define HOST_ARRAY_AGENTES  500     /* maximo de agentes por sucursal */

EXEC SQL INCLUDE sqlca;

/****************************************************************************************************/
/* funcion de asignacion de entidad de cobranza de sucursal											*/
/****************************************************************************************************/
char *szfnAsigEJecCobSuc(FILE **ArchLog, long lCliente, sql_context ctxCont )
{
EXEC SQL BEGIN DECLARE SECTION;
	long lhCodCliente = 0;
	char szhCodComuna[6];
	char szhCodAgente    [HOST_ARRAY_AGENTES][31];
	int ihPrcAsignado   [HOST_ARRAY_AGENTES];
	int ihMorososAgente [HOST_ARRAY_AGENTES];
	sql_context CXX;
EXEC SQL END DECLARE SECTION;

char modulo[] = "szfnAsigEJecCobSuc";
char szValParametro[21];
int i = 0, iMorososComuna = 0, iPorcentajeTotal = 0, iRet = 0;
long lTotalRows = 0;
float fPorcentajeDefinido = 0.0;
float fPorcentajeActual = 0.0;
FILE *pfLog = *ArchLog;
struct sqlca sqlca;

	CXX = ctxCont;
	EXEC SQL CONTEXT USE :CXX;
	
	ifnTrazaHilos( modulo,&pfLog, "Ingreso modulo => [%s].", LOG03, modulo );
	ifnTrazaHilos( modulo,&pfLog, "VERSION : [%s].", LOG03, szVersion);

	memset( szValParametro, '\0', sizeof( szValParametro ) );
	memset( szhCodComuna, '\0', sizeof( szhCodComuna ) );

   lhCodCliente = lCliente;

	/* obtenemos la entidad a la cual va dirigida la Cobranza Externa */
   if (ifnRecuperaGedParametro(&pfLog, "ENTIDAD_GESTION_COB", "CO", szValParametro, CXX )!=0) 
    	return "ERENC";

	rtrim( szValParametro );

	if( !strcmp( szValParametro, "C" ) )	/* la cobranza esta dirigida al cliente */
	{
	    /* Verificar si existen otros clientes de la cuenta, con agente asignado */    
	    iRet = ifnAsigEjecCliente(&pfLog, lCliente, "S", CXX );
	    if ( iRet < 0 )
	        return "EJEIN";		/* Fallo por error oracle */
	    else if( iRet == 1 )
	        return "OK";		/* Asigno mismo ejecutivo que los otros clientes del mismo rut y operadora */
	}
	else												/* la cobranza esta dirigida  ala cuenta */
	{
	    /*-- Verificar si el rut de este cliente ya tiene algun agente asignado --*/    
	    iRet = ifnAsigEjecRut(&pfLog, lCliente, CXX );
	    if( iRet < 0 )
	        return "EJEIN";		/* Fallo por error oracle */
	    else if( iRet == 1 )
	        return "OK";		/* Asigno mismo ejecutivo que los otros clientes del mismo rut */
	}

	/* se debe asignar ejecutivo segun corresponda */    
    /* Obtiene la Comuna del Cliente a partir del cod direccion de la dir de correspondencia */            
	sqlca.sqlcode=0; /* se resetea la vble sql para evitar rebalsamiento de memoria*/
	EXEC SQL 
	SELECT A.COD_COMUNA 
	  INTO :szhCodComuna
	  FROM GE_DIRECCIONES A, GA_DIRECCLI B
	 WHERE B.COD_CLIENTE = :lhCodCliente
	   AND B.COD_TIPDIRECCION = 3  
	   AND A.COD_DIRECCION = B.COD_DIRECCION;
 
    if( sqlca.sqlcode )
    {   
        ifnTrazaHilos( modulo,&pfLog, "Cliente => [%ld] NODIR => [%s].", LOG00, lhCodCliente, sqlca.sqlerrm.sqlerrmc ); 
        return "NODIR";    
    }

	rtrim( szhCodComuna );
	
	/* Obtiene los agentes de cobranzas de la comuna y sus porcentajes definidos */
	sqlca.sqlcode=0; /* se resetea la vble sql para evitar rebalsamiento de memoria*/
	EXEC SQL 
	DECLARE curAgentes CURSOR FOR
	SELECT A.COD_AGENTE,
		   A.PRC_ASIGNACION
	  FROM CO_ENTCOB C,
		   CO_AGENCOB B,
		   CO_AGENCOMU A
	 WHERE A.COD_COMUNA  = :szhCodComuna 
	   AND B.COD_AGENTE  = A.COD_AGENTE
	   AND C.COD_ENTIDAD = B.COD_ENTIDAD
	   AND C.TIP_ENTIDAD = 'S' ; /* SUCURSAL */

    if( sqlca.sqlcode )
    {   
		ifnTrazaHilos( modulo,&pfLog, "Cliente => [%ld] Comuna => [%s] DECLARE curAgentes => [%s].", LOG00, lhCodCliente, szhCodComuna, sqlca.sqlerrm.sqlerrmc );  
		return "ERSEL";   
    }

    EXEC SQL OPEN curAgentes ;
    if (sqlca.sqlcode)
    {   
		ifnTrazaHilos( modulo,&pfLog, "Cliente => [%ld] Comuna => [%s] OPEN curAgentes => [%s].", LOG00, lhCodCliente, szhCodComuna, sqlca.sqlerrm.sqlerrmc );  
        return "EROPE";   
    }

    sqlca.sqlcode=0; /* se resetea la vble sql para evitar rebalsamiento de memoria*/
    EXEC SQL 
    FETCH curAgentes 
     INTO :szhCodAgente, :ihPrcAsignado;

    lTotalRows = SQLROWS;    

    if( sqlca.sqlcode < 0 )
	{
		ifnTrazaHilos( modulo,&pfLog, "Cliente => [%ld] [Comuna => [%s] FETCH curAgentes => [%s].", LOG00, lhCodCliente, szhCodComuna, sqlca.sqlerrm.sqlerrmc );  
        return "ERFET";   
	}
	else if( sqlca.sqlcode != SQLNOTFOUND )	/* verifica no haber llegado al final de los datos */
	{
		ifnTrazaHilos( modulo,&pfLog, "Cliente => [%ld] Comuna => [%s] Desbordamiento Array para FETCH curAgentes => [%s].", LOG00, lhCodCliente, szhCodComuna, sqlca.sqlerrm.sqlerrmc );  
        return "ERARY";   
	}

    EXEC SQL CLOSE curAgentes ;
    if( sqlca.sqlcode )
    {   
		ifnTrazaHilos( modulo,&pfLog, "Cliente => [%ld] Comuna => [%s] CLOSE curAgentes => [%s].", LOG00, lhCodCliente, szhCodComuna, sqlca.sqlerrm.sqlerrmc );  
        return "ERCLO";   
    }

	if( lTotalRows > 0 ) /* recupero agentes*/
	{
		rtrim( szhCodAgente[0] );

		if( ( ihPrcAsignado[0] == 100 ) ) /*si el primer cliente tiene el 100 % asignado */ 
		{    
			sqlca.sqlcode=0; /* se resetea la vble sql para evitar rebalsamiento de memoria*/
			EXEC SQL 
			UPDATE CO_MOROSOS
			   SET COD_AGENTE = :szhCodAgente[0]		/* lo asigna de inmediato */
			 WHERE COD_CLIENTE = :lhCodCliente;

			if( sqlca.sqlcode )
			{   
				ifnTrazaHilos( modulo,&pfLog, "Cliente => [%ld] Comuna => [%s] UPDATE CO_MOROSOS => [%s].", LOG00, lhCodCliente, szhCodComuna, sqlca.sqlerrm.sqlerrmc );  
				return "ERUPD";            
			}
			else
			{   
				ifnTrazaHilos( modulo,&pfLog, "Cliente => [%ld] Agente => [%s] OK.", LOG03, lhCodCliente, szhCodAgente[0] );  
				return "OK";            
			}
		}            
		else /* el primero no tiene asignado el 100%, buscar entre todos cual asignar */
		{
			for( i = 0; i < lTotalRows; i++ ) /* procesar cada agente (contar sus morosos) */
			{
				rtrim( szhCodAgente[i] );
				rtrim( szhCodComuna );

				sqlca.sqlcode=0; /* se resetea la vble sql para evitar rebalsamiento de memoria*/
				EXEC SQL 
				SELECT --+RULE
					   COUNT( A.COD_CLIENTE )   
				  INTO :ihMorososAgente[i]
				  FROM GE_DIRECCIONES C, GA_DIRECCLI B, CO_MOROSOS A
				 WHERE A.COD_AGENTE = :szhCodAgente[i]
				   AND B.COD_CLIENTE = A.COD_CLIENTE
				   AND B.COD_TIPDIRECCION = 3
				   AND C.COD_DIRECCION = B.COD_DIRECCION
				   AND C.COD_COMUNA= :szhCodComuna;

				if( sqlca.sqlcode )
				{   
					ifnTrazaHilos( modulo,&pfLog, "Cliente => [%ld] Comuna => [%s] Agente => [%s] COUNT(*) CO_MOROSOS => [%s].", 
											LOG03, lhCodCliente, szhCodComuna, szhCodAgente[i], sqlca.sqlerrm.sqlerrmc );  
					return "ERSEL";
				}

				iMorososComuna += ihMorososAgente[i];      /* Acumula el total de morosos de la comuna */
				iPorcentajeTotal += ihPrcAsignado[i];      /* Suma los porcentajes de cada agente */
			} /* end for 1 */

			if( iPorcentajeTotal != 100 )
				ifnTrazaHilos( modulo,&pfLog, "Cliente => [%ld] LA SUMA DE PORCENTAJES NO DA 100%% [%d].", LOG02, lhCodCliente, iPorcentajeTotal );  

			for( i = 0; i < lTotalRows; i++ ) /* procesar cada agente (elegir cual asignar) */
			{
				fPorcentajeDefinido = (float) ihPrcAsignado[i];
				fPorcentajeActual = ( iMorososComuna == 0 ) ? 0.0 : (float)( (100 * (float)ihMorososAgente[i]) / (float)iMorososComuna );

				ifnTrazaHilos( modulo,&pfLog, "i[%d] COD_AGENTE => [%s] fPorcentajeDefinido => [%f] fPorcentajeActual => [%f].",
										LOG05, i, szhCodAgente[i], fPorcentajeDefinido, fPorcentajeActual );  

				if( fPorcentajeDefinido >= fPorcentajeActual )
				{   
					sqlca.sqlcode=0; /* se resetea la vble sql para evitar rebalsamiento de memoria*/
					EXEC SQL 
					UPDATE CO_MOROSOS
					   SET COD_AGENTE = :szhCodAgente[i]
					 WHERE COD_CLIENTE = :lhCodCliente;

					if( sqlca.sqlcode )
					{   
						ifnTrazaHilos( modulo,&pfLog, "Cliente => [%ld] Agente => [%s] UPDATE CO_MOROSOS => [%s].",
												LOG00, lhCodCliente, szhCodAgente[i], sqlca.sqlerrm.sqlerrmc );  
						return "ERUPD";
					}  

					ifnTrazaHilos( modulo,&pfLog, "Cliente => [%ld] Agente => [%s] OK.", LOG00, lhCodCliente, szhCodAgente[i] );  
					return "OK";
				}

				i = lTotalRows;
			} /* end for 2 */
		}
    }        
    
    /* 2 situaciones : ( lTotalRows <= 0 ) o nunca se cumplio que (fPorcentajeDefinido >= fPorcentajeActual )*/
    
    ifnTrazaHilos( modulo,&pfLog, "Cliente => [%ld] Comuna => [%s] NOAGE => No se encontraron agentes.", LOG01, lhCodCliente, szhCodComuna );  
    return "NOAGE";
}


/******************************************************************************************/
/** Información de Versionado *************************************************************/
/******************************************************************************************/
/** Pieza                                               : */
/**  %ARCHIVE% */
/** Identificador en PVCS                               : */
/**  %PID% */
/** Producto                                            : */
/**  %PP% */
/** Revisión                                            : */
/**  %PR% */
/** Autor de la Revisión                                : */
/**  %AUTHOR% */
/** Estado de la Revisión ($TO_BE_DEFINED es Check-Out) : */
/**  %PS% */
/** Fecha de Creación de la Revisión                    : */
/**  %DATE% */
/** Worksets ******************************************************************************/
/** %PIRW% */
/** Historia ******************************************************************************/
/** %PL% */
/******************************************************************************************/

