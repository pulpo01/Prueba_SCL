/* ============================================================================= */
/*
    Tipo        :  ACCION (REVERSA)
    Nombre      :  DesAsigDicom.pc ("DADIC"->szfnDesAsigDicom)
    Descripcion :  DES - ASIGna la categoria de cliente DICOM.
    Recibe      :  by Val -> Cod Cliente 
    Devuelve    :  "SQL"  -> Ocurrio un error de oracle ( queda registrado en el log )
                   "OK"   -> La accion se ejecuto correctamente
    Autor       :  Manuel Garcia G.
    Fecha       :  17 - Mayo - 2001 
===========================================================
Modificacion    :  12-11-2004
		             Por proyecto P_MAS-04037 se agregan 2 parametros a la accion
                   Puntero de archivo log tipo Hilo. 
                   Variable de contexto para instancia de BD tipo hilo
*/ 
/* ============================================================================= */

#define _COLIBGENERALES_PC_ /* Agregado por PGonzalez 20-10-2004 MAS-04037 */
#include "DesAsigDicom.h"
EXEC SQL INCLUDE sqlca;

/* =============================================================================*/
/* funcion de des - asignacion de Dicom						                  	*/
/* =============================================================================*/
char  *szfnDesAsigDicom (FILE **ptArchLog, long lCliente, sql_context ctxCont )
{
EXEC SQL BEGIN DECLARE SECTION;
   long lhCodCliente          = 0  ;
   char szhNumIdent[iLENNUMIDENT]       = "" ; EXEC SQL VAR szhNumIdent IS STRING (iLENNUMIDENT);
   char szhCodTipIdent[3]     = "" ; EXEC SQL VAR szhCodTipIdent IS STRING (3);
   char szhCodMovimiento[6]   = "" ; EXEC SQL VAR szhCodMovimiento IS STRING (6);
   char szhFecMovimiento[15]  = "" ; EXEC SQL VAR szhFecMovimiento IS STRING (15);
   long lhNumProceso          = 0  ;
   int ihCntClientes         = 0  ;       
   long lhCodCuenta			  = 0  ; 
	sql_context CXX;
EXEC SQL END DECLARE SECTION;
char	szhCodEntidad[] = "DICOM";
char	modulo[] = "szfnDesAsigDicom";
char	szRutina[] = "D";
char	szMovimiento[] = "B";
FILE *pfLog=*ptArchLog;
struct sqlca sqlca;

	CXX = ctxCont;
	EXEC SQL CONTEXT USE :CXX;
	ifnTrazaHilos( modulo,&pfLog, "Ingreso modulo => [%s].", LOG03, modulo );
	ifnTrazaHilos( modulo,&pfLog, "VERSION : [%s].", LOG03, szVersion);

	lhCodCliente = lCliente;
    
	/*-(0) Obtiene datos del cliente moroso que necesitara despues en la asignacion -----------*/
    sqlca.sqlcode=0; /* se resetea la vble sql para evitar rebalsamiento de memoria*/
    EXEC SQL
    SELECT NUM_IDENT, 
    		  COD_TIPIDENT,
    		  COD_CUENTA
    INTO  :szhNumIdent, 
    		 :szhCodTipIdent,
    		 :lhCodCuenta
    FROM  CO_MOROSOS
    WHERE COD_CLIENTE = :lhCodCliente ;

    if( sqlca.sqlcode != SQLOK )
    {
        ifnTrazaHilos( modulo,&pfLog, "(Cliente:%ld) Datos Adicionales CO_MOROSOS => %s", LOG00, lhCodCliente, sqlca.sqlerrm.sqlerrmc  );  
        return "SQL";
    }

    /*--(0.5) Obtener datos de Co_Dicom-----------*/  
    sqlca.sqlcode=0; /* se resetea la vble sql para evitar rebalsamiento de memoria*/
    EXEC SQL
	SELECT 	COD_MOVIMIENTO, 	NUM_PROCESO,	CNT_CLIENTES
	INTO  	:szhCodMovimiento, 	:lhNumProceso, 	:ihCntClientes
	FROM 	CO_DICOM
	WHERE 	NUM_IDENT 		= :szhNumIdent
	AND   	COD_TIPIDENT 	= :szhCodTipIdent
	AND	COD_MOVIMIENTO != 'B' 					
	AND   	COD_ENVIO 	   != 'B';
    if (sqlca.sqlcode != SQLOK && sqlca.sqlcode != SQLNOTFOUND)
    {
        ifnTrazaHilos( modulo,&pfLog, "(Cliente:%ld) select CO_DICOM => %s ",LOG00,lhCodCliente,sqlca.sqlerrm.sqlerrmc );  
        return "SQL";
    }
    if (sqlca.sqlcode == SQLNOTFOUND)
    {
        return "OK";
	}
  
    /*--(1) Verificar el estado del cod_movimiento */
    if ( strcmp( szhCodMovimiento, "EP" ) == 0 )          
    {
        ifnTrazaHilos( modulo,&pfLog, "(Cliente:%ld) Se encuentra 'EP' ",LOG05,lhCodCliente);  
        return "OK";
    }
    
	/*--(2) Verificar el num_proceso y el cnt_clientes */  
	sqlca.sqlcode=0; /* se resetea la vble sql para evitar rebalsamiento de memoria*/
	EXEC SQL
	UPDATE  CO_DICOM
	SET     COD_MOVIMIENTO  = 'M',
	        FEC_MOVIMIENTO  = SYSDATE 
	WHERE  NUM_IDENT        = :szhNumIdent
	  AND  COD_TIPIDENT     = :szhCodTipIdent ;

    if( sqlca.sqlcode )
    {
        ifnTrazaHilos( modulo,&pfLog, "(Cliente:%ld)(Proceso :%ld)(CntCli:%d)CO_DICOM => %s "
                           ,LOG00,lhCodCliente,lhNumProceso,ihCntClientes,sqlca.sqlerrm.sqlerrmc );  
        return "SQL";
    }
    else
    {
	    sprintf( szhCodEntidad, "DICOM" );
	    if( !bfnActualizaCoGestionClienteAcc(&pfLog, lhCodCliente, lhCodCuenta, szhNumIdent, szhCodTipIdent, 
										   szhCodEntidad, szRutina, szMovimiento, CXX ) )
		{
			return "PND";
		}


        return "OK";
    }
} 


/******************************************************************************************/
/** Información de Versionado *************************************************************/
/******************************************************************************************/
/** Pieza                                               : */
/**  %ARCHIVE% */
/** Identificador en PVCS                               : */
/**  %PID% */
/** Producto                                            : */
/**  %PP% */
/** Revisión                                            : */
/**  %PR% */
/** Autor de la Revisión                                : */
/**  %AUTHOR% */
/** Estado de la Revisión ($TO_BE_DEFINED es Check-Out) : */
/**  %PS% */
/** Fecha de Creación de la Revisión                    : */
/**  %DATE% */
/** Worksets ******************************************************************************/
/** %PIRW% */
/** Historia ******************************************************************************/
/** %PL% */
/******************************************************************************************/

