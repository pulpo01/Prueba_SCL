#ifndef NO_INDENT
#ident "@(#)$RCSfile: ClassDbProc.pc,v $ $Revision: 1.107 $ $Date: 2008/06/20 21:07:31 $"
#endif


#include "ClassDbProc.h"

EXEC SQL INCLUDE SQLCA;

EXEC SQL BEGIN DECLARE SECTION;
SQL_CURSOR cursor_cliente_docs;
EXEC SQL END DECLARE SECTION;

using namespace std;

/*
int ClassDbProc::getDoctosClientes( vector <estClientes> &_vec_dcto_clientes,int tipo_docum , int ciclo , long cliente_ini , long cliente_fin, long lmaxArray)
{
try
{
    EXEC SQL BEGIN DECLARE SECTION;
    char    szhRowid[MAX_ARRAY][19];  EXEC SQL var szhRowid is string(19);
    long    lhNumSecuenci[MAX_ARRAY];
    int     ihCodTipDocum[MAX_ARRAY];
    long    lhCodVendedorAgente[MAX_ARRAY];
    char    szhLetra[MAX_ARRAY][2]; EXEC SQL var szhLetra is string(2);
    int     ihCodCentrEmi[MAX_ARRAY];
    double  dhTotFactura[MAX_ARRAY];
    long    lhCodCliente[MAX_ARRAY];
    char    szhFecEmision[MAX_ARRAY][17]; EXEC SQL var szhFecEmision is string(17);
    char    szhIndOrdenTotal[MAX_ARRAY][13]; EXEC SQL var szhIndOrdenTotal is string(13);
    short   shIndSuperTel[MAX_ARRAY];
    long    lhNumFolio[MAX_ARRAY];
    char    szhNumCTC[MAX_ARRAY][13];  EXEC SQL var szhNumCTC is string(13);
    char    szhFecVencimie[MAX_ARRAY][17]; EXEC SQL var szhFecVencimie is string(17);
    char    szhFecCaducida[MAX_ARRAY][17]; EXEC SQL var szhFecCaducida is string(17);
    long    lhNumSecuRel[MAX_ARRAY];
    char    szhLetraRel[MAX_ARRAY][2]; EXEC SQL var szhLetraRel is string(2);
    int     ihCodTipDocumRel[MAX_ARRAY];
    long    lhCodVendedorAgenteRel[MAX_ARRAY];
    int     ihCodCentrRel[MAX_ARRAY];
    long    lhNumVenta[MAX_ARRAY];
    long    lhNumTransaccion[MAX_ARRAY];
    int     ihCodModVenta[MAX_ARRAY];
    int     ihIndFactur[MAX_ARRAY];
    long    lhNumProceso[MAX_ARRAY];
    char    szhPrefPlaza[MAX_ARRAY][11];  EXEC SQL var szhPrefPlaza is string(11);
    char    szhCodOperadoraScl[MAX_ARRAY][6]; EXEC SQL var szhCodOperadoraScl is string(6);
    char    szhCodPlaza[MAX_ARRAY][6]; EXEC SQL var szhCodPlaza is string(6);
    char    szhNomUsuarORA[MAX_ARRAY][31]; EXEC SQL var szhNomUsuarORA is string(31);
    char    szhCodTipIdent[MAX_ARRAY][3]; EXEC SQL var szhCodTipIdent is string(3);
    char    szhNumIdent[MAX_ARRAY][21];  EXEC SQL var szhNumIdent is string(21);
    int     ihIndPasoCobro[MAX_ARRAY];

    int registros;
    int itipo_docum;
    int iciclo;
    long icliente_ini;
    long icliente_fin;
    int ierror;
    int ilimite;
    char szhMenzajeError[255];  EXEC SQL var szhMenzajeError is string(255);
    int cant_reg;
    int ihind_paso_cobro;
    long lhMaxArray;
    EXEC SQL END DECLARE SECTION;

    cout << "TIPO DOCUMENTO : " << tipo_docum << endl;
    cout << "CICLO :" << ciclo << endl;
    cout << "CLIENTE INICIAL " << cliente_ini << endl;
    cout << "CLIENTE FINAL " << cliente_fin << endl;
    cout << "CANTIDAD DE REGISTROS A BUSCAR " << lmaxArray << endl;

    HighResolutionClock hrClock;

    hrClock.markStart();

    itipo_docum = tipo_docum;
    iciclo = ciclo;
    icliente_ini = cliente_ini;
    icliente_fin = cliente_fin;
    ihind_paso_cobro = 5;
    lhMaxArray = lmaxArray;

    registros = lmaxArray;

    for (int j=0;j<registros ;j++ )
    {
        lhNumSecuenci[j]=0;
        ihCodTipDocum[j]=0;
        lhCodVendedorAgente[j]=0;
        CLEAR(szhLetra[j]);
        ihCodCentrEmi[j]=0;
        dhTotFactura[j]=0.0;
        lhCodCliente[j]=0;
        CLEAR(szhFecEmision[j]);
        CLEAR(szhIndOrdenTotal[j]);
        shIndSuperTel[j]=0;
        lhNumFolio[j]=0;
        CLEAR(szhNumCTC[j]);
        CLEAR(szhFecVencimie[j]);
        CLEAR(szhFecCaducida[j]);
        lhNumSecuRel[j]=0;
        CLEAR(szhLetraRel[j]);
        ihCodTipDocumRel[j]=0;
        lhCodVendedorAgenteRel[j]=0;
        ihCodCentrRel[j]=0;
        lhNumVenta[j]=0;
        lhNumTransaccion[j]=0;
        ihCodModVenta[j]=0;
        ihIndFactur[j]=0;
        lhNumProceso[j]=0;
        CLEAR(szhPrefPlaza[j]);
        CLEAR(szhCodOperadoraScl[j]);
        CLEAR(szhCodPlaza[j]);
        CLEAR(szhNomUsuarORA[j]);
        CLEAR(szhCodTipIdent[j]);
        CLEAR(szhNumIdent[j]);
        ihIndPasoCobro[j]=0;
    }

    EXEC SQL ARRAYLEN szhRowid (registros) EXECUTE;
    EXEC SQL ARRAYLEN lhNumSecuenci (registros) EXECUTE;
    EXEC SQL ARRAYLEN ihCodTipDocum (registros) EXECUTE;
    EXEC SQL ARRAYLEN lhCodVendedorAgente (registros) EXECUTE;
    EXEC SQL ARRAYLEN szhLetra (registros) EXECUTE;
    EXEC SQL ARRAYLEN ihCodCentrEmi (registros) EXECUTE;
    EXEC SQL ARRAYLEN dhTotFactura (registros) EXECUTE;
    EXEC SQL ARRAYLEN lhCodCliente (registros) EXECUTE;
    EXEC SQL ARRAYLEN szhFecEmision (registros) EXECUTE;
    EXEC SQL ARRAYLEN szhIndOrdenTotal (registros) EXECUTE;
    EXEC SQL ARRAYLEN shIndSuperTel (registros) EXECUTE;
    EXEC SQL ARRAYLEN lhNumFolio (registros) EXECUTE;
    EXEC SQL ARRAYLEN szhNumCTC (registros) EXECUTE;
    EXEC SQL ARRAYLEN szhFecVencimie (registros) EXECUTE;
    EXEC SQL ARRAYLEN szhFecCaducida (registros) EXECUTE;
    EXEC SQL ARRAYLEN lhNumSecuRel (registros) EXECUTE;
    EXEC SQL ARRAYLEN szhLetraRel (registros) EXECUTE;
    EXEC SQL ARRAYLEN ihCodTipDocumRel (registros) EXECUTE;
    EXEC SQL ARRAYLEN lhCodVendedorAgenteRel (registros) EXECUTE;
    EXEC SQL ARRAYLEN ihCodCentrRel (registros) EXECUTE;
    EXEC SQL ARRAYLEN lhNumVenta (registros) EXECUTE;
    EXEC SQL ARRAYLEN lhNumTransaccion (registros) EXECUTE;
    EXEC SQL ARRAYLEN ihCodModVenta (registros) EXECUTE;
    EXEC SQL ARRAYLEN ihIndFactur (registros) EXECUTE;
    EXEC SQL ARRAYLEN lhNumProceso (registros) EXECUTE;
    EXEC SQL ARRAYLEN szhPrefPlaza (registros) EXECUTE;
    EXEC SQL ARRAYLEN szhCodOperadoraScl (registros) EXECUTE;
    EXEC SQL ARRAYLEN szhCodPlaza (registros) EXECUTE;
    EXEC SQL ARRAYLEN szhNomUsuarORA (registros) EXECUTE;
    EXEC SQL ARRAYLEN szhCodTipIdent (registros) EXECUTE;
    EXEC SQL ARRAYLEN szhNumIdent (registros) EXECUTE;
    EXEC SQL ARRAYLEN ihIndPasoCobro (registros) EXECUTE;

    CLEAR(szhMenzajeError);
    ierror=0;

    EXEC SQL EXECUTE
        DECLARE
           registroInOut  CO_PASOCOBROS_SB_PG.CO_DOCUMENTOS_LT;
        BEGIN
           CO_PASOCOBROS_SB_PG.CO_LEER_DOCUMENTOS_PR(:itipo_docum, NULL, NULL,:lhMaxArray,:ihind_paso_cobro,:cant_reg,registroInOut,:ierror,:szhMenzajeError);
           FOR j IN 1..:cant_reg loop
               :lhNumSecuenci(j) := registroInOut(j).num_secuenci;
               :ihCodTipDocum(j) := registroInOut(j).COD_TIPDOCUM;
               :lhCodVendedorAgente(j) := registroInOut(j).COD_VENDEDOR_AGENTE;
               :szhLetra(j) := registroInOut(j).LETRA;
               :ihCodCentrEmi(j) := registroInOut(j).COD_CENTREMI;
               :dhTotFactura(j) := registroInOut(j).TOT_FACTURA;
               :lhCodCliente(j) := registroInOut(j).COD_CLIENTE;
               :szhFecEmision(j) := registroInOut(j).FEC_EMISION;
               :szhIndOrdenTotal(j) := registroInOut(j).IND_ORDENTOTAL;
               :shIndSuperTel(j) := registroInOut(j).IND_SUPERTEL;
               :lhNumFolio(j) := registroInOut(j).NUM_FOLIO;
               :szhNumCTC(j) := registroInOut(j).NUM_CTC;
               :szhFecVencimie(j) := registroInOut(j).FEC_VENCIMIE;
               :szhFecCaducida(j) := registroInOut(j).FEC_CADUCIDAD;
               :lhNumSecuRel(j) := registroInOut(j).NUM_SECUREL;
               :szhLetraRel(j) := registroInOut(j).LETRAREL;
               :ihCodTipDocumRel(j) := registroInOut(j).COD_TIPDOCUMREL;
               :lhCodVendedorAgenteRel(j) := registroInOut(j).COD_VENDEDOR_AGENTEREL;
               :ihCodCentrRel(j) := registroInOut(j).COD_CENTRREL;
               :lhNumVenta(j) := registroInOut(j).NUM_VENTA;
               :lhNumTransaccion(j) := registroInOut(j).NUM_TRANSACCION;
               :ihCodModVenta(j) := registroInOut(j).COD_MODVENTA;
               :ihIndFactur(j) := registroInOut(j).IND_FACTUR;
               :lhNumProceso(j) := registroInOut(j).NUM_PROCESO;
               :szhPrefPlaza(j) := registroInOut(j).PREF_PLAZA;
               :szhCodOperadoraScl(j) := registroInOut(j).COD_OPERADORA;
               :szhCodPlaza(j) := registroInOut(j).COD_PLAZA;
               :szhNomUsuarORA(j) := registroInOut(j).NOM_USUARORA;
               :szhCodTipIdent(j) := registroInOut(j).COD_TIPIDENT;
               :szhNumIdent(j) := registroInOut(j).NUM_IDENT;
           END LOOP;
        END;
    END-EXEC;

    if (sqlca.sqlcode != 0)
    {
       cout << "FALLO EN EJECUCION DE PACKAGE CO_PASOCOBROS_SB_PG.CO_LEER_DOCUMENTOS_PR" << endl;
       cout << "MENSAJE ERROR :" << szhMenzajeError << endl;
       cout << "ERROR         :" << ierror << endl;
       cout << "SQLCODE     :" << sqlca.sqlcode << endl;
       cout << "DESCRIPCION :" << sqlca.sqlerrm.sqlerrmc << endl;
       return 0;
    }
    cout << "CANTIDAD DE REGISTROS : " << cant_reg << endl;

    for(int i=0;i<cant_reg;i++)
    {
         estClientes this_dcto_clientes;
         this_dcto_clientes.limpia();
         this_dcto_clientes.lhNumSecuenci = lhNumSecuenci[i];
         this_dcto_clientes.ihCodTipDocum = ihCodTipDocum[i];
         this_dcto_clientes.lhCodVendedorAgente = lhCodVendedorAgente[i];
         strcpy(this_dcto_clientes.szhLetra,szhLetra[i]);
         this_dcto_clientes.ihCodCentrEmi =ihCodCentrEmi[i];
         this_dcto_clientes.dhTotFactura = dhTotFactura[i];
         this_dcto_clientes.lhCodCliente = lhCodCliente[i];
         strcpy(this_dcto_clientes.szhFecEmision,szhFecEmision[i]);
         strcpy(this_dcto_clientes.szhIndOrdenTotal,szhIndOrdenTotal[i]);
         this_dcto_clientes.shIndSuperTel=shIndSuperTel[i];
         this_dcto_clientes.lhNumFolio = lhNumFolio[i];
         strcpy(this_dcto_clientes.szhNumCTC,szhNumCTC[i]);
         strcpy(this_dcto_clientes.szhFecVencimie,szhFecVencimie[i]);
         strcpy(this_dcto_clientes.szhFecCaducida,szhFecCaducida[i]);
         this_dcto_clientes.lhNumSecuRel = lhNumSecuRel[i];
         strcpy(this_dcto_clientes.szhLetraRel,szhLetraRel[i]);
         this_dcto_clientes.ihCodTipDocumRel = ihCodTipDocumRel[i];
         this_dcto_clientes.lhCodVendedorAgenteRel = lhCodVendedorAgenteRel[i];
         this_dcto_clientes.ihCodCentrRel = ihCodCentrRel[i];
         this_dcto_clientes.lhNumVenta = lhNumVenta[i];
         this_dcto_clientes.lhNumTransaccion = lhNumTransaccion[i];
         this_dcto_clientes.ihCodModVenta = ihCodModVenta[i];
         this_dcto_clientes.ihIndFactur = ihIndFactur[i];
         this_dcto_clientes.lhNumProceso = lhNumProceso[i];
         strcpy(this_dcto_clientes.szhPrefPlaza,szhPrefPlaza[i]);
         strcpy(this_dcto_clientes.szhCodOperadoraScl,szhCodOperadoraScl[i]);
         strcpy(this_dcto_clientes.szhCodPlaza,szhCodPlaza[i]);
         strcpy(this_dcto_clientes.szhNomUsuarORA,szhNomUsuarORA[i]);
         strcpy(this_dcto_clientes.szhCodTipIdent,szhCodTipIdent[i]);
         strcpy(this_dcto_clientes.szhNumIdent,szhNumIdent[i]);
         this_dcto_clientes.ihIndPasoCobro = 0;
         _vec_dcto_clientes.push_back(this_dcto_clientes);
    }

    hrClock.markEnd();

    cout << "REGISTROS EN EL VECTOR : " << _vec_dcto_clientes.size() << endl;


    cout << "\t[getDoctosClientes]: eTimeMSEC = [" << hrClock.getElapsedTimeMSEC() << "]..." << endl;
    cout << "\t[getDoctosClientes]: eTimeSEC  = [" << hrClock.getElapsedTimeSEC()  << "]..." << endl << endl;

    return 1;
}
catch (...)
{
    return 0;
}
};*/

int ClassDbProc::getDoctosClientesArray( vector <estClientes> &_vec_dcto_clientes,int tipo_docum , int ciclo , long cliente_ini , long cliente_fin, long lmaxArray)
{
try
{
    EXEC SQL BEGIN DECLARE SECTION;
    char    szhRowid[MAX_ARRAY][19];  EXEC SQL var szhRowid is string(19);
    long    lhNumSecuenci[MAX_ARRAY];
    int     ihCodTipDocum[MAX_ARRAY];
    long    lhCodVendedorAgente[MAX_ARRAY];
    char    szhLetra[MAX_ARRAY][2]; EXEC SQL var szhLetra is string(2);
    int     ihCodCentrEmi[MAX_ARRAY];
    double  dhTotFactura[MAX_ARRAY];
    long    lhCodCliente[MAX_ARRAY];
    char    szhFecEmision[MAX_ARRAY][17]; EXEC SQL var szhFecEmision is string(17);
    char    szhIndOrdenTotal[MAX_ARRAY][13]; EXEC SQL var szhIndOrdenTotal is string(13);
    long    lhIndOrdenTotal[MAX_ARRAY];
    short   shIndSuperTel[MAX_ARRAY];
    long    lhNumFolio[MAX_ARRAY];
    char    szhNumCTC[MAX_ARRAY][13];  EXEC SQL var szhNumCTC is string(13);
    char    szhFecVencimie[MAX_ARRAY][17]; EXEC SQL var szhFecVencimie is string(17);
    char    szhFecCaducida[MAX_ARRAY][17]; EXEC SQL var szhFecCaducida is string(17);
    long    lhNumSecuRel[MAX_ARRAY];
    char    szhLetraRel[MAX_ARRAY][2]; EXEC SQL var szhLetraRel is string(2);
    int     ihCodTipDocumRel[MAX_ARRAY];
    long    lhCodVendedorAgenteRel[MAX_ARRAY];
    int     ihCodCentrRel[MAX_ARRAY];
    long    lhNumVenta[MAX_ARRAY];
    long    lhNumTransaccion[MAX_ARRAY];
    int     ihCodModVenta[MAX_ARRAY];
    int     ihIndFactur[MAX_ARRAY];
    long    lhNumProceso[MAX_ARRAY];
    char    szhPrefPlaza[MAX_ARRAY][26];  EXEC SQL var szhPrefPlaza is string(26);
    char    szhCodOperadoraScl[MAX_ARRAY][6]; EXEC SQL var szhCodOperadoraScl is string(6);
    char    szhCodPlaza[MAX_ARRAY][6]; EXEC SQL var szhCodPlaza is string(6);
    char    szhNomUsuarORA[MAX_ARRAY][31]; EXEC SQL var szhNomUsuarORA is string(31);
    char    szhCodTipIdent[MAX_ARRAY][3]; EXEC SQL var szhCodTipIdent is string(3);
    char    szhNumIdent[MAX_ARRAY][21];  EXEC SQL var szhNumIdent is string(21);
    int     ihIndPasoCobro[MAX_ARRAY];

    long registros;
    int itipo_docum;
    int iciclo;
    int cant_reg;
    int ihind_paso_cobro;
    /*long lhMaxArray;*/
    EXEC SQL END DECLARE SECTION;

/*    cout << "CICLO :" << ciclo << endl;
    cout << "CLIENTE INICIAL " << cliente_ini << endl;
    cout << "CLIENTE FINAL " << cliente_fin << endl;
    cout << "CANTIDAD DE REGISTROS A BUSCAR " << lmaxArray << endl;*/

    HighResolutionClock hrClock;

    hrClock.markStart();

    itipo_docum = tipo_docum;
    iciclo = ciclo;
    ihind_paso_cobro = 0;
    /*lhMaxArray = lmaxArray;*/
    registros = lmaxArray;

/*    cout << "TIPO DOCUMENTO : " << itipo_docum << endl;
    cout << "MAXIMO DE REGISTROS A CONSULTAR" << endl;*/

    for (int j=0;j<registros ;j++ )
    {
        lhNumSecuenci[j]=-2;
        ihCodTipDocum[j]=0;
        lhCodVendedorAgente[j]=0;
        CLEAR(szhLetra[j]);
        ihCodCentrEmi[j]=0;
        dhTotFactura[j]=0.0;
        lhCodCliente[j]=0;
        CLEAR(szhFecEmision[j]);
        CLEAR(szhIndOrdenTotal[j]);
        shIndSuperTel[j]=0;
        lhNumFolio[j]=0;
        CLEAR(szhNumCTC[j]);
        CLEAR(szhFecVencimie[j]);
        CLEAR(szhFecCaducida[j]);
        lhNumSecuRel[j]=0;
        CLEAR(szhLetraRel[j]);
        ihCodTipDocumRel[j]=0;
        lhCodVendedorAgenteRel[j]=0;
        ihCodCentrRel[j]=0;
        lhNumVenta[j]=0;
        lhNumTransaccion[j]=0;
        ihCodModVenta[j]=0;
        ihIndFactur[j]=0;
        lhNumProceso[j]=0;
        CLEAR(szhPrefPlaza[j]);
        CLEAR(szhCodOperadoraScl[j]);
        CLEAR(szhCodPlaza[j]);
        CLEAR(szhNomUsuarORA[j]);
        CLEAR(szhCodTipIdent[j]);
        CLEAR(szhNumIdent[j]);
        ihIndPasoCobro[j]=0;
    }

    registros++;
    sqlca.sqlcode = 0;

    EXEC SQL
        SELECT  d.NUM_SECUENCI,
                d.COD_TIPDOCUM,
                d.COD_VENDEDOR_AGENTE,
                d.LETRA,
                d.COD_CENTREMI,
                d.ind_pasocobro,
                TO_CHAR(d.FEC_EMISION ,'YYYYMMDDHH24MISS'),
                d.NOM_USUARORA,
                d.IND_ORDENTOTAL,
                d.IND_SUPERTEL,
                d.NUM_PROCESO,
                d.NUM_FOLIO,
                NVL(TO_CHAR(d.FEC_VENCIMIE ,'YYYYMMDDHH24MISS'),' '),
                NVL(TO_CHAR(d.FEC_CADUCIDA ,'YYYYMMDDHH24MISS'),' '),
                NVL(d.NUM_SECUREL,-1),
                NVL(d.LETRAREL,' '),
                NVL(d.COD_TIPDOCUMREL,-1),
                NVL(d.COD_VENDEDOR_AGENTEREL, -1),
                NVL(d.COD_CENTRREL, -1),
                NVL(d.NUM_VENTA,-1),
                NVL(d.NUM_TRANSACCION,-1),
                NVL(d.NUM_CTC,' '),
                NVL(d.COD_MODVENTA,-1),
                d.TOT_FACTURA,
                d.IND_FACTUR,
                NVL(d.PREF_PLAZA,' '),
                d.COD_OPERADORA,
                d.COD_PLAZA,
                d.COD_CLIENTE,
                c.COD_TIPIDENT,
                c.NUM_IDENT
            INTO
                :lhNumSecuenci,
                :ihCodTipDocum,
                :lhCodVendedorAgente,
                :szhLetra,
                :ihCodCentrEmi,
                :ihIndPasoCobro,
                :szhFecEmision,
                :szhNomUsuarORA,
                :szhIndOrdenTotal,
                :shIndSuperTel,
                :lhNumProceso,
                :lhNumFolio,
                :szhFecVencimie,
                :szhFecCaducida,
                :lhNumSecuRel,
                :szhLetraRel,
                :ihCodTipDocumRel,
                :lhCodVendedorAgenteRel,
                :ihCodCentrRel,
                :lhNumVenta,
                :lhNumTransaccion,
                :szhNumCTC,
                :ihCodModVenta,
                :dhTotFactura,
                :ihIndFactur,
                :szhPrefPlaza,
                :szhCodOperadoraScl,
                :szhCodPlaza,
                :lhCodCliente,
                :szhCodTipIdent,
                :szhNumIdent
            FROM FA_DOCUMENTOS_SY d, GE_CLIENTES c
            WHERE c.cod_cliente (+) = d.cod_cliente
            AND d.cod_tipdocum = :itipo_docum
            AND d.ind_pasocobro = 0
            AND ROWNUM < :registros;

    if ((sqlca.sqlerrd[2] == 0) && (sqlca.sqlcode != 1403))
    {
       cout << "FALLO EN EJECUCION DE QUERY DOCUMENTOS CON HOST ARRAY(1)" << endl;
       cout << "SQLCODE     :" << sqlca.sqlcode << endl;
	   cout << "REGISTROS   :" << sqlca.sqlerrd[2] << endl;
       cout << "DESCRIPCION :" << sqlca.sqlerrm.sqlerrmc << endl;
       return 0;
    }

    cout << "CANTIDAD DE REGISTROS : " << sqlca.sqlerrd[2] << endl;

    for(int i=0; i<sqlca.sqlerrd[2] ;i++)
    {
         estClientes this_dcto_clientes;
         this_dcto_clientes.limpia();
         this_dcto_clientes.lhNumSecuenci = lhNumSecuenci[i];
         this_dcto_clientes.ihCodTipDocum = ihCodTipDocum[i];
         this_dcto_clientes.lhCodVendedorAgente = lhCodVendedorAgente[i];
         strcpy(this_dcto_clientes.szhLetra,szhLetra[i]);
         this_dcto_clientes.ihCodCentrEmi =ihCodCentrEmi[i];
         this_dcto_clientes.dhTotFactura = dhTotFactura[i];
         this_dcto_clientes.lhCodCliente = lhCodCliente[i];
         strcpy(this_dcto_clientes.szhFecEmision,szhFecEmision[i]);
         strcpy(this_dcto_clientes.szhIndOrdenTotal,szhIndOrdenTotal[i]);
         this_dcto_clientes.shIndSuperTel=shIndSuperTel[i];
         this_dcto_clientes.lhNumFolio = lhNumFolio[i];
         strcpy(this_dcto_clientes.szhNumCTC,szhNumCTC[i]);
         strcpy(this_dcto_clientes.szhFecVencimie,szhFecVencimie[i]);
         strcpy(this_dcto_clientes.szhFecCaducida,szhFecCaducida[i]);
         this_dcto_clientes.lhNumSecuRel = lhNumSecuRel[i];
         strcpy(this_dcto_clientes.szhLetraRel,szhLetraRel[i]);
         this_dcto_clientes.ihCodTipDocumRel = ihCodTipDocumRel[i];
         this_dcto_clientes.lhCodVendedorAgenteRel = lhCodVendedorAgenteRel[i];
         this_dcto_clientes.ihCodCentrRel = ihCodCentrRel[i];
         this_dcto_clientes.lhNumVenta = lhNumVenta[i];
         this_dcto_clientes.lhNumTransaccion = lhNumTransaccion[i];
         this_dcto_clientes.ihCodModVenta = ihCodModVenta[i];
         this_dcto_clientes.ihIndFactur = ihIndFactur[i];
         this_dcto_clientes.lhNumProceso = lhNumProceso[i];
         strcpy(this_dcto_clientes.szhPrefPlaza,szhPrefPlaza[i]);
         strcpy(this_dcto_clientes.szhCodOperadoraScl,szhCodOperadoraScl[i]);
         strcpy(this_dcto_clientes.szhCodPlaza,szhCodPlaza[i]);
         strcpy(this_dcto_clientes.szhNomUsuarORA,szhNomUsuarORA[i]);
         strcpy(this_dcto_clientes.szhCodTipIdent,szhCodTipIdent[i]);
         strcpy(this_dcto_clientes.szhNumIdent,szhNumIdent[i]);
         this_dcto_clientes.ihIndPasoCobro = 0;
         _vec_dcto_clientes.push_back(this_dcto_clientes);
    }

    hrClock.markEnd();

    cout << "REGISTROS EN EL VECTOR CON HOST ARRAY: " << _vec_dcto_clientes.size() << endl;
    cout << "\t[getDoctosClientesArray]: eTimeMSEC = [" << hrClock.getElapsedTimeMSEC() << "]..." << endl;
    cout << "\t[getDoctosClientesArray]: eTimeSEC  = [" << hrClock.getElapsedTimeSEC()  << "]..." << endl << endl;

    return 1;
}
catch (...)
{
    return 0;
}
};


int ClassDbProc::getDoctosClientesArray( vector <estClientes> &_vec_dcto_clientes,int tipo_docum , int ciclo , long cliente_ini , long cliente_fin, long lmaxArray,int multi)
{
try
{
    EXEC SQL BEGIN DECLARE SECTION;
    char    szhRowid[MAX_ARRAY][19];  EXEC SQL var szhRowid is string(19);
    long    lhNumSecuenci[MAX_ARRAY];
    int     ihCodTipDocum[MAX_ARRAY];
    long    lhCodVendedorAgente[MAX_ARRAY];
    char    szhLetra[MAX_ARRAY][2]; EXEC SQL var szhLetra is string(2);
    int     ihCodCentrEmi[MAX_ARRAY];
    double  dhTotFactura[MAX_ARRAY];
    long    lhCodCliente[MAX_ARRAY];
    char    szhFecEmision[MAX_ARRAY][17]; EXEC SQL var szhFecEmision is string(17);
    char    szhIndOrdenTotal[MAX_ARRAY][13]; EXEC SQL var szhIndOrdenTotal is string(13);
    short   shIndSuperTel[MAX_ARRAY];
    long    lhNumFolio[MAX_ARRAY];
    char    szhNumCTC[MAX_ARRAY][13];  EXEC SQL var szhNumCTC is string(13);
    char    szhFecVencimie[MAX_ARRAY][17]; EXEC SQL var szhFecVencimie is string(17);
    char    szhFecCaducida[MAX_ARRAY][17]; EXEC SQL var szhFecCaducida is string(17);
    long    lhNumSecuRel[MAX_ARRAY];
    char    szhLetraRel[MAX_ARRAY][2]; EXEC SQL var szhLetraRel is string(2);
    int     ihCodTipDocumRel[MAX_ARRAY];
    long    lhCodVendedorAgenteRel[MAX_ARRAY];
    int     ihCodCentrRel[MAX_ARRAY];
    long    lhNumVenta[MAX_ARRAY];
    long    lhNumTransaccion[MAX_ARRAY];
    int     ihCodModVenta[MAX_ARRAY];
    int     ihIndFactur[MAX_ARRAY];
    long    lhNumProceso[MAX_ARRAY];
    char    szhPrefPlaza[MAX_ARRAY][26];  EXEC SQL var szhPrefPlaza is string(26);
    char    szhCodOperadoraScl[MAX_ARRAY][6]; EXEC SQL var szhCodOperadoraScl is string(6);
    char    szhCodPlaza[MAX_ARRAY][6]; EXEC SQL var szhCodPlaza is string(6);
    char    szhNomUsuarORA[MAX_ARRAY][31]; EXEC SQL var szhNomUsuarORA is string(31);
    char    szhCodTipIdent[MAX_ARRAY][3]; EXEC SQL var szhCodTipIdent is string(3);
    char    szhNumIdent[MAX_ARRAY][21];  EXEC SQL var szhNumIdent is string(21);
    int     ihIndPasoCobro[MAX_ARRAY];

    long registros;
    int itipo_docum;
    int iciclo;
    int cant_reg;
    int ihind_paso_cobro;
    long ihcliente_ini;
    long ihcliente_fin;
    /*long lhMaxArray;*/
    EXEC SQL END DECLARE SECTION;

/*    cout << "CICLO :" << ciclo << endl;
    cout << "CLIENTE INICIAL " << cliente_ini << endl;
    cout << "CLIENTE FINAL " << cliente_fin << endl;
    cout << "CANTIDAD DE REGISTROS A BUSCAR " << lmaxArray << endl;*/

    HighResolutionClock hrClock;

    hrClock.markStart();

    itipo_docum = tipo_docum;
    iciclo = ciclo;
    ihind_paso_cobro = 0;
    /*lhMaxArray = lmaxArray;*/
    registros = lmaxArray;

    if(multi)
    {
        ihcliente_ini = cliente_ini;
        ihcliente_fin = cliente_fin;
    }

/*    cout << "TIPO DOCUMENTO : " << itipo_docum << endl;
    cout << "MAXIMO DE REGISTROS A CONSULTAR" << endl;*/

    for (int j=0;j<registros ;j++ )
    {
        lhNumSecuenci[j]=-2;
        ihCodTipDocum[j]=0;
        lhCodVendedorAgente[j]=0;
        CLEAR(szhLetra[j]);
        ihCodCentrEmi[j]=0;
        dhTotFactura[j]=0.0;
        lhCodCliente[j]=0;
        CLEAR(szhFecEmision[j]);
        CLEAR(szhIndOrdenTotal[j]);
        shIndSuperTel[j]=0;
        lhNumFolio[j]=0;
        CLEAR(szhNumCTC[j]);
        CLEAR(szhFecVencimie[j]);
        CLEAR(szhFecCaducida[j]);
        lhNumSecuRel[j]=0;
        CLEAR(szhLetraRel[j]);
        ihCodTipDocumRel[j]=0;
        lhCodVendedorAgenteRel[j]=0;
        ihCodCentrRel[j]=0;
        lhNumVenta[j]=0;
        lhNumTransaccion[j]=0;
        ihCodModVenta[j]=0;
        ihIndFactur[j]=0;
        lhNumProceso[j]=0;
        CLEAR(szhPrefPlaza[j]);
        CLEAR(szhCodOperadoraScl[j]);
        CLEAR(szhCodPlaza[j]);
        CLEAR(szhNomUsuarORA[j]);
        CLEAR(szhCodTipIdent[j]);
        CLEAR(szhNumIdent[j]);
        ihIndPasoCobro[j]=0;
    }

    registros++;
    sqlca.sqlcode = 0;

    if(multi)
    {
        EXEC SQL
        SELECT  d.NUM_SECUENCI,
                d.COD_TIPDOCUM,
                d.COD_VENDEDOR_AGENTE,
                d.LETRA,
                d.COD_CENTREMI,
                d.ind_pasocobro,
                TO_CHAR(d.FEC_EMISION ,'YYYYMMDDHH24MISS'),
                d.NOM_USUARORA,
                d.IND_ORDENTOTAL,
                d.IND_SUPERTEL,
                d.NUM_PROCESO,
                d.NUM_FOLIO,
                NVL(TO_CHAR(d.FEC_VENCIMIE ,'YYYYMMDDHH24MISS'),' '),
                NVL(TO_CHAR(d.FEC_CADUCIDA ,'YYYYMMDDHH24MISS'),' '),
                NVL(d.NUM_SECUREL,-1),
                NVL(d.LETRAREL,' '),
                NVL(d.COD_TIPDOCUMREL,-1),
                NVL(d.COD_VENDEDOR_AGENTEREL, -1),
                NVL(d.COD_CENTRREL, -1),
                NVL(d.NUM_VENTA,-1),
                NVL(d.NUM_TRANSACCION,-1),
                NVL(d.NUM_CTC,' '),
                NVL(d.COD_MODVENTA,-1),
                d.TOT_FACTURA,
                d.IND_FACTUR,
                NVL(d.PREF_PLAZA,' '),
                d.COD_OPERADORA,
                d.COD_PLAZA,
                d.COD_CLIENTE,
                c.COD_TIPIDENT,
                c.NUM_IDENT
            INTO
                :lhNumSecuenci,
                :ihCodTipDocum,
                :lhCodVendedorAgente,
                :szhLetra,
                :ihCodCentrEmi,
                :ihIndPasoCobro,
                :szhFecEmision,
                :szhNomUsuarORA,
                :szhIndOrdenTotal,
                :shIndSuperTel,
                :lhNumProceso,
                :lhNumFolio,
                :szhFecVencimie,
                :szhFecCaducida,
                :lhNumSecuRel,
                :szhLetraRel,
                :ihCodTipDocumRel,
                :lhCodVendedorAgenteRel,
                :ihCodCentrRel,
                :lhNumVenta,
                :lhNumTransaccion,
                :szhNumCTC,
                :ihCodModVenta,
                :dhTotFactura,
                :ihIndFactur,
                :szhPrefPlaza,
                :szhCodOperadoraScl,
                :szhCodPlaza,
                :lhCodCliente,
                :szhCodTipIdent,
                :szhNumIdent
            FROM FA_DOCUMENTOS_SY d, GE_CLIENTES c
            WHERE c.cod_cliente (+) = d.cod_cliente
            AND d.cod_cliente BETWEEN :ihcliente_ini AND :ihcliente_fin
            AND d.cod_tipdocum = :itipo_docum
            AND d.ind_pasocobro = 0
            AND ROWNUM < :registros;
    }
    else
    {
        EXEC SQL
        SELECT  d.NUM_SECUENCI,
                d.COD_TIPDOCUM,
                d.COD_VENDEDOR_AGENTE,
                d.LETRA,
                d.COD_CENTREMI,
                d.ind_pasocobro,
                TO_CHAR(d.FEC_EMISION ,'YYYYMMDDHH24MISS'),
                d.NOM_USUARORA,
                d.IND_ORDENTOTAL,
                d.IND_SUPERTEL,
                d.NUM_PROCESO,
                d.NUM_FOLIO,
                NVL(TO_CHAR(d.FEC_VENCIMIE ,'YYYYMMDDHH24MISS'),' '),
                NVL(TO_CHAR(d.FEC_CADUCIDA ,'YYYYMMDDHH24MISS'),' '),
                NVL(d.NUM_SECUREL,-1),
                NVL(d.LETRAREL,' '),
                NVL(d.COD_TIPDOCUMREL,-1),
                NVL(d.COD_VENDEDOR_AGENTEREL, -1),
                NVL(d.COD_CENTRREL, -1),
                NVL(d.NUM_VENTA,-1),
                NVL(d.NUM_TRANSACCION,-1),
                NVL(d.NUM_CTC,' '),
                NVL(d.COD_MODVENTA,-1),
                d.TOT_FACTURA,
                d.IND_FACTUR,
                NVL(d.PREF_PLAZA,' '),
                d.COD_OPERADORA,
                d.COD_PLAZA,
                d.COD_CLIENTE,
                c.COD_TIPIDENT,
                c.NUM_IDENT
            INTO
                :lhNumSecuenci,
                :ihCodTipDocum,
                :lhCodVendedorAgente,
                :szhLetra,
                :ihCodCentrEmi,
                :ihIndPasoCobro,
                :szhFecEmision,
                :szhNomUsuarORA,
                :szhIndOrdenTotal,
                :shIndSuperTel,
                :lhNumProceso,
                :lhNumFolio,
                :szhFecVencimie,
                :szhFecCaducida,
                :lhNumSecuRel,
                :szhLetraRel,
                :ihCodTipDocumRel,
                :lhCodVendedorAgenteRel,
                :ihCodCentrRel,
                :lhNumVenta,
                :lhNumTransaccion,
                :szhNumCTC,
                :ihCodModVenta,
                :dhTotFactura,
                :ihIndFactur,
                :szhPrefPlaza,
                :szhCodOperadoraScl,
                :szhCodPlaza,
                :lhCodCliente,
                :szhCodTipIdent,
                :szhNumIdent
            FROM FA_DOCUMENTOS_SY d, GE_CLIENTES c
            WHERE c.cod_cliente (+) = d.cod_cliente
            AND d.cod_tipdocum = :itipo_docum
            AND d.ind_pasocobro = 0
            AND ROWNUM < :registros;
    }

    if ((sqlca.sqlerrd[2] == 0) && (sqlca.sqlcode != 1403))
    {
       cout << "FALLO EN EJECUCION DE QUERY DOCUMENTOS CON HOST ARRAY(2)" << endl;
       cout << "SQLCODE     :" << sqlca.sqlcode << endl;
	   cout << "REGISTROS   :" << sqlca.sqlerrd[2] << endl;
       cout << "DESCRIPCION :" << sqlca.sqlerrm.sqlerrmc << endl;
       return 0;
    }

    cout << "CANTIDAD DE REGISTROS : " << sqlca.sqlerrd[2] << endl;

    for(int i=0; i<sqlca.sqlerrd[2] ;i++)
    {
         estClientes this_dcto_clientes;
         this_dcto_clientes.limpia();
         this_dcto_clientes.lhNumSecuenci = lhNumSecuenci[i];
         this_dcto_clientes.ihCodTipDocum = ihCodTipDocum[i];
         this_dcto_clientes.lhCodVendedorAgente = lhCodVendedorAgente[i];
         strcpy(this_dcto_clientes.szhLetra,szhLetra[i]);
         this_dcto_clientes.ihCodCentrEmi =ihCodCentrEmi[i];
         this_dcto_clientes.dhTotFactura = dhTotFactura[i];
         this_dcto_clientes.lhCodCliente = lhCodCliente[i];
         strcpy(this_dcto_clientes.szhFecEmision,szhFecEmision[i]);
         strcpy(this_dcto_clientes.szhIndOrdenTotal,szhIndOrdenTotal[i]);
         this_dcto_clientes.shIndSuperTel=shIndSuperTel[i];
         this_dcto_clientes.lhNumFolio = lhNumFolio[i];
         strcpy(this_dcto_clientes.szhNumCTC,szhNumCTC[i]);
         strcpy(this_dcto_clientes.szhFecVencimie,szhFecVencimie[i]);
         strcpy(this_dcto_clientes.szhFecCaducida,szhFecCaducida[i]);
         this_dcto_clientes.lhNumSecuRel = lhNumSecuRel[i];
         strcpy(this_dcto_clientes.szhLetraRel,szhLetraRel[i]);
         this_dcto_clientes.ihCodTipDocumRel = ihCodTipDocumRel[i];
         this_dcto_clientes.lhCodVendedorAgenteRel = lhCodVendedorAgenteRel[i];
         this_dcto_clientes.ihCodCentrRel = ihCodCentrRel[i];
         this_dcto_clientes.lhNumVenta = lhNumVenta[i];
         this_dcto_clientes.lhNumTransaccion = lhNumTransaccion[i];
         this_dcto_clientes.ihCodModVenta = ihCodModVenta[i];
         this_dcto_clientes.ihIndFactur = ihIndFactur[i];
         this_dcto_clientes.lhNumProceso = lhNumProceso[i];
         strcpy(this_dcto_clientes.szhPrefPlaza,szhPrefPlaza[i]);
         strcpy(this_dcto_clientes.szhCodOperadoraScl,szhCodOperadoraScl[i]);
         strcpy(this_dcto_clientes.szhCodPlaza,szhCodPlaza[i]);
         strcpy(this_dcto_clientes.szhNomUsuarORA,szhNomUsuarORA[i]);
         strcpy(this_dcto_clientes.szhCodTipIdent,szhCodTipIdent[i]);
         strcpy(this_dcto_clientes.szhNumIdent,szhNumIdent[i]);
         this_dcto_clientes.ihIndPasoCobro = 0;
         _vec_dcto_clientes.push_back(this_dcto_clientes);

    }

    hrClock.markEnd();

    cout << "REGISTROS EN EL VECTOR CON HOST ARRAY: " << _vec_dcto_clientes.size() << endl;
    cout << "\t[getDoctosClientesArray]: eTimeMSEC = [" << hrClock.getElapsedTimeMSEC() << "]..." << endl;
    cout << "\t[getDoctosClientesArray]: eTimeSEC  = [" << hrClock.getElapsedTimeSEC()  << "]..." << endl << endl;

    return 1;
}
catch (...)
{
    return 0;
}
};

/* Inicio Requerimiento de Soporte - 69137 - 18.08.2007
int ClassDbProc::openCursorDoctosClientes(int tipo_docum,int ciclo,long cliente_ini , long cliente_fin)
{
try
{
    EXEC SQL BEGIN DECLARE SECTION;
    int itipo_docum;
    int iciclo;
    long icliente_ini;
    long icliente_fin;
    int ierror;
    char szhMenzajeError[255];  EXEC SQL var szhMenzajeError is string(255);
    short sh_cursor;
    int ihind_paso_cobros;
    EXEC SQL END DECLARE SECTION;

    EXEC SQL ALLOCATE :cursor_cliente_docs;

    cout << "FUNCION openCursorDoctosClientes" << endl;

    cout << "TIPO DOCUMENTO  : " << tipo_docum << endl;
    cout << "CICLO           : " << ciclo << endl;
    cout << "CLIENTE INICIAL : " << cliente_ini << endl;
    cout << "CLIENTE FINAL   : " << cliente_fin << endl;

    HighResolutionClock hrClock;

    hrClock.markStart();

    itipo_docum = tipo_docum;
    iciclo = ciclo;
    icliente_ini = cliente_ini;
    icliente_fin = cliente_fin;
    ihind_paso_cobros=0;

    CLEAR(szhMenzajeError);
    ierror=0;
    hrClock.markEnd();
    sh_cursor=0;


    EXEC SQL EXECUTE
        DECLARE
        BEGIN
           CO_PASOCOBROS_SB_PG.CO_EJECUTAR_LECTURA_DOCS_PR(:itipo_docum, NULL, NULL,:ihind_paso_cobros,:cursor_cliente_docs :sh_cursor,:ierror,:szhMenzajeError);
        END;
    END-EXEC;


    if(sh_cursor==-1)
    {
        cout << "ERROR EN DEVOLVER CURSOR" << endl;
    }

    if (sqlca.sqlcode != 0)
    {
       cout << "CO_PASOCOBROS_SB_PG.CO_EJECUTAR_LECTURA_DOCS_PR" << endl;
       cout << "MENSAJE ERROR :" << szhMenzajeError << endl;
       cout << "ERROR         :" << ierror << endl;
       cout << "SQLCODE       :" << sqlca.sqlcode << endl;
       cout << "DESCRIPCION   :" << sqlca.sqlerrm.sqlerrmc << endl;
       return 0;
    }

    if(sh_cursor==-1)
    {
        cout << "ERROR AL LEER CURSOR DESDE CO_EJECUTAR_LECTURA_DOCS_PR" << endl;
    }

    hrClock.markEnd();

    cout << "\t[openCursorDoctosClientes]: eTimeMSEC = [" << hrClock.getElapsedTimeMSEC() << "]..." << endl;
    cout << "\t[openCursorDoctosClientes]: eTimeSEC  = [" << hrClock.getElapsedTimeSEC()  << "]..." << endl << endl;

    return 1;
}
catch (...)
{
    return 0;
}
};*/


/*int ClassDbProc::closeCursorDoctosClientes()
{
try
{
    EXEC SQL BEGIN DECLARE SECTION;
    int ierror;
    char szhMenzajeError[255];  EXEC SQL var szhMenzajeError is string(255);
    short sh_cursor;
    EXEC SQL END DECLARE SECTION;


    cout << "FUNCION closeCursorDoctosClientes" << endl;

    HighResolutionClock hrClock;

    hrClock.markStart();

    sh_cursor=0;
    CLEAR(szhMenzajeError);
    ierror=0;
    hrClock.markEnd();

    EXEC SQL EXECUTE
        DECLARE
        BEGIN
           CO_PASOCOBROS_SB_PG.CO_FINALIZAR_LECTURA_DOCS_PR(:cursor_cliente_docs :sh_cursor,:ierror,:szhMenzajeError);
        END;
    END-EXEC;

    if (sqlca.sqlcode != 0)
    {
       cout << "CO_PASOCOBROS_SB_PG.CO_FINALIZAR_LECTURA_DOCS_PR" << endl;
       cout << "MENSAJE ERROR :" << szhMenzajeError << endl;
       cout << "ERROR         :" << ierror << endl;
       cout << "SQLCODE     :" << sqlca.sqlcode << endl;
       cout << "DESCRIPCION :" << sqlca.sqlerrm.sqlerrmc << endl;
       return 0;
    }

    if(sh_cursor==-1)
    {
        cout << "ERROR AL CERRAR CURSOR DESDE CO_FINALIZAR_LECTURA_DOCS_PR" << endl;
    }

    hrClock.markEnd();

    cout << "\t[closeCursorDoctosClientes]: eTimeMSEC = [" << hrClock.getElapsedTimeMSEC() << "]..." << endl;
    cout << "\t[closeCursorDoctosClientes]: eTimeSEC  = [" << hrClock.getElapsedTimeSEC()  << "]..." << endl << endl;

    return 1;
}
catch (...)
{
    return 0;
}
};*/

/*
int ClassDbProc::getDocumentos(vector <estClientes> &_vec_dcto_clientes,int limite)
{
try
{
    EXEC SQL BEGIN DECLARE SECTION;
    char    szhRowid[MAX_ARRAY][19];  EXEC SQL var szhRowid is string(19);
    long    lhNumSecuenci[MAX_ARRAY];
    int     ihCodTipDocum[MAX_ARRAY];
    long    lhCodVendedorAgente[MAX_ARRAY];
    char    szhLetra[MAX_ARRAY][2]; EXEC SQL var szhLetra is string(2);
    int     ihCodCentrEmi[MAX_ARRAY];
    double  dhTotFactura[MAX_ARRAY];
    long    lhCodCliente[MAX_ARRAY];
    char    szhFecEmision[MAX_ARRAY][17]; EXEC SQL var szhFecEmision is string(17);
    char    szhIndOrdenTotal[MAX_ARRAY][13]; EXEC SQL var szhIndOrdenTotal is string(13);
    short   shIndSuperTel[MAX_ARRAY];
    long    lhNumFolio[MAX_ARRAY];
    char    szhNumCTC[MAX_ARRAY][13];  EXEC SQL var szhNumCTC is string(13);
    char    szhFecVencimie[MAX_ARRAY][17]; EXEC SQL var szhFecVencimie is string(17);
    char    szhFecCaducida[MAX_ARRAY][17]; EXEC SQL var szhFecCaducida is string(17);
    long    lhNumSecuRel[MAX_ARRAY];
    char    szhLetraRel[MAX_ARRAY][2]; EXEC SQL var szhLetraRel is string(2);
    int     ihCodTipDocumRel[MAX_ARRAY];
    long    lhCodVendedorAgenteRel[MAX_ARRAY];
    int     ihCodCentrRel[MAX_ARRAY];
    long    lhNumVenta[MAX_ARRAY];
    long    lhNumTransaccion[MAX_ARRAY];
    int     ihCodModVenta[MAX_ARRAY];
    int     ihIndFactur[MAX_ARRAY];
    long    lhNumProceso[MAX_ARRAY];
    char    szhPrefPlaza[MAX_ARRAY][11];  EXEC SQL var szhPrefPlaza is string(11);
    char    szhCodOperadoraScl[MAX_ARRAY][6]; EXEC SQL var szhCodOperadoraScl is string(6);
    char    szhCodPlaza[MAX_ARRAY][6]; EXEC SQL var szhCodPlaza is string(6);
    char    szhNomUsuarORA[MAX_ARRAY][31]; EXEC SQL var szhNomUsuarORA is string(31);
    char    szhCodTipIdent[MAX_ARRAY][3]; EXEC SQL var szhCodTipIdent is string(3);
    char    szhNumIdent[MAX_ARRAY][21];  EXEC SQL var szhNumIdent is string(21);
    int     ihIndPasoCobro[MAX_ARRAY];

    int registros;
    int ierror;
    int ilimite;
    char szhMenzajeError[255];  EXEC SQL var szhMenzajeError is string(255);
    int cant_reg;
    EXEC SQL END DECLARE SECTION;

    cout << "METODO getDocumentos()" << endl;

    ilimite=limite;
    cout << "LIMITE : " << ilimite << endl;

    HighResolutionClock hrClock;

    hrClock.markStart();

    registros = MAX_ARRAY;

    for (int j=0;j<registros ;j++ )
    {
        lhNumSecuenci[j]=0;
        ihCodTipDocum[j]=0;
        lhCodVendedorAgente[j]=0;
        CLEAR(szhLetra[j]);
        ihCodCentrEmi[j]=0;
        dhTotFactura[j]=0.0;
        lhCodCliente[j]=0;
        CLEAR(szhFecEmision[j]);
        CLEAR(szhIndOrdenTotal[j]);
        shIndSuperTel[j]=0;
        lhNumFolio[j]=0;
        CLEAR(szhNumCTC[j]);
        CLEAR(szhFecVencimie[j]);
        CLEAR(szhFecCaducida[j]);
        lhNumSecuRel[j]=0;
        CLEAR(szhLetraRel[j]);
        ihCodTipDocumRel[j]=0;
        lhCodVendedorAgenteRel[j]=0;
        ihCodCentrRel[j]=0;
        lhNumVenta[j]=0;
        lhNumTransaccion[j]=0;
        ihCodModVenta[j]=0;
        ihIndFactur[j]=0;
        lhNumProceso[j]=0;
        CLEAR(szhPrefPlaza[j]);
        CLEAR(szhCodOperadoraScl[j]);
        CLEAR(szhCodPlaza[j]);
        CLEAR(szhNomUsuarORA[j]);
        CLEAR(szhCodTipIdent[j]);
        CLEAR(szhNumIdent[j]);
        ihIndPasoCobro[j]=0;
    }

    EXEC SQL ARRAYLEN szhRowid (registros) EXECUTE;
    EXEC SQL ARRAYLEN lhNumSecuenci (registros) EXECUTE;
    EXEC SQL ARRAYLEN ihCodTipDocum (registros) EXECUTE;
    EXEC SQL ARRAYLEN lhCodVendedorAgente (registros) EXECUTE;
    EXEC SQL ARRAYLEN szhLetra (registros) EXECUTE;
    EXEC SQL ARRAYLEN ihCodCentrEmi (registros) EXECUTE;
    EXEC SQL ARRAYLEN dhTotFactura (registros) EXECUTE;
    EXEC SQL ARRAYLEN lhCodCliente (registros) EXECUTE;
    EXEC SQL ARRAYLEN szhFecEmision (registros) EXECUTE;
    EXEC SQL ARRAYLEN szhIndOrdenTotal (registros) EXECUTE;
    EXEC SQL ARRAYLEN shIndSuperTel (registros) EXECUTE;
    EXEC SQL ARRAYLEN lhNumFolio (registros) EXECUTE;
    EXEC SQL ARRAYLEN szhNumCTC (registros) EXECUTE;
    EXEC SQL ARRAYLEN szhFecVencimie (registros) EXECUTE;
    EXEC SQL ARRAYLEN szhFecCaducida (registros) EXECUTE;
    EXEC SQL ARRAYLEN lhNumSecuRel (registros) EXECUTE;
    EXEC SQL ARRAYLEN szhLetraRel (registros) EXECUTE;
    EXEC SQL ARRAYLEN ihCodTipDocumRel (registros) EXECUTE;
    EXEC SQL ARRAYLEN lhCodVendedorAgenteRel (registros) EXECUTE;
    EXEC SQL ARRAYLEN ihCodCentrRel (registros) EXECUTE;
    EXEC SQL ARRAYLEN lhNumVenta (registros) EXECUTE;
    EXEC SQL ARRAYLEN lhNumTransaccion (registros) EXECUTE;
    EXEC SQL ARRAYLEN ihCodModVenta (registros) EXECUTE;
    EXEC SQL ARRAYLEN ihIndFactur (registros) EXECUTE;
    EXEC SQL ARRAYLEN lhNumProceso (registros) EXECUTE;
    EXEC SQL ARRAYLEN szhPrefPlaza (registros) EXECUTE;
    EXEC SQL ARRAYLEN szhCodOperadoraScl (registros) EXECUTE;
    EXEC SQL ARRAYLEN szhCodPlaza (registros) EXECUTE;
    EXEC SQL ARRAYLEN szhNomUsuarORA (registros) EXECUTE;
    EXEC SQL ARRAYLEN szhCodTipIdent (registros) EXECUTE;
    EXEC SQL ARRAYLEN szhNumIdent (registros) EXECUTE;
    EXEC SQL ARRAYLEN ihIndPasoCobro (registros) EXECUTE;

    CLEAR(szhMenzajeError);
    ierror=0;
    cant_reg=0;

    EXEC SQL EXECUTE
        DECLARE
           registroInOut CO_PASOCOBROS_SB_PG.CO_DOCUMENTOS_LT;
        BEGIN
           CO_PASOCOBROS_SB_PG.CO_RECUPERAR_DOCUMENTOS_PR(:ilimite,:cursor_cliente_docs,:cant_reg,registroInOut,:ierror,:szhMenzajeError);
           FOR j IN 1..:cant_reg loop
               :lhNumSecuenci(j) := registroInOut(j).NUM_SECUENCI;
               :ihCodTipDocum(j) := registroInOut(j).COD_TIPDOCUM;
               :lhCodVendedorAgente(j) := registroInOut(j).COD_VENDEDOR_AGENTE;
               :szhLetra(j) := registroInOut(j).LETRA;
               :ihCodCentrEmi(j) := registroInOut(j).COD_CENTREMI;
               :dhTotFactura(j) := registroInOut(j).TOT_FACTURA;
               :lhCodCliente(j) := registroInOut(j).COD_CLIENTE;
               :szhFecEmision(j) := registroInOut(j).FEC_EMISION;
               :szhIndOrdenTotal(j) := registroInOut(j).IND_ORDENTOTAL;
               :shIndSuperTel(j) := registroInOut(j).IND_SUPERTEL;
               :lhNumFolio(j) := registroInOut(j).NUM_FOLIO;
               :szhNumCTC(j) := registroInOut(j).NUM_CTC;
               :szhFecVencimie(j) := registroInOut(j).FEC_VENCIMIE;
               :szhFecCaducida(j) := registroInOut(j).FEC_CADUCIDAD;
               :lhNumSecuRel(j) := registroInOut(j).NUM_SECUREL;
               :szhLetraRel(j) := registroInOut(j).LETRAREL;
               :ihCodTipDocumRel(j) := registroInOut(j).COD_TIPDOCUMREL;
               :lhCodVendedorAgenteRel(j) := registroInOut(j).COD_VENDEDOR_AGENTEREL;
               :ihCodCentrRel(j) := registroInOut(j).COD_CENTRREL;
               :lhNumVenta(j) := registroInOut(j).NUM_VENTA;
               :lhNumTransaccion(j) := registroInOut(j).NUM_TRANSACCION;
               :ihCodModVenta(j) := registroInOut(j).COD_MODVENTA;
               :ihIndFactur(j) := registroInOut(j).IND_FACTUR;
               :lhNumProceso(j) := registroInOut(j).NUM_PROCESO;
               :szhPrefPlaza(j) := registroInOut(j).PREF_PLAZA;
               :szhCodOperadoraScl(j) := registroInOut(j).COD_OPERADORA;
               :szhCodPlaza(j) := registroInOut(j).COD_PLAZA;
               :szhNomUsuarORA(j) := registroInOut(j).NOM_USUARORA;
               :szhCodTipIdent(j) := registroInOut(j).COD_TIPIDENT;
               :szhNumIdent(j) := registroInOut(j).NUM_IDENT;
           END LOOP;
        END;
    END-EXEC;

    if (sqlca.sqlcode != 0)
    {
       cout << "FALLO EN EJECUCION DE PACKAGE CO_PASOCOBROS_SB_PG.CO_RECUPERAR_DOCUMENTOS_PR" << endl;
       cout << "MENSAJE ERROR :" << szhMenzajeError << endl;
       cout << "ERROR         :" << ierror << endl;
       cout << "SQLCODE     :" << sqlca.sqlcode << endl;
       cout << "DESCRIPCION :" << sqlca.sqlerrm.sqlerrmc << endl;
       return 0;
    }
    cout << "CANTIDAD DE REGISTROS : " << cant_reg << endl;


    for(int i=0;i<cant_reg;i++)
    {
         estClientes this_dcto_clientes;
         this_dcto_clientes.limpia();
         this_dcto_clientes.lhNumSecuenci = lhNumSecuenci[i];
         this_dcto_clientes.ihCodTipDocum = ihCodTipDocum[i];
         this_dcto_clientes.lhCodVendedorAgente = lhCodVendedorAgente[i];
         strcpy(this_dcto_clientes.szhLetra,szhLetra[i]);
         this_dcto_clientes.ihCodCentrEmi =ihCodCentrEmi[i];
         this_dcto_clientes.dhTotFactura = dhTotFactura[i];
         this_dcto_clientes.lhCodCliente = lhCodCliente[i];
         strcpy(this_dcto_clientes.szhFecEmision,szhFecEmision[i]);
         strcpy(this_dcto_clientes.szhIndOrdenTotal,szhIndOrdenTotal[i]);
         this_dcto_clientes.shIndSuperTel=shIndSuperTel[i];
         this_dcto_clientes.lhNumFolio = lhNumFolio[i];
         strcpy(this_dcto_clientes.szhNumCTC,szhNumCTC[i]);
         strcpy(this_dcto_clientes.szhFecVencimie,szhFecVencimie[i]);
         strcpy(this_dcto_clientes.szhFecCaducida,szhFecCaducida[i]);
         this_dcto_clientes.lhNumSecuRel = lhNumSecuRel[i];
         strcpy(this_dcto_clientes.szhLetraRel,szhLetraRel[i]);
         this_dcto_clientes.ihCodTipDocumRel = ihCodTipDocumRel[i];
         this_dcto_clientes.lhCodVendedorAgenteRel = lhCodVendedorAgenteRel[i];
         this_dcto_clientes.ihCodCentrRel = ihCodCentrRel[i];
         this_dcto_clientes.lhNumVenta = lhNumVenta[i];
         this_dcto_clientes.lhNumTransaccion = lhNumTransaccion[i];
         this_dcto_clientes.ihCodModVenta = ihCodModVenta[i];
         this_dcto_clientes.ihIndFactur = ihIndFactur[i];
         this_dcto_clientes.lhNumProceso = lhNumProceso[i];
         strcpy(this_dcto_clientes.szhPrefPlaza,szhPrefPlaza[i]);
         strcpy(this_dcto_clientes.szhCodOperadoraScl,szhCodOperadoraScl[i]);
         strcpy(this_dcto_clientes.szhCodPlaza,szhCodPlaza[i]);
         strcpy(this_dcto_clientes.szhNomUsuarORA,szhNomUsuarORA[i]);
         strcpy(this_dcto_clientes.szhCodTipIdent,szhCodTipIdent[i]);
         strcpy(this_dcto_clientes.szhNumIdent,szhNumIdent[i]);
         this_dcto_clientes.ihIndPasoCobro = 0;
         _vec_dcto_clientes.push_back(this_dcto_clientes);
    }

    hrClock.markEnd();

    cout << "REGISTROS EN EL VECTOR : " << _vec_dcto_clientes.size() << endl;


    cout << "\t[getDocumentos()]: eTimeMSEC = [" << hrClock.getElapsedTimeMSEC() << "]..." << endl;
    cout << "\t[getDocumentos()]: eTimeSEC  = [" << hrClock.getElapsedTimeSEC()  << "]..." << endl << endl;

    return 1;
}
catch (...)
{
    return 0;
}
};*/



/*int ClassDbProc::updateDocumentos(vector <estClientes> &_vec_dcto_clientes,long num_procesos)
{
try
{
    EXEC SQL BEGIN DECLARE SECTION;
    char    szhRowid[MAX_ARRAY][19];  EXEC SQL var szhRowid is string(19);
    long    lhNumSecuenci[MAX_ARRAY];
    int     ihCodTipDocum[MAX_ARRAY];
    long    lhCodVendedorAgente[MAX_ARRAY];
    char    szhLetra[MAX_ARRAY][2]; EXEC SQL var szhLetra is string(2);
    int     ihCodCentrEmi[MAX_ARRAY];
    double  dhTotFactura[MAX_ARRAY];
    long    lhCodCliente[MAX_ARRAY];
    char    szhFecEmision[MAX_ARRAY][17]; EXEC SQL var szhFecEmision is string(17);
    char    szhIndOrdenTotal[MAX_ARRAY][13]; EXEC SQL var szhIndOrdenTotal is string(13);
    short   shIndSuperTel[MAX_ARRAY];
    long    lhNumFolio[MAX_ARRAY];
    char    szhNumCTC[MAX_ARRAY][13];  EXEC SQL var szhNumCTC is string(13);
    char    szhFecVencimie[MAX_ARRAY][17]; EXEC SQL var szhFecVencimie is string(17);
    char    szhFecCaducida[MAX_ARRAY][17]; EXEC SQL var szhFecCaducida is string(17);
    long    lhNumSecuRel[MAX_ARRAY];
    char    szhLetraRel[MAX_ARRAY][2]; EXEC SQL var szhLetraRel is string(2);
    int     ihCodTipDocumRel[MAX_ARRAY];
    long    lhCodVendedorAgenteRel[MAX_ARRAY];
    int     ihCodCentrRel[MAX_ARRAY];
    long    lhNumVenta[MAX_ARRAY];
    long    lhNumTransaccion[MAX_ARRAY];
    int     ihCodModVenta[MAX_ARRAY];
    int     ihIndFactur[MAX_ARRAY];
    long    lhNumProceso[MAX_ARRAY];
    char    szhPrefPlaza[MAX_ARRAY][11];  EXEC SQL var szhPrefPlaza is string(11);
    char    szhCodOperadoraScl[MAX_ARRAY][6]; EXEC SQL var szhCodOperadoraScl is string(6);
    char    szhCodPlaza[MAX_ARRAY][6]; EXEC SQL var szhCodPlaza is string(6);
    char    szhNomUsuarORA[MAX_ARRAY][31]; EXEC SQL var szhNomUsuarORA is string(31);
    char    szhCodTipIdent[MAX_ARRAY][3]; EXEC SQL var szhCodTipIdent is string(3);
    char    szhNumIdent[MAX_ARRAY][21];  EXEC SQL var szhNumIdent is string(21);
    int     ihIndPasoCobro[MAX_ARRAY];

    int registros;
    int ierror;
    int ilimite;
    char szhMenzajeError[255];  EXEC SQL var szhMenzajeError is string(255);
    unsigned int cant_reg;
    long lnum_procesos;
    EXEC SQL END DECLARE SECTION;

    cout << "METODO updateDocumentos()" << endl;

    HighResolutionClock hrClock;

    hrClock.markStart();

    registros = MAX_ARRAY;

    for (int j=0;j<registros ;j++ )
    {
        lhNumSecuenci[j]=0;
        ihCodTipDocum[j]=0;
        lhCodVendedorAgente[j]=0;
        CLEAR(szhLetra[j]);
        ihCodCentrEmi[j]=0;
        dhTotFactura[j]=0.0;
        lhCodCliente[j]=0;
        CLEAR(szhFecEmision[j]);
        CLEAR(szhIndOrdenTotal[j]);
        shIndSuperTel[j]=0;
        lhNumFolio[j]=0;
        CLEAR(szhNumCTC[j]);
        CLEAR(szhFecVencimie[j]);
        CLEAR(szhFecCaducida[j]);
        lhNumSecuRel[j]=0;
        CLEAR(szhLetraRel[j]);
        ihCodTipDocumRel[j]=0;
        lhCodVendedorAgenteRel[j]=0;
        ihCodCentrRel[j]=0;
        lhNumVenta[j]=0;
        lhNumTransaccion[j]=0;
        ihCodModVenta[j]=0;
        ihIndFactur[j]=0;
        lhNumProceso[j]=0;
        CLEAR(szhPrefPlaza[j]);
        CLEAR(szhCodOperadoraScl[j]);
        CLEAR(szhCodPlaza[j]);
        CLEAR(szhNomUsuarORA[j]);
        CLEAR(szhCodTipIdent[j]);
        CLEAR(szhNumIdent[j]);
        ihIndPasoCobro[j]=0;
    }

    cant_reg = _vec_dcto_clientes.size();
    lnum_procesos=num_procesos;


    EXEC SQL ARRAYLEN szhRowid (registros) EXECUTE;
    EXEC SQL ARRAYLEN lhNumSecuenci (registros) EXECUTE;
    EXEC SQL ARRAYLEN ihCodTipDocum (registros) EXECUTE;
    EXEC SQL ARRAYLEN lhCodVendedorAgente (registros) EXECUTE;
    EXEC SQL ARRAYLEN szhLetra (registros) EXECUTE;
    EXEC SQL ARRAYLEN ihCodCentrEmi (registros) EXECUTE;
    EXEC SQL ARRAYLEN dhTotFactura (registros) EXECUTE;
    EXEC SQL ARRAYLEN lhCodCliente (registros) EXECUTE;
    EXEC SQL ARRAYLEN szhFecEmision (registros) EXECUTE;
    EXEC SQL ARRAYLEN szhIndOrdenTotal (registros) EXECUTE;
    EXEC SQL ARRAYLEN shIndSuperTel (registros) EXECUTE;
    EXEC SQL ARRAYLEN lhNumFolio (registros) EXECUTE;
    EXEC SQL ARRAYLEN szhNumCTC (registros) EXECUTE;
    EXEC SQL ARRAYLEN szhFecVencimie (registros) EXECUTE;
    EXEC SQL ARRAYLEN szhFecCaducida (registros) EXECUTE;
    EXEC SQL ARRAYLEN lhNumSecuRel (registros) EXECUTE;
    EXEC SQL ARRAYLEN szhLetraRel (registros) EXECUTE;
    EXEC SQL ARRAYLEN ihCodTipDocumRel (registros) EXECUTE;
    EXEC SQL ARRAYLEN lhCodVendedorAgenteRel (registros) EXECUTE;
    EXEC SQL ARRAYLEN ihCodCentrRel (registros) EXECUTE;
    EXEC SQL ARRAYLEN lhNumVenta (registros) EXECUTE;
    EXEC SQL ARRAYLEN lhNumTransaccion (registros) EXECUTE;
    EXEC SQL ARRAYLEN ihCodModVenta (registros) EXECUTE;
    EXEC SQL ARRAYLEN ihIndFactur (registros) EXECUTE;
    EXEC SQL ARRAYLEN lhNumProceso (registros) EXECUTE;
    EXEC SQL ARRAYLEN szhPrefPlaza (registros) EXECUTE;
    EXEC SQL ARRAYLEN szhCodOperadoraScl (registros) EXECUTE;
    EXEC SQL ARRAYLEN szhCodPlaza (registros) EXECUTE;
    EXEC SQL ARRAYLEN szhNomUsuarORA (registros) EXECUTE;
    EXEC SQL ARRAYLEN szhCodTipIdent (registros) EXECUTE;
    EXEC SQL ARRAYLEN szhNumIdent (registros) EXECUTE;
    EXEC SQL ARRAYLEN ihIndPasoCobro (registros) EXECUTE;

    for(int i=0;i<cant_reg;i++)
    {
         lhNumSecuenci[i] = _vec_dcto_clientes[i].lhNumSecuenci;
         ihCodTipDocum[i] = _vec_dcto_clientes[i].ihCodTipDocum;
         lhCodVendedorAgente[i] = _vec_dcto_clientes[i].lhCodVendedorAgente;
         strcpy(szhLetra[i],_vec_dcto_clientes[i].szhLetra);
         ihCodCentrEmi[i] = _vec_dcto_clientes[i].ihCodCentrEmi;
         dhTotFactura[i] = _vec_dcto_clientes[i].dhTotFactura;
         lhCodCliente[i] = _vec_dcto_clientes[i].lhCodCliente;
         strcpy(szhFecEmision[i],_vec_dcto_clientes[i].szhFecEmision);
         strcpy(szhIndOrdenTotal[i],_vec_dcto_clientes[i].szhIndOrdenTotal);
         shIndSuperTel[i] = _vec_dcto_clientes[i].shIndSuperTel;
         lhNumFolio[i] = _vec_dcto_clientes[i].lhNumFolio;
         strcpy(szhNumCTC[i],_vec_dcto_clientes[i].szhNumCTC);
         strcpy(szhFecVencimie[i],_vec_dcto_clientes[i].szhFecVencimie);
         strcpy(szhFecCaducida[i],_vec_dcto_clientes[i].szhFecCaducida);
         lhNumSecuRel[i] = _vec_dcto_clientes[i].lhNumSecuRel;
         strcpy(szhLetraRel[i],_vec_dcto_clientes[i].szhLetraRel);
         ihCodTipDocumRel[i] = _vec_dcto_clientes[i].ihCodTipDocumRel;
         lhCodVendedorAgenteRel[i] = _vec_dcto_clientes[i].lhCodVendedorAgenteRel;
         ihCodCentrRel[i] = _vec_dcto_clientes[i].ihCodCentrRel;
         lhNumVenta[i] = _vec_dcto_clientes[i].lhNumVenta;
         lhNumTransaccion[i] = _vec_dcto_clientes[i].lhNumTransaccion;
         ihCodModVenta[i] = _vec_dcto_clientes[i].ihCodModVenta;
         ihIndFactur[i] = _vec_dcto_clientes[i].ihIndFactur;
         lhNumProceso[i] = _vec_dcto_clientes[i].lhNumProceso;
         strcpy(szhPrefPlaza[i],_vec_dcto_clientes[i].szhPrefPlaza);
         strcpy(szhCodOperadoraScl[i],_vec_dcto_clientes[i].szhCodOperadoraScl);
         strcpy(szhCodPlaza[i],_vec_dcto_clientes[i].szhCodPlaza);
         strcpy(szhNomUsuarORA[i],_vec_dcto_clientes[i].szhNomUsuarORA);
         strcpy(szhCodTipIdent[i],_vec_dcto_clientes[i].szhCodTipIdent);
         strcpy(szhNumIdent[i],_vec_dcto_clientes[i].szhNumIdent);
         ihIndPasoCobro[i] = _vec_dcto_clientes[i].ihIndPasoCobro;
    }

    CLEAR(szhMenzajeError);
    ierror=0;

    EXEC SQL EXECUTE
        DECLARE
           registroInOut CO_PASOCOBROS_SB_PG.CO_DOCUMENTOS_LT;
        BEGIN
           FOR j IN 1..:cant_reg loop
               registroInOut(j).num_secuenci := :lhNumSecuenci(j);
               registroInOut(j).COD_TIPDOCUM := :ihCodTipDocum(j);
               registroInOut(j).COD_VENDEDOR_AGENTE := :lhCodVendedorAgente(j);
               registroInOut(j).LETRA := :szhLetra(j);
               RegistroInOut(j).COD_CENTREMI := :ihCodCentrEmi(j);
               registroInOut(j).TOT_FACTURA := :dhTotFactura(j);
               registroInOut(j).COD_CLIENTE := :lhCodCliente(j);
               registroInOut(j).FEC_EMISION := :szhFecEmision(j);
               registroInOut(j).IND_ORDENTOTAL := :szhIndOrdenTotal(j);
               registroInOut(j).IND_SUPERTEL := :shIndSuperTel(j);
               registroInOut(j).NUM_FOLIO := :lhNumFolio(j);
               registroInOut(j).NUM_CTC := :szhNumCTC(j);
               registroInOut(j).FEC_VENCIMIE := :szhFecVencimie(j);
               registroInOut(j).FEC_CADUCIDAD := :szhFecCaducida(j);
               registroInOut(j).NUM_SECUREL := :lhNumSecuRel(j);
               registroInOut(j).LETRAREL := :szhLetraRel(j);
               registroInOut(j).COD_TIPDOCUMREL := :ihCodTipDocumRel(j);
               registroInOut(j).COD_VENDEDOR_AGENTEREL := :lhCodVendedorAgenteRel(j);
               registroInOut(j).COD_CENTRREL := :ihCodCentrRel(j);
               registroInOut(j).NUM_VENTA := :lhNumVenta(j);
               registroInOut(j).NUM_TRANSACCION := :lhNumTransaccion(j);
               registroInOut(j).COD_MODVENTA := :ihCodModVenta(j);
               registroInOut(j).IND_FACTUR := :ihIndFactur(j);
               registroInOut(j).NUM_PROCESO := :lhNumProceso(j);
               registroInOut(j).PREF_PLAZA := :szhPrefPlaza(j);
               registroInOut(j).COD_OPERADORA := :szhCodOperadoraScl(j);
               registroInOut(j).COD_PLAZA := :szhCodPlaza(j);
               registroInOut(j).NOM_USUARORA := :szhNomUsuarORA(j);
               registroInOut(j).COD_TIPIDENT := :szhCodTipIdent(j);
               registroInOut(j).NUM_IDENT := :szhNumIdent(j);
               registroInOut(j).IND_PASOCOBRO := :ihIndPasoCobro(j);
           END LOOP;
           CO_PASOCOBROS_SB_PG.CO_ACTUALIZAR_DOCUMENTOS_PR(:lnum_procesos,registroInOut,:ierror,:szhMenzajeError);
        END;
    END-EXEC;

    if (sqlca.sqlcode != 0)
    {
       cout << "FALLO EN EJECUCION DE PACKAGE CO_PASOCOBROS_SB_PG.CO_ACTUALIZAR_DOCUMENTOS_PR" << endl;
       cout << "MENSAJE ERROR :" << szhMenzajeError << endl;
       cout << "ERROR         :" << ierror << endl;
       cout << "SQLCODE     :" << sqlca.sqlcode << endl;
       cout << "DESCRIPCION :" << sqlca.sqlerrm.sqlerrmc << endl;
       return 0;
    }
    cout << "CANTIDAD DE REGISTROS A ACTUALIZAR: " << cant_reg << endl;
    cout << "ERROR : " << ierror << endl;
    cout << "MENSAJE DE ERROR :" << szhMenzajeError << endl;

    hrClock.markEnd();


    cout << "\t[updateDocumentos]: Update eTimeMSEC = [" << hrClock.getElapsedTimeMSEC() << "]..." << endl;
    cout << "\t[updateDocumentos]: Update eTimeSEC  = [" << hrClock.getElapsedTimeSEC()  << "]..." << endl << endl;

    return 1;
}
catch (...)
{
    return 0;
}
};*/

/*
int ClassDbProc::getAbonadoConcepto(NewtagAcumAbo &acumabo,int _ind_ordentotal,int _concargo)
{
try
{
    EXEC SQL BEGIN DECLARE SECTION;
    long   lhNumAbonado[10000];
    int    ihCodConcCobr[10000];
    double dhImpConcCobr[10000];
    long   lhSeqCuotas[10000];
    int    ihOrdCuota[10000];
    int    ihIndFactur[10000];
    int    ihCodProducto[10000];

    int ind_ordentotal;
    int iconcargo;
    int registros;
    int ierror;
    char szhMenzajeError[255];  EXEC SQL var szhMenzajeError is string(255);
    int cant_reg;

    EXEC SQL END DECLARE SECTION;


    ind_ordentotal = _ind_ordentotal;
    iconcargo = _concargo;


    HighResolutionClock hrClock;

    hrClock.markStart();

    registros = 10000;

    for (int j=0;j<registros ;j++ )
    {
        lhNumAbonado[j]=0;
        ihCodConcCobr[j]=0;
        dhImpConcCobr[j]=0.0;
        lhSeqCuotas[j]=0;
        ihOrdCuota[j]=0;
        ihIndFactur[j]=0;
        ihCodProducto[j]=0;
    }

    EXEC SQL ARRAYLEN lhNumAbonado (registros) EXECUTE;
    EXEC SQL ARRAYLEN ihCodConcCobr (registros) EXECUTE;
    EXEC SQL ARRAYLEN dhImpConcCobr (registros) EXECUTE;
    EXEC SQL ARRAYLEN lhSeqCuotas (registros) EXECUTE;
    EXEC SQL ARRAYLEN ihOrdCuota (registros) EXECUTE;
    EXEC SQL ARRAYLEN ihIndFactur (registros) EXECUTE;
    EXEC SQL ARRAYLEN ihCodProducto (registros) EXECUTE;

    CLEAR(szhMenzajeError);
    ierror=0;

    cant_reg = 0;

    EXEC SQL EXECUTE
        DECLARE
           registroInOut CO_FACTCONC_SP_PG.CO_CONC_ACUM_LT;
        BEGIN
            CO_PASOCOBROS_SB_PG.CO_REC_TOTALES_X_CONCEPTOS_PR(:ind_ordentotal,:iconcargo,registroInOut,:cant_reg,:ierror,:szhMenzajeError);
           FOR j IN 1..:cant_reg loop
               :lhNumAbonado(j)  := registroInOut(j).NUM_ABONADO;
               :ihCodConcCobr(j) := registroInOut(j).COD_CONCCOBR;
               :dhImpConcCobr(j) := registroInOut(j).IMP_FACTURABLE;
               :lhSeqCuotas(j)   := registroInOut(j).SEQ_CUOTAS;
               :ihOrdCuota(j)    := registroInOut(j).ORD_CUOTA;
               :ihIndFactur(j)   := registroInOut(j).IND_FACTUR;
               :ihCodProducto(j) := registroInOut(j).COD_PRODUCTO;
           END LOOP;
        END;
    END-EXEC;

    if (sqlca.sqlcode != 0)
    {
       cout << "CO_PASOCOBROS_SB_PG.CO_REC_TOTALES_X_CONCEPTOS_PR" << endl;
       cout << "MENSAJE ERROR :" << szhMenzajeError << endl;
       cout << "ERROR         :" << ierror << endl;
       cout << "SQLCODE       :" << sqlca.sqlcode << endl;
       cout << "DESCRIPCION   :" << sqlca.sqlerrm.sqlerrmc << endl;
       return 0;
    }
    cout << "CANTIDAD DE REGISTROS : " << cant_reg << endl;

    int cuenta_conceptos;
    cuenta_conceptos=0;
    int cod_abonado=-1;
    acumabo.iNumReg=cant_reg;

    NewtagAboCobr _mytagAbonadoCobr;
    _mytagAbonadoCobr.pConcCobr.clear();
    _mytagAbonadoCobr.iNumConceptos=0;
    for(int i=0;i<cant_reg;i++)
    {
         //cuenta_conceptos=0;
         if(cod_abonado==lhNumAbonado[i])
         {
             cuenta_conceptos++;
             NewtagConcCobr _myConcCobr;
             _myConcCobr.iCodConcCobr=ihCodConcCobr[i];
             _myConcCobr.iIndFactur=ihIndFactur[i];
             _myConcCobr.dImpConcCobr=dhImpConcCobr[i];
             _myConcCobr.lSeqCuotas=lhSeqCuotas[i];
             _myConcCobr.iOrdCuota=ihOrdCuota[i];
             _mytagAbonadoCobr.pConcCobr.push_back(_myConcCobr);
             if((i+1)==cant_reg)
             {
                 _mytagAbonadoCobr.iNumConceptos=cuenta_conceptos;
                 acumabo.pAboCobr.push_back(_mytagAbonadoCobr);
                 _mytagAbonadoCobr.pConcCobr.clear();
                 _mytagAbonadoCobr.iNumConceptos=0;
             }
         }
         else
         {
             if(i>0)
             {
                _mytagAbonadoCobr.iNumConceptos=cuenta_conceptos;
                 acumabo.pAboCobr.push_back(_mytagAbonadoCobr);
                 _mytagAbonadoCobr.pConcCobr.clear();
                 _mytagAbonadoCobr.iNumConceptos=0;
             }

             cuenta_conceptos=0;
             _mytagAbonadoCobr.lNumAbonado=lhNumAbonado[i];
             _mytagAbonadoCobr.iCodProducto=ihCodProducto[i];
             cod_abonado=lhNumAbonado[i];

             NewtagConcCobr _myConcCobr;
             _myConcCobr.iCodConcCobr=ihCodConcCobr[i];
             _myConcCobr.iIndFactur=ihIndFactur[i];
             _myConcCobr.dImpConcCobr=dhImpConcCobr[i];
             _myConcCobr.lSeqCuotas=lhSeqCuotas[i];
             _myConcCobr.iOrdCuota=ihOrdCuota[i];
             _mytagAbonadoCobr.pConcCobr.push_back(_myConcCobr);
             cuenta_conceptos++;
         }
    }


    hrClock.markEnd();



    cout << "\t[getAbonadoConcepto]: eTimeMSEC = [" << hrClock.getElapsedTimeMSEC() << "]..." << endl;
    cout << "\t[getAbonadoConcepto]: eTimeSEC  = [" << hrClock.getElapsedTimeSEC()  << "]..." << endl << endl;

    return 1;
}
catch (...)
{
    return 0;
}
};*/
/* Fin Requerimiento de Soporte - 69137 - 18.08.2007 */


int ClassDbProc::LimpiarCarteras()
{
try
{
    vec_sec_cartera.clear();
    vec_cartera.clear();
    return 1;
}
catch (...)
{
    return 0;
}
}

int ClassDbProc::AcumSecCartera(sec_cartera_s &_mysec_cartera)
{
try
{
    /*_mysec_cartera.print();*/
    vec_sec_cartera.push_back(_mysec_cartera);
    return 1;
}
catch (...)
{
    return 0;
}
}

int ClassDbProc::AcumCartera(cartera_s &_my_cartera)
{
try
{
    /*_my_cartera.print();*/
    vec_cartera.push_back(_my_cartera);
    return 1;
}
catch (...)
{
    return 0;
}
}


/*int ClassDbProc::InsertaCarteras()
{
try
{

    EXEC SQL BEGIN DECLARE SECTION;

    int  sih_cod_tipdocum[10000];
    int  sih_cod_vendedor_agente[10000];
    char ssz_letra[10000][2]; EXEC SQL var ssz_letra is string(2);
    int  sih_cod_centremi[10000];
    long slh_num_secuenci[10000];
    int  sih_cod_concepto[10000];
    int  sih_columna[10000];

    long   clh_cod_cliente[10000];
    long   clh_num_secuenci[10000];
    int    cih_cod_tipdocum[10000];
    int    cih_cod_vendedor_agente[10000];
    char   cszh_letra[10000][2];EXEC SQL var cszh_letra is string(2);
    int    cih_cod_centremi[10000];
    int    cih_cod_concepto[10000];
    int    cih_columna[10000];
    int    cih_cod_producto[10000];
    double cdh_importe_debe[10000];
    double cdh_importe_haber[10000];
    int    cih_ind_contado[10000];
    int    cih_ind_facturado[10000];
    char   cszh_fec_efectividad[10000][15];EXEC SQL var cszh_fec_efectividad is string(15);
    char   cszh_fec_vencimie[10000][15];EXEC SQL var cszh_fec_vencimie is string(15);
    char   cszh_fec_caducida[10000][15];EXEC SQL var cszh_fec_caducida is string(15);
    char   cszh_fec_antiguedad[10000][15];EXEC SQL var cszh_fec_antiguedad is string(15);
    long   clh_num_abonado[10000];
    long   clh_num_folio[10000];
    char   cszh_fec_pago[10000][15];EXEC SQL var cszh_fec_pago is string(15);
    long   clh_num_cuota[10000];
    int    cih_sec_cuota[10000];
    long   clh_num_transaccion[10000];
    long   clh_num_venta[10000];
    char   cszh_num_folioctc[10000][12];EXEC SQL var cszh_num_folioctc is string(12);
    char   cszh_cod_operadora_scl[10000][6];EXEC SQL var cszh_cod_operadora_scl is string(6);
    char   cszh_cod_plaza[10000][6];EXEC SQL var cszh_cod_plaza is string(6);
    char   cszh_pref_plaza[10000][11];EXEC SQL var cszh_pref_plaza is string(11);


    int reg_sec_cartera;
    int reg_cartera;
    int registros;

    int ierror;
    char szhMenzajeError[255];  EXEC SQL var szhMenzajeError is string(255);

    EXEC SQL END DECLARE SECTION;

    HighResolutionClock hrClock;

    hrClock.markStart();

    reg_sec_cartera = (int)vec_sec_cartera.size();
    reg_cartera = (int)vec_cartera.size();

    registros=10000;

    for (int j=0;j<registros ;j++ )
    {
        sih_cod_tipdocum[j]=0;
        sih_cod_vendedor_agente[j]=0;
        CLEAR(ssz_letra[j]);
        sih_cod_centremi[j]=0;
        slh_num_secuenci[j]=0;
        sih_cod_concepto[j]=0;
        sih_columna[j]=0;

        clh_cod_cliente[j]=0;
        clh_num_secuenci[j]=0;
        cih_cod_tipdocum[j]=0;
        cih_cod_vendedor_agente[j]=0;
        CLEAR(cszh_letra[j]);
        cih_cod_centremi[j]=0;
        cih_cod_concepto[j]=0;
        cih_columna[j]=0;
        cih_cod_producto[j]=0;
        cdh_importe_debe[j]=0.0;
        cdh_importe_haber[j]=0;
        cih_ind_contado[j]=0;
        cih_ind_facturado[j]=0;
        CLEAR(cszh_fec_efectividad[j]);
        CLEAR(cszh_fec_vencimie[j]);
        CLEAR(cszh_fec_caducida[j]);
        CLEAR(cszh_fec_antiguedad[j]);
        clh_num_abonado[j]=0;
        clh_num_folio[j]=0;
        CLEAR(cszh_fec_pago[j]);
        clh_num_cuota[j]=0;
        cih_sec_cuota[j]=0;
        clh_num_transaccion[j]=0;
        clh_num_venta[j]=0;
        CLEAR(cszh_num_folioctc[j]);
        CLEAR(cszh_cod_operadora_scl[j]);
        CLEAR(cszh_cod_plaza[j]);
        CLEAR(cszh_pref_plaza[j]);
    }


    EXEC SQL ARRAYLEN sih_cod_tipdocum (registros) EXECUTE;
    EXEC SQL ARRAYLEN sih_cod_vendedor_agente (registros) EXECUTE;
    EXEC SQL ARRAYLEN ssz_letra (registros) EXECUTE;
    EXEC SQL ARRAYLEN sih_cod_centremi (registros) EXECUTE;
    EXEC SQL ARRAYLEN slh_num_secuenci (registros) EXECUTE;
    EXEC SQL ARRAYLEN sih_cod_concepto (registros) EXECUTE;
    EXEC SQL ARRAYLEN sih_columna (registros) EXECUTE;

    EXEC SQL ARRAYLEN clh_cod_cliente (registros) EXECUTE;
    EXEC SQL ARRAYLEN clh_num_secuenci (registros) EXECUTE;
    EXEC SQL ARRAYLEN cih_cod_tipdocum (registros) EXECUTE;
    EXEC SQL ARRAYLEN cih_cod_vendedor_agente (registros) EXECUTE;
    EXEC SQL ARRAYLEN cszh_letra (registros) EXECUTE;
    EXEC SQL ARRAYLEN cih_cod_centremi (registros) EXECUTE;
    EXEC SQL ARRAYLEN cih_cod_concepto (registros) EXECUTE;
    EXEC SQL ARRAYLEN cih_columna (registros) EXECUTE;
    EXEC SQL ARRAYLEN cih_cod_producto (registros) EXECUTE;
    EXEC SQL ARRAYLEN cdh_importe_debe (registros) EXECUTE;
    EXEC SQL ARRAYLEN cdh_importe_haber (registros) EXECUTE;
    EXEC SQL ARRAYLEN cih_ind_contado (registros) EXECUTE;
    EXEC SQL ARRAYLEN cih_ind_facturado (registros) EXECUTE;
    EXEC SQL ARRAYLEN cszh_fec_efectividad (registros) EXECUTE;
    EXEC SQL ARRAYLEN cszh_fec_vencimie (registros) EXECUTE;
    EXEC SQL ARRAYLEN cszh_fec_caducida (registros) EXECUTE;
    EXEC SQL ARRAYLEN cszh_fec_antiguedad (registros) EXECUTE;
    EXEC SQL ARRAYLEN clh_num_abonado (registros) EXECUTE;
    EXEC SQL ARRAYLEN clh_num_folio (registros) EXECUTE;
    EXEC SQL ARRAYLEN cszh_fec_pago (registros) EXECUTE;
    EXEC SQL ARRAYLEN clh_num_cuota (registros) EXECUTE;
    EXEC SQL ARRAYLEN cih_sec_cuota (registros) EXECUTE;
    EXEC SQL ARRAYLEN clh_num_transaccion (registros) EXECUTE;
    EXEC SQL ARRAYLEN clh_num_venta (registros) EXECUTE;
    EXEC SQL ARRAYLEN cszh_num_folioctc (registros) EXECUTE;
    EXEC SQL ARRAYLEN cszh_cod_operadora_scl (registros) EXECUTE;
    EXEC SQL ARRAYLEN cszh_cod_plaza (registros) EXECUTE;
    EXEC SQL ARRAYLEN cszh_pref_plaza (registros) EXECUTE;


    for (int j=0;j<reg_sec_cartera ;j++ )
    {
        sih_cod_tipdocum[j]=vec_sec_cartera[j].cod_tipdocum;
        sih_cod_vendedor_agente[j]=vec_sec_cartera[j].cod_vendedor_agente;
        strcpy(ssz_letra[j],vec_sec_cartera[j].letra);
        sih_cod_centremi[j]=vec_sec_cartera[j].cod_centremi;
        slh_num_secuenci[j]=vec_sec_cartera[j].num_secuenci;
        sih_cod_concepto[j]=vec_sec_cartera[j].cod_concepto;
        sih_columna[j]=vec_sec_cartera[j].columna;
    }

    for (int j=0;j<reg_cartera ;j++ )
    {
        clh_cod_cliente[j]=vec_cartera[j].cod_cliente;
        clh_num_secuenci[j]=vec_cartera[j].num_secuenci;
        cih_cod_tipdocum[j]=vec_cartera[j].cod_tipdocum;
        cih_cod_vendedor_agente[j]=vec_cartera[j].cod_vendedor_agente;
        strcpy(cszh_letra[j],vec_cartera[j].letra);
        cih_cod_centremi[j]=vec_cartera[j].cod_centremi;
        cih_cod_concepto[j]=vec_cartera[j].cod_concepto;
        cih_columna[j]=vec_cartera[j].columna;
        cih_cod_producto[j]=vec_cartera[j].cod_producto;
        cdh_importe_debe[j]=vec_cartera[j].importe_debe;
        cdh_importe_haber[j]=vec_cartera[j].importe_haber;
        cih_ind_contado[j]=vec_cartera[j].ind_contado;
        cih_ind_facturado[j]=vec_cartera[j].ind_facturado;
        strcpy(cszh_fec_efectividad[j],vec_cartera[j].fec_efectividad);
        strcpy(cszh_fec_vencimie[j],vec_cartera[j].fec_vencimie);
        strcpy(cszh_fec_caducida[j],vec_cartera[j].fec_caducida);
        strcpy(cszh_fec_antiguedad[j],vec_cartera[j].fec_antiguedad);
        clh_num_abonado[j]=vec_cartera[j].num_abonado;
        clh_num_folio[j]=vec_cartera[j].num_folio;
        strcpy(cszh_fec_pago[j],vec_cartera[j].fec_pago);
        clh_num_cuota[j]=vec_cartera[j].num_cuota;
        cih_sec_cuota[j]=vec_cartera[j].sec_cuota;
        clh_num_transaccion[j]=vec_cartera[j].num_transaccion;
        clh_num_venta[j]=vec_cartera[j].num_venta;
        strcpy(cszh_num_folioctc[j],vec_cartera[j].num_folioctc);
        strcpy(cszh_cod_operadora_scl[j],vec_cartera[j].cod_operadora_scl);
        strcpy(cszh_cod_plaza[j],vec_cartera[j].cod_plaza);
        strcpy(cszh_pref_plaza[j],vec_cartera[j].pref_plaza);
    }


    CLEAR(szhMenzajeError);
    ierror=0;

    EXEC SQL EXECUTE
        DECLARE
           registroInOut1  CO_PASOCOBROS_SB_PG.LT_SECARTERA;
           registroInOut2  CO_PASOCOBROS_SB_PG.LT_CARTERA;
        BEGIN
           FOR j IN 1..:reg_sec_cartera loop
               registroInOut1(j).COD_TIPDOCUM := :sih_cod_tipdocum(j);
               registroInOut1(j).COD_VENDEDOR_AGENTE := :sih_cod_vendedor_agente(j);
               registroInOut1(j).LETRA := :ssz_letra(j);
               registroInOut1(j).COD_CENTREMI := :sih_cod_centremi(j);
               registroInOut1(j).NUM_SECUENCI := :slh_num_secuenci(j);
               registroInOut1(j).COD_CONCEPTO := :sih_cod_concepto(j);
               registroInOut1(j).COLUMNA      := :sih_columna(j);
           END LOOP;
           FOR k IN 1..:reg_cartera loop
               registroInOut2(k).COD_CLIENTE := :clh_cod_cliente(k);
               registroInOut2(k).NUM_SECUENCI := :clh_num_secuenci(k);
               registroInOut2(k).COD_TIPDOCUM := :cih_cod_tipdocum(k);
               registroInOut2(k).COD_VENDEDOR_AGENTE := :cih_cod_vendedor_agente(k);
               registroInOut2(k).LETRA := :cszh_letra(k);
               registroInOut2(k).COD_CENTREMI := :cih_cod_centremi(k);
               registroInOut2(k).COD_CONCEPTO := :cih_cod_concepto(k);
               registroInOut2(k).COLUMNA := :cih_columna(k);
               registroInOut2(k).COD_PRODUCTO := :cih_cod_producto(k);
               registroInOut2(k).IMPORTE_DEBE := :cdh_importe_debe(k);
               registroInOut2(k).IMPORTE_HABER := :cdh_importe_haber(k);
               registroInOut2(k).IND_CONTADO := :cih_ind_contado(k);
               registroInOut2(k).IND_FACTURADO := :cih_ind_facturado(k);
               registroInOut2(k).FEC_EFECTIVIDAD := :cszh_fec_efectividad(k);
               registroInOut2(k).FEC_VENCIMIE := :cszh_fec_vencimie(k);
               registroInOut2(k).FEC_CADUCIDA := :cszh_fec_caducida(k);
               registroInOut2(k).FEC_ANTIGUEDAD := :cszh_fec_antiguedad(k);
               registroInOut2(k).NUM_ABONADO := :clh_num_abonado(k);
               registroInOut2(k).NUM_FOLIO := :clh_num_folio(k);
               registroInOut2(k).FEC_PAGO := :cszh_fec_pago(k);
               registroInOut2(k).NUM_CUOTA := :clh_num_cuota(k);
               registroInOut2(k).SEC_CUOTA := :cih_sec_cuota(k);
               registroInOut2(k).NUM_TRANSACCION := :clh_num_transaccion(k);
               registroInOut2(k).NUM_VENTA := :clh_num_venta(k);
               registroInOut2(k).NUM_FOLIOCTC := :cszh_num_folioctc(k);
               registroInOut2(k).COD_OPERADORA_SCL := :cszh_cod_operadora_scl(k);
               registroInOut2(k).COD_PLAZA := :cszh_cod_plaza(k);
               registroInOut2(k).PREF_PLAZA := :cszh_pref_plaza(k);
           END LOOP;
           CO_PASOCOBROS_SB_PG.CO_INSERTA_CARTERA_PR (registroInOut1,registroInOut2,:ierror,:szhMenzajeError);
        END;
    END-EXEC;

    if (sqlca.sqlcode != 0)
    {
       cout << "FALLO EN EJECUCION DE PACKAGE CO_PASOCOBROS_SB_PG.CO_INSERTA_CARTERA_PR" << endl;
       cout << "MENSAJE ERROR :" << szhMenzajeError << endl;
       cout << "ERROR         :" << ierror << endl;
       cout << "SQLCODE     :" << sqlca.sqlcode << endl;
       cout << "DESCRIPCION :" << sqlca.sqlerrm.sqlerrmc << endl;
       return 0;
    }

    hrClock.markEnd();

    cout << "\t[InsertaCarteras()]: eTimeMSEC = [" << hrClock.getElapsedTimeMSEC() << "]..." << endl;
    cout << "\t[InsertaCarteras()]: eTimeSEC  = [" << hrClock.getElapsedTimeSEC()  << "]..." << endl << endl;

    return 1;
}
catch (...)
{
    return 0;
}
};*/


int ClassDbProc::getAbonadoConcepto2(NewtagAcumAbo &acumabo,int _ind_ordentotal,int _concargo)
{
try
{

	EXEC SQL BEGIN DECLARE SECTION;
		long   	lhNumAbonado[60000];
		int    	ihCodConcCobr[60000];
		double 	dhImpConcCobr[60000];
		long   	lhSeqCuotas[60000];
		int    	ihOrdCuota[60000];
		int    	ihIndFactur[60000];
		int    	ihCodProducto[60000];
		int 	ind_ordentotal;
		int 	iconcargo;
		int 	registros;
		int 	ierror;
		char 	szhMenzajeError[255];  EXEC SQL var szhMenzajeError is string(255);
		int 	cant_reg;
	EXEC SQL END DECLARE SECTION;

/* Requerimiento de Soporte - 72818 - 17.11.2008 */
	int 	j;
	int		CntReg=0;
    int 	cnt_abonados=0;
    long	num_abonado_aux=-3;
/* Requerimiento de Soporte - 72818 - 17.11.2008 */

	/*cout << "METODO getAbonadoConcepto2()" << endl;*/

	ind_ordentotal = _ind_ordentotal;
	iconcargo = _concargo;

	HighResolutionClock hrClock;

	hrClock.markStart();

	/*EXEC SQL DECLARE myArreglo TYPE AS TABLE OF CO_CARTERACONC_QT;*/

	registros = 60000;

	for (j=0;j<registros ;j++ )
	{
		lhNumAbonado[j]=-2;
	}

	EXEC SQL DECLARE CURPL CURSOR FOR
/*	SELECT A.NUM_ABONADO, Requerimiento de Soporte - 84622 - 13.04.2009 */
	SELECT A.NUM_ABONADO,
	       B.COD_CONCCOBR,
	       ROUND(SUM(IMP_FACTURABLE),2),
	       DECODE(A.SEQ_CUOTAS,-1,0,A.SEQ_CUOTAS),
	       NVL(A.ORD_CUOTA,0),
	       A.COD_PRODUCTO
	  FROM FA_CONCEPTOSDOC_CICLO_SY A,FA_FACTCOBR B
	 WHERE A.IND_ORDENTOTAL = :ind_ordentotal
	   AND A.COLUMNA  > 0
	   AND A.COD_CONCEPTO  = B.COD_CONCFACT
	   AND B.COD_CONCCOBR <> :iconcargo
/*	GROUP BY A.NUM_ABONADO, B.COD_CONCCOBR, DECODE(A.SEQ_CUOTAS,-1,0,A.SEQ_CUOTAS), A.ORD_CUOTA, A.COD_PRODUCTO Requerimiento de Soporte - 84622 - 13.04.2009 */
	GROUP BY A.NUM_ABONADO, B.COD_CONCCOBR, DECODE(A.SEQ_CUOTAS,-1,0,A.SEQ_CUOTAS), A.ORD_CUOTA, A.COD_PRODUCTO
	HAVING ROUND(SUM(IMP_FACTURABLE),2) > 0;

	EXEC SQL OPEN CURPL;

	if (sqlca.sqlcode != 0)
	{
		cout << "ERROR AL CREAR EL CURSOR" << endl;
		cout << "SQLCODE       :" << sqlca.sqlcode << endl;
		cout << "DESCRIPCION   :" << sqlca.sqlerrm.sqlerrmc << endl;
		return 0;
	}

	EXEC SQL FETCH CURPL INTO :lhNumAbonado,:ihCodConcCobr,:dhImpConcCobr,:lhSeqCuotas,:ihOrdCuota,:ihCodProducto;

	if (sqlca.sqlerrd[2] == 0)
	{
		cout << "NO SE ENCONTRARON CONCEPTOS POR ABONADOS" << endl;
		cout << "SQLCODE       :" << sqlca.sqlcode << endl;
		cout << "DESCRIPCION   :" << sqlca.sqlerrm.sqlerrmc << endl;
		return 1;
	}

	EXEC SQL CLOSE CURPL;

	for (j=0;j<registros ;j++ )
	{
		if (lhNumAbonado[j]!=-2)
		CntReg++;
	}

	CLEAR(szhMenzajeError);
	ierror=0;

	if (sqlca.sqlcode != 0)
	{
		cout << "ERROR AL CERRAR CURSOR" << endl;
		cout << "SQLCODE       :" << sqlca.sqlcode << endl;
		cout << "DESCRIPCION   :" << sqlca.sqlerrm.sqlerrmc << endl;
		return 1;
	}

	/*    hrClock.markEnd();

	cout << "DESPUES DE LIMPIAR" << endl;
	cout << "\t[MAIN(0)]: eTimeMSEC = [" << hrClock.getElapsedTimeMSEC() << "]..." << endl;
	cout << "\t[MAIN(0)]: eTimeSEC  = [" << hrClock.getElapsedTimeSEC()  << "]..." << endl << endl;*/

	cant_reg = 0;

	/*    hrClock.markStart();*/
	int cuenta_conceptos=0;
	int cod_abonado=-1;


	NewtagAboCobr _mytagAbonadoCobr;
	_mytagAbonadoCobr.pConcCobr.clear();
	_mytagAbonadoCobr.iNumConceptos=0;
	int i;

	for(i=0;i<60000;i++)
	{
		if( num_abonado_aux != lhNumAbonado[i] )
		{
			cnt_abonados++;
			num_abonado_aux = lhNumAbonado[i];
		}

		if(cod_abonado==lhNumAbonado[i])
		{
			cuenta_conceptos++;
			NewtagConcCobr _myConcCobr;
			_myConcCobr.iCodConcCobr=ihCodConcCobr[i];
			_myConcCobr.iIndFactur=1; /*Se elimina por incidencia 66709 ihIndFactur[i]; */
			_myConcCobr.dImpConcCobr=dhImpConcCobr[i];
			_myConcCobr.lSeqCuotas=lhSeqCuotas[i];
			_myConcCobr.iOrdCuota=ihOrdCuota[i];
			_mytagAbonadoCobr.pConcCobr.push_back(_myConcCobr);
			if((i+1)==cant_reg)
			{
				_mytagAbonadoCobr.iNumConceptos=cuenta_conceptos;
				acumabo.pAboCobr.push_back(_mytagAbonadoCobr);
				_mytagAbonadoCobr.pConcCobr.clear();
				_mytagAbonadoCobr.iNumConceptos=0;
			}
		}
		else
		{
			if(i>0)
			{
				_mytagAbonadoCobr.iNumConceptos=cuenta_conceptos;
				acumabo.pAboCobr.push_back(_mytagAbonadoCobr);
				_mytagAbonadoCobr.pConcCobr.clear();
				_mytagAbonadoCobr.iNumConceptos=0;
			}

			if(lhNumAbonado[i]==-2)
			{
				break;
			}

			cuenta_conceptos=0;
			_mytagAbonadoCobr.lNumAbonado=lhNumAbonado[i];
			_mytagAbonadoCobr.iCodProducto=ihCodProducto[i];
			cod_abonado=lhNumAbonado[i];

			NewtagConcCobr _myConcCobr;
			_myConcCobr.iCodConcCobr=ihCodConcCobr[i];
			_myConcCobr.iIndFactur=1; /*Se elimina por incidencia 66709 ihIndFactur[i]; */
			_myConcCobr.dImpConcCobr=dhImpConcCobr[i];
			_myConcCobr.lSeqCuotas=lhSeqCuotas[i];
			_myConcCobr.iOrdCuota=ihOrdCuota[i];
			_mytagAbonadoCobr.pConcCobr.push_back(_myConcCobr);
			cuenta_conceptos++;
		}

		if (cnt_abonados >= 10000 )
		{
		    cout << "cnt_abonados >= 10000" << endl;
			break;
		}
	}

	if (cnt_abonados >= 10000 )
	{
		return 0;
	}

	if ((i+1) >= 60000 )
	{
	    cout << "registros igual a 60000" << endl;
		return 0;
	}

	acumabo.iNumReg=i;
	hrClock.markEnd();

	/*cout << "DESPUES DE LA ASIGNACION" << endl;*/
	//cout << "\t[getAbonadoConcepto2()]: eTimeMSEC = [" << hrClock.getElapsedTimeMSEC() << "]..." << endl;
	//cout << "\t[getAbonadoConcepto2()]: eTimeSEC  = [" << hrClock.getElapsedTimeSEC()  << "]..." << endl << endl;

	return 1;
}
catch (...)
{
    return 0;
}
};

int ClassDbProc::InsertaSecCarteras()
{
try
{

    EXEC SQL BEGIN DECLARE SECTION;
    int  sih_cod_tipdocum[60000];
    int  sih_cod_vendedor_agente[60000];
    char ssz_letra[60000][2]; EXEC SQL var ssz_letra is string(2);
    int  sih_cod_centremi[60000];
    long slh_num_secuenci[60000];
    int  sih_cod_concepto[60000];
    int  sih_columna[60000];
    int reg_sec_cartera;
    int registros;
    int rows_to_insert;
    EXEC SQL END DECLARE SECTION;

    HighResolutionClock hrClock;

    hrClock.markStart();

    reg_sec_cartera = (int)vec_sec_cartera.size();

    rows_to_insert=reg_sec_cartera;

    for (int j=0;j<reg_sec_cartera ;j++ )
    {
        sih_cod_tipdocum[j]=vec_sec_cartera[j].cod_tipdocum;
        sih_cod_vendedor_agente[j]=vec_sec_cartera[j].cod_vendedor_agente;
        CLEAR(ssz_letra[j]);
        strcpy(ssz_letra[j],vec_sec_cartera[j].letra);
        sih_cod_centremi[j]=vec_sec_cartera[j].cod_centremi;
        slh_num_secuenci[j]=vec_sec_cartera[j].num_secuenci;
        sih_cod_concepto[j]=vec_sec_cartera[j].cod_concepto;
        sih_columna[j]=vec_sec_cartera[j].columna;
    }

    EXEC SQL FOR :rows_to_insert
    INSERT INTO CO_SECARTERA(COD_TIPDOCUM,COD_VENDEDOR_AGENTE,LETRA,COD_CENTREMI,NUM_SECUENCI,COD_CONCEPTO,COLUMNA)
    VALUES(:sih_cod_tipdocum,:sih_cod_vendedor_agente,:ssz_letra,:sih_cod_centremi,:slh_num_secuenci,:sih_cod_concepto,:sih_columna);

    if (sqlca.sqlcode != 0)
    {
       cout << "FALLO EN INSERT a CO_SECARTERA" << endl;
       cout << "SQLCODE     :" << sqlca.sqlcode << endl;
       cout << "DESCRIPCION :" << sqlca.sqlerrm.sqlerrmc << endl;
       return 0;
    }

    hrClock.markEnd();

    /*cout << "INSERT CON HOST ARRAY" << endl;*/
    /*cout << "\t[InsertaSecCarteras]: eTimeMSEC = [" << hrClock.getElapsedTimeMSEC() << "]..." << endl;*/
    /*cout << "\t[InsertaSecCarteras]: eTimeSEC  = [" << hrClock.getElapsedTimeSEC()  << "]..." << endl << endl;*/

    return 1;
}
catch (...)
{
    return 0;
}
};

int ClassDbProc::InsertaCarteras()
{
try
{

    EXEC SQL BEGIN DECLARE SECTION;

    long   clh_cod_cliente[60000];
    long   clh_num_secuenci[60000];
    int    cih_cod_tipdocum[60000];
    int    cih_cod_vendedor_agente[60000];
    char   cszh_letra[60000][2];EXEC SQL var cszh_letra is string(2);
    int    cih_cod_centremi[60000];
    int    cih_cod_concepto[60000];
    int    cih_columna[60000];
    int    cih_cod_producto[60000];
    double cdh_importe_debe[60000];
    double cdh_importe_haber[60000];
    int    cih_ind_contado[60000];
    int    cih_ind_facturado[60000];
    char   cszh_fec_efectividad[60000][15];EXEC SQL var cszh_fec_efectividad is string(15);
    char   cszh_fec_vencimie[60000][15];EXEC SQL var cszh_fec_vencimie is string(15);
    char   cszh_fec_caducida[60000][15];EXEC SQL var cszh_fec_caducida is string(15);
    char   cszh_fec_antiguedad[60000][15];EXEC SQL var cszh_fec_antiguedad is string(15);
    long   clh_num_abonado[60000];
    long   clh_num_folio[60000];
    char   cszh_fec_pago[60000][15];EXEC SQL var cszh_fec_pago is string(15);
    long   clh_num_cuota[60000];
    int    cih_sec_cuota[60000];
    long   clh_num_transaccion[60000];
    long   clh_num_venta[60000];
    char   cszh_num_folioctc[60000][12];EXEC SQL var cszh_num_folioctc is string(12);
    char   cszh_cod_operadora_scl[60000][6];EXEC SQL var cszh_cod_operadora_scl is string(6);
    char   cszh_cod_plaza[60000][6];EXEC SQL var cszh_cod_plaza is string(6);
    char   cszh_pref_plaza[60000][26];EXEC SQL var cszh_pref_plaza is string(26);
    short sh_num_transaccion[60000];
    short sh_num_venta[60000];
    int reg_cartera;
    int registros;
    EXEC SQL END DECLARE SECTION;

    HighResolutionClock hrClock;

    hrClock.markStart();

    reg_cartera = (int)vec_cartera.size();

    registros=reg_cartera;

    for (int j=0;j<reg_cartera ;j++ )
    {
        clh_cod_cliente[j]=vec_cartera[j].cod_cliente;
        clh_num_secuenci[j]=vec_cartera[j].num_secuenci;
        cih_cod_tipdocum[j]=vec_cartera[j].cod_tipdocum;
        cih_cod_vendedor_agente[j]=vec_cartera[j].cod_vendedor_agente;
        CLEAR(cszh_letra[j]);
        strcpy(cszh_letra[j],vec_cartera[j].letra);
        cih_cod_centremi[j]=vec_cartera[j].cod_centremi;
        cih_cod_concepto[j]=vec_cartera[j].cod_concepto;
        cih_columna[j]=vec_cartera[j].columna;
        cih_cod_producto[j]=vec_cartera[j].cod_producto;
        cdh_importe_debe[j]=vec_cartera[j].importe_debe;
        cdh_importe_haber[j]=vec_cartera[j].importe_haber;
        cih_ind_contado[j]=vec_cartera[j].ind_contado;
        cih_ind_facturado[j]=vec_cartera[j].ind_facturado;
        CLEAR(cszh_fec_efectividad[j]);
        strcpy(cszh_fec_efectividad[j],vec_cartera[j].fec_efectividad);
        CLEAR(cszh_fec_vencimie[j]);
        strcpy(cszh_fec_vencimie[j],vec_cartera[j].fec_vencimie);
        CLEAR(cszh_fec_caducida[j]);
        strcpy(cszh_fec_caducida[j],vec_cartera[j].fec_caducida);
        CLEAR(cszh_fec_antiguedad[j]);
        strcpy(cszh_fec_antiguedad[j],vec_cartera[j].fec_antiguedad);
        clh_num_abonado[j]=vec_cartera[j].num_abonado;
        clh_num_folio[j]=vec_cartera[j].num_folio;
        CLEAR(cszh_fec_pago[j]);
        strcpy(cszh_fec_pago[j],vec_cartera[j].fec_pago);
        clh_num_cuota[j]=vec_cartera[j].num_cuota;
        cih_sec_cuota[j]=vec_cartera[j].sec_cuota;
        if(vec_cartera[j].num_transaccion!=-1)
        {
            clh_num_transaccion[j]=vec_cartera[j].num_transaccion;
            sh_num_transaccion[j]=0;
        }
        else
            sh_num_transaccion[j]=-1;
        if(vec_cartera[j].num_venta!=-1)
        {
            clh_num_venta[j]=vec_cartera[j].num_venta;
            sh_num_venta[j]=0;
        }
        else
            sh_num_venta[j]=-1;
        CLEAR(cszh_num_folioctc[j]);
        strcpy(cszh_num_folioctc[j],vec_cartera[j].num_folioctc);
        CLEAR(cszh_cod_operadora_scl[j]);
        strcpy(cszh_cod_operadora_scl[j],vec_cartera[j].cod_operadora_scl);
        CLEAR(cszh_cod_plaza[j]);
        strcpy(cszh_cod_plaza[j],vec_cartera[j].cod_plaza);
        CLEAR(cszh_pref_plaza[j]);
        strcpy(cszh_pref_plaza[j],vec_cartera[j].pref_plaza);
    }

    EXEC SQL FOR :registros
    INSERT INTO CO_CARTERA(COD_CLIENTE,NUM_SECUENCI,COD_TIPDOCUM,COD_VENDEDOR_AGENTE,LETRA,COD_CENTREMI,COD_CONCEPTO,COLUMNA,
                           COD_PRODUCTO,IMPORTE_DEBE,IMPORTE_HABER,IND_CONTADO,IND_FACTURADO,FEC_EFECTIVIDAD,FEC_VENCIMIE,
                           FEC_CADUCIDA,FEC_ANTIGUEDAD,NUM_ABONADO,NUM_FOLIO,FEC_PAGO,NUM_CUOTA,SEC_CUOTA,NUM_TRANSACCION,
                           NUM_VENTA,NUM_FOLIOCTC,COD_OPERADORA_SCL,COD_PLAZA,PREF_PLAZA)
                    VALUES(:clh_cod_cliente,:clh_num_secuenci,:cih_cod_tipdocum,:cih_cod_vendedor_agente,:cszh_letra,:cih_cod_centremi,
                           :cih_cod_concepto,:cih_columna,:cih_cod_producto,:cdh_importe_debe,:cdh_importe_haber,:cih_ind_contado,
                           :cih_ind_facturado,TO_DATE(:cszh_fec_efectividad,'YYYYMMDD'),TO_DATE(:cszh_fec_vencimie,'YYYYMMDD'),SYSDATE,TO_DATE(:cszh_fec_antiguedad,'YYYYMMDD'),
                           :clh_num_abonado,:clh_num_folio,TO_DATE(:cszh_fec_pago,'YYYYMMDD'),:clh_num_cuota,:cih_sec_cuota,:clh_num_transaccion :sh_num_transaccion,
                           :clh_num_venta :sh_num_venta,:cszh_num_folioctc,:cszh_cod_operadora_scl,:cszh_cod_plaza,:cszh_pref_plaza);

    if (sqlca.sqlcode != 0)
    {
       cout << "FALLO EN INSERT TABLA CO_CARTERA" << endl;
       cout << "SQLCODE     :" << sqlca.sqlcode << endl;
       cout << "DESCRIPCION :" << sqlca.sqlerrm.sqlerrmc << endl;
       return 0;
    }

    hrClock.markEnd();

    /*cout << "\t[InsertaCarteras()]: eTimeMSEC = [" << hrClock.getElapsedTimeMSEC() << "]..." << endl;*/
    /*cout << "\t[InsertaCarteras()]: eTimeSEC  = [" << hrClock.getElapsedTimeSEC()  << "]..." << endl << endl;*/

    return 1;
}
catch (...)
{
    return 0;
}
};