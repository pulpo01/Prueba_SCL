#include "monitor.h"
#define ACTI   1
#define EJEC   2
#define COMD   3
#define VCOL   4
#define MCPU   5	 
#define SALE   99

EXEC SQL include sqlca;
EXEC ORACLE OPTION (MAXOPENCURSORS=60); 

/*===============================================================*/
/* Variables de la base de datos                                 */
/*===============================================================*/
EXEC SQL BEGIN DECLARE SECTION;
   char uid[20];              exec sql var uid            is string(20);
   char pwd[20];              exec sql var pwd            is string(20);
   char mcod_proc[11];        exec sql var mcod_proc      is string(11); 
   char mcod_subpro[11];      exec sql var mcod_subpro    is string(11); 
   char mcod_central[11];     exec sql var mcod_central   is string(11);
   char mcod_prefcola[3];     exec sql var mcod_prefcola  is string(3); 
   char mcod_estado[11];      exec sql var mcod_estado    is string(11); 
   char mfec_error[21];       exec sql var mfec_error     is string(21); 
   char mnum_jobs[11];        exec sql var mnum_jobs      is string(11);
   char mtip_ejecucion[10];   exec sql var mtip_ejecucion is string(10);
   char mgls_subproc[30];     exec sql var mgls_subproc   is string(30);
EXEC SQL END DECLARE SECTION;

/*---------------------------------->>>>> TRADUCCION DEL PTOTOCOLO            <<<<<----------------------------------*/
int trad_protocolo (char *comando)
{
	if (strcmp(comando,"ACTI") == 0 ) 
           return(1);
	if (strcmp(comando,"EJEC") == 0 ) 
           return(2);
	if (strcmp(comando,"COMD") == 0 ) 
           return(3);
	if (strcmp(comando,"VCOL") == 0 ) 
           return(4);
	if (strcmp(comando,"MCPU") == 0 ) 
           return(5);
	if (strcmp(comando,"SALE") == 0 ) 
           return(99);
}

/*----------------------------------------------------------*/
/* Funcion   : fnMsgError                                   */
/* Objetivo  : Manejador de errores sql                     */
/*----------------------------------------------------------*/
void fnMsgError(char *szMsg, int  iErrNum,int  bRollCom)
{
   if (iErrNum NE SqlNull) 
   {
      if ((iErrNum NE SqlOk) and (iErrNum NE SqlNotFound))
      {
         printf("ERROR SQL : %d en %s \n",iErrNum,szMsg);
         if (bRollCom)  EXEC SQL rollback work; 
            exit(1);
      }
   }
}

/*---------------------------------->>>>> COMANDOS SOLICITADOS POR EL CLIENTE <<<<<----------------------------------*/
/*---------------------------------------------------------------------------------*/
/*  Busqueda de las tareas en linea inscritas en el registro de procesos de UNIX   */
/*---------------------------------------------------------------------------------*/
int ver_consola(int sock, FILE *logf, char *param)
{
   char buffer[BUFFER_SIZE];
   char xbuffer[35+1];
   DIR  *dp;
   struct dirent *dirp;
   prpsinfo_t retval;
   int fd,i;
   div_t nsec;
   div_t nhor;
   char horta[20], frm_hora[11], formato[50];
   time_t now;
   float pcpu,pmem;
   char spcpu[6]; /* -rast- 20060526 - variable para formateo - TM-200608082112*/
   char spmem[6]; /* -rast- 20060526 - variable para formateo - TM-200608082112*/
   int tmp;

   /* Inicio -rast- 20060526 - TM-200608082112*/
   memset(spmem, 0x00, sizeof(spmem));
   memset(spcpu, 0x00, sizeof(spcpu));
   memset(xbuffer, 0x00, sizeof(xbuffer));
   /* Fin -rast- 20060526 - TM-200608082112*/
  
   strcpy(buffer,"#");
   sqlca.sqlcode = 0;
   if((dp=opendir("/proc"))!=NULL)
   {
      chdir("/proc");
      /*--->>> Si existe el directorio 'proc' se hace la consulta a la tabla 'profile' <<<---*/
      EXEC SQL DECLARE Currelproc cursor for
		SELECT 
                   num_jobs, 
                   cod_proc, 
                   cod_subpro, 
                   cod_central,
                   cod_estado, 
                   TO_CHAR(NVL(fec_ter,sysdate),'yyyymmddhh24miss'), 
                   tip_ejecucion
		FROM   
                   sch_profile
		WHERE  
                   flg_batch    <> 'B'     
                 AND cod_estado	<> 'ENCOL' 
		ORDER BY 
                     num_jobs;
			   
      EXEC SQL OPEN Currelproc;
      EXEC SQL FETCH Currelproc into :mnum_jobs, :mcod_proc, :mcod_subpro, :mcod_central, :mcod_estado, :mfec_error, :mtip_ejecucion;
      while (sqlca.sqlcode != SqlNotFound)
      {
         if((fd=open(mnum_jobs,O_RDONLY))!=-1)
         {
            if(ioctl(fd,PIOCPSINFO,&retval)!=-1)
            {
               /* Formato de la hora  variable frm_hora */
               now = time(NULL);
               now = difftime(now,retval.pr_start.tv_sec);
               nhor = div(now,3600);
               nsec = div(nhor.rem,60);
                    			
               if (nsec.quot > 9) 
                  strcpy(frm_hora,"%4d:%d");
     	       else 
                  strcpy(frm_hora,"%4d:0%d");
                         
               if (nsec.rem  > 9) 
                  strcat(frm_hora,":%d");
               else 
                  strcat(frm_hora,":0%d");
                         
               /* Inicio -rast- 20060526 - TM-200608082112*/
               strcpy(formato,"%6dS%2d");
               strcat(formato,frm_hora); 
               /* Inicio -rast- 20060526 - TM-200608082112*/
                         
               cftime(horta,"%M:%S",&retval.pr_time.tv_sec);

               /* Inicio -rast- 20060526 - TM-200608082112*/
               pcpu = retval.pr_pctcpu * (1 / 327.68);
               pmem = retval.pr_pctmem * (1 / 327.68);
                         
               sprintf(spmem,"%02.2f",pmem);
               sprintf(spcpu,"%02.2f",pcpu);
               /* Fin -rast- 20060526 - TM-200608082112*/
                    			
               /*- TM-200608082112
               strcpy(formato,"%6dS%2d");
               strcat(formato,frm_hora);
               strcat(formato,"%5s%2.2f%2.2f%c");
               - TM-200608082112*/
               					
               strcat(formato,"%5s%5s%5s%c");
               memset(xbuffer, 0x00, sizeof(xbuffer));			
               sprintf(xbuffer, formato, retval.pr_pid, retval.pr_pri, nhor.quot, nsec.quot, nsec.rem, horta, spmem, spcpu, retval.pr_sname);					
               strcat(buffer,xbuffer);
               /* N° PID                                   A(06) */
               /* Prioridad                                N(02) */
               /* Tiempo de Sala                           A(10) */
               /* Tiempo de procesador                     A(05) */
               /* Porcentaje de Memoria                    N(2).2*/
               /* Porcentaje de CPU                        N(2).2*/
               /* Estado del procesador                    A(01) */
               /* retval.pr_cpu);          				              */
               /* Cpu actual de proceso                    A(01) */
               /* Suma registro                              35  */
            }
            close(fd);
         }
         else /*Si no encuentra el PID de la base de datos en el sistema, graba el error en la tabla Sch_Profile */
         {
            if(strcmp(mcod_estado,"ERROR") != 0)
            {

                      trim(mcod_proc,1,(int )strlen(mcod_proc),mcod_proc);
		      trim(mcod_subpro,1,(int )strlen(mcod_subpro),mcod_subpro);
		      trim(mcod_central,1,(int )strlen(mcod_central),mcod_central);

               sqlca.sqlcode=0;
               EXEC SQL
		SELECT 
                  TO_CHAR(SYSDATE,'yyyymmddhh24miss') 
                INTO 
                    :mfec_error
		FROM
                    dual;
            
               EXEC SQL
               UPDATE Sch_Profile
			SET  
                          Cod_Estado    = 'ERROR',
                  Fec_Ter       = TO_DATE(:mfec_error,'yyyymmddhh24miss')
			WHERE  
                      cod_proc    = :mcod_proc   AND
                  cod_subpro  = :mcod_subpro AND
                  cod_central = :mcod_central;
            
               EXEC SQL COMMIT;
            
               EXEC SQL
		  INSERT INTO 
                   sch_hprofile 
			(
                             COD_PROC, COD_SUBPRO, COD_CENTRAL, NUM_JOBS, FECHA, 
			     COD_ESTADO, RESPONSABLE, MOTIVO, TIP_EJECUCION
                        ) 
               VALUES 
			(
                            :mcod_proc, :mcod_subpro, :mcod_central, :mnum_jobs, to_char(sysdate, 'YYYYMMDDHH24MISS'), 
			    'ERROR',  'SCHEDULER', NULL, :mtip_ejecucion
                        );
               EXEC sql commit;
            
            }
	    trim(mnum_jobs,1,(int ) strlen(mnum_jobs),mnum_jobs);
            sprintf(xbuffer, "%6sN%14s--------------",
            mnum_jobs,   /* N° PID                                   A(06) */
            mfec_error); /* Fecha del error                          A(14) */
                          /* Suma registro                              21   */
            strcat(buffer,xbuffer);
         } /* Fin si comparacion tabla/sistema*/
         EXEC SQL FETCH Currelproc into :mnum_jobs, :mcod_proc, :mcod_subpro, :mcod_central, :mcod_estado, :mfec_error, :mtip_ejecucion;
      } /*Fin While de la tabla */
      closedir(dp);
      strcat(buffer,"\0");

      tmp = write_single(sock,logf,buffer);

      if ( tmp < 0 ) 
      {
         fprintf (stdout,"[1] buffer [%s]\n",buffer);
         fprintf (stdout,"[1] Error al grabar write_multi [%d]\n",tmp);
         switch (errno)
         {
		case EAGAIN  : 
                       fprintf (stdout,"EAGAIN [%d]\n",EAGAIN);
                       break;
		case EBADF : 
                       fprintf (stdout,"EBADF [%d]\n",EBADF);
                       break;
		case EFAULT : 
                       fprintf (stdout,"EFAULT [%d]\n",EFAULT);
                       break;
		case EFBIG : 
                       fprintf (stdout,"EFBIG [%d]\n",EFBIG);
                       break;
		case EINTR : 
                       fprintf (stdout,"EINTR [%d]\n",EINTR);
                       break;
		case EINVAL : 
                       fprintf (stdout,"EINVAL [%d]\n",EINVAL);
                       break;
		case EIO : 
                       fprintf (stdout,"EIO [%d]\n",EIO);
                       break;
		case ENOSPC : 
                       fprintf (stdout,"ENOSPC [%d]\n",ENOSPC);
                       break;
		case EPIPE : 
                       fprintf (stdout,"EPIPE [%d]\n",EPIPE);
               break;
         }
         return -3;
      }
      return 1;
   }
   else /* Si no existe el directorio */
   {
      strcpy(buffer,"NO EXISTE DIRECTORIO \0");
      
      tmp = write_single(sock,logf,buffer);
      if ( tmp < 0 ) 
      { 
         fprintf (stdout,"[2] Error al grabar write_multi [%d]\n",tmp);
         return -3;
      } 
      return -1;
   }
}

/*---------------------------------------------------------------------------------*/
/*            Visualizacion de la memoria general y el uso de las CPU              */
/*---------------------------------------------------------------------------------*/
int ver_memcpu(int sock, FILE * logf, char * param) 
{
   char buffer [BUFFER_SIZE];
   char command[BUFFER_SIZE];
   char logs   [BUFFER_SIZE];
	
   char xbuffer[10];
   double cpu_sys[20][2],cpu_paso;
   int tot_cpu = 0,existe;
   DIR  *dp;
   struct dirent *dirp;
   prpsinfo_t retval;
   int fd,i;
   float phys_pg, aphys_pg, pg_size,pcpu;
   long phys_mem, aphys_mem;
	
   int tmp;

   phys_pg = sysconf(_SC_PHYS_PAGES);
   aphys_pg = sysconf(_SC_AVPHYS_PAGES);
   pg_size = sysconf(_SC_PAGESIZE);
   phys_mem=(phys_pg / 1048576) * pg_size;
   aphys_mem=((aphys_pg / 1024) * pg_size) / 1024;
   sprintf(buffer,"MEMORY%10ld%10ld",phys_mem,aphys_mem);

   if((dp=opendir("/proc"))!=NULL)
   {
      chdir("/proc");
      while((dirp=readdir(dp))!=NULL)
      {
         if(dirp->d_name[0]!='.')
         {
            if((fd=open(dirp->d_name,O_RDONLY))!=-1)
            {
               if(ioctl(fd,PIOCPSINFO,&retval)!=-1)
               {
                  pcpu = retval.pr_pctcpu * (1 / 327.68);
                  existe = 0;
                  cpu_paso = retval.pr_cpu;
                  for (i = 0; i<=tot_cpu; i++)
                  {
                     if (cpu_sys[i][0] == retval.pr_cpu)
                     {
                        existe = 1;
                        cpu_sys[i][1] += pcpu;
                        break;
                     }
                  }
                  if (existe == 0)
                  {
                     cpu_sys[tot_cpu][0] = cpu_paso;
                     cpu_sys[tot_cpu][1] = pcpu;
                     tot_cpu ++;
                  }
               }
               close(fd);
            }
         }
      }
      closedir(dp);
      for (i = 0; i<tot_cpu; i++) /* Despliegue de los CPU y sus porcentajes */
      {
         sprintf(xbuffer,"%5.0f%2.2fP",cpu_sys[i][0], cpu_sys[i][1]);
         strcat(buffer,xbuffer);
      }
      
      strcat(buffer,"\0");
      
      tmp = write_single(sock,logf,buffer);
      if ( tmp < 0 ) 
      {	
         fprintf (stdout,"[3] Error al grabar write_multi [%d]\n",tmp);
         return -3;
      }
      return 1;
   }
   else /* Si no existe el directorio */
   {
      strcpy(buffer,"NO EXISTE DIRECTORIO \0");
      tmp = write_single(sock,logf,buffer);
      if (tmp < 0 ) 
      {
         fprintf (stdout,"[4] Error al grabar write_multi [%d]\n",tmp);
         return -3;
      }
      return -1;
   }
}

/*---------------------------------------------------------------------------------*/
/*                               Ejecucion de programas                            */
/*---------------------------------------------------------------------------------*/
int ejecuta_tarea(int sock, FILE * logf, char * param) 
{
   char buffer [BUFFER_SIZE];
   char command[BUFFER_SIZE];
   char logs   [BUFFER_SIZE];
   FILE * pipe = NULL;
   FILE * sh_ejecuta;
   char comandoshel[101];
   char comandomail[101];
   char comandoprg[301];
   char nom_archivo[50];
   
   /*45805 - agrega variables: ptr, strtoken*/
   char *ptr;
   char strtoken[1+1];
   char strCodPro[10+1];
   char strCodSubPro[10+1];
   
   memset(strtoken,0x00,sizeof(strtoken));
   memset(strCodPro,0x00,sizeof(strCodPro));
   memset(strCodSubPro,0x00,sizeof(strCodSubPro));
   
   strcpy(strtoken,"#");   
   
   /* - 45805 -*/   

   if (Njobs < 0) 
       Njobs = 0;
   if (Njobs > 20000) 
       Njobs = 0;

   Njobs ++;

   /* Realizamos el servicio solicitado  */
   memset(comandoprg, 0x00, sizeof(comandoprg));
   mid(LineaComando,1,296,comandoprg);
   memset(comandomail, 0x00, sizeof(comandomail));
   mid(LineaComando,297,100,comandomail);
   sprintf(nom_archivo,"sh_ejec_%d%d.sh",Njobs,getpid());

   sh_ejecuta=fopen(nom_archivo,"w");
   /* -HHA- 45805 Se agrega condiciones de ejecucion*/
   /* 1. Cortar el comandoprg en tokens, se informa un caracter #*/
   ptr = strtok( comandoprg, strtoken );
   /*printf( "%s\n", ptr ); */
   strcpy(comandoprg,ptr);
   printf( "comandoprg [%s]\n", comandoprg); 
   ptr = strtok( NULL, strtoken );
   strcpy(strCodPro,ptr);
   printf( "strCodPro [%s]\n", strCodPro ); /*asignar a las variables strCodPro y strCodSubPro*/
   ptr = strtok( NULL, strtoken );
   strcpy(strCodSubPro,ptr);
	 printf( "strCodSubPro [%s]\n", strCodSubPro ); /*asignar a las variables strCodPro y strCodSubPro*/   
   
   fprintf(sh_ejecuta,"$SCH_PRO/CondicionSubpro %s %s 0 scheduler scheduler\n",strCodPro,strCodSubPro);
   fprintf(sh_ejecuta,"if [ $? =  0 ]\n");
   fprintf(sh_ejecuta," then\n");

   fprintf(sh_ejecuta,"   %s\n",comandoprg);
   fprintf(sh_ejecuta,"    if [ ! $? =  0 ]\n");
   fprintf(sh_ejecuta,"     then\n");
   fprintf(sh_ejecuta,"       %s 1 \n",comandomail);
   fprintf(sh_ejecuta,"     else\n");
   fprintf(sh_ejecuta,"       %s 0 \n",comandomail);
   fprintf(sh_ejecuta,"    fi;\n\n");
   fprintf(sh_ejecuta," fi;\n\n");
   /*-45805- FIN*/      
   fprintf(sh_ejecuta," rm %s \n",nom_archivo);
   fprintf(sh_ejecuta," exit 0;\n");
   fclose(sh_ejecuta);

   sprintf(comandoshel,"ksh %s &",nom_archivo);
   system(comandoshel);

   return 1;
}

/*---------------------------------------------------------------------------------*/
/*                       Ejecucion de comandos de consola                          */
/*---------------------------------------------------------------------------------*/
int ejec_comando(int sock, FILE * logf, char * param) 
{
   char buffer [BUFFER_SIZE];
   char command[BUFFER_SIZE];
   char logs   [BUFFER_SIZE];
   FILE * pipe = NULL;
   /* Realizamos el servicio solicitado */
   sprintf(command, LineaComando, param );

   /* Abrimos el pipe de comunicacion con el commando ejecutado */
   if ( (pipe=popen(command,"r")) == NULL ) 
   {
      sprintf( logs, "Error creating pipe: %s\0", strerror(errno) );
      log(logf, logs);
    	return -1; 
   }

   /* Decimos que comienza la transmision */
   if ( write_begin (sock,logf) < 0 ) 
   {
      pclose( pipe );
    	return -2; 
   }

   for(;;)
   {
       if ( fgets(buffer, BUFFER_SIZE, pipe) == NULL ) 
       break;

       if ( write_multi(sock,logf,buffer) < 0 )  
       {
         pclose( pipe );
      		return -3; 
       }
   }

   /* Decimos que termina la transmision */
   if ( write_end (sock,logf) < 0 ) 
   {
      pclose( pipe );
    	return -4; 
   }

   /* Cerramos todo y nos vamos */
   pclose(pipe);
   return 1;
}


/*---------------------------------------------------------------------------------*/
/*           Revisa las colas de proceso con relacion a los subprocesos            */
/*---------------------------------------------------------------------------------*/
int ver_colas(int sock, FILE *logf, char *param)
{
    key_t key;
    char buffer[BUFFER_SIZE];
    char xbuffer[70],Id[20];
    struct msqid_ds queue_ds;
    int datos;
    long i,msqid;
    message_buf  rbuf;

/*--->>> Busca el prefijo de las colas de mensajes <<<---*/
    sqlca.sqlcode=0;
    EXEC SQL 
    SELECT cod_param
    INTO  :mcod_prefcola
    FROM  sch_codigos
    WHERE cod_tipo   = 'PREFCOLAS' AND
		  fec_term   > SYSDATE;

    fnMsgError("Select sch_codigos colas ",sqlca.sqlcode,0);

/*--->>> Rescata y crea el cursor de todos los subprocesos que utilicen colas <<<---*/
    sqlca.sqlcode=0;
EXEC SQL DECLARE Currelvproc cursor for
    SELECT a.cod_proc, a.cod_subpro, a.tip_ejecucion, a.gls_subproc
    FROM  sch_detalle_proc a, sch_secejec b  
    WHERE (a.ind_colas = 'S' OR a.ind_colas = 'X') AND
		  b.cod_proc   = a.cod_proc AND
		  b.cod_subpro = a.cod_subpro
	ORDER BY b.correl; 

    exec sql open Currelvproc;

fnMsgError("Open Cursor Currelvproc",sqlca.sqlcode,0);

/*--->>> Busca el primer registro */
    exec sql fetch Currelvproc into :mcod_proc, :mcod_subpro, :mtip_ejecucion, :mgls_subproc;
    
    fnMsgError("1 fetch Cursor Currelvproc",sqlca.sqlcode,0);
    if (sqlca.sqlcode != 0)
    {
        printf("No se registra informacion para el proceso %s\n",mcod_proc);
        exit(1);
    }

 /* Recorre todas las bases de cálculo para todos los subprocesos */    
	strcpy(buffer,"#");
	while (sqlca.sqlcode != SqlNotFound)
    {

		trim(mcod_subpro,1,(int ) strlen(mcod_subpro),mcod_subpro);
		trim(mcod_prefcola,1,(int ) strlen(mcod_prefcola),mcod_prefcola);
		strcpy(Id, mcod_proc);
		strcat(Id, mcod_subpro);

		key = atoi(Id) + atoi(mcod_prefcola);
		if ((msqid = msgget(key, 0666)) >= 0) 
		{   
			i = msgctl(msqid, IPC_STAT, &queue_ds);
			sprintf(xbuffer,"%10s%10s%5s%30s%5d",mcod_proc, mcod_subpro, mtip_ejecucion, mgls_subproc, queue_ds.msg_qnum);
			strcat(buffer,xbuffer);
		}
		exec sql fetch Currelvproc into :mcod_proc, :mcod_subpro, :mtip_ejecucion, :mgls_subproc;
                fnMsgError("2 fetch Cursor Currelvproc",sqlca.sqlcode,0);
    }
    
/* Revisa cola del scheduler */
	strcpy(mgls_subproc,"SCHEDULER");
	strcpy(mcod_proc,"0000000000");
	strcpy(mcod_subpro,"0000000000");
	strcpy(mtip_ejecucion,"11111");
	key = KEYCOLASCH;
	if ((msqid = msgget(key, 0666)) >= 0) 
	{   
		i = msgctl(msqid, IPC_STAT, &queue_ds);
		sprintf(xbuffer,"%10s%10s%5s%30s%5d",mcod_proc, mcod_subpro, mtip_ejecucion, mgls_subproc, queue_ds.msg_qnum);
		strcat(buffer,xbuffer);
	}
/*--->>> Graba buffer de salida <<<----*/
	strcat(buffer,"\0");
	if (write_single(sock,logf,buffer) < 0 ) 
	{	
		printf ("Error al grabar write_single\n");
		return -3;
	}
	return 1;
}
/*-------------------------------->>>>> SECCION HIJA, ATENCION DE REQUERIMIENTOS <<<----------------------------------*/
/*---------------------------------------------------------------------------------*/
/*           Atiende y revisa el protocolo de comunicacion con el cliente          */
/*---------------------------------------------------------------------------------*/
int attend( int sock, FILE * logf )
{
   char buffer  [BUFFER_SIZE];
   char command [BUFFER_SIZE];
   char param   [BUFFER_SIZE];
   char logs    [BUFFER_SIZE];
   char e_tarea [4];
   char accion;
   int iConsola = 0;

   struct sockaddr_in server, client;
   int                sockO, newsock;
   int                socksize;
   int tmp;
   FILE             * logfO = NULL;

   sockO = sock;
   logfO = logf;

   /* Conexion con la base de datos */
   EXEC SQL CONNECT :uid IDENTIFIED BY :pwd;
   sqlca.sqlcode = 0;
	
   /* El protocolo de comunicacion es:___________________________________
   |                                                                     |
   |  El cliente pregunta con un comando + parametros.                   |
   |  Formato: COMANDO+PARAM_1|PARAM_2|...|PARAM_N						  |	
   |                                                                     |
   |  El servidor responde con OK + respuesta o ERROR + mensaje.         | 
   |  Formato: OK|RESP_1|RESP_2|...|RESP_N                               |
   |           ERROR|MENSAJE                                             |
   |                                                                     |
   |  En la respuesta del servidor cada grupo de palabras comienza con   |
   |  #BEGIN# y termina con #END#                                        |
   |																	  |	
   |  La secuencia es:                                                   |
   |  Cliente pregunta (1 linea) y servidor responde (n lineas).         | 
|_ Enviamos al cliente una señal para que comienze a hablar __________|
 */

   /* Iniciamos un ciclo en el cual se atenderán las peticiones del cliente*/
   for(;;)
   {
      if (read_single(sock,logf,command,param) < 0 ) 
         return -2;
      mid(command,1,4,e_tarea);

      switch (trad_protocolo(e_tarea))
      {
      case ACTI:
         iConsola = ver_consola(sock,logf,param);
         if (iConsola < 0) 
         {
            fprintf(stdout,"[1] Sali por ACTI [%d] - ver_consola() [%d] < 0\n",ACTI,iConsola);
            return -10;
         }
         break;

      case EJEC:
	 mid(command,5,(int ) strlen(command),LineaComando);
	if (ejecuta_tarea(sock,logf,param) < 0 ) 
           return -10; 
         break;
      
      case COMD: 
	mid(command,5,(int ) strlen(command),LineaComando);
	if (ejec_comando(sock,logf,LineaComando) < 0 ) 
          return -10; 
         break;

      case VCOL:
	if (ver_colas(sock,logf,param) < 0) 
          return -10;
      break;
      
      case MCPU:
	if (ver_memcpu(sock,logf,param) < 0) 
          return -10;
      break;
      
      case SALE:  
         return 1;
        break;
      default:
         sprintf(buffer, "ERROR|Comando no conocido: (%s,%s)\0", command,param);
         tmp = write_single(sock,logf,buffer);
         if ( tmp < 0 ) 
         { 
            sprintf(buffer, "[5] Error al escribir en write_single [%d]\0", tmp);
            return -3;
         }
         break;
      }
   }
}

/*------------------------------------------>>>>> ENCABEZADO <<<--------------------------------------------*/
void Header()
{
   printf("\n");
   printf("Nombre  Programa   : monitor       \n");
   printf("Version Soporte    : [%s] Fecha Version [%s]\n",PROG_VERSOP,FEC_VERSOP);
   printf("Version Desarrollo : [%s] Fecha Version [%s]\n",PROG_VERDES,FEC_VERDES);
   printf("\n");
} 

/*------------------------------------------>>>>> PROGRAMA PRINCIPAL  <<<--------------------------------------------*/
int main( int argc, char **argv ) 
{
   struct sockaddr_in server, client;
   int                sock, newsock;
   int                socksize;
   FILE              *logf = NULL;
   char               logs[BUFFER_SIZE];
   int				   i;
   
   Header();

   if ( argc < 4 ) 
   {
      fprintf(stderr, "El programa requiere parametros (puerto, usuario BD, password BD [Archivo de log]\n");
      return -1;
   }
   printf("Parametros ingresados \n");
   printf("----------------------\n");

   for (i=0;i<argc;i++)
      printf("Argumento %d: %s\n",i,argv[i]);

   printf("----------------------\n");
   strcpy(uid,argv[2]);
   strcpy(pwd,argv[3]);

   /* Preparamos el log */
   logf = stdout;
   fflush( stdout );

   /* Creamos el socket de escucha */
   if ( (sock = socket(PF_INET, SOCK_STREAM,0)) < 0 ) 
   {
      perror( "Error creating socket" );
      printf("[SCH:Error]\n");
      return -1;
   }

   /* Construimos la dirección del servidor */
   server.sin_family = AF_INET;
   server.sin_addr.s_addr = INADDR_ANY;
   server.sin_port = htons(atoi(argv[1]) );
   /* Conectamos el socket a la dirección */
   if ( (bind(sock, (struct sockaddr *)&server, sizeof(server))) < 0) 
   {
      if (errno==125)
      {
         printf("[SCH:Ocupado]\n");
      }
      else
      {
         perror("Error binding socket");
         printf("[SCH:Error]\n");
      }
      close( sock );
      return -1;
   }

   /* Escuchamos por el socket */
   if ( listen(sock, MAX_PENDING) < 0 ) 
   {
      perror("Error listening socket");
      printf("[SCH:Error]\n");
      close( sock );
      return -1;
   }

   /* Ignoramos las señales de mis hijos */
   signal( SIGCHLD, SIG_IGN );
   for(;;) 
   {
      socksize = sizeof( client );
      /* Esperamos por alguna conexión */
      if ( (newsock = accept(sock, (struct sockaddr *)&client, &socksize)) < 0) 
      {
         /* Si hay problemas en la coneccion las ignoro y sigo esperando
         // Si fui interrumpido por una señal de un hijo muerto, las ignoro */
         continue;
      }
      switch(fork())
      {
         /* No pudimos crear hijo */
         case -1:
            /*/ Si hay problemas al crear el proceso los ignoro y sigo esperando
            //////////////////// LOG //////////////////*/
            sprintf( logs, "Error al crear proceso hijo: %s\0", strerror(errno) );
            log( logf, logs );
            /*/////////////////// LOG ///////////////////*/
            break;
            /* El hijo se creo bien */
         case  0:
            close(sock);
            /*/////////////////// LOG ///////////////////*/
            if ( attend(newsock,logf) > 0 ) 
            {
               close(newsock);
               exit(1);
            }
            else 
            {
               close(newsock);
               exit(0);
            }
         /*/ Soy el padre */
         default:
            close(newsock);
            break;
      }
   }
}
