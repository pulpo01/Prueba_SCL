/*******************************************************************************

      Fichero:  GenORA.pc

         Descripcion: Definicion de funciones generales.

         Fecha: 05/10/1995

       Autor: Manolo Oterino

*******************************************************************************/

#include <stdio.h>
#include <stdarg.h>
#include <string.h>
#include <stdlib.h>
#include <math.h>
#include <signal.h>
#include <time.h>
#include <ctype.h>
#include <sys/types.h>
#include <sys/times.h>
#include <sys/time.h>
/*#include <GenTypes.h>*/
#include <coerr.h>
#include "GenORA.h"
/******************************************************************************/

#define MAXLITERAL  255

/****************inicio de las implementaciones de las funciones***************/

EXEC SQL INCLUDE sqlca;


EXEC SQL WHENEVER SQLERROR    	CONTINUE;
EXEC SQL WHENEVER SQLWARNING   	CONTINUE;
EXEC SQL WHENEVER NOT FOUND     CONTINUE;

/******************************************************************************/
int ifnConnectORA( char *szusr, char *szpsw )
{

 EXEC SQL BEGIN DECLARE SECTION;

       char szhConnStr[128]; EXEC SQL VAR szhConnStr IS STRING(128);

     EXEC SQL END DECLARE SECTION;

   char szUser[31];
        int  i;

         /* Comprobamos si hay password*/
        strcpy( szhConnStr, szusr );

    if( szpsw[0] != (char) 0 )
      {
               for (i=0;i<strlen(szusr);i++)
                    szUser[i] = toupper(szusr[i]);
         szUser[i] = '\0';
               strcat( szhConnStr, "/" );
              strcat( szhConnStr, szpsw );
    }
       else
    {
               for (i=0;i<strlen(szusr);i++)
           {
                       if (szusr[i] == '/')
                        break;
                      szUser[i] = toupper(szusr[i]);
          }
               szUser[i] = '\0';
       }

       EXEC SQL 
               CONNECT :szhConnStr
     ;

       if( sqlca.sqlcode != 0 )
                return -1;

      EXEC SQL
                Alter Session Set NLS_DATE_FORMAT = 'DD/MM/YYYY'
        ;

       if( sqlca.sqlcode != 0 )
                return -1;

      vfnActivateRole(szUser);

        return 0;
}

/*****************************************************************************/
void vfnActivateRole (char *szUser)
/*----------------------------------------------------------------------------*
Activa el ROLE TCP_IUD.
Recibe el usuario al que se le quiere activar el role.
Si el usario no lo tiene o ya lo tiene activado no hace nada.
Debe llamarse despues de realizar la conexion.
Utiliza la tabla TCP_PPR (Tcp Password Para Role).
No devuelve errores.
*-----------------------------------------------------------------------------*/
{

      EXEC SQL BEGIN DECLARE SECTION;

         char szhCad[20]         ; EXEC SQL VAR szhCad                   IS STRING(20) ;
         char szhStm[512]                ; EXEC SQL VAR szhStm                   IS STRING(255);
         char *szhUser                   ; EXEC SQL VAR szhUser                  IS STRING(31) ;
         char szhRA[512]                 ; EXEC SQL VAR szhRA                    IS STRING(512);
         char szhGrantedRole[31] ; EXEC SQL VAR szhGrantedRole   IS STRING(31);

  EXEC SQL END DECLARE SECTION;

   char szPass[10] = "";
   char szRolesActivos[502];

       szhUser = szUser;

       /* Recuperamos roles activos con un cursor */
   EXEC SQL DECLARE C_RA CURSOR FOR
                SELECT ROLE
               FROM SESSION_ROLES;

   EXEC SQL OPEN C_RA;

     if (sqlca.sqlcode)
      {
               fprintf(stderr,"vfnActivateRole() Code:%s\n", szfnORAerror());
          return;
 }

       strcpy(szRolesActivos,"");

      while (1)
       {
               EXEC SQL FETCH C_RA
                              INTO :szhRA;
           if (sqlca.sqlcode == NOT_FOUND)
                 break;

          if (sqlca.sqlcode <0)
           {
                       fprintf(stderr,"* Error FETCH C_RA %s\n",szfnORAerror());
                       strcpy(szRolesActivos,"");
                      return;
         }

               sprintf(szRolesActivos,"%s %s,",szRolesActivos,szhRA);

  }

       EXEC SQL CLOSE C_RA;

    if (sqlca.sqlcode)
      {
               fprintf(stderr,"vfnActivateRole() Close Code:%s\n", szfnORAerror());
            return;
 }

       /* Ya tenemos los roles activos separados por coma "ROL1,ROL2,ROL3," */
 /* Si ya tiene activo el role TCP_IUD nos vamos sin mas */
      if ((char*) strstr(szRolesActivos,"TCP_IUD") != (char*) NULL)
           return;

 /* Comprobamos si tiene el role para activar */
 strcpy (szhCad,"TCP_IUD");
      EXEC SQL 
       SELECT GRANTED_ROLE 
      INTO :szhGrantedRole
    FROM USER_ROLE_PRIVS
    WHERE GRANTED_ROLE = :szhCad
          AND USERNAME     = :szhUser;

    if (sqlca.sqlcode == NOT_FOUND)
         return; /* No lo tiene y no hay que activarlo */

        if (sqlca.sqlcode)
      {
               fprintf(stderr,"* Error G_RO %s\n",szfnORAerror());
             return;
 }


  /* Recuperamos la password del ROLE TCP_IUD */
  /*
  EXEC SQL 
  SELECT PPR 
  INTO :szhCad
  FROM SYSTEM.TCP_PPR;
	*/

 if (sqlca.sqlcode)
      {
               fprintf(stderr,"vfnActivateRole() Code:%s\n", szfnORAerror());
          return;
 }

       /* Encendido de 6 cilindros 1-5-3-6-2-4 */
      szPass[0] = szhCad[0];
  szPass[1] = szhCad[4];
  szPass[2] = szhCad[2];
  szPass[3] = szhCad[5];
  szPass[4] = szhCad[1];
  szPass[5] = szhCad[3];
  szPass[6] = '6';
        szPass[7] = 'C';
        szPass[8] = '\0';

       sprintf(szhStm,"SET ROLE %s TCP_IUD IDENTIFIED BY %s\n",
                                        szRolesActivos,szPass); 


        EXEC SQL EXECUTE IMMEDIATE :szhStm;

     /* Pasamos del error porque nos da igual */
     return;

} /* Fin vfnActivateRole() */

/******************************************************************************/
int ifnDisConnORA( void )
{
  long SQLCODE = IAPSUCC;

 /* Nos desconectamos de Oracle */
       if( ifnRollBackRelease( ) )
             return -1;

      return 0;
}

/******************************************************************************/
int ifnCommitWork( void )
{
    long SQLCODE = IAPSUCC;

 /* Hacemos un commit Work */
    EXEC SQL 
               COMMIT WORK
     ;

       /* Comprobamos si hay error */
  if( SQLCODE != IAPSUCC )
                return -1;

      return 0;
}

/******************************************************************************/
int ifnRollBackWork( void )
{
  long SQLCODE = IAPSUCC;

 /*Hacemos el Rollbark */
        EXEC SQL 
               ROLLBACK WORK
   ;

       /*Comprobamos si hay error */
   if( SQLCODE != IAPSUCC )
                return -1;

      return 0;
}

/******************************************************************************/
int ifnCommitRelease( void )
{
 long SQLCODE = IAPSUCC;

 /* Hacemos un commit release */
 EXEC SQL 
               COMMIT WORK RELEASE
     ;

       /* Comprobamos si hay error */
  if( SQLCODE != IAPSUCC )
                return -1;

      return 0;
}

/******************************************************************************/
int ifnRollBackRelease( void )
{
       long SQLCODE = IAPSUCC;

 /*Hacemos el Rollbark */
        EXEC SQL 
               ROLLBACK WORK RELEASE
   ;

       /*Comprobamos si hay error */
   if( SQLCODE != IAPSUCC )
                return -1;

      return 0;
}

/******************************************************************************/
int ifnSetTransactionReadOnly( void )
{
        long SQLCODE = IAPSUCC;

 EXEC SQL
                SET TRANSACTION READ ONLY
       ;

       /* Comprobamos si hay error */
  if( SQLCODE != IAPSUCC )
                return -1;

      return 0;
}

/******************************************************************************/
int ifnExecuteImmediate( char *szSQLStm )
{

    EXEC SQL BEGIN DECLARE SECTION;

         char* szhSQLStm ; EXEC SQL VAR szhSQLStm IS STRING(1000);

       EXEC SQL END DECLARE SECTION;

   long SQLCODE = IAPSUCC;

 szhSQLStm = szSQLStm;

   EXEC SQL
                Execute Immediate :szhSQLStm
    ;

       if( SQLCODE != IAPSUCC )
                return -1;

      return 0;
}

/******************************************************************************/
/******************************************************************************/
char *szfnORAerror(void)
{
  static char szMsg[BUFSIZ];
  int iMaxSize;
  int iOutSize;

  /* RAO220502: se producen errores al ejecutar funcion sqlglm 
  iMaxSize = sizeof(szMsg);
  sqlglm(szMsg,&iMaxSize,&iOutSize);
  szMsg[iOutSize] = '\0'           ;
  */
  strcpy (szMsg, sqlca.sqlerrm.sqlerrmc);
  return szMsg;
}

/******************************************************************************/

/* ******************************************************************************** */
/* cfnGetTime : Recupera la fecha en el formato deseado (pudiendo ser fecha y hora) */
/* ******************************************************************************** */
char *CfnGetTime(int fmto)
{
	char modulo[]="cfnGetTime";

	static time_t timer;
	static size_t nbytes;
	static char szTime[26]="";

	memset(szTime,'\0',26);
	timer = time((time_t *)0);

	switch (fmto)
	{
		case 1 :
				nbytes = strftime(szTime, 26, "[%d-%b-%Y] [%H:%M:%S]", (struct tm *)localtime(&timer));	
				break;
		case 2 :
				nbytes = strftime(szTime, 26, "%Y%m%d", (struct tm *)localtime(&timer));	
				break;
		case 3 :
				nbytes = strftime(szTime, 26, "[%H:%M:%S]", (struct tm *)localtime(&timer));	
				break;
		default :
				nbytes = strftime(szTime, 26, "%d/%m/%Y", (struct tm *)localtime(&timer));	
				break;
	}
	
	return szTime;
}



/******************************************************************************************/
/** Información de Versionado *************************************************************/
/******************************************************************************************/
/** Pieza                                               : */
/**  %ARCHIVE% */
/** Identificador en PVCS                               : */
/**  %PID% */
/** Producto                                            : */
/**  %PP% */
/** Revisión                                            : */
/**  %PR% */
/** Autor de la Revisión                                : */
/**  %AUTHOR% */
/** Estado de la Revisión ($TO_BE_DEFINED es Check-Out) : */
/**  %PS% */
/** Fecha de Creación de la Revisión                    : */
/**  %DATE% */
/** Worksets ******************************************************************************/
/** %PIRW% */
/** Historia ******************************************************************************/
/** %PL% */
/******************************************************************************************/

