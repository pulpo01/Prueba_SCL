CREATE OR REPLACE TRIGGER VE_CIUDADES_BEUP_TG
BEFORE UPDATE ON GE_CIUDADES
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
DECLARE

	V_COD_OFICINA_P	   	 GE_CIUDADES.COD_OFICINA_PRINCIPAL%TYPE;
	V_COD_REGION	  	 GE_CIUDADES.COD_REGION%TYPE;
	V_COD_PROVINCIA	  	 GE_CIUDADES.COD_PROVINCIA%TYPE;
	V_COD_CIUDAD	  	 GE_CIUDADES.COD_CIUDAD%TYPE;
	V_COD_REGION_M	  	 VE_MOD_OFICINA_PRINCIPAL_TD.COD_REGION%TYPE;

BEGIN
		V_COD_REGION := :NEW.COD_REGION;
		V_COD_CIUDAD := :NEW.COD_CIUDAD;
		V_COD_PROVINCIA := :NEW.COD_PROVINCIA;
		V_COD_OFICINA_P	:= :NEW.COD_OFICINA_PRINCIPAL;

		IF :OLD.COD_OFICINA_PRINCIPAL <> :NEW.COD_OFICINA_PRINCIPAL THEN

			BEGIN

				SELECT COD_REGION
		 		  INTO V_COD_REGION_M
				  FROM VE_MOD_OFICINA_PRINCIPAL_TD
				 WHERE COD_REGION 	 = V_COD_REGION
				   AND COD_PROVINCIA = V_COD_PROVINCIA
				   AND COD_CIUDAD 	 = V_COD_CIUDAD;

			EXCEPTION
				WHEN OTHERS THEN
					--No existe, Insertar --
					V_COD_REGION_M:=NULL;
			END;

			IF V_COD_REGION_M IS NULL THEN
				INSERT INTO VE_MOD_OFICINA_PRINCIPAL_TD (COD_REGION, COD_CIUDAD, COD_PROVINCIA, COD_OFICINA_PRINCIPAL )
				VALUES ( V_COD_REGION, V_COD_CIUDAD, V_COD_PROVINCIA, V_COD_OFICINA_P );
			ELSE
				UPDATE VE_MOD_OFICINA_PRINCIPAL_TD
				   SET COD_OFICINA_PRINCIPAL = V_COD_OFICINA_P
				 WHERE COD_REGION 	 = V_COD_REGION
				   AND COD_CIUDAD 	 = V_COD_CIUDAD
				   AND COD_PROVINCIA = V_COD_PROVINCIA;
			END IF;

		END IF;

EXCEPTION
		 WHEN OTHERS THEN
		 	  NULL;
END VE_CIUDADES_BEUP_TG;
/
SHOW ERRORS
