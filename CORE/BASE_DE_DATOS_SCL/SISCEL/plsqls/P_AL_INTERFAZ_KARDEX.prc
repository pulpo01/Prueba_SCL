CREATE OR REPLACE PROCEDURE  P_AL_INTERFAZ_KARDEX(
v_tipo_movimiento IN CHAR)
IS
v_glosa VARCHAR2(70);
v_error VARCHAR2(70);
V_PROCED AL_ARTICULOS.REF_FABRICANTE%TYPE ;
ERROR_INTERFAZ_KARDEX  EXCEPTION;

-- CURSOR DE AL_ENT_KARDEX_TO
CURSOR AL_ENT_KARDEX_CURSOR  IS
SELECT     NUM_MOVKARDEX,TIP_MOVIMIENTO,IND_ENTSAL,FEC_MOVIMIENTO,
           FEC_PERIODO,COD_BODEGA,TIP_STOCK,COD_ESTADO,COD_ARTICULO,COD_MOTIVO,
           COD_MONE,IND_PROCE,NUM_MOVIMIENTO,COD_ORIG,CORR_APLI,COD_PROVEEDOR,
           COD_USO,PRC_UNITARIO,CANT_ENTRADA,CANT_SALIDA,CANT_SALDO,PRC_PMP,
           MTO_SUBSIDIO,MTO_COSTOVENTA,NUM_SERIE,COD_USUA,FEC_TRASPASO,
           FEC_IMPUTENTSAL,FEC_IMPUTCOSTOVENTA,FEC_IMPUTSUBSIDIO
FROM  AL_ENT_KARDEX_TO;

TYPE MY_CURS_TYPE IS REF CURSOR;
AL_ENT_KARDEX_CUR MY_CURS_TYPE;
V_TOT_ERROR NUMBER;
V_CTR_COMMIT     NUMBER;

BEGIN
V_PROCED:='P_AL_INTERFAZ_KARDEX';
V_CTR_COMMIT:=0;
IF  v_tipo_movimiento = 01 THEN
v_glosa :='entro entrada';
	   		Al_Pac_Kardex.P_INGRESO_ENTRADA(v_error);
			   --v_glosa :='paso p_entrada' || ' --' || v_error;
			IF v_error = 1 THEN
	 		     v_glosa := 'Error Ingreso Entrada';
			      ROLLBACK;
			      INSERT INTO AL_KARDEX_ERROR_TO(NUM_SEQ_ERROR,COD_RETORNO, DES_CADENA)
			      VALUES(AL_KARDEX_ERROR_SQ.NEXTVAL, '1', v_glosa);
			      COMMIT;
			      RAISE ERROR_INTERFAZ_KARDEX;
                        ELSE
				COMMIT;
			END IF;
END IF;
IF  v_tipo_movimiento = 02 THEN
	        Al_Pac_Kardex.P_INGRESO_SALIDA(v_error);
			IF v_error = 1 THEN
				v_glosa := 'Error Ingreso Salida';
			        ROLLBACK;
			        INSERT INTO AL_KARDEX_ERROR_TO(NUM_SEQ_ERROR,COD_RETORNO, DES_CADENA)
			        VALUES(AL_KARDEX_ERROR_SQ.NEXTVAL, '1', v_glosa);
			        COMMIT;
				RAISE ERROR_INTERFAZ_KARDEX;
                        ELSE
				COMMIT;
			END IF;
END IF;
IF  v_tipo_movimiento = 03 THEN
v_glosa :='entro entrada';
	   		Al_Pac_Kardex.P_INGRESO_VENTA(v_error);
			   --v_glosa :='paso p_entrada' || ' --' || v_error;
			IF v_error = 1 THEN
	 		     v_glosa := 'Error Ingreso VENTA';
			      ROLLBACK;
			      INSERT INTO AL_KARDEX_ERROR_TO(NUM_SEQ_ERROR,COD_RETORNO, DES_CADENA)
			      VALUES(AL_KARDEX_ERROR_SQ.NEXTVAL, '1', v_glosa);
			      COMMIT;
			      RAISE ERROR_INTERFAZ_KARDEX;
                        ELSE
				COMMIT;
			END IF;
END IF;
IF  v_tipo_movimiento = 04 THEN
	        Al_Pac_Kardex.P_INGRESO_RECAMBIO(v_error);
			IF v_error = 1 THEN
				v_glosa := 'Error Ingreso RECAMBIO';
			        ROLLBACK;
			        INSERT INTO AL_KARDEX_ERROR_TO(NUM_SEQ_ERROR,COD_RETORNO, DES_CADENA)
			        VALUES(AL_KARDEX_ERROR_SQ.NEXTVAL, '1', v_glosa);
			        COMMIT;
				RAISE ERROR_INTERFAZ_KARDEX;
                        ELSE
				COMMIT;
			END IF;
END IF;
IF  v_tipo_movimiento = 05 THEN
v_glosa :='entro entrada';
	   		Al_Pac_Kardex.P_INGRESO_COSTO_VENTA(v_error);
			   --v_glosa :='paso p_entrada' || ' --' || v_error;
			IF v_error = 1 THEN
	 		     v_glosa := 'Error Ingreso COSTO VENTA';
			      ROLLBACK;
			      INSERT INTO AL_KARDEX_ERROR_TO(NUM_SEQ_ERROR,COD_RETORNO, DES_CADENA)
			      VALUES(AL_KARDEX_ERROR_SQ.NEXTVAL, '1', v_glosa);
			      COMMIT;
			      RAISE ERROR_INTERFAZ_KARDEX;
                        ELSE
				COMMIT;
			END IF;
END IF;
IF  v_tipo_movimiento = 06 THEN
	        Al_Pac_Kardex.P_INGRESO_SUBSIDIO(v_error);
			IF v_error = 1 THEN
				v_glosa := 'Error Ingreso SUBSIDIO';
			        ROLLBACK;
			        INSERT INTO AL_KARDEX_ERROR_TO(NUM_SEQ_ERROR,COD_RETORNO, DES_CADENA)
			        VALUES(AL_KARDEX_ERROR_SQ.NEXTVAL, '1', v_glosa);
			        COMMIT;
				RAISE ERROR_INTERFAZ_KARDEX;
            		ELSE
				COMMIT;
			END IF;
END IF;

IF  (v_tipo_movimiento = 07) THEN


	begin
	SELECT COUNT(1) INTO V_TOT_ERROR
	FROM AL_KARDEX_ERROR_TO;
	EXCEPTION  WHEN OTHERS THEN
		V_TOT_ERROR := -1;
	end;

	if (V_TOT_ERROR = 0) then

		FOR AL_ENT_KARDEX_CUR in AL_ENT_KARDEX_CURSOR LOOP

			INSERT INTO AL_KARDEX(NUM_MOVKARDEX,TIP_MOVIMIENTO,IND_ENTSAL,FEC_MOVIMIENTO,
			            FEC_PERIODO,COD_BODEGA,TIP_STOCK,COD_ESTADO,COD_ARTICULO,COD_MOTIVO,
			            COD_MONE,IND_PROCE,NUM_MOVIMIENTO,COD_ORIG,CORR_APLI,COD_PROVEEDOR,
			            COD_USO,PRC_UNITARIO,CANT_ENTRADA,CANT_SALIDA,CANT_SALDO,PRC_PMP,
			            MTO_SUBSIDIO,MTO_COSTOVENTA,NUM_SERIE,COD_USUA,FEC_TRASPASO,
			            FEC_IMPUTENTSAL,FEC_IMPUTCOSTOVENTA,FEC_IMPUTSUBSIDIO)
				VALUES(     AL_ENT_KARDEX_CUR.NUM_MOVKARDEX,AL_ENT_KARDEX_CUR.TIP_MOVIMIENTO,AL_ENT_KARDEX_CUR.IND_ENTSAL,AL_ENT_KARDEX_CUR.FEC_MOVIMIENTO,
				           AL_ENT_KARDEX_CUR.FEC_PERIODO,AL_ENT_KARDEX_CUR.COD_BODEGA,AL_ENT_KARDEX_CUR.TIP_STOCK,AL_ENT_KARDEX_CUR.COD_ESTADO,AL_ENT_KARDEX_CUR.COD_ARTICULO,AL_ENT_KARDEX_CUR.COD_MOTIVO,
				           AL_ENT_KARDEX_CUR.COD_MONE,AL_ENT_KARDEX_CUR.IND_PROCE,AL_ENT_KARDEX_CUR.NUM_MOVIMIENTO,AL_ENT_KARDEX_CUR.COD_ORIG,AL_ENT_KARDEX_CUR.CORR_APLI,AL_ENT_KARDEX_CUR.COD_PROVEEDOR,
				           AL_ENT_KARDEX_CUR.COD_USO,AL_ENT_KARDEX_CUR.PRC_UNITARIO,AL_ENT_KARDEX_CUR.CANT_ENTRADA,AL_ENT_KARDEX_CUR.CANT_SALIDA,AL_ENT_KARDEX_CUR.CANT_SALDO,AL_ENT_KARDEX_CUR.PRC_PMP,
				           AL_ENT_KARDEX_CUR.MTO_SUBSIDIO,AL_ENT_KARDEX_CUR.MTO_COSTOVENTA,AL_ENT_KARDEX_CUR.NUM_SERIE,AL_ENT_KARDEX_CUR.COD_USUA,AL_ENT_KARDEX_CUR.FEC_TRASPASO,
				           AL_ENT_KARDEX_CUR.FEC_IMPUTENTSAL,AL_ENT_KARDEX_CUR.FEC_IMPUTCOSTOVENTA,AL_ENT_KARDEX_CUR.FEC_IMPUTSUBSIDIO);

			-- ELIMINACION DE REGISTRO DE LA TABLA AL_ENT_KARDEX_TO

			DELETE FROM AL_ENT_KARDEX_TO
			WHERE NUM_MOVKARDEX = AL_ENT_KARDEX_CUR.NUM_MOVKARDEX;

			IF (V_CTR_COMMIT >= 10000) THEN
	                	COMMIT;
	                	V_CTR_COMMIT := 0;
	                ELSE
	                	V_CTR_COMMIT := V_CTR_COMMIT +1;
	                END IF;

		  END LOOP;

		COMMIT;

	end if;

	if (V_TOT_ERROR > 0) then

		DELETE FROM AL_KARDEX_ERROR_TO;
		COMMIT;

	end if;

END IF;





EXCEPTION
	WHEN  ERROR_INTERFAZ_KARDEX  THEN
		RAISE_APPLICATION_ERROR (-20205,v_proced||' '||SQLERRM || ' ' || SQLCODE || v_glosa);

	WHEN OTHERS THEN
   		RAISE_APPLICATION_ERROR (-20204,v_proced||' '||SQLERRM || ' ' || SQLCODE);
END P_AL_INTERFAZ_KARDEX;
/
SHOW ERRORS
