CREATE OR REPLACE PACKAGE BODY PV_CAMBIODIRECCION_PG AS

PROCEDURE PV_CAMBDIRECCLI_PR(EN_CODIGOCLIENTE  IN  GE_CLIENTES.COD_CLIENTE%TYPE,
 	   	  		  			 EN_CODTIPDIREC	   IN  GE_TIPDIRECCION.COD_TIPDIRECCION%TYPE,
							 EV_NOMCALLE       IN  GE_DIRECCIONES.NOM_CALLE%TYPE,
						     EV_NUMCALLE       IN  GE_DIRECCIONES.NUM_CALLE%TYPE,
						     EV_NUMPISO        IN  GE_DIRECCIONES.NUM_PISO%TYPE,
						     EN_CODREGION      IN  GE_DIRECCIONES.COD_REGION%TYPE,
						     EN_CODPROVINCIA   IN  GE_DIRECCIONES.COD_PROVINCIA%TYPE,
						     EN_CODCIUDAD      IN  GE_DIRECCIONES.COD_CIUDAD%TYPE,
						     EN_CODCOMUNA      IN  GE_DIRECCIONES.COD_COMUNA%TYPE,
						     EV_CODPOSTAL      IN  GE_DIRECCIONES.ZIP%TYPE,
						     EV_OBSERVACION    IN  GE_DIRECCIONES.OBS_DIRECCION%TYPE,
						     EV_DESDIR1		   IN  GE_DIRECCIONES.DES_DIREC1%TYPE,
						     EV_DESDIR2		   IN  GE_DIRECCIONES.DES_DIREC2%TYPE,
							 SN_NUMOOSS        OUT CI_ORSERV.NUM_OS%TYPE,
							 SN_CODERROR       OUT NUMBER,
							 SV_DESERROR       OUT VARCHAR2
	   	  		  			)
							IS

/*
<NOMBRE>  		  		  :PV_CAMBDIRECCLI_PR</NOMBRE>
<FECHACREA>				  :19/08/2004</FECHACREA>
<MODULO>				  :POSTVENTA</MODULO>
<AUTOR>					  :ROBERTO PÉREZ VARAS</AUTOR>
<VERSION>				  :1.0</VERSION>
<DESCRIPCION>			  :REALIZA LAS LLAMADAS A LOS PLS QUE REALIZAN EL POCESO DE CAMBIO DE DIRECCION</DESCRIPCION>
<FECHAMOD>				  :</FECHAMOD>
<PARAMENTR>				  :CODIGO CLIENTE, CODIGO TIPO DIRECCION, NOMBRE CALLE, NUMERO CALLE, NUMERO PISO,
                           CODIGO REGION. CODIGO PROVINCIA, CODIGO CIUDAD, CODIGO COMUNA, CODIGO POSTAL,
						   OBSERVACION DIRECCION, DESCRIPCION DIRECCION1, DESCRIPCION DIRECCION2
						   </PARAMENTR>
<PARAMSAL>				  :NUMERO DE OOSS, CODIGO ERROR, DESCRIPCION ERROR</PARAMSAL>
*/

VN_CODDIRECC        GE_DIRECCIONES.COD_DIRECCION%TYPE;
VV_PARAMETRO        GED_PARAMETROS.VAL_PARAMETRO%TYPE;
VN_NUMOOSS          CI_ORSERV.NUM_OS%TYPE;
FIN		      		EXCEPTION;
SV_val_parametro    GED_PARAMETROS.VAL_PARAMETRO%TYPE; --02/05/2005 ECU05002...
SN_num_evento		ge_errores_pg.Evento;			   --02/05/2005 ECU05002...

BEGIN

                          PV_VALIDADIRECC_PR(EN_CODIGOCLIENTE,
											 EV_NOMCALLE,
											 EV_NUMCALLE,
											 EV_NUMPISO,
											 EN_CODREGION,
						                     EN_CODPROVINCIA,
						                     EN_CODCIUDAD,
						                     EN_CODCOMUNA,
						                     EV_CODPOSTAL,
						                     EV_OBSERVACION,
						                     EV_DESDIR1,
						                     EV_DESDIR2,
											 SN_CODERROR,
											 SV_DESERROR
											);

  IF SN_CODERROR IS NOT NULL AND SN_CODERROR<>1 THEN
     RAISE FIN;
  END IF;

                        PV_REGISTRADIREC_PR(EV_NOMCALLE,
											EV_NUMCALLE,
											EV_NUMPISO,
											EN_CODREGION,
						                    EN_CODPROVINCIA,
						                    EN_CODCIUDAD,
						                    EN_CODCOMUNA,
						                    EV_CODPOSTAL,
						                    EV_OBSERVACION,
						                    EV_DESDIR1,
						                    EV_DESDIR2,
											VN_CODDIRECC,
											SN_CODERROR,
											SV_DESERROR
											);

  IF SN_CODERROR IS NOT NULL AND SN_CODERROR<>1 THEN
     RAISE FIN;
  END IF;

  VV_PARAMETRO:=EN_CODTIPDIREC;
  IF EN_CODTIPDIREC IS NULL OR LTRIM(RTRIM(EN_CODTIPDIREC))='' THEN
     BEGIN
        SELECT VAL_PARAMETRO
	    INTO   VV_PARAMETRO
	    FROM   GED_PARAMETROS
	    WHERE  COD_PRODUCTO=1
	 		   AND COD_MODULO='GA'
			   AND NOM_PARAMETRO='TIP_DIREC_CAMB';



		EXCEPTION
		   WHEN NO_DATA_FOUND THEN
		      SN_CODERROR:=4;
			  SV_DESERROR:='no se encuentra parametro tip_direc_camb';
			  RAISE FIN;
	 END;
  END IF;

                        PV_REGDIRECCLI_PR(VN_CODDIRECC,
                                          VV_PARAMETRO,
										  EN_CODIGOCLIENTE,
										  SN_CODERROR,
										  SV_DESERROR
										 );

  IF SN_CODERROR IS NOT NULL AND SN_CODERROR<>1 THEN
     RAISE FIN;
  END IF;

                        PV_REGISTRAOOSS_PR(EN_CODIGOCLIENTE,
  										   VN_NUMOOSS,
  										   SN_CODERROR,
										   SV_DESERROR
										  );

  IF SN_CODERROR IS NOT NULL AND SN_CODERROR<>1 THEN
     RAISE FIN;
  END IF;

  SN_NUMOOSS:=VN_NUMOOSS;


  --Inicio JVG 02-05-2005...ECU05002....
  -- Obtener datos desde GED_parametros para parametro EJECUTA_COMMIT y verificar si debe o no ejecutar el commit..
   SV_val_parametro:=NULL;
   IF not ge_validaciones_pg.ge_obtiene_gedparametros_fn(CV_ejecuta_commit,CV_cod_modulo,
	 	   				  CV_cod_producto_post,SV_val_parametro,
		                  SN_CODERROR,SV_DESERROR,SN_num_evento) THEN
		 RAISE  FIN;
   END IF;

   IF SN_CODERROR<>0 THEN
   	  RAISE FIN;
   ELSE
     IF SV_val_parametro=CV_si_ejecuta_commit THEN
	    SN_CODERROR:=1;
        COMMIT;  --esto era lo que existía sin buscar en la ged_parametros ECU05002...
     END IF;
   END IF;
  --Fin JVG 02-05-2005...ECU05002....


  EXCEPTION
      WHEN FIN THEN
	    ROLLBACK;

END PV_CAMBDIRECCLI_PR;


PROCEDURE PV_VALIDADIRECC_PR(EN_CODCLIENTE    IN GE_CLIENTES.COD_CLIENTE%TYPE,
	   	  		  			 EV_NOMCALLE	  IN GE_DIRECCIONES.NOM_CALLE%TYPE,
							 EV_NUMCALLE      IN GE_DIRECCIONES.NUM_CALLE%TYPE,
							 EV_NUMPISO       IN GE_DIRECCIONES.NUM_PISO%TYPE,
							 EV_CODREGION     IN GE_DIRECCIONES.COD_REGION%TYPE,
							 EV_CODPROVINCIA  IN GE_DIRECCIONES.COD_PROVINCIA%TYPE,
							 EV_CODCIUDAD     IN GE_DIRECCIONES.COD_CIUDAD%TYPE,
							 EV_CODCOMUNA	  IN GE_DIRECCIONES.COD_COMUNA%TYPE,
							 EV_CODPOSTAL	  IN GE_DIRECCIONES.ZIP%TYPE,
							 EV_OBSERVACION   IN GE_DIRECCIONES.OBS_DIRECCION%TYPE,
							 SV_DESDIR1		  IN GE_DIRECCIONES.DES_DIREC1%TYPE,
							 SV_DESDIR2		  IN GE_DIRECCIONES.DES_DIREC2%TYPE,
							 SN_CODERROR	  OUT NUMBER,
							 SV_DESERROR	  OUT VARCHAR2
							) IS
/*
<NOMBRE>  		  		  :PV_CAMBIODIRECCION_PG</NOMBRE>
<FECHACREA>				  :19/08/2004</FECHACREA>
<MODULO>				  :POSTVENTA</MODULO>
<AUTOR>					  :ROBERTO PÉREZ VARAS</AUTOR>
<VERSION>				  :1.0</VERSION>
<DESCRIPCION>			  :VALIDA QUE LOS COMPONENTES DE UNA DIRECCION SEAN VALIDOS</DESCRIPCION>
<FECHAMOD>				  :</FECHAMOD>
<PARAMENTR>				  :CODIGO CLIENTE, NOMBRE CALLE, NUMERO CALLE, NUMERO PISO, CODIGO REGION.
						   CODIGO PROVINCIA, CODIGO CIUDAD, CODIGO COMUNA, CODIGO POSTAL, OBSERVACION DIRECCION
						   DESCRIPCION DIRECCION1, DESCRIPCION DIRECCION2
						   </PARAMENTR>
<PARAMSAL>				  :CODIGO ERROR, DESCRIPCION ERROR</PARAMSAL>
*/

VN_EXISTE      NUMBER(2);
V_CODOPERADORA GE_OPERADORA_SCL_LOCAL.COD_OPERADORA_SCL%TYPE;
VN_CODPARAMDIR GE_PARAMDIR.COD_PARAMDIR%TYPE;
VV_NOMCOLUMNA  GE_PARAMDIR.NOM_COLUMN%TYPE;
VN_INDOBLIG	   GE_PARAMDIROPERAD.IND_OBLIGATORIO%TYPE;
VV_OBLIG	   VARCHAR2(128);
VV_RELPOS      VARCHAR2(128);
FIN            EXCEPTION;

CURSOR C IS
SELECT B.COD_PARAMDIR, A.NOM_COLUMN, B.IND_OBLIGATORIO
FROM   GE_PARAMDIR A, GE_PARAMDIROPERAD B
WHERE  B.COD_OPERAD = V_CODOPERADORA
       AND B.COD_PARAMDIR = A.COD_PARAMDIR;

BEGIN

  BEGIN
     SELECT 1
     INTO   VN_EXISTE
     FROM   GE_CLIENTES
     WHERE  COD_CLIENTE=EN_CODCLIENTE;

     EXCEPTION
        WHEN NO_DATA_FOUND THEN
	       SN_CODERROR:=4;
		   SV_DESERROR:='cliente no existe';
		   RAISE FIN;
  END;

  BEGIN
     SELECT 1
     INTO   VN_EXISTE
     FROM   GE_REGIONES
     WHERE  COD_REGION=EV_CODREGION;

     EXCEPTION
        WHEN NO_DATA_FOUND THEN
	       SN_CODERROR:=4;
		   SV_DESERROR:='region no existe';
		   RAISE FIN;
  END;

  BEGIN
     SELECT 1
     INTO   VN_EXISTE
     FROM   GE_PROVINCIAS
     WHERE  COD_PROVINCIA=EV_CODPROVINCIA;

     EXCEPTION
        WHEN NO_DATA_FOUND THEN
	       SN_CODERROR:=4;
		   SV_DESERROR:='provincia no existe';
		   RAISE FIN;

		WHEN TOO_MANY_ROWS THEN
		    NULL;
  END;

  BEGIN
     SELECT 1
     INTO   VN_EXISTE
     FROM   GE_CIUDADES
     WHERE  COD_CIUDAD=EV_CODCIUDAD;

     EXCEPTION
        WHEN NO_DATA_FOUND THEN
	       SN_CODERROR:=4;
		   SV_DESERROR:='ciudad no existe';
		   RAISE FIN;

		WHEN TOO_MANY_ROWS THEN
		    NULL;
  END;

  BEGIN
     SELECT 1
     INTO   VN_EXISTE
     FROM   GE_COMUNAS
     WHERE  COD_COMUNA=EV_CODCOMUNA;

     EXCEPTION
        WHEN NO_DATA_FOUND THEN
	       SN_CODERROR:=4;
		   SV_DESERROR:='comuna no existe';
		   RAISE FIN;

		WHEN TOO_MANY_ROWS THEN
		    NULL;
  END;

  BEGIN
      SELECT COD_OPERADORA_SCL
	         INTO   V_CODOPERADORA
	         FROM   GE_OPERADORA_SCL_LOCAL;

      OPEN C;
	  VV_RELPOS:=NULL;
	  VV_OBLIG:=NULL;
	  LOOP
	     FETCH C INTO VN_CODPARAMDIR, VV_NOMCOLUMNA,VN_INDOBLIG;
		 EXIT WHEN C%NOTFOUND;
         VV_RELPOS:=VV_RELPOS || VN_CODPARAMDIR || '^';
		 VV_OBLIG:=VV_OBLIG || VN_INDOBLIG || '^';
	  END LOOP;
	  CLOSE C;


	  VN_CODPARAMDIR:=NULL;
	  VN_INDOBLIG:=NULL;
	  LOOP
	    IF VV_RELPOS IS NULL OR VV_OBLIG IS NULL THEN
		   EXIT;
		END IF;
		VN_CODPARAMDIR:=SUBSTR(VV_RELPOS,1,INSTR(VV_RELPOS,'^')-1);
		VV_RELPOS:=SUBSTR(VV_RELPOS,INSTR(VV_RELPOS,'^')+1,LENGTH(VV_RELPOS));
        VN_INDOBLIG:=SUBSTR(VV_OBLIG,1,INSTR(VV_OBLIG,'^')-1);
		VV_OBLIG:=SUBSTR(VV_OBLIG,INSTR(VV_OBLIG,'^')+1,LENGTH(VV_OBLIG));
		IF VN_CODPARAMDIR=4 AND VN_INDOBLIG=1 AND EV_NOMCALLE IS NULL THEN
            SN_CODERROR:=4;
		    SV_DESERROR:='parametro nom_calle obligatorio en null';
		    RAISE FIN;
		ELSIF VN_CODPARAMDIR=5 AND VN_INDOBLIG=1 AND EV_NUMCALLE IS NULL THEN
		    SN_CODERROR:=4;
		    SV_DESERROR:='parametro num_calle obligatorio en null';
		    RAISE FIN;
		ELSIF VN_CODPARAMDIR=6 AND VN_INDOBLIG=1 AND EV_NUMPISO IS NULL THEN
		    SN_CODERROR:=4;
		    SV_DESERROR:='parametro num_piso obligatorio en null';
		    RAISE FIN;
		ELSIF VN_CODPARAMDIR=8 AND VN_INDOBLIG=1 AND EV_OBSERVACION IS NULL THEN
		    SN_CODERROR:=4;
		    SV_DESERROR:='parametro observacion direccion obligatorio en null';
		    RAISE FIN;
		ELSIF VN_CODPARAMDIR=9 AND VN_INDOBLIG=1 AND SV_DESDIR1 IS NULL THEN
		    SN_CODERROR:=4;
		    SV_DESERROR:='parametro descripcion direccion 1 obligatorio en null';
		    RAISE FIN;
	 	ELSIF VN_CODPARAMDIR=10 AND VN_INDOBLIG=1 AND SV_DESDIR2 IS NULL THEN
		    SN_CODERROR:=4;
		    SV_DESERROR:='parametro descripcion direccion 2 obligatorio en null';
		    RAISE FIN;
		ELSIF VN_CODPARAMDIR=13 AND VN_INDOBLIG=1 AND EV_CODPOSTAL IS NULL THEN
		    SN_CODERROR:=4;
		    SV_DESERROR:='parametro codigo postal obligatorio en null';
		    RAISE FIN;
		END IF;
	  END LOOP;

	  IF SN_CODERROR IS NULL THEN
	     SN_CODERROR:=1;
		 SV_DESERROR:='OK';
	  END IF;

	  EXCEPTION
        WHEN NO_DATA_FOUND THEN
	       SN_CODERROR:=4;
		   SV_DESERROR:='OK';
		   RAISE FIN;
  END;

  EXCEPTION
     WHEN FIN THEN
	     NULL;

END PV_VALIDADIRECC_PR;

PROCEDURE PV_REGISTRADIREC_PR(EV_NOMCALLE     IN  GE_DIRECCIONES.NOM_CALLE%TYPE,
	   	  		  			  EV_NUMCALLE     IN  GE_DIRECCIONES.NUM_CALLE%TYPE,
							  EV_NUMPISO      IN  GE_DIRECCIONES.NUM_PISO%TYPE,
							  EN_CODREGION    IN  GE_DIRECCIONES.COD_REGION%TYPE,
							  EN_CODPROVINCIA IN  GE_DIRECCIONES.COD_PROVINCIA%TYPE,
							  EN_CODCIUDAD    IN  GE_DIRECCIONES.COD_CIUDAD%TYPE,
							  EN_CODCOMUNA    IN  GE_DIRECCIONES.COD_COMUNA%TYPE,
							  EV_CODPOSTAL    IN  GE_DIRECCIONES.ZIP%TYPE,
							  EV_OBSERVDIR    IN  GE_DIRECCIONES.OBS_DIRECCION%TYPE,
							  EV_DESDIR1	  IN  GE_DIRECCIONES.DES_DIREC1%TYPE,
							  EV_DESDIR2	  IN  GE_DIRECCIONES.DES_DIREC2%TYPE,
							  SN_CODDIREC     OUT GE_DIRECCIONES.COD_DIRECCION%TYPE,
							  SN_CODERROR	  OUT NUMBER,
							  SV_DESERROR     OUT VARCHAR2
							 ) IS
/*
<NOMBRE>  		  		  :PV_REGISTRADIREC_PR</NOMBRE>
<FECHACREA>				  :19/08/2004</FECHACREA>
<MODULO>				  :POSTVENTA</MODULO>
<AUTOR>					  :ROBERTO PÉREZ VARAS</AUTOR>
<VERSION>				  :1.0</VERSION>
<DESCRIPCION>			  :REGISTRA UNA NUEVA DIRECCION</DESCRIPCION>
<FECHAMOD>				  :</FECHAMOD>
<PARAMENTR>				  :NOMBRE CALLE, NUMERO CALLE, NUMERO PISO, CODIGO REGION.
						   CODIGO PROVINCIA, CODIGO CIUDAD, CODIGO COMUNA, CODIGO POSTAL,
						   OBSERVACION DIRECCION, DESCRIPCION DIRECCION1, DESCRIPCION DIRECCION2
						   </PARAMENTR>
<PARAMSAL>				  :CODIGO DIRECCION, CODIGO ERROR, DESCRIPCION ERROR</PARAMSAL>
*/
VN_SEQDIRECCION  NUMBER(15);

BEGIN

   SELECT GE_SEQ_DIRECCIONES.NEXTVAL
   INTO   VN_SEQDIRECCION
   FROM   DUAL;

   INSERT INTO GE_DIRECCIONES
   (COD_DIRECCION, NOM_CALLE, NUM_CALLE, NUM_PISO, COD_REGION, COD_PROVINCIA, COD_CIUDAD,
    COD_COMUNA, ZIP, OBS_DIRECCION, DES_DIREC1, DES_DIREC2
   )
   VALUES (VN_SEQDIRECCION, EV_NOMCALLE, EV_NUMCALLE, EV_NUMPISO, EN_CODREGION, EN_CODPROVINCIA,
           EN_CODCIUDAD, EN_CODCOMUNA, EV_CODPOSTAL, EV_OBSERVDIR, EV_DESDIR1, EV_DESDIR2
		  );


   SN_CODDIREC:=VN_SEQDIRECCION;
   SN_CODERROR:=1;
   SV_DESERROR:='OK';

   EXCEPTION
      WHEN OTHERS THEN
	      SN_CODERROR:=4;
		  SV_DESERROR:=SQLERRM;
		  ROLLBACK;
END PV_REGISTRADIREC_PR;

PROCEDURE PV_REGDIRECCLI_PR(EN_CODDIRECCION IN  GE_DIRECCIONES.COD_DIRECCION%TYPE,
	   	  		  			EV_CODTIPDIREC  IN  GE_TIPDIRECCION.COD_TIPDIRECCION%TYPE,
							EN_CODCLIENTE	IN  GE_CLIENTES.COD_CLIENTE%TYPE,
							SN_CODERROR     OUT NUMBER,
							SV_DESERROR     OUT VARCHAR2
						   ) IS
/*
<NOMBRE>  		  		  :PV_REGDIRECCLI_PR</NOMBRE>
<FECHACREA>				  :19/08/2004</FECHACREA>
<MODULO>				  :POSTVENTA</MODULO>
<AUTOR>					  :ROBERTO PÉREZ VARAS</AUTOR>
<VERSION>				  :1.0</VERSION>
<DESCRIPCION>			  :REALIZA EL PROCESO PARA CAMBIAR UNA DIRECCION DEL CLIENTE</DESCRIPCION>
<FECHAMOD>				  :</FECHAMOD>
<PARAMENTR>				  :CODIGO DIRECCION, CODIGO TIPO DIRECCION, CODIGO CLIENTE</PARAMENTR>
<PARAMSAL>				  :CODIGO ERROR, DESCRIPCION ERROR</PARAMSAL>
*/

VN_CODDIRECCION  GE_DIRECCIONES.COD_DIRECCION%TYPE;
FIN				 EXCEPTION;

BEGIN

   IF EN_CODDIRECCION IS NULL OR EV_CODTIPDIREC IS NULL OR EN_CODCLIENTE IS NULL THEN
      SN_CODERROR:=4;
	  SV_DESERROR:='uno o mas parametros de entrada estan vacios';
	  RAISE FIN;
   END IF;

   SELECT COD_DIRECCION
   INTO	  VN_CODDIRECCION
   FROM   GA_DIRECCLI
   WHERE  COD_CLIENTE=EN_CODCLIENTE
   		  AND COD_TIPDIRECCION=EV_CODTIPDIREC;

   INSERT INTO GA_MODDIRCLI VALUES(EN_CODCLIENTE, SYSDATE, EV_CODTIPDIREC, VN_CODDIRECCION, EN_CODDIRECCION, USER);

   UPDATE GA_DIRECCLI SET COD_DIRECCION=EN_CODDIRECCION
   WHERE  COD_CLIENTE=EN_CODCLIENTE AND COD_TIPDIRECCION=EV_CODTIPDIREC;

   INSERT INTO GA_MODCLI
          (COD_CLIENTE, COD_TIPMODI, FEC_MODIFICA, NOM_USUARORA)
   VALUES (EN_CODCLIENTE, 'CD', SYSDATE, USER);

   SN_CODERROR:=1;
   SV_DESERROR:='OK';
   EXCEPTION
      WHEN FIN THEN
		  ROLLBACK;
      WHEN OTHERS THEN
	      SN_CODERROR:=4;
		  SV_DESERROR:='no se puede realizar el cambio de direccion ' || SQLERRM;
		  ROLLBACK;


END PV_REGDIRECCLI_PR;

PROCEDURE PV_REGISTRAOOSS_PR(EN_CODCLIENTE   IN  GE_CLIENTES.COD_CLIENTE%TYPE,
	   	  		  			 SN_NUMOOSS      OUT CI_ORSERV.NUM_OS%TYPE,
							 SN_CODERROR     OUT NUMBER,
							 SV_DESERROR     OUT VARCHAR2
							) IS
/*
<NOMBRE>  		  		  :PV_REGISTRAOOSS_PR</NOMBRE>
<FECHACREA>				  :19/08/2004</FECHACREA>
<MODULO>				  :POSTVENTA</MODULO>
<AUTOR>					  :ROBERTO PÉREZ VARAS</AUTOR>
<VERSION>				  :1.0</VERSION>
<DESCRIPCION>			  :GENERA UNA OOSS PARA CAMBIO DE DIRECCION</DESCRIPCION>
<FECHAMOD>				  :</FECHAMOD>
<PARAMENTR>				  :CODIGO CLIENTE</PARAMENTR>
<PARAMSAL>				  :NUMERO OOSS, CODIGO ERROR, DESCRIPCION ERROR</PARAMSAL>
*/
VN_SEQNUMOOSS NUMBER(15);
FIN 		  EXCEPTION;
VN_CODCLIENTE GE_CLIENTES.COD_CLIENTE%TYPE;

BEGIN

   IF EN_CODCLIENTE IS NULL THEN
      SN_CODERROR:=4;
      SV_DESERROR:='parametro codigo cliente vacio';
	  RAISE FIN;
   END IF;


   BEGIN
      SELECT COD_CLIENTE
	  INTO   VN_CODCLIENTE
	  FROM   GE_CLIENTES
	  WHERE  COD_CLIENTE=EN_CODCLIENTE;

	  EXCEPTION
	     WHEN NO_DATA_FOUND THEN
		   SN_CODERROR:=4;
           SV_DESERROR:='cliente no existe';
	       RAISE FIN;
   END;


   SELECT CI_SEQ_NUMOS.NEXTVAL
   INTO   VN_SEQNUMOOSS
   FROM DUAL;

   INSERT INTO CI_ORSERV
          (NUM_OS, COD_OS, PRODUCTO, TIP_INTER, COD_INTER, USUARIO, FECHA, COMENTARIO)
   VALUES (VN_SEQNUMOOSS, '10010', 1, 8, EN_CODCLIENTE, USER, SYSDATE, 'CAMBIO DE DIRECCIÓN CLIENTE');

   SN_NUMOOSS:=VN_SEQNUMOOSS;
   SN_CODERROR:=1;
   SV_DESERROR:='OK';

   EXCEPTION
      WHEN FIN THEN
	     ROLLBACK;
	  WHEN OTHERS THEN
	     SN_CODERROR:=4;
         SV_DESERROR:='no se puede registrar la ooss ' || SQLERRM;
		 ROLLBACK;

END PV_REGISTRAOOSS_PR;

FUNCTION retorna_version
RETURN VARCHAR2
is
   v_salida_version VARCHAR2(200);
BEGIN

   v_salida_version:='VERSION = '||substr(CV_version,1,instr(CV_version,'.')-1)||'; '||' SUBVERSION = '||substr(CV_version,instr(CV_version,'.')+1,length(CV_version));

RETURN v_salida_version;

exception

when others then
raise_application_error (-20120,' Error en la version');

END;

END PV_CAMBIODIRECCION_PG;
/
SHOW ERRORS
