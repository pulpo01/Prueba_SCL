CREATE OR REPLACE PROCEDURE        P_CLIENTE_CICLONUEBEEP
 (
VP_ABONADO IN  GA_ABOBEEP.NUM_ABONADO%TYPE,
VP_CLIENTE IN  GA_ABOBEEP.COD_CLIENTE%TYPE,
VP_PRODUCTO IN GA_ABOBEEP.COD_PRODUCTO%TYPE,
V_FECSYS IN  DATE,
VP_PROC OUT VARCHAR2,
VP_TABLA OUT VARCHAR2,
VP_ACT OUT VARCHAR2,
VP_SQLCODE OUT VARCHAR2,
VP_SQLERRM OUT VARCHAR2,
V_ERROR OUT VARCHAR2 ) IS
V_CLIENTE GA_ABOCEL.COD_CLIENTE%TYPE;
V_CLIENEW GA_ABOCEL.COD_CLIENTE%TYPE;
V_LIMCONSUMO GA_ABOCEL.COD_LIMCONSUMO%TYPE;
V_IMPLICONS TA_LIMCONSUMO.IMP_LIMCONSUMO%TYPE;
V_TIPPLANTARIF GA_ABOCEL.TIP_PLANTARIF%TYPE;
V_PLANTARIF GA_ABOCEL.COD_PLANTARIF%TYPE;
V_CARGOBASICO GA_ABOCEL.COD_CARGOBASICO%TYPE;
V_CICLO GA_ABOCEL.COD_CICLO%TYPE;
V_PLANCOM VE_PLANCOM.COD_PLANCOM%TYPE;
V_PLANSERV GA_ABOCEL.COD_PLANSERV%TYPE;
V_GRPSERV GA_ABOCEL.COD_GRPSERV%TYPE;
V_EMPRESA GA_ABOCEL.COD_EMPRESA%TYPE;
V_HOLDING GA_ABOCEL.COD_HOLDING%TYPE;
V_PROCALTA GA_ABOCEL.IND_PROCALTA%TYPE;
V_AGENTE GA_ABOCEL.COD_VENDEDOR_AGENTE%TYPE;
V_FECALTA GA_ABOCEL.FEC_ACTCEN%TYPE;
V_VENTA GA_ABOCEL.NUM_VENTA%TYPE;
V_INDFACT GA_ABOCEL.IND_FACTUR%TYPE;
V_FINCONTRA GA_ABOCEL.FEC_FINCONTRA%TYPE;
V_BAJACEN GA_ABOCEL.FEC_BAJACEN%TYPE;
V_BAJA GA_ABOCEL.FEC_BAJACEN%TYPE;
V_CREDMOR GA_ABOCEL.COD_CREDMOR%TYPE;
V_USUARIO GA_ABOCEL.COD_USUARIO%TYPE;
V_CAPCODE GA_ABOBEEP.CAP_CODE%TYPE;
V_BEEPER GA_ABOBEEP.NUM_BEEPER%TYPE;
V_CELDA GA_ABOCEL.COD_CELDA%TYPE;
V_ORIGEN NUMBER;
V_DESTINO NUMBER;
V_VAR3 NUMBER;
V_ABONADO GA_ABOBEEP.NUM_ABONADO%TYPE;
V_PRODUCTO GA_ABOBEEP.COD_PRODUCTO%TYPE;
V_CICLONUE GA_ABOBEEP.COD_CICLO%TYPE;
ERROR_PROCESO EXCEPTION;
BEGIN
   VP_PROC := 'P_CLIENTE_CICLO';
   V_CLIENTE:=VP_CLIENTE;
   V_ABONADO:=VP_ABONADO;
   V_PRODUCTO:=VP_PRODUCTO;
   BEGIN
     SELECT COD_CICLONUE
     INTO V_CICLONUE
     FROM GE_CLIENTES
     WHERE COD_CLIENTE=V_CLIENTE
     AND COD_CICLONUE IS NOT NULL;
     P_DATOS_ABOBEEP(V_ABONADO,V_CLIENTE,V_IMPLICONS,
                     V_TIPPLANTARIF,V_PLANTARIF,V_CAPCODE,
                     V_BEEPER,V_CARGOBASICO,V_CICLO,
                     V_PLANSERV,V_GRPSERV,V_EMPRESA,
                     V_HOLDING,V_PROCALTA,V_AGENTE,
                     V_FECALTA,V_VENTA,V_INDFACT,
                     V_FINCONTRA,V_BAJACEN,V_BAJA,
                     V_CREDMOR,V_USUARIO,VP_PROC,VP_TABLA,
                     VP_ACT,VP_SQLCODE,VP_SQLERRM,V_ERROR);
     IF V_ERROR <> '0' THEN
        V_ERROR := '4';
        RAISE ERROR_PROCESO;
        VP_PROC := 'P_CLIENTE_CICLO';
     END IF;
     V_ORIGEN := V_CICLONUE;
     V_PRODUCTO:=2;
     P_CAMBIO_CICLO (V_PRODUCTO,V_CLIENTE,V_ABONADO,V_ORIGEN,
                     V_CICLO,V_FECSYS,VP_PROC,VP_TABLA,VP_ACT,VP_SQLCODE,
                     VP_SQLERRM,V_ERROR);
     IF V_ERROR <> '0' THEN
        V_ERROR := '4';
        RAISE ERROR_PROCESO;
        VP_PROC := 'P_CLIENTE_CICLO';
     END IF;
     IF V_INDFACT = 1 THEN
        P_ACTUALIZA_CICLOCLI (V_ABONADO,V_ORIGEN,VP_PROC,VP_TABLA,
                              VP_ACT,VP_SQLCODE,VP_SQLERRM,V_ERROR);
        IF V_ERROR <> '0' THEN
           V_ERROR := '4';
           RAISE ERROR_PROCESO;
           VP_PROC := 'P_CLIENTE_CICLO';
        END IF;
     ELSE
        P_ACTUALIZA_NOCICLOCLI (V_ABONADO,V_ORIGEN,VP_PROC,VP_TABLA,
                                VP_ACT,VP_SQLCODE,VP_SQLERRM,V_ERROR);
        IF V_ERROR <> '0' THEN
           V_ERROR := '4';
           RAISE ERROR_PROCESO;
           VP_PROC := 'P_CLIENTE_CICLO';
        END IF;
     END IF;
  EXCEPTION
     WHEN NO_DATA_FOUND THEN
        -- Cliente no posee cambio ciclo pendiente
        V_ERROR:='0';
     WHEN ERROR_PROCESO THEN
        -- Error en otros procesos
        V_ERROR:='4';
  END;
EXCEPTION
  WHEN ERROR_PROCESO THEN
      V_ERROR:='4';
END;
/
SHOW ERRORS
