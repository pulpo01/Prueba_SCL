CREATE OR REPLACE PACKAGE BODY PV_CLAVES_PG AS
-- PL/SQL Specification
--
-- *************************************************************
-- * Paquete            : PV_CLAVES_PG
-- * Descripcion        : Procedimientos Almacenados para procesar temas de Cambio de Clave
-- * Fecha de creacion  : 13-01-2003 20:45
-- * Responsable        : Area Postventa
-- *************************************************************
	PROCEDURE PV_MODCLAVE_PR (
		nTIP_CLAVE      IN  NUMBER,
		vCLAVE          IN  VARCHAR2,
		vSUJETO         IN  VARCHAR2,
		nTIP_SUJETO     IN  VARCHAR2,
		nIND_DEFAULT    IN  VARCHAR2,
		nTABLA			IN  VARCHAR2,
		nCOD_ACTABO     IN  VARCHAR2,
		ERROR_APLIC		out VARCHAR2,
		ERROR_GLOSA     out VARCHAR2, -- CODIGO ERROR DEL ALGORITMO
	    ERROR_ORA       out VARCHAR2, -- GLOSA ASOCIADA AL ERROR DEL ALGORITMO
	 	ERROR_ORA_GLOSA out VARCHAR2,
	    TRACE           out VARCHAR2
		)
	IS
		CANT_SUJETOS         NUMBER(2);
		nTIPO_CLAVE          NUMBER(2);
		NVAL_PARAMETRO       GED_PARAMETROS.VAL_PARAMETRO%TYPE;
	    cCLAVE_ENC           VARCHAR2(100);
		nUSUARIO             VARCHAR2(30);
		vERROR_APLIC 		 VARCHAR2(3);
		vERROR_GLOSA 		 VARCHAR2(50);
		vERROR_ORA 		     VARCHAR2(20);
		vERROR_ORA_GLOSA 	 VARCHAR2(50);
		vTRACE      		 VARCHAR2(120);

		ERROR_PROCESO        EXCEPTION;
	    TABLA_ERROR			 GA_ERRORES.NOM_TABLA%TYPE;
		TIPO_ACTUACION_TABLA GA_ERRORES.COD_ACT%TYPE;
	BEGIN
		ERROR_APLIC:='0';
		ERROR_GLOSA:= 'NO HAY ERROR';
        ERROR_ORA:=' ';
	 	ERROR_ORA_GLOSA:= 'NO HAY ERROR';
	    TRACE:= 'INICIO|';
	    cCLAVE_ENC := PV_CRYPT_FN(vCLAVE);
	    dbms_output.PUT_LINE('PASO 1 =' || cCLAVE_ENC);
		SELECT USER INTO nUSUARIO FROM DUAL;
		Select COUNT(SUJETO)
		into CANT_SUJETOS
		From GA_CLAVE_TO
		Where TIP_CLAVE    = nTIP_CLAVE   AND
		      SUJETO       = vSUJETO      AND
			  TIP_SUJETO   = nTIP_SUJETO;
		TRACE:= TRACE ||'CS:' || TO_CHAR(CANT_SUJETOS) || '|';
	    IF CANT_SUJETOS > 0  Then
		   ERROR_APLIC:='1';
		   ERROR_GLOSA:='UPDATE A GA_CLAVE_TO';
		   UPDATE GA_CLAVE_TO
		   SET CLAVE    = cCLAVE_ENC,
		   NOM_USUARORA = nUSUARIO
		   Where TIP_CLAVE    = nTIP_CLAVE   AND
		   SUJETO       = vSUJETO  AND
		   TIP_SUJETO   = nTIP_SUJETO ;
	 	   dbms_output.PUT_LINE('PASO 2 =' || nTIP_CLAVE );
		ELSIF CANT_SUJETOS = 0 THEN
		   ERROR_APLIC:='2';
		   ERROR_GLOSA:='INSERT A GA_CLAVE_TO';
		   INSERT INTO GA_CLAVE_TO (TIP_SUJETO, SUJETO, NOM_USUARORA, CLAVE, TIP_CLAVE )
		   VALUES (nTIP_SUJETO, vSUJETO,nUSUARIO, cCLAVE_ENC, nTIP_CLAVE );
	 	   dbms_output.PUT_LINE('PASO 3 =' || nTIP_CLAVE );
		END IF;
		BEGIN
			Select VAL_PARAMETRO
			into NVAL_PARAMETRO
			From GED_PARAMETROS
			Where COD_MODULO    = 'GA'   AND
	    	      Cod_producto  = '1'    AND
				  NOM_PARAMETRO = 'CLAVE_COMPATIBLE' ;
		EXCEPTION
		    WHEN OTHERS THEN
			     NVAL_PARAMETRO:= NULL;
		END;
		TRACE:= TRACE ||'PCC:' || NVAL_PARAMETRO || '|';
		Select TO_NUMBER(LTRIM(RTRIM(NVL(VAL_PARAMETRO,'-1'))))
		into nTIPO_CLAVE
		From GED_PARAMETROS
		Where COD_MODULO    = 'GA'   AND
	   	      Cod_producto  = '1'    AND
			  NOM_PARAMETRO = 'PWD_INTERNET' ;
		IF nTIPO_CLAVE < 0 THEN
		  ERROR_APLIC:='5';
		  ERROR_GLOSA:='FALTA PARAMETRO PWD_INTERNET';
		  RAISE ERROR_PROCESO;
		END IF;
		TRACE:= TRACE ||'TABLA:' || nTABLA || '|';
	    IF NVAL_PARAMETRO IS NOT NULL THEN
			IF NVAL_PARAMETRO= 'TRUE'	THEN
	 		   IF nTABLA='GA_ABOCEL' AND nTIP_CLAVE = nTIPO_CLAVE THEN
				  ERROR_APLIC:='3';
				  ERROR_GLOSA:='UPDATE A GA_ABOCEL';
			      UPDATE GA_ABOCEL
				  SET COD_PASSWORD   = vCLAVE,
				      NOM_USUARORA   = nUSUARIO
			      Where NUM_ABONADO  = vSUJETO;
			   ELSIF nTABLA='GA_ABOAMIST' AND nTIP_CLAVE = nTIPO_CLAVE THEN
				  ERROR_APLIC:='4';
				  ERROR_GLOSA:='UPDATE A GA_ABOAMIST';
			      UPDATE GA_ABOAMIST
				  SET COD_PASSWORD   = vCLAVE,
				      NOM_USUARORA   = nUSUARIO
			      Where NUM_ABONADO  = vSUJETO;
	 		   END IF;
			END IF;
		ELSE
		  ERROR_APLIC:='6';
		  ERROR_GLOSA:='FALTA PARAMETRO CLAVE_COMPATIBLE';
		  RAISE ERROR_PROCESO;
		END IF;
		-- ENVIAR MOVMIENTO A CENTRAL Y ACTUALIZAR SS DEL ABONADO EN GA_SERVSUPLABO
		IF nCOD_ACTABO = 'CP' THEN
		   TRACE:= TRACE ||'MOV CENTRAL' || '|';
		   PV_VAL_SERVICIOS_CLAVE_PR (vSUJETO,nCOD_ACTABO,vERROR_APLIC,
		                                           vERROR_GLOSA,vERROR_ORA,
												   vERROR_ORA_GLOSA,vTRACE); -- aqui llama a la pl

		END IF;
		ERROR_APLIC:='0';
		ERROR_GLOSA:= 'NO HAY ERROR';
		TRACE:= TRACE ||'FIN'  || '|';
	EXCEPTION
	    WHEN ERROR_PROCESO THEN
	         ERROR_ORA:= TO_CHAR(SQLCODE);
	       	 ERROR_ORA_GLOSA:= SQLERRM;
			 IF ERROR_APLIC = '5' THEN
			    TABLA_ERROR:= 'GED_PARAMETRO';
				TIPO_ACTUACION_TABLA:= 'S';
			 ELSIF ERROR_APLIC = '6' THEN
			    TABLA_ERROR:= 'GED_PARAMETRO';
				TIPO_ACTUACION_TABLA:= 'S';
			 END IF;
			 ROLLBACK;
			 INSERT INTO GA_ERRORES (COD_ACTABO, CODIGO, FEC_ERROR, COD_PRODUCTO, NOM_PROC, NOM_TABLA, COD_ACT, COD_SQLCODE, COD_SQLERRM)
			 VALUES (nCOD_ACTABO,vSUJETO,SYSDATE,1,'PV_MODCLAVE_PR',TABLA_ERROR,TIPO_ACTUACION_TABLA ,ERROR_ORA,ERROR_ORA_GLOSA);
		     COMMIT; -- ponerlo en todos_
		WHEN OTHERS THEN
	         ERROR_ORA:= TO_CHAR(SQLCODE);
	       	 ERROR_ORA_GLOSA:= SQLERRM;
			 IF ERROR_APLIC = '1' THEN
			    TABLA_ERROR:= 'GA_CLAVE_TO';
				TIPO_ACTUACION_TABLA:= 'U';
			 ELSIF ERROR_APLIC = '2' THEN
			    TABLA_ERROR:= 'GA_CLAVE_TO';
				TIPO_ACTUACION_TABLA:= 'U';
			 ELSIF ERROR_APLIC = '3' THEN
			    TABLA_ERROR:= 'GA_CLAVE_TO';
				TIPO_ACTUACION_TABLA:= 'U';
			 ELSIF ERROR_APLIC = '4' THEN
			    TABLA_ERROR:= 'GA_CLAVE_TO';
				TIPO_ACTUACION_TABLA:= 'U';
			 ELSIF ERROR_APLIC = '5' THEN
			    TABLA_ERROR:= 'GED_PARAMETROS';
				TIPO_ACTUACION_TABLA:= 'S';
			 ELSIF ERROR_APLIC = '6' THEN
			    TABLA_ERROR:= 'GED_PARAMETROS';
				TIPO_ACTUACION_TABLA:= 'S';
			 END IF;
			 ROLLBACK;
			 INSERT INTO GA_ERRORES (COD_ACTABO, CODIGO, FEC_ERROR, COD_PRODUCTO, NOM_PROC, NOM_TABLA, COD_ACT, COD_SQLCODE, COD_SQLERRM)
			 VALUES (nCOD_ACTABO,vSUJETO,SYSDATE,1,'PV_MODCLAVE_PR',TABLA_ERROR,TIPO_ACTUACION_TABLA ,ERROR_ORA,ERROR_ORA_GLOSA);
			 COMMIT;
	END PV_MODCLAVE_PR;


	PROCEDURE PV_VAL_SERVICIOS_CLAVE_PR (
	    vNUM_ABONADO    IN  VARCHAR2,
		vCOD_ACTABO     IN  VARCHAR2,
		ERROR_APLIC		out VARCHAR2,
		ERROR_GLOSA     out VARCHAR2, -- CODIGO ERROR DEL ALGORITMO
	    ERROR_ORA       out VARCHAR2, -- GLOSA ASOCIADA AL ERROR DEL ALGORITMO
	 	ERROR_ORA_GLOSA out VARCHAR2,
	    TRACE           out VARCHAR2
	    )
	IS
		ERROR_PROCESO           EXCEPTION;
		SERVICIO_SOLO_PREPAGO   GA_SERVSUPL.COD_SERVICIO%TYPE;
		SERVICIO_SOLO_POSTPAGO  GA_SERVSUPL.COD_SERVICIO%TYPE;
		SERVICIO_AMBOS          GA_SERVSUPL.COD_SERVICIO%TYPE;

		CADENA_PREPAGO			GA_ABOCEL.CLASE_SERVICIO%TYPE;
		CADENA_POSTPAGO			GA_ABOCEL.CLASE_SERVICIO%TYPE;
		CADENA_AMBOS			GA_ABOCEL.CLASE_SERVICIO%TYPE;
		TECNOLOGIA              GA_ABOCEL.COD_TECNOLOGIA%TYPE;

		ABONADO_PREPAGO			NUMBER(1);
		ABONADO_POSTPAGO		NUMBER(1);
		ABONADO_AMBOS			NUMBER(1);

		TMP_SERVSUPL			VARCHAR2(4);
		TMP_NIVEL				VARCHAR2(6);
		TIPO_ABONADO			VARCHAR2(15);
		vNOM_TABLA				VARCHAR2(20);
		TIPO_ACTUACION_TABLA    GA_ERRORES.COD_ACT%TYPE;

		TMP_VAR					NUMBER(20);
		PRODUCTO				NUMBER(1);
		AUTOR_ERROR				NUMBER(1); -- 0 = EL AUTOR ES ESTA PL, 1= EL AUTOR ES UN OBJETO PROGRAMABLES INVOCADO POR ESTA PL
										   -- 2 = CASO ESPECIAL EL AUTOR ES UN OBJETO PROGRAMABLES INVOCADO POR ESTA PL PERO EL DEVUELVE EL ERROR EN VARIAB?LES DE SALIDA DE MI PL

		--VARABLES DE ERRORES PA PL
		vERROR_APLIC 		 VARCHAR2(3);
		vERROR_GLOSA 		 VARCHAR2(50);
		vERROR_ORA 		     VARCHAR2(20);
		vERROR_ORA_GLOSA 	 VARCHAR2(50);
		vTRACE      		 VARCHAR2(120);

	BEGIN
		vERROR_APLIC:='0';
		vERROR_GLOSA:= 'NO HAY ERROR';
	    TRACE:= 'INICIO|';
        PRODUCTO:= 1;
		AUTOR_ERROR:= 0;
		-- VALIDAR CUALES SON LOS SERVICIOS SUPLEMENTARIOS QUE UTLIZA LA OPERADORA
		vERROR_APLIC:= '1';
		vERROR_GLOSA:= 'PROBLEMAS AL LERR GED_PARAMETROS';
		BEGIN
			SELECT VAL_PARAMETRO
			INTO SERVICIO_SOLO_PREPAGO
			FROM GED_PARAMETROS
			WHERE COD_MODULO    = 'GA'
	    	AND   COD_PRODUCTO  = PRODUCTO
			AND	  NOM_PARAMETRO = 'COD_SS_PRE';
		EXCEPTION
		    WHEN NO_DATA_FOUND THEN
			     SERVICIO_SOLO_PREPAGO := NULL;
			WHEN OTHERS THEN
			     RAISE ERROR_PROCESO;
		END;
		vERROR_APLIC:= '2';
		vERROR_GLOSA:= 'PROBLEMAS AL LERR GED_PARAMETROS';
		BEGIN
			SELECT VAL_PARAMETRO
			INTO SERVICIO_SOLO_POSTPAGO
			FROM GED_PARAMETROS
			WHERE COD_MODULO    = 'GA'
	    	AND   COD_PRODUCTO  = PRODUCTO
			AND	  NOM_PARAMETRO = 'COD_SS_POST';
		EXCEPTION
		    WHEN NO_DATA_FOUND THEN
  		         SERVICIO_SOLO_POSTPAGO := NULL;
			WHEN OTHERS THEN
			     RAISE ERROR_PROCESO;
		END;
		vERROR_APLIC:= '3';
		vERROR_GLOSA:= 'PROBLEMAS AL LERR GED_PARAMETROS';
		BEGIN
			SELECT VAL_PARAMETRO
			INTO SERVICIO_AMBOS
			FROM GED_PARAMETROS
			WHERE COD_MODULO    = 'GA'
	    	AND   COD_PRODUCTO  = PRODUCTO
			AND	  NOM_PARAMETRO = 'COD_SS_AMBOS';
		EXCEPTION
		    WHEN NO_DATA_FOUND THEN
			     SERVICIO_AMBOS:=NULL;
			WHEN OTHERS THEN
			     RAISE ERROR_PROCESO;
 		END;

		IF SERVICIO_SOLO_PREPAGO IS NOT NULL THEN
		   vERROR_APLIC:= '4';
		   vERROR_GLOSA:= 'PROBLEMAS AL LEER GA_SERVSUPL';
		   SELECT '00' || LTRIM(RTRIM(TO_CHAR(COD_SERVSUPL))) , '0000' || LTRIM(RTRIM(TO_CHAR(COD_NIVEL)))
		   INTO TMP_SERVSUPL, TMP_NIVEL
		   FROM GA_SERVSUPL
		   WHERE COD_SERVICIO = SERVICIO_SOLO_PREPAGO AND COD_PRODUCTO= PRODUCTO ;
		   CADENA_PREPAGO:= SUBSTR(TMP_SERVSUPL,LENGTH(TMP_SERVSUPL)-1, 2) || SUBSTR(TMP_NIVEL,LENGTH(TMP_NIVEL)-3,4);
		END IF;

		IF SERVICIO_SOLO_POSTPAGO IS NOT NULL THEN
		   vERROR_APLIC:= '5';
		   vERROR_GLOSA:= 'PROBLEMAS AL LEER GA_SERVSUPL';
		   SELECT '00' || LTRIM(RTRIM(TO_CHAR(COD_SERVSUPL))) , '0000' || LTRIM(RTRIM(TO_CHAR(COD_NIVEL)))
		   INTO TMP_SERVSUPL, TMP_NIVEL
		   FROM GA_SERVSUPL
		   WHERE COD_SERVICIO = SERVICIO_SOLO_POSTPAGO AND COD_PRODUCTO= PRODUCTO ;
		   CADENA_POSTPAGO:= SUBSTR(TMP_SERVSUPL,LENGTH(TMP_SERVSUPL)-1, 2) || SUBSTR(TMP_NIVEL,LENGTH(TMP_NIVEL)-3,4);
		END IF;

		IF SERVICIO_AMBOS IS NOT NULL THEN
		   vERROR_APLIC:= '6';
		   vERROR_GLOSA:= 'PROBLEMAS AL LEER GA_SERVSUPL';
		   SELECT '00' || LTRIM(RTRIM(TO_CHAR(COD_SERVSUPL))) , '0000' || LTRIM(RTRIM(TO_CHAR(COD_NIVEL)))
		   INTO TMP_SERVSUPL, TMP_NIVEL
		   FROM GA_SERVSUPL
		   WHERE COD_SERVICIO = SERVICIO_AMBOS AND COD_PRODUCTO= PRODUCTO ;
		   CADENA_AMBOS:= SUBSTR(TMP_SERVSUPL,LENGTH(TMP_SERVSUPL)-1, 2) || SUBSTR(TMP_NIVEL,LENGTH(TMP_NIVEL)-3,4);
		END IF;

		TIPO_ABONADO:='POSTPAGO';
	    vERROR_APLIC:= '7';
		vERROR_GLOSA:= 'PROBLEMAS AL LEER GA_ABOCEL';
		BEGIN
			SELECT NUM_ABONADO,COD_TECNOLOGIA
			INTO TMP_VAR,TECNOLOGIA
			FROM GA_ABOCEL
			WHERE COD_SITUACION = 'AAA'
			AND NUM_ABONADO = vNUM_ABONADO;
			vNOM_TABLA:= 'GA_ABOCEL';
		EXCEPTION
		    WHEN NO_DATA_FOUND THEN
			    TIPO_ABONADO:='PREPAGO';
			    vERROR_APLIC:= '8';
				vERROR_GLOSA:= 'PROBLEMAS AL LEER GA_ABOAMIST';
			    BEGIN
					SELECT NUM_ABONADO,COD_TECNOLOGIA
					INTO TMP_VAR,TECNOLOGIA
					FROM GA_ABOAMIST
					WHERE COD_SITUACION = 'AAA'
					AND NUM_ABONADO = vNUM_ABONADO;
					vNOM_TABLA:= 'GA_ABOAMIST';
				EXCEPTION
				    WHEN OTHERS THEN
					    TIPO_ABONADO:='DESCONOCIDO';
						RAISE ERROR_PROCESO;
				END;
			WHEN OTHERS THEN
			    TIPO_ABONADO:='DESCONOCIDO';
				RAISE ERROR_PROCESO;
		END;
		-- A ESTA ALTURA SE LL SGTE
		-- 1.- QUE SERVICIOS PARA MANEJO DE CLAVE ESTAN HABILLITADOS
		-- 2.- LA CADENA QUE SE ENVIA A CENTRAL PARA ESOS SERVICIOS
		-- 3.- SI EL ABONADO ES PREPAGO, POSTPAGO O CATALOGADO DE DESCONICIDO EN ESTE ULTIMO CASO NO SE PUEDE CONTINUAR

        -- VALIDAR QUE SERVICIOS TIENEN EL ABONADO

		IF SERVICIO_AMBOS IS NOT NULL THEN
			SELECT COUNT(COD_SERVICIO)
			INTO  ABONADO_AMBOS
			FROM GA_SERVSUPLABO
			WHERE NUM_ABONADO = vNUM_ABONADO
			AND COD_SERVICIO = SERVICIO_AMBOS
			AND IND_ESTADO < 3;
		ELSE
		    ABONADO_AMBOS := -1;
		END IF;

		IF SERVICIO_SOLO_POSTPAGO IS NOT NULL AND TIPO_ABONADO = 'POSTPAGO' THEN
			SELECT COUNT(COD_SERVICIO)
			INTO  ABONADO_POSTPAGO
			FROM GA_SERVSUPLABO
			WHERE NUM_ABONADO = vNUM_ABONADO
			AND COD_SERVICIO = SERVICIO_SOLO_POSTPAGO
			AND IND_ESTADO < 3;
		ELSE
		    ABONADO_POSTPAGO:= -1;
		END IF;

		IF SERVICIO_SOLO_PREPAGO IS NOT NULL AND TIPO_ABONADO = 'PREPAGO' THEN
			SELECT COUNT(COD_SERVICIO)
			INTO  ABONADO_PREPAGO
			FROM GA_SERVSUPLABO
			WHERE NUM_ABONADO = vNUM_ABONADO
			AND COD_SERVICIO = SERVICIO_SOLO_PREPAGO
			AND IND_ESTADO < 3;
		ELSE
		    ABONADO_PREPAGO:= -1;
		END IF;

		IF ABONADO_AMBOS > 0 THEN
		   --INSERT INTO ICC_MOVIMIENTOS
		   PV_ICC_MOV_PR(vNUM_ABONADO,TECNOLOGIA,vNOM_TABLA,'CP',
		                              CADENA_AMBOS,vERROR_APLIC,vERROR_GLOSA,vERROR_ORA,
									  vERROR_ORA_GLOSA,vTRACE); -- aqui llama a la pl
		   IF vERROR_APLIC <> '0' OR vERROR_ORA <> '0' THEN
		      AUTOR_ERROR:= 1;
		      RAISE ERROR_PROCESO;
		   END IF;


		ELSIF ABONADO_POSTPAGO > 0 THEN
		   --INSERT INTO ICC_MOVIMIENTOS
		   PV_ICC_MOV_PR(vNUM_ABONADO,TECNOLOGIA,vNOM_TABLA,'CP',
		                              CADENA_POSTPAGO,vERROR_APLIC,vERROR_GLOSA,vERROR_ORA,
									  vERROR_ORA_GLOSA,vTRACE); -- aqui llama a la pl
  		   IF vERROR_APLIC <> '0' OR vERROR_ORA <> '0' THEN
		      AUTOR_ERROR:= 1;
		      RAISE ERROR_PROCESO;
		   END IF;

		ELSIF ABONADO_PREPAGO > 0 THEN
		   PV_ICC_MOV_PR(vNUM_ABONADO,TECNOLOGIA,vNOM_TABLA,'CP',
		   							  CADENA_PREPAGO,vERROR_APLIC,vERROR_GLOSA,vERROR_ORA,
									  vERROR_ORA_GLOSA,vTRACE); -- aqui llama a la pl

		   IF vERROR_APLIC <> '0' OR vERROR_ORA <> '0' THEN
		      AUTOR_ERROR:= 1;
		      RAISE ERROR_PROCESO;
		   END IF;

		ELSIF SERVICIO_AMBOS IS NOT NULL THEN
		   --ACTIVAR ESTE SERVICIO AL ABONADO EN GA_SERVSUPLABO Y ENVIAR MOV.

		   --INSERT GA_SERVSUPLABO
		   PV_AD_SS_CLAVE_PR(vNUM_ABONADO, CADENA_AMBOS, SERVICIO_AMBOS, 'CP', ERROR_APLIC, ERROR_GLOSA);
		   IF ERROR_APLIC <> '0'  THEN
		      AUTOR_ERROR:= 2;
		      RAISE ERROR_PROCESO;
		   END IF;


		   --INSERT INTO ICC_MOVIMIENTOS
		   PV_ICC_MOV_PR(vNUM_ABONADO,TECNOLOGIA,vNOM_TABLA,'CP',
		   					         CADENA_AMBOS,vERROR_APLIC,vERROR_GLOSA,vERROR_ORA,
									  vERROR_ORA_GLOSA,vTRACE); -- aqui llama a la pl

		   IF vERROR_APLIC <> '0' OR vERROR_ORA <> '0' THEN
		      AUTOR_ERROR:= 1;
		      RAISE ERROR_PROCESO;
		   END IF;

		ELSIF SERVICIO_SOLO_POSTPAGO IS NOT NULL AND TIPO_ABONADO = 'POSTPAGO' THEN
		   --ACTIVAR ESTE SERVICIO AL ABONADO EN GA_SERVSUPLABO Y ENVIAR MOV.

		   PV_AD_SS_CLAVE_PR(vNUM_ABONADO, CADENA_POSTPAGO, SERVICIO_SOLO_POSTPAGO, 'CP', ERROR_APLIC, ERROR_GLOSA);

		   IF ERROR_APLIC <> '0'  THEN
		      AUTOR_ERROR:= 2;
		      RAISE ERROR_PROCESO;
		   END IF;
		   --INSERT INTO ICC_MOVIMIENTOS
		   PV_ICC_MOV_PR(vNUM_ABONADO,TECNOLOGIA,vNOM_TABLA,'CP',
		                              CADENA_POSTPAGO,vERROR_APLIC,vERROR_GLOSA,vERROR_ORA,
									  vERROR_ORA_GLOSA,vTRACE); -- aqui llama a la pl
		   IF vERROR_APLIC <> '0' OR vERROR_ORA <> '0' THEN
		      AUTOR_ERROR:= 1;
		      RAISE ERROR_PROCESO;
		   END IF;

		  ELSIF SERVICIO_SOLO_PREPAGO IS NOT NULL AND TIPO_ABONADO = 'PREPAGO' THEN
		   --ACTIVAR ESTE SERVICIO AL ABONADO EN GA_SERVSUPLABO Y ENVIAR MOV.

		   --INSERT GA_SERVSUPLABO
		   PV_AD_SS_CLAVE_PR(vNUM_ABONADO, CADENA_PREPAGO, SERVICIO_SOLO_PREPAGO, 'CP', ERROR_APLIC, ERROR_GLOSA);
		   IF ERROR_APLIC <> '0'  THEN
		      AUTOR_ERROR:= 2;
		      RAISE ERROR_PROCESO;
		   END IF;

		   --INSERT INTO ICC_MOVIMIENTOS
		   PV_ICC_MOV_PR(vNUM_ABONADO,TECNOLOGIA,vNOM_TABLA,'CP',
		                              CADENA_PREPAGO,vERROR_APLIC,vERROR_GLOSA,vERROR_ORA,
									  vERROR_ORA_GLOSA,vTRACE); -- aqui llama a la pl
		   IF vERROR_APLIC <> '0' OR vERROR_ORA <> '0' THEN
		      AUTOR_ERROR:= 1;
		      RAISE ERROR_PROCESO;
		   END IF;


		END IF;
		ERROR_APLIC:='0';
		ERROR_GLOSA:= 'NO HAY ERROR';

        EXCEPTION
	    WHEN ERROR_PROCESO THEN
		     IF AUTOR_ERROR = 0 THEN
			    ROLLBACK;
			    ERROR_ORA:= TO_CHAR(SQLCODE);
	       	    ERROR_ORA_GLOSA:= SQLERRM;
			    INSERT INTO GA_ERRORES (COD_ACTABO, CODIGO, FEC_ERROR, COD_PRODUCTO, NOM_PROC, NOM_TABLA, COD_ACT, COD_SQLCODE, COD_SQLERRM)
			    VALUES (vCOD_ACTABO,vNUM_ABONADO,SYSDATE,1,'PV_VAL_SERVICIOS_CLAVE_PR',vNOM_TABLA,TIPO_ACTUACION_TABLA ,ERROR_ORA,ERROR_ORA_GLOSA);
				COMMIT;
			 ELSIF AUTOR_ERROR = 1 THEN
                ERROR_APLIC := vERROR_APLIC;
				ERROR_GLOSA := vERROR_GLOSA;
				ERROR_ORA := vERROR_ORA;
				ERROR_ORA_GLOSA:=  vERROR_ORA_GLOSA;
				TRACE:= TRACE || 'FIN' || '|';
			 ELSIF AUTOR_ERROR = 2 THEN
				ERROR_ORA := ' ';
				ERROR_ORA_GLOSA:=  ' ';
				TRACE:= TRACE || 'FIN' || '|';
			 END IF;
		 WHEN OTHERS THEN
		      ROLLBACK;
			  ERROR_APLIC:= vERROR_APLIC;
			  ERROR_GLOSA:= vERROR_GLOSA;
			  ERROR_ORA:= TO_CHAR(SQLCODE);
	       	  ERROR_ORA_GLOSA:= SQLERRM;
			  TRACE:= TRACE || 'FIN' || '|';
		      INSERT INTO GA_ERRORES (COD_ACTABO, CODIGO, FEC_ERROR, COD_PRODUCTO, NOM_PROC, NOM_TABLA, COD_ACT, COD_SQLCODE, COD_SQLERRM)
		      VALUES (vCOD_ACTABO,vNUM_ABONADO,SYSDATE,1,'PV_VAL_SERVICIOS_CLAVE_PR',vNOM_TABLA,TIPO_ACTUACION_TABLA ,ERROR_ORA,ERROR_ORA_GLOSA);
			  COMMIT;
	END PV_VAL_SERVICIOS_CLAVE_PR;


	PROCEDURE PV_ICC_MOV_PR (
			nNUM_ABONADO    IN  NUMBER,
			vTEC_ABONADO    IN  VARCHAR2, -- TECNOLOGIA ABONADO_
			nTABLA			IN  VARCHAR2,
			nCOD_ACTABO     IN  VARCHAR2,
			nCADENA			IN  NUMBER,   --CONFIRMAR EL LARGO
			ERROR_APLIC		out VARCHAR2,
			ERROR_GLOSA     out VARCHAR2,
		    ERROR_ORA       out VARCHAR2,
		 	ERROR_ORA_GLOSA out VARCHAR2,
		    TRACE           out VARCHAR2
			)
		IS
			nTIPO_TEC            NUMBER(2);
			NVAL_PARAMETRO       GED_PARAMETROS.VAL_PARAMETRO%TYPE;
			nNUM_CELULAR         GA_ABOCEL.NUM_CELULAR%TYPE;
			vNUM_SERIE           GA_ABOCEL.NUM_SERIE%TYPE;
			vNUM_MIN             GA_ABOCEL.NUM_MIN%TYPE;
			vNUM_IMEI            GA_ABOCEL.NUM_IMEI%TYPE;
			vTIP_TERMINAL		 GA_ABOCEL.TIP_TERMINAL%TYPE;
			vCOD_CENTRAL         GA_ABOCEL.COD_CENTRAL%TYPE;
			vIMSI				 VARCHAR2(50);
			cCOD_ACT             NUMBER(5);
			nNUM_MOV             NUMBER(10);
			nUSUARIO             VARCHAR2(30);
			ERROR_PROCESO        EXCEPTION;
		    TABLA_ERROR			 GA_ERRORES.NOM_TABLA%TYPE;
			TIPO_ACTUACION_TABLA GA_ERRORES.COD_ACT%TYPE;

		BEGIN
			ERROR_APLIC:='0';
			ERROR_GLOSA:= 'NO HAY ERROR';
		    TRACE:= 'INICIO|';
			cCOD_ACT:= FN_CODACTCEN (1,'CP','GA',vTEC_ABONADO);
			SELECT ICC_SEQ_NUMMOV.NEXTVAL INTO nNUM_MOV FROM DUAL;
		    dbms_output.PUT_LINE('PASO 1 =' || cCOD_ACT);

			SELECT USER INTO nUSUARIO FROM DUAL;

			BEGIN
				Select VAL_PARAMETRO
				into NVAL_PARAMETRO
				From GED_PARAMETROS
				Where COD_MODULO    = 'GA'   AND
		    	      Cod_producto  = '1'    AND
					  NOM_PARAMETRO = 'TECNOLOGIA_GSM' ;
			EXCEPTION
			    WHEN OTHERS THEN
				     NVAL_PARAMETRO:= NULL;
			END;

			TRACE:= TRACE ||'TEC:' || NVAL_PARAMETRO || '|';
		    IF NVAL_PARAMETRO IS NOT NULL THEN
				IF NVAL_PARAMETRO= vTEC_ABONADO	THEN
                   TRACE:= TRACE ||'TABLA:' || nTABLA || '|';
		 		   IF nTABLA='GA_ABOCEL'  THEN
					  ERROR_APLIC:='2';
					  ERROR_GLOSA:='SELECT A GA_ABOCEL';
				      SELECT TIP_TERMINAL,COD_CENTRAL,NUM_CELULAR,NUM_SERIE,NUM_MIN,NUM_IMEI
					  INTO   vTIP_TERMINAL,vCOD_CENTRAL,nNUM_CELULAR,vNUM_SERIE,vNUM_MIN,vNUM_IMEI
					  FROM   GA_ABOCEL
				      Where COD_SITUACION = 'AAA'
					  AND NUM_ABONADO = nNUM_ABONADO;

				   ELSIF nTABLA='GA_ABOAMIST'  THEN

					  ERROR_APLIC:='3';
					  ERROR_GLOSA:='SELECT A GA_ABOAMIST';
				      SELECT TIP_TERMINAL,COD_CENTRAL,NUM_CELULAR,NUM_SERIE,NUM_MIN,NUM_IMEI
					  INTO   vTIP_TERMINAL,vCOD_CENTRAL,nNUM_CELULAR,vNUM_SERIE,vNUM_MIN,vNUM_IMEI
					  FROM   GA_ABOAMIST
				      Where COD_SITUACION = 'AAA'
					  AND NUM_ABONADO = nNUM_ABONADO;
		 		   END IF;

				    --vIMSI:= SELECT FN_RECUPERA_IMSI (vNUM_SERIE) FROM DUAL;
					vIMSI:=FN_RECUPERA_IMSI(vNUM_SERIE);


					ERROR_APLIC:='4';
					ERROR_GLOSA:='INSERT A ICC_MOVIMIENTO GSM';
					TRACE:= TRACE ||'ICC:' || nTABLA || '|';

				    INSERT INTO ICC_MOVIMIENTO (NUM_MOVIMIENTO,NUM_ABONADO,COD_ESTADO,COD_ACTABO,COD_MODULO,
					                            COD_ACTUACION,NOM_USUARORA,FEC_INGRESO, TIP_TERMINAL, COD_CENTRAL,
											    NUM_CELULAR, NUM_SERIE,COD_SERVICIOS, NUM_MIN, TIP_TECNOLOGIA, IMSI, IMEI, ICC)
					VALUES                     (nNUM_MOV,nNUM_ABONADO,1,nCOD_ACTABO,'GA',cCOD_ACT,nUSUARIO,SYSDATE,
					                            vTIP_TERMINAL,vCOD_CENTRAL,nNUM_CELULAR,vNUM_SERIE,nCADENA,vNUM_MIN,vTEC_ABONADO,
											    vIMSI,vNUM_IMEI,vNUM_SERIE);

				ELSE

		 		   IF nTABLA='GA_ABOCEL'  THEN
					  ERROR_APLIC:='2';
					  ERROR_GLOSA:='SELECT A GA_ABOCEL';
				      SELECT TIP_TERMINAL,COD_CENTRAL,NUM_CELULAR,NUM_SERIE,NUM_MIN
					  INTO   vTIP_TERMINAL,vCOD_CENTRAL,nNUM_CELULAR,vNUM_SERIE,vNUM_MIN
					  FROM   GA_ABOCEL
				      Where COD_SITUACION = 'AAA'
					  AND NUM_ABONADO = nNUM_ABONADO;

				   ELSIF nTABLA='GA_ABOAMIST'  THEN

					  ERROR_APLIC:='3';
					  ERROR_GLOSA:='SELECT A GA_ABOAMIST';
				      SELECT TIP_TERMINAL,COD_CENTRAL,NUM_CELULAR,NUM_SERIE,NUM_MIN
					  INTO   vTIP_TERMINAL,vCOD_CENTRAL,nNUM_CELULAR,vNUM_SERIE,vNUM_MIN
					  FROM   GA_ABOAMIST
				      Where COD_SITUACION = 'AAA'
					  AND NUM_ABONADO = nNUM_ABONADO;
		 		   END IF;

							  ERROR_APLIC:='5';
							  ERROR_GLOSA:='INSERT A ICC_MOVIMIENTO TDMA';
							  TRACE:= TRACE ||'ICC:' || nTABLA || '|';

				    INSERT INTO ICC_MOVIMIENTO (NUM_MOVIMIENTO,NUM_ABONADO,COD_ESTADO,COD_ACTABO,COD_MODULO,
					                            COD_ACTUACION,NOM_USUARORA,FEC_INGRESO, TIP_TERMINAL, COD_CENTRAL,
											    NUM_CELULAR, NUM_SERIE,COD_SERVICIOS, NUM_MIN,TIP_TECNOLOGIA)
					VALUES                     (nNUM_MOV,nNUM_ABONADO,1,nCOD_ACTABO,'GA',cCOD_ACT,nUSUARIO,SYSDATE,
					                            vTIP_TERMINAL,vCOD_CENTRAL,nNUM_CELULAR,vNUM_SERIE,nCADENA,vNUM_MIN,vTEC_ABONADO);

			   END IF;

			ELSE
		 		   IF nTABLA='GA_ABOCEL'  THEN
					  ERROR_APLIC:='2';
					  ERROR_GLOSA:='SELECT A GA_ABOCEL';
				      SELECT TIP_TERMINAL,COD_CENTRAL,NUM_CELULAR,NUM_SERIE,NUM_MIN
					  INTO   vTIP_TERMINAL,vCOD_CENTRAL,nNUM_CELULAR,vNUM_SERIE,vNUM_MIN
					  FROM   GA_ABOCEL
				      Where COD_SITUACION = 'AAA'
					  AND NUM_ABONADO = nNUM_ABONADO;

				   ELSIF nTABLA='GA_ABOAMIST'  THEN

					  ERROR_APLIC:='3';
					  ERROR_GLOSA:='SELECT A GA_ABOAMIST';
				      SELECT TIP_TERMINAL,COD_CENTRAL,NUM_CELULAR,NUM_SERIE,NUM_MIN
					  INTO   vTIP_TERMINAL,vCOD_CENTRAL,nNUM_CELULAR,vNUM_SERIE,vNUM_MIN
					  FROM   GA_ABOAMIST
				      Where COD_SITUACION = 'AAA'
					  AND NUM_ABONADO = nNUM_ABONADO;
		 		   END IF;

							  ERROR_APLIC:='5';
							  ERROR_GLOSA:='INSERT A ICC_MOVIMIENTO TDMA';
							  TRACE:= TRACE ||'ICC:' || nTABLA || '|';

				    INSERT INTO ICC_MOVIMIENTO (NUM_MOVIMIENTO,NUM_ABONADO,COD_ESTADO,COD_ACTABO,COD_MODULO,
					                            COD_ACTUACION,NOM_USUARORA,FEC_INGRESO, TIP_TERMINAL, COD_CENTRAL,
											    NUM_CELULAR, NUM_SERIE,COD_SERVICIOS, NUM_MIN,TIP_TECNOLOGIA)
					VALUES                     (nNUM_MOV,nNUM_ABONADO,1,nCOD_ACTABO,'GA',cCOD_ACT,nUSUARIO,SYSDATE,
					                            vTIP_TERMINAL,vCOD_CENTRAL,nNUM_CELULAR,vNUM_SERIE,nCADENA,vNUM_MIN,vTEC_ABONADO);

			END IF;
		    ERROR_APLIC:='0';
		    ERROR_GLOSA:= 'NO HAY ERROR';
			TRACE:= TRACE ||'FIN'  || '|';
		EXCEPTION
		    WHEN ERROR_PROCESO THEN
		         ERROR_ORA:= TO_CHAR(SQLCODE);
		       	 ERROR_ORA_GLOSA:= SQLERRM;
				 IF ERROR_APLIC = '1' THEN
				    TABLA_ERROR:= 'GED_PARAMETRO';
					TIPO_ACTUACION_TABLA:= 'S';
				 ELSIF ERROR_APLIC = '6' THEN
				    TABLA_ERROR:= 'GED_PARAMETRO';
					TIPO_ACTUACION_TABLA:= 'S';
				 END IF;
				 ROLLBACK;
				 INSERT INTO GA_ERRORES (COD_ACTABO, CODIGO, FEC_ERROR, COD_PRODUCTO, NOM_PROC, NOM_TABLA, COD_ACT, COD_SQLCODE, COD_SQLERRM)
				 VALUES (nCOD_ACTABO,nNUM_ABONADO,SYSDATE,1,'PV_MODCLAVE_PR',TABLA_ERROR,TIPO_ACTUACION_TABLA ,ERROR_ORA,ERROR_ORA_GLOSA);
				 COMMIT;
			WHEN OTHERS THEN
		         ERROR_ORA:= TO_CHAR(SQLCODE);
		       	 ERROR_ORA_GLOSA:= SQLERRM;
				 IF ERROR_APLIC = '1' THEN
				    TABLA_ERROR:= 'GED_PARAMETROS';
					TIPO_ACTUACION_TABLA:= 'S';
				 ELSIF ERROR_APLIC = '2' THEN
				    TABLA_ERROR:= 'GA_ABOCEL';
					TIPO_ACTUACION_TABLA:= 'S';
				 ELSIF ERROR_APLIC = '3' THEN
				    TABLA_ERROR:= 'GA_ABOAMIST';
					TIPO_ACTUACION_TABLA:= 'S';
				 ELSIF ERROR_APLIC = '4' THEN
				    TABLA_ERROR:= 'ICC_MOVIMIENTO';
					TIPO_ACTUACION_TABLA:= 'I';
				 ELSIF ERROR_APLIC = '5' THEN
				    TABLA_ERROR:= 'ICC_MOVIMIENTO';
					TIPO_ACTUACION_TABLA:= 'I';
				 ELSIF ERROR_APLIC = '6' THEN
				    TABLA_ERROR:= 'GED_PARAMETROS';
					TIPO_ACTUACION_TABLA:= 'S';
				 END IF;
				 ROLLBACK;
				 INSERT INTO GA_ERRORES (COD_ACTABO, CODIGO, FEC_ERROR, COD_PRODUCTO, NOM_PROC, NOM_TABLA, COD_ACT, COD_SQLCODE, COD_SQLERRM)
				 VALUES (nCOD_ACTABO,nNUM_ABONADO,SYSDATE,1,'PV_MODCLAVE_PR',TABLA_ERROR,TIPO_ACTUACION_TABLA ,ERROR_ORA,ERROR_ORA_GLOSA);
                 COMMIT;
		END PV_ICC_MOV_PR;

		PROCEDURE PV_AD_SS_CLAVE_PR(
			   nNUM_ABONADO			IN NUMBER,		  						-- Numero del abonado
			   vCADENANUEV			IN GA_ABOCEL.CLASE_SERVICIO%TYPE,		-- Cadena del servicio a agregar
			   vCOD_SERVICIONUEV	IN GA_SERVSUPLABO.COD_SERVICIO%TYPE,	-- Nuevo Codigo de servicio
			   vACTUACION			IN VARCHAR2,							-- Codigo de Actuacion
			   nCOD_ERROR			OUT NUMBER,								-- Codigo de Error
			   sMEN_ERROR			OUT VARCHAR2							-- Mensaje de Error
			   )

		/*****************************************************************************************************
		AUTOR    : JOAN ZAMORANO J.
		AREA     : POSTVENTA
		EMPRESA  : TELEFONICA MOVIL SOLUTION S.A.
		******************************************************************************************************/

		/**************************************** Comentarios ************************************************
		Descripcion: Este Pl tine por objeto agregar servicios suplementarios que no son Friend  Family, emotion
					 Detalle de facturacion, o Trafico.

					 Solo activa comercialmente el servicio.
		/**************************************** Fin Comentarios ********************************************/
		IS

		/*********************************** Variables Datos del Abbonado ************************************/
		  nNumCelular  	  GA_ABOCEL.NUM_CELULAR%TYPE;
		  nCodUso		  GA_ABOCEL.COD_USO%TYPE;
		  nCodCentral  	  GA_ABOCEL.COD_CENTRAL%TYPE;
		  vNumSerieHex 	  GA_ABOCEL.NUM_SERIEHEX%TYPE;
		  vTipTerminal 	  GA_ABOCEL.TIP_TERMINAL%TYPE;
		  vNumMin	   	  GA_ABOCEL.NUM_MIN%TYPE;
		  nCodCliente  	  GA_ABOCEL.COD_CLIENTE%TYPE;
		  vClaseServicio  GA_ABOCEL.CLASE_SERVICIO%TYPE;
		  nCodCiclo		  GA_ABOCEL.COD_CICLO%TYPE;
		  nCodSistema	  ICG_CENTRAL.COD_SISTEMA%TYPE;
		/********************************* FIN Variables Datos del Abbonado **********************************/

		/********************************* Variables para manejo de Errores **********************************/
		  ERROR_PROCESO EXCEPTION;
		  sNOM_TABLA	GA_ERRORES.NOM_TABLA%TYPE;
		  sNOM_PROC		GA_ERRORES.NOM_PROC%TYPE;
		  sCOD_ACT		GA_ERRORES.COD_ACT%TYPE;
		  sCOD_SQLCODE	GA_ERRORES.COD_SQLCODE%TYPE;
		  sCOD_SQLERRM	GA_ERRORES.COD_SQLERRM%TYPE;
		  sERROR		VARCHAR2(2);

		  nNumError NUMBER(2);
		  sMsgError VARCHAR2(100);
		/******************************* FIN Variables para manejo de Errores ********************************/

		  nCodServSuplOrig	 GA_SERVSUPLABO.COD_SERVSUPL%TYPE;	   -- Cod_ServSupl original
		  nCodNivelOrig		 GA_SERVSUPLABO.COD_NIVEL%TYPE;		   -- Cod_Nivel original
		  nCodServSuplNuev	 GA_SERVSUPLABO.COD_SERVSUPL%TYPE;	   -- Cod_ServSupl nuevo
		  nCodNivelNuev		 GA_SERVSUPLABO.COD_NIVEL%TYPE;		   -- Cod_Nivel nuevo

		  ExisteCodServSupl	 BOOLEAN;							   -- Variable que indica si existe o no el cod_servsupl para el abonado en cuestion
		  iSoportable		 INTEGER;							   -- Variable que indica si el servicio es soportado por el terminal

		  nCodConcepto		 GA_ACTUASERV.COD_CONCEPTO%TYPE;	   -- Variable que indica si existe concepto de facturacion asociado al servicio
		  TmpCodServSuplOrig VARCHAR2(4);						   -- Variable temporal
		  TmpCodNivelOrig	 VARCHAR2(8);						   -- Variable temporal
		  CONTADOR			 INTEGER;							   -- Variable de tipo contador
		  vCadenaBorrar		 VARCHAR2(6);						   -- Variable que contiene el valor de la cadena a borrar, siempre y cuando exista
		  vClaseServicioNuev GA_ABOCEL.CLASE_SERVICIO%TYPE;		   -- Variable temporal para la clase de servicio

		  TABLA				 VARCHAR2(20);						   -- Variable que indica con que tabla se esra trabajando (GA_ABOCEL o GA_ABOAMIST)

		BEGIN
			nNumError:=0;
			sMsgError:='Operacion Exitosa.';
			sNOM_TABLA:='';
			sCOD_ACT:='';

			--Obtener datos del abonado
			BEGIN
				TABLA:='GA_ABOCEL';

				nNumError := 1;
				sMsgError := 'Error, al seleccionar desde GA_ABOCEL';
				sNOM_TABLA:='GA_ABOCEL';
				sCOD_ACT:='S';

				SELECT NUM_CELULAR, COD_USO, COD_CENTRAL, NUM_SERIEHEX, TIP_TERMINAL, NUM_MIN, COD_CLIENTE, CLASE_SERVICIO, COD_CICLO
				INTO   nNumCelular, nCodUso, nCodCentral, vNumSerieHex, vTipTerminal, vNumMin, nCodCliente, vClaseServicio, nCodCiclo
				FROM   GA_ABOCEL
				WHERE  NUM_ABONADO = to_number(nNUM_ABONADO);

			EXCEPTION
				WHEN   NO_DATA_FOUND THEN
					TABLA:= 'GA_ABOAMIST';
				WHEN OTHERS THEN
					 RAISE ERROR_PROCESO;
			END;
			IF TABLA = 'GA_ABOAMIST' THEN
			    BEGIN
					nNumError := 2;
					sNOM_TABLA:= 'GA_ABOAMIST';
					sMsgError := 'Error, al seleccionar desde GA_ABOAMIST';
					sCOD_ACT:='S';

					SELECT NUM_CELULAR, COD_USO, COD_CENTRAL, NUM_SERIEHEX, TIP_TERMINAL, NUM_MIN, COD_CLIENTE, CLASE_SERVICIO, COD_CICLO
					INTO   nNumCelular, nCodUso, nCodCentral, vNumSerieHex, vTipTerminal, vNumMin, nCodCliente, vClaseServicio, nCodCiclo
					FROM   GA_ABOAMIST
					WHERE  NUM_ABONADO = to_number(nNUM_ABONADO);

				EXCEPTION
					WHEN OTHERS THEN
						 RAISE ERROR_PROCESO;
				END;
			END IF;

			BEGIN
				--Obtener codigo de sistema
				nNumError := 3;
				sMsgError := 'Error, al seleccionar desde ICG_CENTRAL';
				sNOM_TABLA:='ICG_CENTRAL';
				sCOD_ACT:='S';

				SELECT COD_SISTEMA
				INTO   nCodSistema
				FROM   ICG_CENTRAL
				WHERE  cod_producto = 1
				AND	   cod_central = nCodCentral;

				nNumError := 4;
				sMsgError := 'Error, al seleccionar desde GA_SERVSUPL';
				sNOM_TABLA:='GA_SERVSUPL';
				sCOD_ACT:='S';

				SELECT A.COD_SERVSUPL, A.COD_NIVEL
				INTO nCodServSuplNuev, nCodNivelNuev
				FROM GA_SERVSUPL A, ga_servuso b
				WHERE A.COD_SERVICIO=B.COD_SERVICIO
				AND A.COD_SERVICIO=vCOD_SERVICIONUEV
				AND A.COD_PRODUCTO=1
				AND B.COD_USO=nCodUso;

			EXCEPTION
				WHEN OTHERS THEN
					 RAISE ERROR_PROCESO;
			END;

			BEGIN
				-- variable que indica si existe o no el cod_servsupl para el abonado en cuestion
				-- si existe -> ExisteCodServSupl = TRUE
				-- si no existe -> ExisteCodServSupl = FALSE

				ExisteCodServSupl:=TRUE;

				--Obtener cod_servsupl y el cod_nivel del cod_servicio original si es que existe
				nNumError := 5;
				sMsgError := 'Error, al seleccionar desde GA_SERVSUPLABO ';
				sNOM_TABLA:='GA_SERVSUPLABO ';
				sCOD_ACT:='S';

				SELECT COD_SERVSUPL, COD_NIVEL
				INTO nCodServSuplOrig, nCodNivelOrig
				FROM GA_SERVSUPLABO
				WHERE NUM_ABONADO=nNUM_ABONADO
				AND COD_SERVSUPL=nCodServSuplNuev;

			EXCEPTION
				WHEN NO_DATA_FOUND THEN
					 ExisteCodServSupl:=FALSE;
				WHEN OTHERS THEN
					 RAISE ERROR_PROCESO;
			END;

			IF ExisteCodServSupl THEN
				BEGIN
				    -- Desactivar el servicio existente
				    -- Activar el nuevo servicio

				    /*Verificar si el servicio es soportado por el terminal*/
				    /*                      	  	 		   	   	  in              in            in           out   */
				    PV_PR_AD_SERV_SUPLEM_PK.SERV_SOPORT_TERM(vCOD_SERVICIONUEV, vTipTerminal, nCodSistema, iSoportable);

					/********* Rescatar si existe concepto de facturacion asociado al servicio ******************/

					PV_PR_AD_SERV_SUPLEM_PK.EXISTE_CONC_FACT(vCOD_SERVICIONUEV,nCodConcepto);

					IF iSoportable>0 THEN
						nNumError := 6;
						sMsgError := 'Error, al actualizar GA_SERVSUPLABO';
						sNOM_TABLA:='GA_SERVSUPLABO';
						sCOD_ACT:='U';

						UPDATE GA_SERVSUPLABO
						SET FEC_BAJABD = SYSDATE,
						IND_ESTADO = 3
						WHERE NUM_ABONADO = nNUM_ABONADO
						AND COD_SERVSUPL = nCodServSuplOrig
						AND FEC_BAJABD IS NULL;

						nNumError := 7;
						sMsgError := 'Error, al ingresar datos a GA_SERVSUPLABO';
						sNOM_TABLA:='GA_SERVSUPLABO';
						sCOD_ACT:='I';

						INSERT INTO GA_SERVSUPLABO (NUM_ABONADO, COD_SERVICIO, FEC_ALTABD, COD_SERVSUPL, COD_NIVEL,
						NUM_TERMINAL, COD_PRODUCTO,  IND_ESTADO , NOM_USUARORA, COD_CONCEPTO)
						VALUES (nNUM_ABONADO, vCOD_SERVICIONUEV, SYSDATE, nCodServSuplNuev, nCodNivelNuev,
						nNumCelular, 1, 1, USER, nCodConcepto);

						TmpCodServSuplOrig:='00' || nCodServSuplOrig;
						TmpCodNivelOrig:='0000' || nCodNivelOrig;

						vCadenaBorrar:=SUBSTR(TmpCodServSuplOrig,LENGTH(TmpCodServSuplOrig)-1, 2) || SUBSTR(TmpCodNivelOrig,LENGTH(TmpCodNivelOrig)-3,4);

						CONTADOR:=length(vClaseServicio)/6;
						LOOP
							IF CONTADOR>0 THEN
							   IF vCadenaBorrar<>SUBSTR(vClaseServicio,6*CONTADOR-5,6) THEN
							   	  vClaseServicioNuev:=SUBSTR(vClaseServicio,6*CONTADOR-5,6) || vClaseServicioNuev;
							   ELSE
							   	  vClaseServicioNuev:=vCADENANUEV || vClaseServicioNuev;
							   END IF;
							ELSE
								EXIT;
							END IF;
							CONTADOR:=CONTADOR-1;
						END LOOP;

						IF TABLA = 'GA_ABOCEL' THEN
							nNumError := 8;
							sMsgError := 'Error, al actualizar GA_ABOCEL';
							sNOM_TABLA:='GA_ABOCEL';
							sCOD_ACT:='U';

							UPDATE GA_ABOCEL
							SET CLASE_SERVICIO = vClaseServicioNuev
							WHERE NUM_ABONADO=nNUM_ABONADO;
						ELSE
							nNumError := 9;
							sMsgError := 'Error, al actualizar GA_ABOAMIST';
							sNOM_TABLA:='GA_ABOAMIST';
							sCOD_ACT:='U';

							UPDATE GA_ABOAMIST
							SET CLASE_SERVICIO = vClaseServicioNuev
							WHERE NUM_ABONADO=nNUM_ABONADO;
						END IF;

					ELSE
						nNumError := 10;
						sMsgError := 'Error, el servicio no es soportado por el terminal';
						sNOM_TABLA:='';
						sNOM_PROC:='SERV_SOPORT_TERM';
						sCOD_ACT:='E';

						RAISE ERROR_PROCESO;
					END IF;

				EXCEPTION
					WHEN OTHERS THEN
						 RAISE ERROR_PROCESO;
				END;
			ELSE
				BEGIN
				    -- Activar el nuevo servicio

				    /*Verificar si el servicio es soportado por el terminal*/
				    /*                      	  	 		   	   	  in              in            in           out   */
				    PV_PR_AD_SERV_SUPLEM_PK.SERV_SOPORT_TERM(vCOD_SERVICIONUEV, vTipTerminal, nCodSistema, iSoportable);

					/********* Rescatar si existe concepto de facturaci?n asociado al servicio ******************/

					PV_PR_AD_SERV_SUPLEM_PK.EXISTE_CONC_FACT(vCOD_SERVICIONUEV,nCodConcepto);

					IF iSoportable>0 THEN
						nNumError := 11;
						sMsgError := 'Error, al ingresar datos a GA_SERVSUPLABO';
						sNOM_TABLA:='GA_SERVSUPLABO';
						sCOD_ACT:='I';

						INSERT INTO GA_SERVSUPLABO (NUM_ABONADO, COD_SERVICIO, FEC_ALTABD, COD_SERVSUPL, COD_NIVEL,
						NUM_TERMINAL, COD_PRODUCTO,  IND_ESTADO , NOM_USUARORA, COD_CONCEPTO)
						VALUES (nNUM_ABONADO, vCOD_SERVICIONUEV, SYSDATE, nCodServSuplNuev, nCodNivelNuev,
						nNumCelular, 1, 1, USER, nCodConcepto);

						IF TABLA = 'GA_ABOCEL' THEN
							nNumError := 12;
							sMsgError := 'Error, al actualizar GA_ABOCEL';
							sNOM_TABLA:='GA_ABOCEL';
							sCOD_ACT:='U';

							UPDATE GA_ABOCEL
							SET CLASE_SERVICIO = vClaseServicio || vCADENANUEV
							WHERE NUM_ABONADO=nNUM_ABONADO;
						ELSE
							nNumError := 13;
							sMsgError := 'Error, al actualizar GA_ABOAMIST';
							sNOM_TABLA:='GA_ABOAMIST';
							sCOD_ACT:='U';

							UPDATE GA_ABOAMIST
							SET CLASE_SERVICIO = vClaseServicio || vCADENANUEV
							WHERE NUM_ABONADO=nNUM_ABONADO;
						END IF;
					ELSE
						nNumError := 14;
						sMsgError := 'Error, el servicio no es soportado por el terminal';
						sNOM_TABLA:='';
						sNOM_PROC:='SERV_SOPORT_TERM';
						sCOD_ACT:='E';

						RAISE ERROR_PROCESO;
					END IF;

				EXCEPTION
					WHEN OTHERS THEN
						 RAISE ERROR_PROCESO;
				END;
			END IF;

			nCOD_ERROR:=0;
			sMEN_ERROR:='Operacion Exitosa.';

		EXCEPTION
			WHEN ERROR_PROCESO THEN
				BEGIN
					sCOD_SQLCODE:=SQLCODE;
					sCOD_SQLERRM:=SQLERRM;

					ROLLBACK;

					INSERT INTO GA_ERRORES(COD_ACTABO,CODIGO,FEC_ERROR,COD_PRODUCTO,NOM_PROC,
					NOM_TABLA,COD_ACT,COD_SQLCODE,COD_SQLERRM)
					VALUES(vACTUACION, nNUM_ABONADO, SYSDATE, 1, sNOM_PROC, sNOM_TABLA, sCOD_ACT,
					sCOD_SQLCODE, sCOD_SQLERRM);
					COMMIT;
					nCOD_ERROR:=nNumError;
					sMEN_ERROR:=sMsgError;
				END;
		END PV_AD_SS_CLAVE_PR;



END PV_CLAVES_PG;
/
SHOW ERRORS
