CREATE OR REPLACE PACKAGE BODY PV_GEST_LIM_CON_CONSULTAS_PG IS

PROCEDURE PV_GET_DATOS_ABONADO_PR(
                                    EN_NUM_ABONADO        IN GA_ABOCEL.NUM_ABONADO%TYPE,
                                    SC_DATOS_ABONADO      OUT REFCURSOR,
                                    SN_COD_RETORNO        OUT NOCOPY GE_ERRORES_TD.COD_MSGERROR%TYPE,
                                    SV_MENS_RETORNO        OUT NOCOPY GE_ERRORES_TD.DET_MSGERROR%TYPE,
                                    SN_NUM_EVENTO          OUT NOCOPY GE_ERRORES_PG.EVENTO
)
 /*
<DOCUMENTACIÓN
  TIPODOC = "PROCEDIMIENTO">
   <ELEMENTO
      NOMBRE = "PV_GET_DATOS_ABONADO_PR"
      LENGUAJE="PL/SQL"
      FECHA="10-06-2011"
      VERSIÓN="1.0"
      DISEÑADOR="EVERIS"
      PROGRAMADOR="EVERIS"
      AMBIENTE DESARROLLO="BD">
      <RETORNO>NA</RETORNO>
      <DESCRIPCIÓN> OBTIENE DATOS DE ABONADO</DESCRIPCIÓN>
      <PARÁMETROS>
         <ENTRADA>
              <PARAM NOM="EN_NUM_ABONADO" TIPO="NUMBER"> NUMERO DE ABONADO</PARAM>
         </ENTRADA>
         <SALIDA>
            <PARAM NOM="SC_DATOS_ABONADO"  TIPO="CURSOR" >CURSOR CON DATOS DE ABONADO</PARAM>
            <PARAM NOM="SN_COD_RETORNO"  TIPO="NUMERICO" >CÓDIGO DE RETORNO (DESCRIPCIÓN DE ERROR)</PARAM>
            <PARAM NOM="SV_MENS_RETORNO"  TIPO="VARCHAR" >MENSAJE DE RETORNO (CÓDIGO DE ERROR)</PARAM>
            <PARAM NOM="SN_NUM_EVENTO"  TIPO="NUMERICO" >NÚMERO DE EVENTO</PARAM>
         </SALIDA>
      </PARÁMETROS>
   </ELEMENTO>
</DOCUMENTACIÓN>
*/
IS
    LV_DES_ERROR               GE_ERRORES_PG.DESEVENT;
    LV_SSQL                    GE_ERRORES_PG.VQUERY;
    LV_NOMBRE_PROC             STRING(30)   := 'PV_GET_DATOS_ABONADO_PR';
    LV_PKG_PROC                STRING(60)   := GV_PACKAGE||'.'||LV_NOMBRE_PROC;
    LN_NUM_TRANSACC            GA_TRANSACABO.NUM_TRANSACCION%TYPE;
    
    LV_TABLA                   VARCHAR2(20);
    LV_CAMPOS                  VARCHAR2(5000);
    LV_GSFORMATO_SEL2          VARCHAR2(20);
BEGIN

    SN_COD_RETORNO  := 0;
    SV_MENS_RETORNO := 'OK';
    SN_NUM_EVENTO   := 0;

    SELECT VAL_PARAMETRO INTO LV_GSFORMATO_SEL2
    FROM GED_PARAMETROS
    WHERE COD_MODULO = 'GE'
    AND COD_PRODUCTO=1
    AND NOM_PARAMETRO ='FORMATO_SEL2';

    SELECT 'GA_ABOCEL' INTO LV_TABLA 
    FROM GA_ABOCEL
    WHERE NUM_ABONADO = EN_NUM_ABONADO
    UNION
    SELECT 'GA_ABOAMIST' 
    FROM GA_ABOAMIST
    WHERE NUM_ABONADO = EN_NUM_ABONADO;
      

    IF LV_TABLA = 'GA_ABOCEL' THEN
        LV_CAMPOS := '''GA_ABOCEL'', COD_PRODUCTO, COD_CUENTA, COD_SUBCUENTA, '
                || 'COD_CLIENTE, COD_USUARIO, COD_SITUACION, COD_ESTADO, '
                || 'COD_VENDEDOR, COD_VENDEDOR_AGENTE, CLASE_SERVICIO, COD_CARGOBASICO, '
                || 'COD_CREDCON, COD_CREDMOR, COD_LIMCONSUMO, COD_PLANSERV, '
                || 'COD_PLANTARIF, COD_TIPCONTRATO, COD_USO, '
                || 'FEC_ACTCEN, '
                || 'FEC_ALTA, '
                || 'FEC_BAJA, '
                || 'FEC_BAJACEN, '
                || 'FEC_FINCONTRA, '
                || 'FEC_ULTMOD, '
                || 'IND_FACTUR, IND_PROCALTA, IND_PROCEQUI, IND_REHABI, '
                || 'IND_SEGURO, IND_SUSPEN, NOM_USUARORA, NUM_ANEXO, '
                || 'NUM_CONTRATO, NUM_SERIE, NUM_SERIEMEC, PERFIL_ABONADO, '
                || 'COD_CENTRAL, NUM_VENTA, '
                || 'COD_EMPRESA, COD_HOLDING, COD_MODVENTA, COD_CAUSABAJA, '
                || 'COD_CICLO, COD_GRPSERV, '
                || 'FEC_ACEPVENTA, '
                || 'FEC_CUMPLAN, '
                || 'NUM_PERCONTRATO, TIP_PLANTARIF, TIP_TERMINAL, '  
                || 'FEC_CUMPLIMEN, '
                || 'FEC_RECDOCUM, '
                || 'IND_INSGUIAS, NUM_CELULAR, COD_CENTRAL_PLEX, COD_REGION,  '
                || 'COD_PROVINCIA, COD_CIUDAD, IND_PLEXSYS, NUM_CELULAR_PLEX, '
                || 'NUM_SERIEHEX, COD_CELDA, NUM_PERSONAL, COD_CARRIER, '
                || 'COD_OPREDFIJA, IND_PREPAGO, IND_SUPERTEL, NUM_TELEFIJA, '
                || 'COD_VENDEALER, IND_DISP, '''' , IND_EQPRESTADO, '
                || 'FEC_PRORROGA, '
                || 'TO_CHAR(NUM_MIN), ';
    ELSE
        LV_CAMPOS := '''GA_ABOAMIST'', COD_PRODUCTO, COD_CUENTA, COD_SUBCUENTA, '
                || 'COD_CLIENTE, COD_USUARIO, COD_SITUACION, COD_ESTADO, '
                || 'COD_VENDEDOR, COD_VENDEDOR_AGENTE, CLASE_SERVICIO, COD_CARGOBASICO, '
                || 'COD_CREDCON, COD_CREDMOR, COD_LIMCONSUMO, COD_PLANSERV, '
                || 'COD_PLANTARIF, COD_TIPCONTRATO, COD_USO, '
                || 'FEC_ACTCEN, '
                || 'FEC_ALTA, '
                || 'FEC_BAJA, '
                || 'FEC_BAJACEN, '
                || 'FEC_FINCONTRA, '
                || 'FEC_ULTMOD, '
                || 'IND_FACTUR, IND_PROCALTA, IND_PROCEQUI, IND_REHABI, '
                || 'IND_SEGURO, IND_SUSPEN, NOM_USUARORA, '''', '
                || 'NUM_CONTRATO, NUM_SERIE, NUM_SERIEMEC, PERFIL_ABONADO, '
                || 'COD_CENTRAL, NUM_VENTA, '
                || 'COD_EMPRESA, COD_HOLDING, COD_MODVENTA, COD_CAUSABAJA, '
                || 'COD_CICLO, COD_GRPSERV, '
                || 'FEC_ACEPVENTA, '
                || 'FEC_CUMPLAN, '
                || 'NUM_PERCONTRATO, TIP_PLANTARIF, TIP_TERMINAL, '''', '''', '''', NUM_CELULAR, '''', COD_REGION, '
                || 'COD_PROVINCIA, COD_CIUDAD, '''', '''', '
                || 'NUM_SERIEHEX, COD_CELDA, '''', '''', '
                || ''''', '''', '''', '''', '
                || 'COD_VENDEALER, IND_DISP, COD_CLIENTE_DIST, '''', '''',  '''', ';
    END IF;
    LV_CAMPOS := LV_CAMPOS || 'NUM_IMEI, COD_TECNOLOGIA';

    LV_SSQL := 'SELECT '||LV_CAMPOS||' FROM '||LV_TABLA||' WHERE num_abonado = '||EN_NUM_ABONADO;

    OPEN SC_DATOS_ABONADO FOR LV_SSQL;
    

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        SN_COD_RETORNO := 2655;
        IF NOT GE_ERRORES_PG.MENSAJEERROR(SN_COD_RETORNO,SV_MENS_RETORNO) THEN
          SV_MENS_RETORNO := GV_ERROR_NO_CLASIF;
        END IF;
        LV_DES_ERROR := SUBSTR(LV_NOMBRE_PROC || '('||EN_NUM_ABONADO||'); - ' || SQLERRM,1,GN_LARGOERRTEC);
        SV_MENS_RETORNO:=SUBSTR(SV_MENS_RETORNO,1,GN_LARGODESC);
        SN_NUM_EVENTO := GE_ERRORES_PG.GRABARPL(SN_NUM_EVENTO, GV_COD_MODULO, SV_MENS_RETORNO, '1.0', USER, 
        LV_PKG_PROC, LV_SSQL, SN_COD_RETORNO, LV_DES_ERROR );

    WHEN OTHERS THEN
        SN_COD_RETORNO := GV_ERROR_OTHERS;
        IF NOT GE_ERRORES_PG.MENSAJEERROR(SN_COD_RETORNO,SV_MENS_RETORNO) THEN
          SV_MENS_RETORNO := GV_ERROR_NO_CLASIF;
        END IF;
        LV_DES_ERROR := SUBSTR(LV_NOMBRE_PROC || '('||EN_NUM_ABONADO||'); - ' || SQLERRM,1,GN_LARGOERRTEC);
        SV_MENS_RETORNO:=SUBSTR(SV_MENS_RETORNO,1,GN_LARGODESC);
        SN_NUM_EVENTO := GE_ERRORES_PG.GRABARPL(SN_NUM_EVENTO, GV_COD_MODULO, SV_MENS_RETORNO, '1.0', USER, 
        LV_PKG_PROC, LV_SSQL, SN_COD_RETORNO, LV_DES_ERROR );

END PV_GET_DATOS_ABONADO_PR;

PROCEDURE PV_GET_DATOS_SINIESTRO_PR(
                                    EN_NUM_ABONADO        IN GA_ABOCEL.NUM_ABONADO%TYPE,
                                    SC_DATOS_SINIESTRO    OUT REFCURSOR,
                                    SN_COD_RETORNO        OUT NOCOPY GE_ERRORES_TD.COD_MSGERROR%TYPE,
                                    SV_MENS_RETORNO        OUT NOCOPY GE_ERRORES_TD.DET_MSGERROR%TYPE,
                                    SN_NUM_EVENTO          OUT NOCOPY GE_ERRORES_PG.EVENTO
)
 /*
<DOCUMENTACIÓN
  TIPODOC = "PROCEDIMIENTO">
   <ELEMENTO
      NOMBRE = "PV_GET_DATOS_SINIESTRO_PR"
      LENGUAJE="PL/SQL"
      FECHA="10-06-2008"
      VERSIÓN="1.0"
      DISEÑADOR="EVERIS"
      PROGRAMADOR="EVERIS"
      AMBIENTE DESARROLLO="BD">
      <RETORNO>NA</RETORNO>
      <DESCRIPCIÓN> OBTIENE DATOS DEL AVISO DE SINIESTRO</DESCRIPCIÓN>
      <PARÁMETROS>
         <ENTRADA>
              <PARAM NOM="EN_NUM_ABONADO" TIPO="NUMBER"> NUMERO DE ABONADO</PARAM>
         </ENTRADA>
         <SALIDA>
            <PARAM NOM="SC_DATOS_SINIESTRO"  TIPO="CURSOR" >CURSOR CON DATOS DEL AVISO SINIESTRO</PARAM>
            <PARAM NOM="SN_COD_RETORNO"  TIPO="NUMERICO" >CÓDIGO DE RETORNO (DESCRIPCIÓN DE ERROR)</PARAM>
            <PARAM NOM="SV_MENS_RETORNO"  TIPO="VARCHAR" >MENSAJE DE RETORNO (CÓDIGO DE ERROR)</PARAM>
            <PARAM NOM="SN_NUM_EVENTO"  TIPO="NUMERICO" >NÚMERO DE EVENTO</PARAM>
         </SALIDA>
      </PARÁMETROS>
   </ELEMENTO>
</DOCUMENTACIÓN>
*/
IS
    LV_DES_ERROR               GE_ERRORES_PG.DESEVENT;
    LV_SSQL                    GE_ERRORES_PG.VQUERY;
    LV_NOMBRE_PROC             STRING(30)   := 'PV_GET_DATOS_SINIESTRO_PR';
    LV_PKG_PROC                STRING(60)   := GV_PACKAGE||'.'||LV_NOMBRE_PROC;
    LN_NUM_TRANSACC            GA_TRANSACABO.NUM_TRANSACCION%TYPE;
    
    LV_SQL_TERMINAL            VARCHAR2(200);
    LV_TIP_TERMINAL            GA_SINIESTROS.TIP_TERMINAL%TYPE;
    LV_GSFORMATO_SEL2          VARCHAR2(20);
    B_TERMGASIN                BOOLEAN;
BEGIN

    SN_COD_RETORNO  := 0;
    SV_MENS_RETORNO := 'OK';
    SN_NUM_EVENTO   := 0;
    
    LV_SSQL := 'SELECT VAL_PARAMETRO '
            || 'FROM GED_PARAMETROS '
            || 'WHERE COD_MODULO = ''GE'' '
            || 'AND COD_PRODUCTO= 1 '
            || 'AND NOM_PARAMETRO =''FORMATO_SEL2'' ';
    
    SELECT VAL_PARAMETRO INTO LV_GSFORMATO_SEL2
    FROM GED_PARAMETROS
    WHERE COD_MODULO = 'GE'
    AND COD_PRODUCTO=1
    AND NOM_PARAMETRO ='FORMATO_SEL2';
    
    BEGIN
        LV_SSQL := 'SELECT TIP_TERMINAL '
                || 'FROM GA_SINIESTROS WHERE NUM_ABONADO = '||EN_NUM_ABONADO
                || ' AND ROWNUM = 1';
        SELECT TIP_TERMINAL INTO LV_TIP_TERMINAL 
        FROM GA_SINIESTROS WHERE NUM_ABONADO = EN_NUM_ABONADO
        AND ROWNUM = 1;
        B_TERMGASIN := FALSE;
        
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            LV_SSQL := 'SELECT TIP_TERMINAL ' 
                    || 'FROM GA_ABOCEL WHERE NUM_ABONADO = '||EN_NUM_ABONADO
                    || ' AND ROWNUM = 1';
            SELECT TIP_TERMINAL INTO LV_TIP_TERMINAL 
            FROM GA_ABOCEL WHERE NUM_ABONADO = EN_NUM_ABONADO
            AND ROWNUM = 1;
            B_TERMGASIN := TRUE;
    END;

    IF B_TERMGASIN THEN
        LV_SQL_TERMINAL := ' '''|| LV_TIP_TERMINAL ||''' = TIP_TERMINAL(+)';
    ELSE
        LV_SQL_TERMINAL := 'A.TIP_TERMINAL = TIP_TERMINAL(+)';
    END IF;
    

LV_SSQL := 'SELECT A.NUM_SINIESTRO , B.COD_ESTADO, '
        || '(SELECT DES_ESTADO FROM GA_ESTADOSIN WHERE COD_ESTADO = B.COD_ESTADO ) DES_ESTADO, '
        || ' A.COD_CAUSA, ' 
        || '(SELECT DES_CAUSA FROM GA_CAUSINIE WHERE COD_CAUSA = A.COD_CAUSA ) DES_CAUSA, ' 
        || 'TO_CHAR(A.FEC_SINIESTRO,'''||LV_GSFORMATO_SEL2||'''), '
        || 'TO_CHAR(A.FEC_FORMALIZA,'''||LV_GSFORMATO_SEL2||'''), ' 
        || 'TO_CHAR(A.FEC_ANULA,'''||LV_GSFORMATO_SEL2||'''), '
        || 'TO_CHAR(A.FEC_RESTITUC,'''||LV_GSFORMATO_SEL2||'''), '
        || 'A.NUM_CONSTPOL , B.OBS_DETALLE, ' 
        || '(SELECT DES_TERMINAL FROM AL_TIPOS_TERMINALES WHERE '||LV_SQL_TERMINAL||') DES_TERMINAL, A.TIP_TERMINAL '
        || 'FROM GA_SINIESTROS A, GA_DETSINIE B '
        || 'WHERE  A.COD_ESTADO = B.COD_ESTADO '
        || 'AND A.NUM_SINIESTRO = B.NUM_SINIESTRO '
        || 'AND A.COD_PRODUCTO = 1 '
        || 'AND A.NUM_ABONADO = '||EN_NUM_ABONADO||' '
        || 'ORDER BY B.FEC_DETALLE';
        
OPEN SC_DATOS_SINIESTRO FOR LV_SSQL;

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        SN_COD_RETORNO := 100001;
        IF NOT GE_ERRORES_PG.MENSAJEERROR(SN_COD_RETORNO,SV_MENS_RETORNO) THEN
          SV_MENS_RETORNO := GV_ERROR_NO_CLASIF;
        END IF;
        LV_DES_ERROR := SUBSTR(LV_NOMBRE_PROC || '('||EN_NUM_ABONADO||'); - ' || SQLERRM,1,GN_LARGOERRTEC);
        SV_MENS_RETORNO:=SUBSTR(SV_MENS_RETORNO,1,GN_LARGODESC);
        SN_NUM_EVENTO := GE_ERRORES_PG.GRABARPL(SN_NUM_EVENTO, GV_COD_MODULO, SV_MENS_RETORNO, '1.0', USER, 
        LV_PKG_PROC, LV_SSQL, SN_COD_RETORNO, LV_DES_ERROR );

    WHEN OTHERS THEN
        SN_COD_RETORNO := GV_ERROR_OTHERS;
        IF NOT GE_ERRORES_PG.MENSAJEERROR(SN_COD_RETORNO,SV_MENS_RETORNO) THEN
          SV_MENS_RETORNO := GV_ERROR_NO_CLASIF;
        END IF;
        LV_DES_ERROR := SUBSTR(LV_NOMBRE_PROC || '('||EN_NUM_ABONADO||'); - ' || SQLERRM,1,GN_LARGOERRTEC);
        SV_MENS_RETORNO:=SUBSTR(SV_MENS_RETORNO,1,GN_LARGODESC);
        SN_NUM_EVENTO := GE_ERRORES_PG.GRABARPL(SN_NUM_EVENTO, GV_COD_MODULO, SV_MENS_RETORNO, '1.0', USER, 
        LV_PKG_PROC, LV_SSQL, SN_COD_RETORNO, LV_DES_ERROR );

END PV_GET_DATOS_SINIESTRO_PR;

PROCEDURE PV_OBTENER_PARAMETRO_PR(
                                    EV_NOM_PARAMETRO      IN GED_PARAMETROS.NOM_PARAMETRO%TYPE,
                                    EV_COD_MODULO         IN GED_PARAMETROS.COD_MODULO%TYPE,
                                    EN_COD_PRODUCTO       IN GED_PARAMETROS.COD_PRODUCTO%TYPE,
                                    SV_VAL_PARAMETRO      OUT GED_PARAMETROS.VAL_PARAMETRO%TYPE,
                                    SN_COD_RETORNO        OUT NOCOPY GE_ERRORES_TD.COD_MSGERROR%TYPE,
                                    SV_MENS_RETORNO        OUT NOCOPY GE_ERRORES_TD.DET_MSGERROR%TYPE,
                                    SN_NUM_EVENTO          OUT NOCOPY GE_ERRORES_PG.EVENTO
)
 /*
<DOCUMENTACIÓN
  TIPODOC = "PROCEDIMIENTO">
   <ELEMENTO
      NOMBRE = "PV_OBTENER_PARAMETRO_PR"
      LENGUAJE="PL/SQL"
      FECHA="10-03-2011"
      VERSIÓN="1.0"
      DISEÑADOR="EVERIS"
      PROGRAMADOR="EVERIS"
      AMBIENTE DESARROLLO="BD">
      <RETORNO>NA</RETORNO>
      <DESCRIPCIÓN> OBTIENE VALOR DEL PARAMETRO</DESCRIPCIÓN>
      <PARÁMETROS>
         <ENTRADA>
              <PARAM NOM="EV_NOM_PARAMETRO" TIPO="VARCHAR"> NOMBRE DEL PARAMETRO</PARAM>
              <PARAM NOM="EV_COD_MODULO" TIPO="VARCHAR"> CODIGO DE MODULO</PARAM>
              <PARAM NOM="EN_COD_PRODUCTO" TIPO="NUMERIC"> CODIGO PRODUCTO</PARAM>
         </ENTRADA>
         <SALIDA>
            <PARAM NOM="SV_VAL_PARAMETRO"  TIPO="VARCHAR" >CVALOR DEL PARAMETRO</PARAM>
            <PARAM NOM="SN_COD_RETORNO"  TIPO="NUMERICO" >CÓDIGO DE RETORNO (DESCRIPCIÓN DE ERROR)</PARAM>
            <PARAM NOM="SV_MENS_RETORNO"  TIPO="VARCHAR" >MENSAJE DE RETORNO (CÓDIGO DE ERROR)</PARAM>
            <PARAM NOM="SN_NUM_EVENTO"  TIPO="NUMERICO" >NÚMERO DE EVENTO</PARAM>
         </SALIDA>
      </PARÁMETROS>
   </ELEMENTO>
</DOCUMENTACIÓN>
*/
IS
    LV_DES_ERROR               GE_ERRORES_PG.DESEVENT;
    LV_SSQL                    GE_ERRORES_PG.VQUERY;
    LV_NOMBRE_PROC             STRING(30)   := 'PV_OBTENER_PARAMETRO_PR';
    LV_PKG_PROC                STRING(60)   := GV_PACKAGE||'.'||LV_NOMBRE_PROC;
    
    
BEGIN

     SN_COD_RETORNO  := 0;
    SV_MENS_RETORNO := 'OK';
    SN_NUM_EVENTO     := 0;
    
    LV_SSQL  := ' SELECT VAL_PARAMETRO ' 
             || ' FROM GED_PARAMETROS '
             || ' WHERE NOM_PARAMETRO = ''' || EV_NOM_PARAMETRO || '''';

    IF EV_COD_MODULO IS NOT NULL THEN
        
        LV_SSQL := LV_SSQL || ' AND COD_MODULO = ''' || EV_COD_MODULO || '''';
        
    END IF;

    IF EN_COD_PRODUCTO IS NOT NULL THEN
        
        LV_SSQL := LV_SSQL || ' AND COD_PRODUCTO = ''' || EN_COD_PRODUCTO || '''';
        
    END IF;
    
    EXECUTE IMMEDIATE LV_SSQL INTO SV_VAL_PARAMETRO;
    
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        SN_COD_RETORNO := 1;
        IF NOT GE_ERRORES_PG.MENSAJEERROR(SN_COD_RETORNO,SV_MENS_RETORNO) THEN
          SV_MENS_RETORNO := GV_ERROR_NO_CLASIF;
        END IF;
        LV_DES_ERROR := SUBSTR(LV_NOMBRE_PROC || '('''||EV_NOM_PARAMETRO||'''); - ' || SQLERRM,1,GN_LARGOERRTEC);
        SV_MENS_RETORNO:=SUBSTR(SV_MENS_RETORNO,1,GN_LARGODESC);
        SN_NUM_EVENTO := GE_ERRORES_PG.GRABARPL(SN_NUM_EVENTO, GV_COD_MODULO, SV_MENS_RETORNO, '1.0', USER, 
        LV_PKG_PROC, LV_SSQL, SN_COD_RETORNO, LV_DES_ERROR );

    WHEN OTHERS THEN
        SN_COD_RETORNO := GV_ERROR_OTHERS;
        IF NOT GE_ERRORES_PG.MENSAJEERROR(SN_COD_RETORNO,SV_MENS_RETORNO) THEN
          SV_MENS_RETORNO := GV_ERROR_NO_CLASIF;
        END IF;
        LV_DES_ERROR := SUBSTR(LV_NOMBRE_PROC || '('''||EV_NOM_PARAMETRO||'''); - ' || SQLERRM,1,GN_LARGOERRTEC);
        SV_MENS_RETORNO:=SUBSTR(SV_MENS_RETORNO,1,GN_LARGODESC);
        SN_NUM_EVENTO := GE_ERRORES_PG.GRABARPL(SN_NUM_EVENTO, GV_COD_MODULO, SV_MENS_RETORNO, '1.0', USER, 
        LV_PKG_PROC, LV_SSQL, SN_COD_RETORNO, LV_DES_ERROR );

END PV_OBTENER_PARAMETRO_PR;


PROCEDURE PV_GET_DATOS_LIMITE_CONSUMO_PR(
                                    EN_NUM_ABONADO          IN GA_ABOCEL.NUM_ABONADO%TYPE,
                                    SC_DATOS_LIM_CONSUMO    OUT REFCURSOR,
                                    SN_COD_RETORNO          OUT NOCOPY GE_ERRORES_TD.COD_MSGERROR%TYPE,
                                    SV_MENS_RETORNO          OUT NOCOPY GE_ERRORES_TD.DET_MSGERROR%TYPE,
                                    SN_NUM_EVENTO            OUT NOCOPY GE_ERRORES_PG.EVENTO
)
 /*
<DOCUMENTACIÓN
  TIPODOC = "PROCEDIMIENTO">
   <ELEMENTO
      NOMBRE = "PV_GET_DATOS_LIMITE_CONSUMO_PR"
      LENGUAJE="PL/SQL"
      FECHA="10-06-2008"
      VERSIÓN="1.0"
      DISEÑADOR="EVERIS"
      PROGRAMADOR="EVERIS"
      AMBIENTE DESARROLLO="BD">
      <RETORNO>NA</RETORNO>
      <DESCRIPCIÓN>OBTIENE DATOS DEL LIMITE DE CONSUMO</DESCRIPCIÓN>
      <PARÁMETROS>
         <ENTRADA>
              <PARAM NOM="EN_NUM_ABONADO" TIPO="NUMBER"> NUMERO DE ABONADO</PARAM>
         </ENTRADA>
         <SALIDA>
            <PARAM NOM="SC_DATOS_LIM_CONSUMO"  TIPO="CURSOR" >CURSOR CON DATOS DEL LIMITE DE CONSUMO</PARAM>
            <PARAM NOM="SN_COD_RETORNO"  TIPO="NUMERICO" >CÓDIGO DE RETORNO (DESCRIPCIÓN DE ERROR)</PARAM>
            <PARAM NOM="SV_MENS_RETORNO"  TIPO="VARCHAR" >MENSAJE DE RETORNO (CÓDIGO DE ERROR)</PARAM>
            <PARAM NOM="SN_NUM_EVENTO"  TIPO="NUMERICO" >NÚMERO DE EVENTO</PARAM>
         </SALIDA>
      </PARÁMETROS>
   </ELEMENTO>
</DOCUMENTACIÓN>
*/
IS
    LV_DES_ERROR               GE_ERRORES_PG.DESEVENT;
    LV_SSQL                    GE_ERRORES_PG.VQUERY;
    LV_NOMBRE_PROC             STRING(30)   := 'PV_GET_DATOS_LIMITE_CONSUMO_PR';
    LV_PKG_PROC                STRING(60)   := GV_PACKAGE||'.'||LV_NOMBRE_PROC;
    LV_GSFORMATO_SEL2          VARCHAR2(20);
    LN_COUNT                   NUMBER;
    LV_COD_CLIENTE             GA_ABOCEL.COD_CLIENTE%TYPE;
    LV_COD_PLANTARIF           GA_ABOCEL.COD_PLANTARIF%TYPE;
    LV_COD_TIPLAN              TA_PLANTARIF.COD_TIPLAN%TYPE;
    LV_COD_SEGMENTO            GE_CLIENTES.COD_SEGMENTO%TYPE;
    LV_IND_PRIORIDAD            GE_CLIENTES.COD_COLOR%TYPE;    
    
    ERROR_TIPOABON             EXCEPTION;
                    
BEGIN

    SN_COD_RETORNO  := 0;
    SV_MENS_RETORNO := 'OK';
    SN_NUM_EVENTO   := 0;
    
    SELECT VAL_PARAMETRO INTO LV_GSFORMATO_SEL2
    FROM GED_PARAMETROS
    WHERE COD_MODULO = 'GE'
    AND COD_PRODUCTO=1
    AND NOM_PARAMETRO ='FORMATO_SEL2';
    
    
    LV_SSQL:='SELECT COD_CLIENTE,COD_PLANTARIF INTO LV_COD_CLIENTE,LV_COD_PLANTARIF   FROM GA_ABOCEL WHERE NUM_ABONADO=' || EN_NUM_ABONADO;
    
        SELECT   COUNT ( * )
          INTO   LN_COUNT
          FROM   GA_ABOCEL
         WHERE   NUM_ABONADO = EN_NUM_ABONADO;
    
        IF LN_COUNT = 0 THEN
            RAISE ERROR_TIPOABON;
        END IF;
    
        SELECT COD_CLIENTE,COD_PLANTARIF INTO LV_COD_CLIENTE,LV_COD_PLANTARIF   FROM GA_ABOCEL WHERE NUM_ABONADO=EN_NUM_ABONADO;
        
    LV_SSQL:='SELECT COD_TIPLAN FROM TA_PLANTARIF WHERE COD_PLANTARIF=''' || LV_COD_PLANTARIF ||'''';
    
        SELECT COD_TIPLAN INTO LV_COD_TIPLAN FROM TA_PLANTARIF WHERE COD_PLANTARIF=LV_COD_PLANTARIF;
    
    LV_SSQL:='SELECT COD_SEGMENTO,COD_COLOR FROM GE_CLIENTES WHERE COD_CLIENTE=' || LV_COD_CLIENTE;
    
        SELECT COD_SEGMENTO,COD_COLOR INTO LV_COD_SEGMENTO,LV_IND_PRIORIDAD FROM GE_CLIENTES WHERE COD_CLIENTE=LV_COD_CLIENTE;
    
    
    IF LV_COD_TIPLAN <>'2' THEN 
        RAISE ERROR_TIPOABON;       
    ELSE
        LV_SSQL := ' SELECT ' 
            || ' a.cod_limcons ||''-'' ||rownum,' 
            || ' a.descripcion,' 
            || ' c.MTO_CONS,' 
            || ' a.ind_unidades,' 
            || ' a.descripcion || '' '' || b.MTO_MIN  || ''-'' || b.MTO_MAX,' 
            || ' b.ind_default,' 
            || ' TO_CHAR(a.fec_desde,' 
            || ' '''||LV_GSFORMATO_SEL2||'''),' 
            || ' TO_CHAR(a.fec_hasta,' 
            || ' '''||LV_GSFORMATO_SEL2||'''),' 
            || ' b.MTO_MIN ,' 
            || ' b.MTO_MAX ,' 
            || ' b.FLG_CORTE ,' 
            || ' a.imp_limite' 
            || ' FROM ' 
            || '   tol_limite_td a,' 
            || '   tol_limite_plan_td b ,' 
            || '   GA_LIMITE_CLIABO_TO c' 
            || ' WHERE ' 
            || '   c.cod_cliente = ' || LV_COD_CLIENTE || ' AND' 
            || '   c.NUM_ABONADO   = ' ||EN_NUM_ABONADO|| ' and' 
            || '   c.cod_plantarif = '''|| LV_COD_PLANTARIF ||''' AND' 
            || '   SYSDATE BETWEEN c.FEC_DESDE AND' 
            || '   NVL(c.FEC_HASTA,SYSDATE) and' 
            || '   c.COD_LIMCONS= a.cod_limcons and' 
            || '   a.cod_limcons = b.cod_limcons AND' 
            || '   SYSDATE BETWEEN b.fec_desde AND' 
            || '   NVL(b.fec_hasta,SYSDATE) AND' 
            || '   b.cod_plantarif = '''|| LV_COD_PLANTARIF ||''' AND' 
            || '   b.ID_SUBSEGMENTO= '''|| LV_COD_SEGMENTO ||''' AND' 
            || '   b.IND_PRIORIDAD>= TO_NUMBER('''|| LV_IND_PRIORIDAD ||''') AND' 
            || '   rownum=1 ';    
    END IF;                                
        
OPEN SC_DATOS_LIM_CONSUMO FOR LV_SSQL;

EXCEPTION
   WHEN ERROR_TIPOABON THEN
        SN_COD_RETORNO := 100014;
        IF NOT GE_ERRORES_PG.MENSAJEERROR(SN_COD_RETORNO,SV_MENS_RETORNO) THEN
          SV_MENS_RETORNO := GV_ERROR_NO_CLASIF;
        END IF;
        LV_DES_ERROR := SUBSTR(LV_NOMBRE_PROC || '('||EN_NUM_ABONADO||'); - ' || SQLERRM,1,GN_LARGOERRTEC);
        SV_MENS_RETORNO:=SUBSTR(SV_MENS_RETORNO,1,GN_LARGODESC);
        SN_NUM_EVENTO := GE_ERRORES_PG.GRABARPL(SN_NUM_EVENTO, GV_COD_MODULO, SV_MENS_RETORNO, '1.0', USER, 
        LV_PKG_PROC, LV_SSQL, SN_COD_RETORNO, LV_DES_ERROR );
   WHEN NO_DATA_FOUND THEN
        SN_COD_RETORNO := 100002;
        IF NOT GE_ERRORES_PG.MENSAJEERROR(SN_COD_RETORNO,SV_MENS_RETORNO) THEN
          SV_MENS_RETORNO := GV_ERROR_NO_CLASIF;
        END IF;
        LV_DES_ERROR := SUBSTR(LV_NOMBRE_PROC || '('||EN_NUM_ABONADO||'); - ' || SQLERRM,1,GN_LARGOERRTEC);
        SV_MENS_RETORNO:=SUBSTR(SV_MENS_RETORNO,1,GN_LARGODESC);
        SN_NUM_EVENTO := GE_ERRORES_PG.GRABARPL(SN_NUM_EVENTO, GV_COD_MODULO, SV_MENS_RETORNO, '1.0', USER, 
        LV_PKG_PROC, LV_SSQL, SN_COD_RETORNO, LV_DES_ERROR );

    WHEN OTHERS THEN
        SN_COD_RETORNO := GV_ERROR_OTHERS;
        IF NOT GE_ERRORES_PG.MENSAJEERROR(SN_COD_RETORNO,SV_MENS_RETORNO) THEN
          SV_MENS_RETORNO := GV_ERROR_NO_CLASIF;
        END IF;
        LV_DES_ERROR := SUBSTR(LV_NOMBRE_PROC || '('||EN_NUM_ABONADO||'); - ' || SQLERRM,1,GN_LARGOERRTEC);
        SV_MENS_RETORNO:=SUBSTR(SV_MENS_RETORNO,1,GN_LARGODESC);
        SN_NUM_EVENTO := GE_ERRORES_PG.GRABARPL(SN_NUM_EVENTO, GV_COD_MODULO, SV_MENS_RETORNO, '1.0', USER, 
        LV_PKG_PROC, LV_SSQL, SN_COD_RETORNO, LV_DES_ERROR );

END PV_GET_DATOS_LIMITE_CONSUMO_PR;


PROCEDURE PV_GET_DATOS_SEGMENTACION_PR(
                                    COD_CLIENTE          IN  GE_CLIENTES.COD_CLIENTE%TYPE,
                                    SC_DATOS_SEG_CLIE    OUT REFCURSOR,
                                    SN_COD_RETORNO       OUT NOCOPY GE_ERRORES_TD.COD_MSGERROR%TYPE,
                                    SV_MENS_RETORNO       OUT NOCOPY GE_ERRORES_TD.DET_MSGERROR%TYPE,
                                    SN_NUM_EVENTO         OUT NOCOPY GE_ERRORES_PG.EVENTO
)
 /*
<DOCUMENTACIÓN
  TIPODOC = "PROCEDIMIENTO">
   <ELEMENTO
      NOMBRE = "PV_GET_DATOS_SEGMENTACION_CLI_PR
      LENGUAJE="PL/SQL"
      FECHA="10-06-2008"
      VERSIÓN="1.0"
      DISEÑADOR="EVERIS"
      PROGRAMADOR="EVERIS"
      AMBIENTE DESARROLLO="BD">
      <RETORNO>NA</RETORNO>
      <DESCRIPCIÓN>OBTIENE DATOS DE SEGMENTACION DEL CLIENTE</DESCRIPCIÓN>
      <PARÁMETROS>
         <ENTRADA>
              <PARAM NOM="EN_COD_CLIENTE" TIPO="NUMBER"> CODIGO DEL CLIENTE</PARAM>
         </ENTRADA>
         <SALIDA>
            <PARAM NOM="SC_DATOS_SEG_CLIE"  TIPO="CURSOR" >CURSOR CON DATOS SEGMENTACION DEL CLIENTE</PARAM>
            <PARAM NOM="SN_COD_RETORNO"  TIPO="NUMERICO" >CÓDIGO DE RETORNO (DESCRIPCIÓN DE ERROR)</PARAM>
            <PARAM NOM="SV_MENS_RETORNO"  TIPO="VARCHAR" >MENSAJE DE RETORNO (CÓDIGO DE ERROR)</PARAM>
            <PARAM NOM="SN_NUM_EVENTO"  TIPO="NUMERICO" >NÚMERO DE EVENTO</PARAM>
         </SALIDA>
      </PARÁMETROS>
   </ELEMENTO>
</DOCUMENTACIÓN>
*/
IS
    LV_DES_ERROR               GE_ERRORES_PG.DESEVENT;
    LV_SSQL                    GE_ERRORES_PG.VQUERY;
    LV_NOMBRE_PROC             STRING(30)   := 'PV_GET_DATOS_SEGMENTACION_PR';
    LV_PKG_PROC                STRING(60)   := GV_PACKAGE||'.'||LV_NOMBRE_PROC;
    LV_COD_CLIENTE                GA_ABOCEL.COD_CLIENTE%TYPE;
    LV_COD_PLANTARIF             GA_ABOCEL.COD_PLANTARIF%TYPE;
    LV_COD_TIPLAN               TA_PLANTARIF.COD_TIPLAN%TYPE;                
BEGIN

     SN_COD_RETORNO  := 0;
    SV_MENS_RETORNO := 'OK';
    SN_NUM_EVENTO     := 0;
    
       
    LV_SSQL := ' SELECT '
    || '   A.COD_COLOR,'
    || '   B.DES_COLOR,'
    || '   A.COD_SEGMENTO,'
    || '   C.DES_SEGMENTO'
    || ' FROM '
    || '   GE_CLIENTES A,'
    || '   GE_COLOR_TD B,'
    || '   GE_SEGMENTACION_CLIENTES_TD C'
    || ' WHERE '
    || '   A.COD_CLIENTE = ' || COD_CLIENTE || ' AND'
    || '   A.COD_COLOR = B.COD_COLOR  AND'
    || '   B.IND_VIGENCIA = ''S''  AND'
    || '   A.COD_SEGMENTO = C.COD_SEGMENTO  AND'
    || '   ROWNUM=1';

    
OPEN SC_DATOS_SEG_CLIE FOR LV_SSQL;

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        SN_COD_RETORNO := 2690;
        IF NOT GE_ERRORES_PG.MENSAJEERROR(SN_COD_RETORNO,SV_MENS_RETORNO) THEN
          SV_MENS_RETORNO := GV_ERROR_NO_CLASIF;
        END IF;
        LV_DES_ERROR := SUBSTR(LV_NOMBRE_PROC || '('||COD_CLIENTE||'); - ' || SQLERRM,1,GN_LARGOERRTEC);
        SV_MENS_RETORNO:=SUBSTR(SV_MENS_RETORNO,1,GN_LARGODESC);
        SN_NUM_EVENTO := GE_ERRORES_PG.GRABARPL(SN_NUM_EVENTO, GV_COD_MODULO, SV_MENS_RETORNO, '1.0', USER, 
        LV_PKG_PROC, LV_SSQL, SN_COD_RETORNO, LV_DES_ERROR );

    WHEN OTHERS THEN
        SN_COD_RETORNO := GV_ERROR_OTHERS;
        IF NOT GE_ERRORES_PG.MENSAJEERROR(SN_COD_RETORNO,SV_MENS_RETORNO) THEN
          SV_MENS_RETORNO := GV_ERROR_NO_CLASIF;
        END IF;
        LV_DES_ERROR := SUBSTR(LV_NOMBRE_PROC || '('||COD_CLIENTE||'); - ' || SQLERRM,1,GN_LARGOERRTEC);
        SV_MENS_RETORNO:=SUBSTR(SV_MENS_RETORNO,1,GN_LARGODESC);
        SN_NUM_EVENTO := GE_ERRORES_PG.GRABARPL(SN_NUM_EVENTO, GV_COD_MODULO, SV_MENS_RETORNO, '1.0', USER, 
        LV_PKG_PROC, LV_SSQL, SN_COD_RETORNO, LV_DES_ERROR );

END  PV_GET_DATOS_SEGMENTACION_PR;  



PROCEDURE PV_GET_DATOS_PLANTARIF_PR(
                                    EN_COD_PLANTARIF          IN TA_PLANTARIF.COD_PLANTARIF%TYPE,
                                    SC_DATOS_PLANTARIF   OUT REFCURSOR,
                                    SN_COD_RETORNO       OUT NOCOPY GE_ERRORES_TD.COD_MSGERROR%TYPE,
                                    SV_MENS_RETORNO       OUT NOCOPY GE_ERRORES_TD.DET_MSGERROR%TYPE,
                                    SN_NUM_EVENTO         OUT NOCOPY GE_ERRORES_PG.EVENTO
)
 /*
<DOCUMENTACIÓN
  TIPODOC = "PROCEDIMIENTO">
   <ELEMENTO
      NOMBRE = "PV_GET_DATOS_PLANTARIF_PR" 
      LENGUAJE="PL/SQL"
      FECHA="10-06-2008"
      VERSIÓN="1.0"
      DISEÑADOR="EVERIS"
      PROGRAMADOR="EVERIS"
      AMBIENTE DESARROLLO="BD">
      <RETORNO>NA</RETORNO>
      <DESCRIPCIÓN>OBTIENE DATOS DEL PLAN TARIFARIO</DESCRIPCIÓN>
      <PARÁMETROS>
         <ENTRADA>
              <PARAM NOM="EN_COD_PLANTARIF" TIPO="NUMBER"> CODIGO DEL PLAN TARIFARIO</PARAM>
         </ENTRADA>
         <SALIDA>
            <PARAM NOM="SC_DATOS_PLANTARIF"  TIPO="CURSOR" >CURSOR CON DATOS SEGMENTACION DEL CLIENTE</PARAM>
            <PARAM NOM="SN_COD_RETORNO"  TIPO="NUMERICO" >CÓDIGO DE RETORNO (DESCRIPCIÓN DE ERROR)</PARAM>
            <PARAM NOM="SV_MENS_RETORNO"  TIPO="VARCHAR" >MENSAJE DE RETORNO (CÓDIGO DE ERROR)</PARAM>
            <PARAM NOM="SN_NUM_EVENTO"  TIPO="NUMERICO" >NÚMERO DE EVENTO</PARAM>
         </SALIDA>
      </PARÁMETROS>
   </ELEMENTO>
</DOCUMENTACIÓN>
*/
IS
    LV_DES_ERROR               GE_ERRORES_PG.DESEVENT;
    LV_SSQL                    GE_ERRORES_PG.VQUERY;
    LV_NOMBRE_PROC             STRING(30)   := 'PV_GET_DATOS_PLANTARIF_PR';
    LV_PKG_PROC                STRING(60)   := GV_PACKAGE||'.'||LV_NOMBRE_PROC;
BEGIN

     SN_COD_RETORNO  := 0;
    SV_MENS_RETORNO := 'OK';
    SN_NUM_EVENTO     := 0;
    
       
    LV_SSQL := ' SELECT '
              || 'UPPER(DES_PLANTARIF),'
              || 'TIP_TERMINAL,'
              || 'COD_LIMCONSUMO,'
              || 'COD_CARGOBASICO,'
              || 'TIP_PLANTARIF,'
              || 'COD_TIPLAN '
              || 'FROM '
              || 'TA_PLANTARIF '
              || 'WHERE '
              || 'COD_PLANTARIF='''||EN_COD_PLANTARIF||'''';

    
OPEN SC_DATOS_PLANTARIF FOR LV_SSQL;

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        SN_COD_RETORNO := 1374;
        IF NOT GE_ERRORES_PG.MENSAJEERROR(SN_COD_RETORNO,SV_MENS_RETORNO) THEN
          SV_MENS_RETORNO := GV_ERROR_NO_CLASIF;
        END IF;
        LV_DES_ERROR := SUBSTR(LV_NOMBRE_PROC || '('||EN_COD_PLANTARIF||'); - ' || SQLERRM,1,GN_LARGOERRTEC);
        SV_MENS_RETORNO:=SUBSTR(SV_MENS_RETORNO,1,GN_LARGODESC);
        SN_NUM_EVENTO := GE_ERRORES_PG.GRABARPL(SN_NUM_EVENTO, GV_COD_MODULO, SV_MENS_RETORNO, '1.0', USER, 
        LV_PKG_PROC, LV_SSQL, SN_COD_RETORNO, LV_DES_ERROR );

    WHEN OTHERS THEN
        SN_COD_RETORNO := GV_ERROR_OTHERS;
        IF NOT GE_ERRORES_PG.MENSAJEERROR(SN_COD_RETORNO,SV_MENS_RETORNO) THEN
          SV_MENS_RETORNO := GV_ERROR_NO_CLASIF;
        END IF;
        LV_DES_ERROR := SUBSTR(LV_NOMBRE_PROC || '('||EN_COD_PLANTARIF||'); - ' || SQLERRM,1,GN_LARGOERRTEC);
        SV_MENS_RETORNO:=SUBSTR(SV_MENS_RETORNO,1,GN_LARGODESC);
        SN_NUM_EVENTO := GE_ERRORES_PG.GRABARPL(SN_NUM_EVENTO, GV_COD_MODULO, SV_MENS_RETORNO, '1.0', USER, 
        LV_PKG_PROC, LV_SSQL, SN_COD_RETORNO, LV_DES_ERROR );

END  PV_GET_DATOS_PLANTARIF_PR; 



PROCEDURE PV_GET_DATOS_LIMCONSUMO_PR(
                                    EN_COD_CLIENTE       IN GE_CLIENTES.COD_CLIENTE%TYPE,
                                    EN_NUM_ABONADO       IN GA_ABOCEL.NUM_ABONADO%TYPE,
                                    SC_DATOS_LIMCONSUMO  OUT REFCURSOR,
                                    SN_COD_RETORNO       OUT NOCOPY GE_ERRORES_TD.COD_MSGERROR%TYPE,
                                    SV_MENS_RETORNO       OUT NOCOPY GE_ERRORES_TD.DET_MSGERROR%TYPE,
                                    SN_NUM_EVENTO         OUT NOCOPY GE_ERRORES_PG.EVENTO
)
 /*
<DOCUMENTACIÓN
  TIPODOC = "PROCEDIMIENTO">
   <ELEMENTO
      NOMBRE = "PV_GET_DATOS_LIMCONSUMO_PR" 
      LENGUAJE="PL/SQL"
      FECHA="10-06-2008"
      VERSIÓN="1.0"
      DISEÑADOR="EVERIS"
      PROGRAMADOR="EVERIS"
      AMBIENTE DESARROLLO="BD">
      <RETORNO>NA</RETORNO>
      <DESCRIPCIÓN>OBTIENE DATOS DEL LIMITE DE CONSUMO</DESCRIPCIÓN>
      <PARÁMETROS>
         <ENTRADA>
              <PARAM NOM="EN_COD_CLIENTE" TIPO="NUMBER"> CODIGO DEL CLIENTE</PARAM>
              <PARAM NOM="EN_NUM_ABONADO" TIPO="NUMBER"> NUMERO DEL ABONADO</PARAM>              
         </ENTRADA>
         <SALIDA>
            <PARAM NOM="SC_DATOS_LIMCONSUMO"  TIPO="CURSOR" >CURSOR CON DATOS SEGMENTACION DEL CLIENTE</PARAM>
            <PARAM NOM="SN_COD_RETORNO"  TIPO="NUMERICO" >CÓDIGO DE RETORNO (DESCRIPCIÓN DE ERROR)</PARAM>
            <PARAM NOM="SV_MENS_RETORNO"  TIPO="VARCHAR" >MENSAJE DE RETORNO (CÓDIGO DE ERROR)</PARAM>
            <PARAM NOM="SN_NUM_EVENTO"  TIPO="NUMERICO" >NÚMERO DE EVENTO</PARAM>
         </SALIDA>
      </PARÁMETROS>
   </ELEMENTO>
</DOCUMENTACIÓN>
*/
IS
    LV_DES_ERROR               GE_ERRORES_PG.DESEVENT;
    LV_SSQL                    GE_ERRORES_PG.VQUERY;
    LV_NOMBRE_PROC             STRING(30)   := 'PV_GET_DATOS_LIMCONSUMO_PR';
    LV_PKG_PROC                STRING(60)   := GV_PACKAGE||'.'||LV_NOMBRE_PROC;
BEGIN

     SN_COD_RETORNO  := 0;
    SV_MENS_RETORNO := 'OK';
    SN_NUM_EVENTO     := 0;
    
       
        LV_SSQL := ' SELECT '
              || '  B.COD_LIMCONS, '
              || '  C.DESCRIPCION, '
              || '  C.COD_UMBRAL_MIN, '
              || '  D.DES_UMBRAL '
              || 'FROM  '
              || '  GA_LIMITE_CLIABO_TO B, '
              || '  TOL_LIMITE_TD C, '
              || '  TOL_UMBRAL_TD D '
              || 'WHERE  '
              || '  B.NUM_ABONADO = '||EN_NUM_ABONADO||' AND '
              || '  B.COD_CLIENTE = '||EN_COD_CLIENTE||' AND '
              || '  B.COD_LIMCONS = C.COD_LIMCONS AND '
              || '  C.COD_UMBRAL_MIN = D.COD_UMBRAL AND '
              || '  B.fec_desde <= SYSDATE AND '
              || '  nvl(B.fec_hasta,sysdate+1) >= SYSDATE AND '
              || '  C.fec_desde <= SYSDATE AND '
              || '  nvl(C.fec_hasta,sysdate+1) >= SYSDATE ';


OPEN SC_DATOS_LIMCONSUMO 
FOR 
      SELECT 
        B.COD_LIMCONS, 
        C.DESCRIPCION, 
        C.COD_UMBRAL_MIN, 
        D.DES_UMBRAL 
      FROM  
        GA_LIMITE_CLIABO_TO B, 
        TOL_LIMITE_TD C, 
        TOL_UMBRAL_TD D 
      WHERE  
        B.NUM_ABONADO = EN_NUM_ABONADO AND 
        B.COD_CLIENTE = EN_COD_CLIENTE AND 
        B.COD_LIMCONS = C.COD_LIMCONS AND 
        C.COD_UMBRAL_MIN = D.COD_UMBRAL AND 
        B.FEC_DESDE <= SYSDATE AND 
        NVL(B.FEC_HASTA,SYSDATE+1) >= SYSDATE AND 
        C.FEC_DESDE <= SYSDATE AND 
        NVL(C.FEC_HASTA,SYSDATE+1) >= SYSDATE;


EXCEPTION
    WHEN NO_DATA_FOUND THEN
        SN_COD_RETORNO := 100003;
        IF NOT GE_ERRORES_PG.MENSAJEERROR(SN_COD_RETORNO,SV_MENS_RETORNO) THEN
          SV_MENS_RETORNO := GV_ERROR_NO_CLASIF;
        END IF;
        LV_DES_ERROR := SUBSTR(LV_NOMBRE_PROC || '('||EN_NUM_ABONADO||'); - ' || SQLERRM,1,GN_LARGOERRTEC);
        SV_MENS_RETORNO:=SUBSTR(SV_MENS_RETORNO,1,GN_LARGODESC);
        SN_NUM_EVENTO := GE_ERRORES_PG.GRABARPL(SN_NUM_EVENTO, GV_COD_MODULO, SV_MENS_RETORNO, '1.0', USER, 
        LV_PKG_PROC, LV_SSQL, SN_COD_RETORNO, LV_DES_ERROR );

    WHEN OTHERS THEN
        SN_COD_RETORNO := GV_ERROR_OTHERS;
        IF NOT GE_ERRORES_PG.MENSAJEERROR(SN_COD_RETORNO,SV_MENS_RETORNO) THEN
          SV_MENS_RETORNO := GV_ERROR_NO_CLASIF;
        END IF;
        LV_DES_ERROR := SUBSTR(LV_NOMBRE_PROC || '('||EN_NUM_ABONADO||'); - ' || SQLERRM,1,GN_LARGOERRTEC);
        SV_MENS_RETORNO:=SUBSTR(SV_MENS_RETORNO,1,GN_LARGODESC);
        SN_NUM_EVENTO := GE_ERRORES_PG.GRABARPL(SN_NUM_EVENTO, GV_COD_MODULO, SV_MENS_RETORNO, '1.0', USER, 
        LV_PKG_PROC, LV_SSQL, SN_COD_RETORNO, LV_DES_ERROR );

END  PV_GET_DATOS_LIMCONSUMO_PR; 


PROCEDURE PV_GET_LIM_CON_UTILIZADO_PR(
                                    EN_COD_CLIENTE        IN GA_ABOCEL.COD_CLIENTE%TYPE,
                                    EN_NUM_ABONADO        IN GA_ABOCEL.NUM_ABONADO%TYPE,
                                    EV_COD_UMBRAL_MIN     IN TOL_LIMITE_TD.COD_UMBRAL_MIN%TYPE, 
                                    EN_COD_CICLO          IN GA_ABOCEL.COD_CICLO%TYPE,
                                    SN_NIV_CONSUMO        OUT TOL_ACUMULA_TO.NIV_CONSUMO%TYPE,
                                    SN_COD_RETORNO        OUT NOCOPY GE_ERRORES_TD.COD_MSGERROR%TYPE,
                                    SV_MENS_RETORNO        OUT NOCOPY GE_ERRORES_TD.DET_MSGERROR%TYPE,
                                    SN_NUM_EVENTO          OUT NOCOPY GE_ERRORES_PG.EVENTO
)
/*
<DOCUMENTACIÓN
  TIPODOC = "PROCEDIMIENTO">
   <ELEMENTO
      NOMBRE = "PV_GET_LIM_CON_UTILIZADO_PR" 
      LENGUAJE="PL/SQL"
      FECHA="18-03-2011"
      VERSIÓN="1.0"
      DISEÑADOR="EVERIS"
      PROGRAMADOR="EVERIS"
      AMBIENTE DESARROLLO="BD">
      <RETORNO>NA</RETORNO>
      <DESCRIPCIÓN>OBTIENE EL LIMITE DE CONSUMO UTILIZADO</DESCRIPCIÓN>
      <PARÁMETROS>
         <ENTRADA>
              <PARAM NOM="EN_COD_CLIENTE" TIPO="NUMBER"> CODIGO DEL CLIENTE</PARAM>
              <PARAM NOM="EN_NUM_ABONADO" TIPO="NUMBER"> NUMERO DEL ABONADO</PARAM>
              <PARAM NOM="EV_COD_UMBRAL_MIN" TIPO="VARCHAR"> CODIGO DE UMBRAL</PARAM>
              <PARAM NOM="EN_COD_CICLO" TIPO="NUMBER"> CODIGO DE CICLO DE FACTURACION</PARAM>              
         </ENTRADA>
         <SALIDA>
            <PARAM NOM="SN_NIV_CONSUMO"  TIPO="NUMBER" >MONTO DEL LIMITE DE CONSUMO UTILIZADO</PARAM>
            <PARAM NOM="SN_COD_RETORNO"  TIPO="NUMERICO" >CÓDIGO DE RETORNO (DESCRIPCIÓN DE ERROR)</PARAM>
            <PARAM NOM="SV_MENS_RETORNO"  TIPO="VARCHAR" >MENSAJE DE RETORNO (CÓDIGO DE ERROR)</PARAM>
            <PARAM NOM="SN_NUM_EVENTO"  TIPO="NUMERICO" >NÚMERO DE EVENTO</PARAM>
         </SALIDA>
      </PARÁMETROS>
   </ELEMENTO>
</DOCUMENTACIÓN>
*/
IS
    LV_DES_ERROR               GE_ERRORES_PG.DESEVENT;
    LV_SSQL                    GE_ERRORES_PG.VQUERY;
    LV_NOMBRE_PROC             STRING(30)   := 'PV_GET_LIM_CON_UTILIZADO_PR';
    LV_PKG_PROC                STRING(60)   := GV_PACKAGE||'.'||LV_NOMBRE_PROC;
    
    LN_COD_CICLOFACT           FA_CICLFACT.COD_CICLFACT%TYPE;
    
    ERROR_SIN_CICLO            EXCEPTION;
    
BEGIN

     SN_COD_RETORNO  := 0;
    SV_MENS_RETORNO := 'OK';
    SN_NUM_EVENTO     := 0;
                         
    BEGIN           
    
        LV_SSQL := ' SELECT COD_CICLFACT '
                  || '  INTO LN_COD_CICLOFACT '
                  || '  FROM FA_CICLFACT '
                  || '  WHERE COD_CICLO = (SELECT COD_CICLO FROM GE_CLIENTES WHERE COD_CLIENTE = ' || EN_COD_CLIENTE || ') '
                  || '  AND SYSDATE BETWEEN FEC_DESDELLAM AND FEC_HASTALLAM ';

        SELECT COD_CICLFACT
        INTO LN_COD_CICLOFACT
        FROM FA_CICLFACT
        WHERE COD_CICLO = (SELECT COD_CICLO FROM GE_CLIENTES WHERE COD_CLIENTE = EN_COD_CLIENTE)
              AND SYSDATE BETWEEN FEC_DESDELLAM AND FEC_HASTALLAM;
          
    EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
         
            RAISE ERROR_SIN_CICLO;
    END;

    LV_SSQL := ' ge_limite_consumo_utilizado_fn( '
              ||   EN_COD_CLIENTE || ', '
              ||   EN_NUM_ABONADO || ', '
              ||   EV_COD_UMBRAL_MIN || ', '
              ||   EN_COD_CICLO || ', '
              ||   LN_COD_CICLOFACT || ') ';
          
    SN_NIV_CONSUMO := GE_LIMITE_CONSUMO_UTILIZADO_FN(EN_COD_CLIENTE,
                                                      EN_NUM_ABONADO ,
                                                      EV_COD_UMBRAL_MIN, 
                                                      EN_COD_CICLO,
                                                      LN_COD_CICLOFACT);

    

EXCEPTION

    WHEN ERROR_SIN_CICLO THEN
        SN_COD_RETORNO := 1411;
        SV_MENS_RETORNO := 'Error al obtener Codigo Ciclo de Facturacion del Abonado';
        IF NOT GE_ERRORES_PG.MENSAJEERROR(SN_COD_RETORNO,SV_MENS_RETORNO) THEN
          SV_MENS_RETORNO := GV_ERROR_NO_CLASIF;
        END IF;
        LV_DES_ERROR := SUBSTR(LV_NOMBRE_PROC || '('||EN_COD_CLIENTE||' , '||EN_NUM_ABONADO||' , '||EV_COD_UMBRAL_MIN||' , '||EN_COD_CICLO||'); - ' || SQLERRM,1,GN_LARGOERRTEC);
        SV_MENS_RETORNO:=SUBSTR(SV_MENS_RETORNO,1,GN_LARGODESC);
        SN_NUM_EVENTO := GE_ERRORES_PG.GRABARPL(SN_NUM_EVENTO, GV_COD_MODULO, SV_MENS_RETORNO, '1.0', USER, 
        LV_PKG_PROC, LV_SSQL, SN_COD_RETORNO, LV_DES_ERROR );
        
    WHEN NO_DATA_FOUND THEN
        SN_COD_RETORNO := 100004;
        IF NOT GE_ERRORES_PG.MENSAJEERROR(SN_COD_RETORNO,SV_MENS_RETORNO) THEN
          SV_MENS_RETORNO := GV_ERROR_NO_CLASIF;
        END IF;
        LV_DES_ERROR := SUBSTR(LV_NOMBRE_PROC || '('||EN_COD_CLIENTE||' , '||EN_NUM_ABONADO||' , '||EV_COD_UMBRAL_MIN||' , '||EN_COD_CICLO||'); - ' || SQLERRM,1,GN_LARGOERRTEC);
        SV_MENS_RETORNO:=SUBSTR(SV_MENS_RETORNO,1,GN_LARGODESC);
        SN_NUM_EVENTO := GE_ERRORES_PG.GRABARPL(SN_NUM_EVENTO, GV_COD_MODULO, SV_MENS_RETORNO, '1.0', USER, 
        LV_PKG_PROC, LV_SSQL, SN_COD_RETORNO, LV_DES_ERROR );

    WHEN OTHERS THEN
        SN_COD_RETORNO := GV_ERROR_OTHERS;
        IF NOT GE_ERRORES_PG.MENSAJEERROR(SN_COD_RETORNO,SV_MENS_RETORNO) THEN
          SV_MENS_RETORNO := GV_ERROR_NO_CLASIF;
        END IF;
        LV_DES_ERROR := SUBSTR(LV_NOMBRE_PROC || '('||EN_COD_CLIENTE||' , '||EN_NUM_ABONADO||' , '||EV_COD_UMBRAL_MIN||' , '||EN_COD_CICLO||'); - ' || SQLERRM,1,GN_LARGOERRTEC);
        SV_MENS_RETORNO:=SUBSTR(SV_MENS_RETORNO,1,GN_LARGODESC);
        SN_NUM_EVENTO := GE_ERRORES_PG.GRABARPL(SN_NUM_EVENTO, GV_COD_MODULO, SV_MENS_RETORNO, '1.0', USER, 
        LV_PKG_PROC, LV_SSQL, SN_COD_RETORNO, LV_DES_ERROR );
        
END  PV_GET_LIM_CON_UTILIZADO_PR; 


PROCEDURE PV_GET_DESC_GRUPO_TECNO_PR(
                                    EV_COD_TECNOLOGIA     IN GA_ABOCEL.COD_TECNOLOGIA%TYPE,
                                    SV_DES_GRUPO          OUT AL_GRUPO_TECNOLOGIA_TD.DES_GRUPO%TYPE,
                                    SN_COD_RETORNO        OUT NOCOPY GE_ERRORES_TD.COD_MSGERROR%TYPE,
                                    SV_MENS_RETORNO        OUT NOCOPY GE_ERRORES_TD.DET_MSGERROR%TYPE,
                                    SN_NUM_EVENTO          OUT NOCOPY GE_ERRORES_PG.EVENTO
)
/*
<DOCUMENTACIÓN
  TIPODOC = "PROCEDIMIENTO">
   <ELEMENTO
      NOMBRE = "PV_GET_DESC_GRUPO_TECNO_PR" 
      LENGUAJE="PL/SQL"
      FECHA="18-03-2011"
      VERSIÓN="1.0"
      DISEÑADOR="EVERIS"
      PROGRAMADOR="EVERIS"
      AMBIENTE DESARROLLO="BD">
      <RETORNO>NA</RETORNO>
      <DESCRIPCIÓN>OBTIENE LA DESCRIPCION DE LA SITUACION DEL ABONADO</DESCRIPCIÓN>
      <PARÁMETROS>
         <ENTRADA>
              <PARAM NOM="EV_COD_TECNOLOGIA TIPO="VARCHAR"> CODIGO DE TECNOLOGIA</PARAM>              
         </ENTRADA>
         <SALIDA>
            <PARAM NOM="SV_DES_GRUPO"  TIPO="VARCHAR" >DESCRIPCION DEL GRUPO TECNOLOGICO</PARAM>
            <PARAM NOM="SN_COD_RETORNO"  TIPO="NUMERICO" >CÓDIGO DE RETORNO (DESCRIPCIÓN DE ERROR)</PARAM>
            <PARAM NOM="SV_MENS_RETORNO"  TIPO="VARCHAR" >MENSAJE DE RETORNO (CÓDIGO DE ERROR)</PARAM>
            <PARAM NOM="SN_NUM_EVENTO"  TIPO="NUMERICO" >NÚMERO DE EVENTO</PARAM>
         </SALIDA>
      </PARÁMETROS>
   </ELEMENTO>
</DOCUMENTACIÓN>
*/
IS
    LV_DES_ERROR               GE_ERRORES_PG.DESEVENT;
    LV_SSQL                    GE_ERRORES_PG.VQUERY;
    LV_NOMBRE_PROC             STRING(30)   := 'PV_GET_DESC_GRUPO_TECNO_PR';
    LV_PKG_PROC                STRING(60)   := GV_PACKAGE||'.'||LV_NOMBRE_PROC;
    
BEGIN

     SN_COD_RETORNO  := 0;
    SV_MENS_RETORNO := 'OK';
    SN_NUM_EVENTO     := 0;
                               

     LV_SSQL := ' SELECT DES_GRUPO '
              || ' FROM AL_GRUPO_TECNOLOGIA_TD '
              || ' WHERE  COD_GRUPO = ' || EV_COD_TECNOLOGIA;
        
     SELECT DES_GRUPO
     INTO SV_DES_GRUPO
     FROM AL_GRUPO_TECNOLOGIA_TD
     WHERE  COD_GRUPO = EV_COD_TECNOLOGIA;
          

EXCEPTION
        
    WHEN NO_DATA_FOUND THEN
        SN_COD_RETORNO := 1363;
        IF NOT GE_ERRORES_PG.MENSAJEERROR(SN_COD_RETORNO,SV_MENS_RETORNO) THEN
          SV_MENS_RETORNO := GV_ERROR_NO_CLASIF;
        END IF;
        LV_DES_ERROR := SUBSTR(LV_NOMBRE_PROC || '('||EV_COD_TECNOLOGIA||'); - ' || SQLERRM,1,GN_LARGOERRTEC);
        SV_MENS_RETORNO:=SUBSTR(SV_MENS_RETORNO,1,GN_LARGODESC);
        SN_NUM_EVENTO := GE_ERRORES_PG.GRABARPL(SN_NUM_EVENTO, GV_COD_MODULO, SV_MENS_RETORNO, '1.0', USER, 
        LV_PKG_PROC, LV_SSQL, SN_COD_RETORNO, LV_DES_ERROR );

    WHEN OTHERS THEN
        SN_COD_RETORNO := GV_ERROR_OTHERS;
        IF NOT GE_ERRORES_PG.MENSAJEERROR(SN_COD_RETORNO,SV_MENS_RETORNO) THEN
          SV_MENS_RETORNO := GV_ERROR_NO_CLASIF;
        END IF;
        LV_DES_ERROR := SUBSTR(LV_NOMBRE_PROC || '('||EV_COD_TECNOLOGIA||'); - ' || SQLERRM,1,GN_LARGOERRTEC);
        SV_MENS_RETORNO:=SUBSTR(SV_MENS_RETORNO,1,GN_LARGODESC);
        SN_NUM_EVENTO := GE_ERRORES_PG.GRABARPL(SN_NUM_EVENTO, GV_COD_MODULO, SV_MENS_RETORNO, '1.0', USER, 
        LV_PKG_PROC, LV_SSQL, SN_COD_RETORNO, LV_DES_ERROR );
        
END PV_GET_DESC_GRUPO_TECNO_PR; 


PROCEDURE PV_GET_DESC_SITUACION_PR(
                                EV_COD_SITUACION      IN GA_ABOCEL.COD_SITUACION%TYPE,
                                SV_DES_SITUACION      OUT GA_SITUABO.DES_SITUACION%TYPE,
                                SN_COD_RETORNO        OUT NOCOPY GE_ERRORES_TD.COD_MSGERROR%TYPE,
                                SV_MENS_RETORNO        OUT NOCOPY GE_ERRORES_TD.DET_MSGERROR%TYPE,
                                SN_NUM_EVENTO          OUT NOCOPY GE_ERRORES_PG.EVENTO
)
/*
<DOCUMENTACIÓN
  TIPODOC = "PROCEDIMIENTO">
   <ELEMENTO
      NOMBRE = "PV_GET_DESC_SITUACION_PR" 
      LENGUAJE="PL/SQL"
      FECHA="18-03-2011"
      VERSIÓN="1.0"
      DISEÑADOR="EVERIS"
      PROGRAMADOR="EVERIS"
      AMBIENTE DESARROLLO="BD">
      <RETORNO>NA</RETORNO>
      <DESCRIPCIÓN>OBTIENE LA DESCRIPCION DE LA SITUACION DEL ABONADO</DESCRIPCIÓN>
      <PARÁMETROS>
         <ENTRADA>
              <PARAM NOM="EV_COD_SITUACION" TIPO="VARCHAR"> CODIGO DE SITUACION DEL ABONADO</PARAM>              
         </ENTRADA>
         <SALIDA>
            <PARAM NOM="SV_DES_SITUACION"  TIPO="VARCHAR" >DESCRIPCION DE LA SITUACION DEL ABONADO</PARAM>
            <PARAM NOM="SN_COD_RETORNO"  TIPO="NUMERICO" >CÓDIGO DE RETORNO (DESCRIPCIÓN DE ERROR)</PARAM>
            <PARAM NOM="SV_MENS_RETORNO"  TIPO="VARCHAR" >MENSAJE DE RETORNO (CÓDIGO DE ERROR)</PARAM>
            <PARAM NOM="SN_NUM_EVENTO"  TIPO="NUMERICO" >NÚMERO DE EVENTO</PARAM>
         </SALIDA>
      </PARÁMETROS>
   </ELEMENTO>
</DOCUMENTACIÓN>
*/
IS
    LV_DES_ERROR               GE_ERRORES_PG.DESEVENT;
    LV_SSQL                    GE_ERRORES_PG.VQUERY;
    LV_NOMBRE_PROC             STRING(30)   := 'PV_GET_DESC_SITUACION_PR';
    LV_PKG_PROC                STRING(60)   := GV_PACKAGE||'.'||LV_NOMBRE_PROC;
    
BEGIN

     SN_COD_RETORNO  := 0;
    SV_MENS_RETORNO := 'OK';
    SN_NUM_EVENTO     := 0;
                               
    LV_SSQL := ' SELECT DES_SITUACION FROM GA_SITUABO '
              || ' WHERE COD_SITUACION = ' || EV_COD_SITUACION;
            
        
    SELECT DES_SITUACION 
    INTO SV_DES_SITUACION
    FROM GA_SITUABO
    WHERE COD_SITUACION =  EV_COD_SITUACION;
          

EXCEPTION
        
    WHEN NO_DATA_FOUND THEN
        SN_COD_RETORNO := 2735;
        IF NOT GE_ERRORES_PG.MENSAJEERROR(SN_COD_RETORNO,SV_MENS_RETORNO) THEN
          SV_MENS_RETORNO := GV_ERROR_NO_CLASIF;
        END IF;
        LV_DES_ERROR := SUBSTR(LV_NOMBRE_PROC || '('||EV_COD_SITUACION||'); - ' || SQLERRM,1,GN_LARGOERRTEC);
        SV_MENS_RETORNO:=SUBSTR(SV_MENS_RETORNO,1,GN_LARGODESC);
        SN_NUM_EVENTO := GE_ERRORES_PG.GRABARPL(SN_NUM_EVENTO, GV_COD_MODULO, SV_MENS_RETORNO, '1.0', USER, 
        LV_PKG_PROC, LV_SSQL, SN_COD_RETORNO, LV_DES_ERROR );

    WHEN OTHERS THEN
        SN_COD_RETORNO := GV_ERROR_OTHERS;
        IF NOT GE_ERRORES_PG.MENSAJEERROR(SN_COD_RETORNO,SV_MENS_RETORNO) THEN
          SV_MENS_RETORNO := GV_ERROR_NO_CLASIF;
        END IF;
        LV_DES_ERROR := SUBSTR(LV_NOMBRE_PROC || '('||EV_COD_SITUACION||'); - ' || SQLERRM,1,GN_LARGOERRTEC);
        SV_MENS_RETORNO:=SUBSTR(SV_MENS_RETORNO,1,GN_LARGODESC);
        SN_NUM_EVENTO := GE_ERRORES_PG.GRABARPL(SN_NUM_EVENTO, GV_COD_MODULO, SV_MENS_RETORNO, '1.0', USER, 
        LV_PKG_PROC, LV_SSQL, SN_COD_RETORNO, LV_DES_ERROR );
        
END PV_GET_DESC_SITUACION_PR;

PROCEDURE PV_GET_SEQ_NEXTVAL_PR(
                                EV_SEQUENCE           IN VARCHAR2,
                                SV_NEXTVAL            OUT VARCHAR2,
                                SN_COD_RETORNO        OUT NOCOPY GE_ERRORES_TD.COD_MSGERROR%TYPE,
                                SV_MENS_RETORNO        OUT NOCOPY GE_ERRORES_TD.DET_MSGERROR%TYPE,
                                SN_NUM_EVENTO          OUT NOCOPY GE_ERRORES_PG.EVENTO
)
/*
<DOCUMENTACIÓN
  TIPODOC = "PROCEDIMIENTO">
   <ELEMENTO
      NOMBRE = "PV_GET_SEQ_NEXTVAL_PR" 
      LENGUAJE="PL/SQL"
      FECHA="23-03-2011"
      VERSIÓN="1.0"
      DISEÑADOR="EVERIS"
      PROGRAMADOR="EVERIS"
      AMBIENTE DESARROLLO="BD">
      <RETORNO>NA</RETORNO>
      <DESCRIPCIÓN>OBTIENE EL PROXIMO VALOR DE UNA SECUENCIA</DESCRIPCIÓN>
      <PARÁMETROS>
         <ENTRADA>
              <PARAM NOM="EV_SEQUENCE" TIPO="VARCHAR"> NOMBRE DE LA SECUENCIA A CONSULTAR</PARAM>              
         </ENTRADA>
         <SALIDA>
            <PARAM NOM="SV_NEXTVAL"  TIPO="VARCHAR" >VALOR DE LA SECUENCIA</PARAM>
            <PARAM NOM="SN_COD_RETORNO"  TIPO="NUMERICO" >CÓDIGO DE RETORNO (DESCRIPCIÓN DE ERROR)</PARAM>
            <PARAM NOM="SV_MENS_RETORNO"  TIPO="VARCHAR" >MENSAJE DE RETORNO (CÓDIGO DE ERROR)</PARAM>
            <PARAM NOM="SN_NUM_EVENTO"  TIPO="NUMERICO" >NÚMERO DE EVENTO</PARAM>
         </SALIDA>
      </PARÁMETROS>
   </ELEMENTO>
</DOCUMENTACIÓN>
*/
IS
    LV_DES_ERROR               GE_ERRORES_PG.DESEVENT;
    LV_SSQL                    GE_ERRORES_PG.VQUERY;
    LV_NOMBRE_PROC             STRING(30)   := 'PV_GET_SEQ_NEXTVAL_PR';
    LV_PKG_PROC                STRING(60)   := GV_PACKAGE||'.'||LV_NOMBRE_PROC;
    
BEGIN

     SN_COD_RETORNO  := 0;
    SV_MENS_RETORNO := 'OK';
    SN_NUM_EVENTO     := 0;
            
    LV_SSQL := 'SELECT ' || EV_SEQUENCE || '.NEXTVAL FROM DUAL ';
        
    EXECUTE IMMEDIATE LV_SSQL INTO SV_NEXTVAL;
          

EXCEPTION
        
    WHEN OTHERS THEN
        SN_COD_RETORNO := GV_ERROR_OTHERS;
        IF NOT GE_ERRORES_PG.MENSAJEERROR(SN_COD_RETORNO,SV_MENS_RETORNO) THEN
          SV_MENS_RETORNO := GV_ERROR_NO_CLASIF;
        END IF;
        LV_DES_ERROR := SUBSTR(LV_NOMBRE_PROC || '('||EV_SEQUENCE||'); - ' || SQLERRM,1,GN_LARGOERRTEC);
        SV_MENS_RETORNO:=SUBSTR(SV_MENS_RETORNO,1,GN_LARGODESC);
        SN_NUM_EVENTO := GE_ERRORES_PG.GRABARPL(SN_NUM_EVENTO, GV_COD_MODULO, SV_MENS_RETORNO, '1.0', USER, 
        LV_PKG_PROC, LV_SSQL, SN_COD_RETORNO, LV_DES_ERROR );
        
END PV_GET_SEQ_NEXTVAL_PR;

PROCEDURE PV_GET_DATOS_USUARIO_PR(
                                    EV_NOM_USUARIO        IN GE_SEG_USUARIO.NOM_USUARIO%TYPE,
                                    SC_DATOS_USUARIO      OUT REFCURSOR,
                                    SN_COD_RETORNO        OUT NOCOPY GE_ERRORES_TD.COD_MSGERROR%TYPE,
                                    SV_MENS_RETORNO        OUT NOCOPY GE_ERRORES_TD.DET_MSGERROR%TYPE,
                                    SN_NUM_EVENTO          OUT NOCOPY GE_ERRORES_PG.EVENTO
)
 /*
<DOCUMENTACIÓN
  TIPODOC = "PROCEDIMIENTO">
   <ELEMENTO
      NOMBRE = "PV_GET_DATOS_USUARIO_PR"
      LENGUAJE="PL/SQL"
      FECHA="10-06-2008"
      VERSIÓN="1.0"
      DISEÑADOR="EVERIS"
      PROGRAMADOR="EVERIS"
      AMBIENTE DESARROLLO="BD">
      <RETORNO>NA</RETORNO>
      <DESCRIPCIÓN> OBTIENE DATOS DEL USUARIO</DESCRIPCIÓN>
      <PARÁMETROS>
         <ENTRADA>
              <PARAM NOM="EV_NOM_USUARIO" TIPO="VARCHAR"> NOMBRE DE USUARIO SCL</PARAM>
         </ENTRADA>
         <SALIDA>
            <PARAM NOM="SC_DATOS_USUARIO"  TIPO="CURSOR" >CURSOR CON DATOS DEL USUARIO</PARAM>
            <PARAM NOM="SN_COD_RETORNO"  TIPO="NUMERICO" >CÓDIGO DE RETORNO (DESCRIPCIÓN DE ERROR)</PARAM>
            <PARAM NOM="SV_MENS_RETORNO"  TIPO="VARCHAR" >MENSAJE DE RETORNO (CÓDIGO DE ERROR)</PARAM>
            <PARAM NOM="SN_NUM_EVENTO"  TIPO="NUMERICO" >NÚMERO DE EVENTO</PARAM>
         </SALIDA>
      </PARÁMETROS>
   </ELEMENTO>
</DOCUMENTACIÓN>
*/
IS
    LV_DES_ERROR               GE_ERRORES_PG.DESEVENT;
    LV_SSQL                    GE_ERRORES_PG.VQUERY;
    LV_NOMBRE_PROC             STRING(30)   := 'PV_GET_DATOS_USUARIO_PR';
    LV_PKG_PROC                STRING(60)   := GV_PACKAGE||'.'||LV_NOMBRE_PROC;
    LN_EXISTE                  NUMBER;
BEGIN

     SN_COD_RETORNO  := 0;
    SV_MENS_RETORNO := 'OK';
    SN_NUM_EVENTO     := 0;
    
    LV_SSQL := 'SELECT COD_VENDEDOR, COD_TIPCOMIS, COD_OFICINA FROM GE_SEG_USUARIO'
            || 'WHERE NOM_USUARIO = '''||EV_NOM_USUARIO||'''';
    
    SELECT 1 INTO LN_EXISTE
    FROM GE_SEG_USUARIO
    WHERE NOM_USUARIO = EV_NOM_USUARIO;

    OPEN SC_DATOS_USUARIO FOR
        SELECT COD_VENDEDOR, COD_TIPCOMIS, COD_OFICINA FROM GE_SEG_USUARIO
        WHERE NOM_USUARIO = EV_NOM_USUARIO;

EXCEPTION
        
    WHEN NO_DATA_FOUND THEN
        SN_COD_RETORNO := 172;
        IF NOT GE_ERRORES_PG.MENSAJEERROR(SN_COD_RETORNO,SV_MENS_RETORNO) THEN
          SV_MENS_RETORNO := GV_ERROR_NO_CLASIF;
        END IF;
        LV_DES_ERROR := SUBSTR(LV_NOMBRE_PROC || '('||EV_NOM_USUARIO||'); - ' || SQLERRM,1,GN_LARGOERRTEC);
        SV_MENS_RETORNO:=SUBSTR(SV_MENS_RETORNO,1,GN_LARGODESC);
        SN_NUM_EVENTO := GE_ERRORES_PG.GRABARPL(SN_NUM_EVENTO, GV_COD_MODULO, SV_MENS_RETORNO, '1.0', USER, 
        LV_PKG_PROC, LV_SSQL, SN_COD_RETORNO, LV_DES_ERROR );
        
    WHEN OTHERS THEN
        SN_COD_RETORNO := GV_ERROR_OTHERS;
        IF NOT GE_ERRORES_PG.MENSAJEERROR(SN_COD_RETORNO,SV_MENS_RETORNO) THEN
          SV_MENS_RETORNO := GV_ERROR_NO_CLASIF;
        END IF;
        LV_DES_ERROR := SUBSTR(LV_NOMBRE_PROC || '('||EV_NOM_USUARIO||'); - ' || SQLERRM,1,GN_LARGOERRTEC);
        SV_MENS_RETORNO:=SUBSTR(SV_MENS_RETORNO,1,GN_LARGODESC);
        SN_NUM_EVENTO := GE_ERRORES_PG.GRABARPL(SN_NUM_EVENTO, GV_COD_MODULO, SV_MENS_RETORNO, '1.0', USER, 
        LV_PKG_PROC, LV_SSQL, SN_COD_RETORNO, LV_DES_ERROR );
        
END PV_GET_DATOS_USUARIO_PR;


PROCEDURE PV_GET_MONTO_MAXLC_PR(
                                EN_COD_CLIENTE        IN GA_ABOCEL.COD_CLIENTE%TYPE,
                                EN_NUM_ABONADO        IN GA_ABOCEL.NUM_ABONADO%TYPE,
                                SN_MONTO              OUT NUMBER,
                                SN_COD_RETORNO        OUT NOCOPY GE_ERRORES_TD.COD_MSGERROR%TYPE,
                                SV_MENS_RETORNO        OUT NOCOPY GE_ERRORES_TD.DET_MSGERROR%TYPE,
                                SN_NUM_EVENTO          OUT NOCOPY GE_ERRORES_PG.EVENTO
)
/*
<DOCUMENTACIÓN
  TIPODOC = "PROCEDIMIENTO">
   <ELEMENTO
      NOMBRE = "PV_GET_MONTO_MAXLC_PR" 
      LENGUAJE="PL/SQL"
      FECHA="25-03-2011"
      VERSIÓN="1.0"
      DISEÑADOR="EVERIS"
      PROGRAMADOR="EVERIS"
      AMBIENTE DESARROLLO="BD">
      <RETORNO>NA</RETORNO>
      <DESCRIPCIÓN>INVOCA A LA FUNCION QUE RETORNA LA DEUDA DEL CLIENTE</DESCRIPCIÓN>
      <PARÁMETROS>
         <ENTRADA>
              <PARAM NOM="EN_COD_CLIENTE" TIPO="NUMBER"> CODIGO DEL CLIENTE</PARAM>        
              <PARAM NOM="EN_NUM_ABONADO" TIPO="NUMBER"> NUMERO DEL ABONADO</PARAM>
         </ENTRADA>
         <SALIDA>
            <PARAM NOM="SN_MONTO"  TIPO="NUMBER >VALOR DEL MONTO DE LA DEUDA DEL CLIENTE</PARAM>
            <PARAM NOM="SN_COD_RETORNO"  TIPO="NUMERICO" >CÓDIGO DE RETORNO (DESCRIPCIÓN DE ERROR)</PARAM>
            <PARAM NOM="SV_MENS_RETORNO"  TIPO="VARCHAR" >MENSAJE DE RETORNO (CÓDIGO DE ERROR)</PARAM>
            <PARAM NOM="SN_NUM_EVENTO"  TIPO="NUMERICO" >NÚMERO DE EVENTO</PARAM>
         </SALIDA>
      </PARÁMETROS>
   </ELEMENTO>
</DOCUMENTACIÓN>
*/
IS
    LV_DES_ERROR               GE_ERRORES_PG.DESEVENT;
    LV_SSQL                    GE_ERRORES_PG.VQUERY;
    LV_NOMBRE_PROC             STRING(30)   := 'PV_GET_MONTO_MAXLC_PR';
    LV_PKG_PROC                STRING(60)   := GV_PACKAGE||'.'||LV_NOMBRE_PROC;
    
BEGIN

     SN_COD_RETORNO  := 0;
    SV_MENS_RETORNO := 'OK';
    SN_NUM_EVENTO     := 0;
    
    LV_SSQL := ' TOL_OBTIENE_MONTO_MAXLC_FN( '
              ||   EN_COD_CLIENTE || ', '
              ||   EN_NUM_ABONADO || ') ';
          
    SN_MONTO := TOL_OBTIENE_MONTO_MAXLC_FN(EN_COD_CLIENTE,
                                           EN_NUM_ABONADO);
                                           
    --199643
    IF SN_MONTO < 0 THEN
        SN_MONTO:=0;
    END IF;
    --199643                                           

          
EXCEPTION
        
    WHEN OTHERS THEN
        SN_COD_RETORNO := GV_ERROR_OTHERS;
        IF NOT GE_ERRORES_PG.MENSAJEERROR(SN_COD_RETORNO,SV_MENS_RETORNO) THEN
          SV_MENS_RETORNO := GV_ERROR_NO_CLASIF;
        END IF;
        LV_DES_ERROR := SUBSTR(LV_NOMBRE_PROC || '('||EN_COD_CLIENTE||','||EN_NUM_ABONADO||'); - ' || SQLERRM,1,GN_LARGOERRTEC);
        SV_MENS_RETORNO:=SUBSTR(SV_MENS_RETORNO,1,GN_LARGODESC);
        SN_NUM_EVENTO := GE_ERRORES_PG.GRABARPL(SN_NUM_EVENTO, GV_COD_MODULO, SV_MENS_RETORNO, '1.0', USER, 
        LV_PKG_PROC, LV_SSQL, SN_COD_RETORNO, LV_DES_ERROR );
        
END PV_GET_MONTO_MAXLC_PR;

PROCEDURE PV_GET_SINIESTRO_PR(
                                    EN_NUM_SINIESTRO        IN GA_SINIESTROS.NUM_SINIESTRO%TYPE,
                                    SC_SINIESTRO            OUT REFCURSOR,
                                    SN_COD_RETORNO          OUT NOCOPY GE_ERRORES_TD.COD_MSGERROR%TYPE,
                                    SV_MENS_RETORNO         OUT NOCOPY GE_ERRORES_TD.DET_MSGERROR%TYPE,
                                    SN_NUM_EVENTO           OUT NOCOPY GE_ERRORES_PG.EVENTO
)
 /*
<DOCUMENTACIÓN
  TIPODOC = "PROCEDIMIENTO">
   <ELEMENTO
      NOMBRE = "PV_GET_DATOS_SINIESTRO_PR"
      LENGUAJE="PL/SQL"
      FECHA="10-06-2008"
      VERSIÓN="1.0"
      DISEÑADOR="EVERIS"
      PROGRAMADOR="EVERIS"
      AMBIENTE DESARROLLO="BD">
      <RETORNO>NA</RETORNO>
      <DESCRIPCIÓN> OBTIENE DATOS DEL AVISO DE SINIESTRO</DESCRIPCIÓN>
      <PARÁMETROS>
         <ENTRADA>
              <PARAM NOM="EN_NUM_SINIESTRO" TIPO="NUMBER"> NUMERO DE SINIESTRO</PARAM>
         </ENTRADA>
         <SALIDA>
            <PARAM NOM="SC_SINIESTRO"  TIPO="CURSOR" >CURSOR CON DATOS DEL AVISO SINIESTRO</PARAM>
            <PARAM NOM="SN_COD_RETORNO"  TIPO="NUMERICO" >CÓDIGO DE RETORNO (DESCRIPCIÓN DE ERROR)</PARAM>
            <PARAM NOM="SV_MENS_RETORNO"  TIPO="VARCHAR" >MENSAJE DE RETORNO (CÓDIGO DE ERROR)</PARAM>
            <PARAM NOM="SN_NUM_EVENTO"  TIPO="NUMERICO" >NÚMERO DE EVENTO</PARAM>
         </SALIDA>
      </PARÁMETROS>
   </ELEMENTO>
</DOCUMENTACIÓN>
*/
IS
    LV_DES_ERROR               GE_ERRORES_PG.DESEVENT;
    LV_SSQL                    GE_ERRORES_PG.VQUERY;
    LV_NOMBRE_PROC             STRING(30)   := 'PV_GET_SINIESTRO_PR';
    LV_PKG_PROC                STRING(60)   := GV_PACKAGE||'.'||LV_NOMBRE_PROC;
    LN_NUM_TRANSACC            GA_TRANSACABO.NUM_TRANSACCION%TYPE;
    
    LV_SQL_TERMINAL            VARCHAR2(200);
    LV_TIP_TERMINAL            GA_SINIESTROS.TIP_TERMINAL%TYPE;
    LV_GSFORMATO_SEL2          VARCHAR2(20);
    B_TERMGASIN                BOOLEAN;
BEGIN

    SN_COD_RETORNO  := 0;
    SV_MENS_RETORNO := 'OK';
    SN_NUM_EVENTO   := 0;
    
    LV_SSQL := 'SELECT A.NUM_SINIESTRO, '
            || 'B.COD_ESTADO, '
            || '(SELECT DES_ESTADO FROM GA_ESTADOSIN WHERE COD_ESTADO = B.COD_ESTADO ) DES_ESTADO, ' 
            || 'A.COD_CAUSA, '
            || '(SELECT DES_CAUSA FROM GA_CAUSINIE WHERE COD_CAUSA = A.COD_CAUSA ) DES_CAUSA, ' 
            || 'TO_CHAR(A.FEC_SINIESTRO,''DD-MM-YYYY'') FEC_SINIESTRO, '
            || 'TO_CHAR(A.FEC_FORMALIZA,''DD-MM-YYYY'') FEC_FORMALIZA, '
            || 'TO_CHAR(A.FEC_ANULA,''DD-MM-YYYY'') FEC_ANULA, '
            || 'TO_CHAR(A.FEC_RESTITUC,''DD-MM-YYYY'') FEC_RESTITUC, ' 
            || '(SELECT DES_TERMINAL FROM AL_TIPOS_TERMINALES X WHERE X.TIP_TERMINAL = A.TIP_TERMINAL ) DES_TERMINAL, ' 
            || 'A.TIP_TERMINAL '
            || 'FROM GA_SINIESTROS A, GA_DETSINIE B '
            || 'WHERE A.COD_ESTADO = B.COD_ESTADO '
            || 'AND A.NUM_SINIESTRO = B.NUM_SINIESTRO '
            || 'AND A.COD_PRODUCTO = 1 '
            || 'AND A.NUM_SINIESTRO = '||EN_NUM_SINIESTRO|| ' '
            || 'ORDER BY B.FEC_DETALLE';
            
    OPEN SC_SINIESTRO FOR
    SELECT A.NUM_SINIESTRO, 
    B.COD_ESTADO,
    (SELECT DES_ESTADO FROM GA_ESTADOSIN WHERE COD_ESTADO = B.COD_ESTADO ) DES_ESTADO, 
    A.COD_CAUSA, 
    (SELECT DES_CAUSA FROM GA_CAUSINIE WHERE COD_CAUSA = A.COD_CAUSA ) DES_CAUSA, 
    TO_CHAR(A.FEC_SINIESTRO,'DD-MM-YYYY') FEC_SINIESTRO,
    TO_CHAR(A.FEC_FORMALIZA,'DD-MM-YYYY') FEC_FORMALIZA, 
    TO_CHAR(A.FEC_ANULA,'DD-MM-YYYY') FEC_ANULA, 
    TO_CHAR(A.FEC_RESTITUC,'DD-MM-YYYY') FEC_RESTITUC, 
    (SELECT DES_TERMINAL FROM AL_TIPOS_TERMINALES X WHERE X.TIP_TERMINAL = A.TIP_TERMINAL ) DES_TERMINAL, 
    A.TIP_TERMINAL
    FROM GA_SINIESTROS A, GA_DETSINIE B
    WHERE A.COD_ESTADO = B.COD_ESTADO 
    AND A.NUM_SINIESTRO = B.NUM_SINIESTRO
    AND A.COD_PRODUCTO = 1
    AND A.NUM_SINIESTRO = EN_NUM_SINIESTRO
    ORDER BY B.FEC_DETALLE;

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        SN_COD_RETORNO := 100005;
        IF NOT GE_ERRORES_PG.MENSAJEERROR(SN_COD_RETORNO,SV_MENS_RETORNO) THEN
          SV_MENS_RETORNO := GV_ERROR_NO_CLASIF;
        END IF;
        LV_DES_ERROR := SUBSTR(LV_NOMBRE_PROC || '('||EN_NUM_SINIESTRO||'); - ' || SQLERRM,1,GN_LARGOERRTEC);
        SV_MENS_RETORNO:=SUBSTR(SV_MENS_RETORNO,1,GN_LARGODESC);
        SN_NUM_EVENTO := GE_ERRORES_PG.GRABARPL(SN_NUM_EVENTO, GV_COD_MODULO, SV_MENS_RETORNO, '1.0', USER, 
        LV_PKG_PROC, LV_SSQL, SN_COD_RETORNO, LV_DES_ERROR );

    WHEN OTHERS THEN
        SN_COD_RETORNO := GV_ERROR_OTHERS;
        IF NOT GE_ERRORES_PG.MENSAJEERROR(SN_COD_RETORNO,SV_MENS_RETORNO) THEN
          SV_MENS_RETORNO := GV_ERROR_NO_CLASIF;
        END IF;
        LV_DES_ERROR := SUBSTR(LV_NOMBRE_PROC || '('||EN_NUM_SINIESTRO||'); - ' || SQLERRM,1,GN_LARGOERRTEC);
        SV_MENS_RETORNO:=SUBSTR(SV_MENS_RETORNO,1,GN_LARGODESC);
        SN_NUM_EVENTO := GE_ERRORES_PG.GRABARPL(SN_NUM_EVENTO, GV_COD_MODULO, SV_MENS_RETORNO, '1.0', USER, 
        LV_PKG_PROC, LV_SSQL, SN_COD_RETORNO, LV_DES_ERROR );

END PV_GET_SINIESTRO_PR;

PROCEDURE PV_OBTENER_LIM_PENDIEN_PR(
                                    EN_COD_CLIENTE            IN GA_ABOCEL.COD_CLIENTE%TYPE,
                                    EN_NUM_ABONADO            IN GA_ABOCEL.NUM_ABONADO%TYPE,
                                    SN_CONTAR_LIM              OUT NUMBER,
                                    SN_COD_RETORNO            OUT NOCOPY GE_ERRORES_TD.COD_MSGERROR%TYPE,
                                    SV_MENS_RETORNO            OUT NOCOPY GE_ERRORES_TD.DET_MSGERROR%TYPE,
                                    SN_NUM_EVENTO              OUT NOCOPY GE_ERRORES_PG.EVENTO
)
/*
<DOCUMENTACIÓN
  TIPODOC = "PROCEDIMIENTO">
   <ELEMENTO
      NOMBRE = "PV_OBTENER_LIM_PENDIEN_PR" 
      LENGUAJE="PL/SQL"
      FECHA="25-03-2011"
      VERSIÓN="1.0"
      DISEÑADOR="EVERIS"
      PROGRAMADOR="EVERIS"
      AMBIENTE DESARROLLO="BD">
      <RETORNO>NA</RETORNO>
      <DESCRIPCIÓN>INVOCA A LA FUNCION QUE SI EXISTE CAMBIO DE LIMITE PENDIENTE</DESCRIPCIÓN>
      <PARÁMETROS>
         <ENTRADA>
              <PARAM NOM="EN_COD_CLIENTE" TIPO="NUMBER"> CODIGO DEL CLIENTE</PARAM>        
              <PARAM NOM="EN_NUM_ABONADO" TIPO="NUMBER"> NUMERO DEL ABONADO</PARAM>
         </ENTRADA>
         <SALIDA>
            <PARAM NOM="SN_CONTAR_LIM"  TIPO="NUMBER >VALOR CUENTA LIMITE PENDIENTE</PARAM>
            <PARAM NOM="SN_COD_RETORNO"  TIPO="NUMERICO" >CÓDIGO DE RETORNO (DESCRIPCIÓN DE ERROR)</PARAM>
            <PARAM NOM="SV_MENS_RETORNO"  TIPO="VARCHAR" >MENSAJE DE RETORNO (CÓDIGO DE ERROR)</PARAM>
            <PARAM NOM="SN_NUM_EVENTO"  TIPO="NUMERICO" >NÚMERO DE EVENTO</PARAM>
         </SALIDA>
      </PARÁMETROS>
   </ELEMENTO>
</DOCUMENTACIÓN>
*/
IS

LV_DES_ERROR               GE_ERRORES_PG.DESEVENT;
LV_SSQL                    GE_ERRORES_PG.VQUERY;
LV_NOMBRE_PROC             STRING(30)   := 'PV_GET_MONTO_MAXLC_PR';
LV_PKG_PROC                STRING(60)   := GV_PACKAGE||'.'||LV_NOMBRE_PROC;

BEGIN

    SN_COD_RETORNO  := 0;
    SV_MENS_RETORNO := 'OK';
    SN_NUM_EVENTO     := 0;

    LV_SSQL := ' SELECT COUNT(1) FROM GA_LIMITE_CLIABO_TO '
              ||    'WHERE COD_CLIENTE =' || EN_COD_CLIENTE 
              ||       'AND NUM_ABONADO =' || EN_NUM_ABONADO 
              ||     'AND FEC_DESDE > SYSDATE';
      
    SELECT COUNT(1)
    INTO SN_CONTAR_LIM 
    FROM GA_LIMITE_CLIABO_TO    
    WHERE COD_CLIENTE = EN_COD_CLIENTE
    AND NUM_ABONADO = EN_NUM_ABONADO
    AND FEC_DESDE > SYSDATE;
          
EXCEPTION
        
    WHEN OTHERS THEN
        SN_COD_RETORNO := GV_ERROR_OTHERS;
        IF NOT GE_ERRORES_PG.MENSAJEERROR(SN_COD_RETORNO,SV_MENS_RETORNO) THEN
          SV_MENS_RETORNO := GV_ERROR_NO_CLASIF;
        END IF;
        LV_DES_ERROR := SUBSTR(LV_NOMBRE_PROC || '('||EN_COD_CLIENTE||','||EN_NUM_ABONADO||'); - ' || SQLERRM,1,GN_LARGOERRTEC);
        SV_MENS_RETORNO:=SUBSTR(SV_MENS_RETORNO,1,GN_LARGODESC);
        SN_NUM_EVENTO := GE_ERRORES_PG.GRABARPL(SN_NUM_EVENTO, GV_COD_MODULO, SV_MENS_RETORNO, '1.0', USER, 
        LV_PKG_PROC, LV_SSQL, SN_COD_RETORNO, LV_DES_ERROR );
        
END PV_OBTENER_LIM_PENDIEN_PR;

PROCEDURE PV_GET_COD_CARGOBASICOS_PR(
                                    EN_NUM_ABONADO            IN GA_ABOCEL.NUM_ABONADO%TYPE,
                                    EN_COD_CLIENTE            IN GA_ABOCEL.COD_CLIENTE%TYPE,
                                    EV_COD_CAUSA_SINIE      IN GA_SINIESTROS.COD_CAUSA%TYPE,
                                    SV_CARGO_CAUSINIE        OUT GA_CAUSINIE.COD_CARGOBASICO%TYPE,
                                    SV_CARGO_ORIG              OUT GA_INTARCEL.COD_CARGOBASICO%TYPE,
                                    SV_CARGO_ANT             OUT GA_INTARCEL.COD_CARGOBASICO%TYPE,
                                    SN_COD_RETORNO            OUT NOCOPY GE_ERRORES_TD.COD_MSGERROR%TYPE,
                                    SV_MENS_RETORNO            OUT NOCOPY GE_ERRORES_TD.DET_MSGERROR%TYPE,
                                    SN_NUM_EVENTO              OUT NOCOPY GE_ERRORES_PG.EVENTO
)
/*
<DOCUMENTACIÓN
  TIPODOC = "PROCEDIMIENTO">
   <ELEMENTO
      NOMBRE = "PV_GET_COD_CARGOBASICOS_PR" 
      LENGUAJE="PL/SQL"
      FECHA="07-04-2011"
      VERSIÓN="1.0"
      DISEÑADOR="EVERIS"
      PROGRAMADOR="EVERIS"
      AMBIENTE DESARROLLO="BD">
      <RETORNO>NA</RETORNO>
      <DESCRIPCIÓN>INVOCA A LA FUNCION QUE SI EXISTE CAMBIO DE LIMITE PENDIENTE</DESCRIPCIÓN>
      <PARÁMETROS>
         <ENTRADA>
              <PARAM NOM="EN_COD_CLIENTE" TIPO="NUMBER"> CODIGO DEL CLIENTE</PARAM>        
              <PARAM NOM="EN_NUM_ABONADO" TIPO="NUMBER"> NUMERO DEL ABONADO</PARAM>
              <PARAM NOM="EV_COD_CAUSA_SINIE" TIPO="VARCHAR"> CODIGO DE CARGO BASICO</PARAM>
         </ENTRADA>
         <SALIDA>
            <PARAM NOM="LV_CARGO_CAUSINIE" TIPO="VARCHAR >CODIGO DE CARGO BASICO</PARAM>
            <PARAM NOM="LV_CARGO_ORIG" TIPO="VARCHAR >CODIGO DE CARGO BASICO</PARAM>
            <PARAM NOM="LV_CARGO_ANT" TIPO="VARCHAR >CODIGO DE CARGO BASICO</PARAM>
            <PARAM NOM="SN_COD_RETORNO"  TIPO="NUMERICO" >CÓDIGO DE RETORNO (DESCRIPCIÓN DE ERROR)</PARAM>
            <PARAM NOM="SV_MENS_RETORNO"  TIPO="VARCHAR" >MENSAJE DE RETORNO (CÓDIGO DE ERROR)</PARAM>
            <PARAM NOM="SN_NUM_EVENTO"  TIPO="NUMERICO" >NÚMERO DE EVENTO</PARAM>
         </SALIDA>
      </PARÁMETROS>
   </ELEMENTO>
</DOCUMENTACIÓN>
*/
IS

LV_DES_ERROR               GE_ERRORES_PG.DESEVENT;
LV_SSQL                    GE_ERRORES_PG.VQUERY;
LV_NOMBRE_PROC             STRING(30)   := 'PV_GET_COD_CARGOBASICOS_PR';
LV_PKG_PROC                STRING(60)   := GV_PACKAGE||'.'||LV_NOMBRE_PROC;

BEGIN

    SN_COD_RETORNO  := 0;
    SV_MENS_RETORNO := 'OK';
    SN_NUM_EVENTO     := 0;

    LV_SSQL := 'SELECT COD_CARGOBASICO FROM GA_CAUSINIE '
            || 'WHERE COD_PRODUCTO = 1 '
            || 'AND COD_CAUSA = ' || EV_COD_CAUSA_SINIE || ' ';
        
    SELECT COD_CARGOBASICO INTO SV_CARGO_CAUSINIE
    FROM GA_CAUSINIE
    WHERE COD_PRODUCTO = 1
    AND COD_CAUSA = EV_COD_CAUSA_SINIE;

    --ULTIMO CARGO BASICO'
    LV_SSQL := 'SELECT COD_CARGOBASICO '
            || 'FROM GA_INTARCEL a '
            || 'WHERE a.num_abonado = ' || EN_NUM_ABONADO || ' AND a.cod_cliente = ' || EN_COD_CLIENTE || ' '
            || 'AND a.fec_hasta = '
            || '(SELECT max(fec_hasta) FROM GA_INTARCEL b WHERE a.cod_cliente = b.cod_cliente '
            || 'AND a.num_abonado = b.num_abonado) ';

     
    SELECT COD_CARGOBASICO INTO SV_CARGO_ORIG
    FROM GA_INTARCEL A
    WHERE A.NUM_ABONADO = EN_NUM_ABONADO 
    AND A.COD_CLIENTE = EN_COD_CLIENTE
    AND A.FEC_HASTA = ( SELECT MAX(FEC_HASTA) 
                        FROM GA_INTARCEL B 
                        WHERE A.COD_CLIENTE = B.COD_CLIENTE 
                        AND A.NUM_ABONADO = B.NUM_ABONADO);

    SV_CARGO_ANT := SV_CARGO_ORIG;

    IF SV_CARGO_ORIG = SV_CARGO_CAUSINIE THEN -- MAM 03.12.2004
        --PENULTIMO CARGO BASICO
        LV_SSQL := 'SELECT COD_CARGOBASICO '
                || 'FROM GA_INTARCEL a '
                || 'WEHERE a.num_abonado = ' || EN_NUM_ABONADO || ' AND a.cod_cliente = ' || EN_COD_CLIENTE || ' '
                || 'AND (to_char(a.fec_hasta,''dd-mm-yyyy'') = '
                || '(select to_char((max(b.fec_desde)),''dd-mm-yyyy'') FROM GA_INTARCEL b '
                || 'WHERE a.cod_cliente = b.cod_cliente '
                || 'AND a.num_abonado = b.num_abonado) '
                || 'or to_char(a.fec_hasta,''dd-mm-yyyy'') = '
                || ' (select to_char((max(b.fec_desde)-1),''dd-mm-yyyy'') from ga_intarcel b where a.cod_cliente=b.cod_cliente '
                || ' and a.num_abonado=b.num_abonado))';
                
    SELECT COD_CARGOBASICO INTO SV_CARGO_ANT
    FROM GA_INTARCEL A
    WHERE A.NUM_ABONADO = EN_NUM_ABONADO 
    AND A.COD_CLIENTE = EN_COD_CLIENTE
    AND (
        TO_CHAR(A.FEC_HASTA,'dd-mm-yyyy') = (
        SELECT TO_CHAR((MAX(B.FEC_DESDE)),'dd-mm-yyyy') 
        FROM GA_INTARCEL B 
        WHERE A.COD_CLIENTE = B.COD_CLIENTE
        AND A.NUM_ABONADO = B.NUM_ABONADO)
     OR TO_CHAR(A.FEC_HASTA,'dd-mm-yyyy') = (
        SELECT TO_CHAR((MAX(B.FEC_DESDE)-1),'dd-mm-yyyy') 
        FROM GA_INTARCEL B 
        WHERE A.COD_CLIENTE = B.COD_CLIENTE
        AND A.NUM_ABONADO = B.NUM_ABONADO)
        );

    END IF;
          
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        SN_COD_RETORNO := 100006;
        IF NOT GE_ERRORES_PG.MENSAJEERROR(SN_COD_RETORNO,SV_MENS_RETORNO) THEN
          SV_MENS_RETORNO := GV_ERROR_NO_CLASIF;
        END IF;
        LV_DES_ERROR := SUBSTR(LV_NOMBRE_PROC || '('||EN_COD_CLIENTE||','||EN_NUM_ABONADO||','''||EV_COD_CAUSA_SINIE||'''); - ' || SQLERRM,1,GN_LARGOERRTEC);
        SV_MENS_RETORNO:=SUBSTR(SV_MENS_RETORNO,1,GN_LARGODESC);
        SN_NUM_EVENTO := GE_ERRORES_PG.GRABARPL(SN_NUM_EVENTO, GV_COD_MODULO, SV_MENS_RETORNO, '1.0', USER, 
        LV_PKG_PROC, LV_SSQL, SN_COD_RETORNO, LV_DES_ERROR );
        
    WHEN OTHERS THEN
        SN_COD_RETORNO := GV_ERROR_OTHERS;
        IF NOT GE_ERRORES_PG.MENSAJEERROR(SN_COD_RETORNO,SV_MENS_RETORNO) THEN
          SV_MENS_RETORNO := GV_ERROR_NO_CLASIF;
        END IF;
        LV_DES_ERROR := SUBSTR(LV_NOMBRE_PROC || '('||EN_COD_CLIENTE||','||EN_NUM_ABONADO||','''||EV_COD_CAUSA_SINIE||'''); - ' || SQLERRM,1,GN_LARGOERRTEC);
        SV_MENS_RETORNO:=SUBSTR(SV_MENS_RETORNO,1,GN_LARGODESC);
        SN_NUM_EVENTO := GE_ERRORES_PG.GRABARPL(SN_NUM_EVENTO, GV_COD_MODULO, SV_MENS_RETORNO, '1.0', USER, 
        LV_PKG_PROC, LV_SSQL, SN_COD_RETORNO, LV_DES_ERROR );
        
END PV_GET_COD_CARGOBASICOS_PR;

PROCEDURE PV_GET_FECHA_ACTUAL_PR(
                                    EV_FORMATO_FECHA          IN VARCHAR2,
                                    SV_FECHA_ACTUAL           OUT VARCHAR2,
                                    SN_COD_RETORNO            OUT NOCOPY GE_ERRORES_TD.COD_MSGERROR%TYPE,
                                    SV_MENS_RETORNO            OUT NOCOPY GE_ERRORES_TD.DET_MSGERROR%TYPE,
                                    SN_NUM_EVENTO              OUT NOCOPY GE_ERRORES_PG.EVENTO
)
/*
<DOCUMENTACIÓN
  TIPODOC = "PROCEDIMIENTO">
   <ELEMENTO
      NOMBRE = "PV_GET_FECHA_ACTUAL_PR"
      LENGUAJE="PL/SQL"
      FECHA="25-03-2011"
      VERSIÓN="1.0"
      DISEÑADOR="EVERIS"
      PROGRAMADOR="EVERIS"
      AMBIENTE DESARROLLO="BD">
      <RETORNO>NA</RETORNO>
      <DESCRIPCIÓN>INVOCA A LA FUNCION QUE SI EXISTE CAMBIO DE LIMITE PENDIENTE</DESCRIPCIÓN>
      <PARÁMETROS>
         <ENTRADA>
              <PARAM NOM="EV_FORMATO_FECHA" TIPO="VARCHAR">FORMATO DE LA FECHA</PARAM>        
         </ENTRADA>
         <SALIDA>
            <PARAM NOM="SV_FECHA_ACTUAL"  TIPO="VARCHAR" >FECHA ACTUAL EN EL FORMATO SOLICITADO</PARAM>
            <PARAM NOM="SN_COD_RETORNO"  TIPO="NUMERICO" >CÓDIGO DE RETORNO (DESCRIPCIÓN DE ERROR)</PARAM>
            <PARAM NOM="SV_MENS_RETORNO"  TIPO="VARCHAR" >MENSAJE DE RETORNO (CÓDIGO DE ERROR)</PARAM>
            <PARAM NOM="SN_NUM_EVENTO"  TIPO="NUMERICO" >NÚMERO DE EVENTO</PARAM>
         </SALIDA>
      </PARÁMETROS>
   </ELEMENTO>
</DOCUMENTACIÓN>
*/
IS

LV_DES_ERROR               GE_ERRORES_PG.DESEVENT;
LV_SSQL                    GE_ERRORES_PG.VQUERY;
LV_NOMBRE_PROC             STRING(30)   := 'PV_GET_FECHA_ACTUAL_PR';
LV_PKG_PROC                STRING(60)   := GV_PACKAGE||'.'||LV_NOMBRE_PROC;

BEGIN

    SN_COD_RETORNO  := 0;
    SV_MENS_RETORNO := 'OK';
    SN_NUM_EVENTO     := 0;

    LV_SSQL := ' SELECT TO_CHAR(SYSDATE,'''||EV_FORMATO_FECHA||''') FROM DUAL;';
      
    SELECT TO_CHAR(SYSDATE,EV_FORMATO_FECHA) INTO SV_FECHA_ACTUAL FROM DUAL;
    
          
EXCEPTION
        
    WHEN OTHERS THEN
        SN_COD_RETORNO := GV_ERROR_OTHERS;
        IF NOT GE_ERRORES_PG.MENSAJEERROR(SN_COD_RETORNO,SV_MENS_RETORNO) THEN
          SV_MENS_RETORNO := GV_ERROR_NO_CLASIF;
        END IF;
        LV_DES_ERROR := SUBSTR(LV_NOMBRE_PROC || '('''||EV_FORMATO_FECHA||'''); - ' || SQLERRM,1,GN_LARGOERRTEC);
        SV_MENS_RETORNO:=SUBSTR(SV_MENS_RETORNO,1,GN_LARGODESC);
        SN_NUM_EVENTO := GE_ERRORES_PG.GRABARPL(SN_NUM_EVENTO, GV_COD_MODULO, SV_MENS_RETORNO, '1.0', USER, 
        LV_PKG_PROC, LV_SSQL, SN_COD_RETORNO, LV_DES_ERROR );
        
END PV_GET_FECHA_ACTUAL_PR;


PROCEDURE PV_GET_DIAS_DIFERENCIA_PR(
                                    EV_FECHA                  IN VARCHAR2,
                                    SN_DIAS_DIFERENCIA        OUT NUMBER,
                                    SN_COD_RETORNO            OUT NOCOPY GE_ERRORES_TD.COD_MSGERROR%TYPE,
                                    SV_MENS_RETORNO            OUT NOCOPY GE_ERRORES_TD.DET_MSGERROR%TYPE,
                                    SN_NUM_EVENTO              OUT NOCOPY GE_ERRORES_PG.EVENTO
)
/*
<DOCUMENTACIÓN
  TIPODOC = "PROCEDIMIENTO">
   <ELEMENTO
      NOMBRE = "PV_GET_DIAS_DIFERENCIA_PR"
      LENGUAJE="PL/SQL"
      FECHA="25-03-2011"
      VERSIÓN="1.0"
      DISEÑADOR="EVERIS"
      PROGRAMADOR="EVERIS"
      AMBIENTE DESARROLLO="BD">
      <RETORNO>NA</RETORNO>
      <DESCRIPCIÓN>INVOCA A LA FUNCION QUE SI EXISTE CAMBIO DE LIMITE PENDIENTE</DESCRIPCIÓN>
      <PARÁMETROS>
         <ENTRADA>
              <PARAM NOM="EV_FORMATO_FECHA" TIPO="VARCHAR">FORMATO DE LA FECHA</PARAM>        
         </ENTRADA>
         <SALIDA>
            <PARAM NOM="SV_FECHA_ACTUAL"  TIPO="VARCHAR" >FECHA ACTUAL EN EL FORMATO SOLICITADO</PARAM>
            <PARAM NOM="SN_COD_RETORNO"  TIPO="NUMERICO" >CÓDIGO DE RETORNO (DESCRIPCIÓN DE ERROR)</PARAM>
            <PARAM NOM="SV_MENS_RETORNO"  TIPO="VARCHAR" >MENSAJE DE RETORNO (CÓDIGO DE ERROR)</PARAM>
            <PARAM NOM="SN_NUM_EVENTO"  TIPO="NUMERICO" >NÚMERO DE EVENTO</PARAM>
         </SALIDA>
      </PARÁMETROS>
   </ELEMENTO>
</DOCUMENTACIÓN>
*/
IS

LV_DES_ERROR               GE_ERRORES_PG.DESEVENT;
LV_SSQL                    GE_ERRORES_PG.VQUERY;
LV_NOMBRE_PROC             STRING(30)   := 'PV_GET_DIAS_DIFERENCIA_PR';
LV_PKG_PROC                STRING(60)   := GV_PACKAGE||'.'||LV_NOMBRE_PROC;
LD_FECHA                   DATE;
BEGIN

    SN_COD_RETORNO  := 0;
    SV_MENS_RETORNO := 'OK';
    SN_NUM_EVENTO   := 0;

    LV_SSQL := 'SELECT TO_DATE('''||EV_FECHA||''',''DD-MM-YYYY'') FROM DUAL';
      
    SELECT TO_DATE(EV_FECHA,'DD-MM-YYYY') INTO LD_FECHA FROM DUAL;


    LV_SSQL := 'SELECT TRUNC(TO_NUMBER(SYSDATE-TO_DATE('||LD_FECHA||'))) FROM DUAL;';
    SELECT TRUNC(TO_NUMBER(SYSDATE-LD_FECHA)) INTO SN_DIAS_DIFERENCIA FROM DUAL;
          
EXCEPTION
        
    WHEN OTHERS THEN
        SN_COD_RETORNO := GV_ERROR_OTHERS;
        IF NOT GE_ERRORES_PG.MENSAJEERROR(SN_COD_RETORNO,SV_MENS_RETORNO) THEN
          SV_MENS_RETORNO := GV_ERROR_NO_CLASIF;
        END IF;
        LV_DES_ERROR := SUBSTR(LV_NOMBRE_PROC || '('''||EV_FECHA||'''); - ' || SQLERRM,1,GN_LARGOERRTEC);
        SV_MENS_RETORNO:=SUBSTR(SV_MENS_RETORNO,1,GN_LARGODESC);
        SN_NUM_EVENTO := GE_ERRORES_PG.GRABARPL(SN_NUM_EVENTO, GV_COD_MODULO, SV_MENS_RETORNO, '1.0', USER, 
        LV_PKG_PROC, LV_SSQL, SN_COD_RETORNO, LV_DES_ERROR );
        
END PV_GET_DIAS_DIFERENCIA_PR;

PROCEDURE PV_OBTENER_SOL_PEND_CICLO_PR(
                                    EN_COD_CLIENTE            IN GA_FINCICLO.COD_CLIENTE%TYPE,
                                    SN_PENDIEN_CICLO          OUT NUMBER,
                                    SN_COD_RETORNO            OUT NOCOPY GE_ERRORES_TD.COD_MSGERROR%TYPE,
                                    SV_MENS_RETORNO            OUT NOCOPY GE_ERRORES_TD.DET_MSGERROR%TYPE,
                                    SN_NUM_EVENTO              OUT NOCOPY GE_ERRORES_PG.EVENTO
)
/*
<DOCUMENTACIÓN
  TIPODOC = "PROCEDIMIENTO">
   <ELEMENTO
      NOMBRE = "PV_OBTENER_SOL_PEND_CICLO_PR" 
      LENGUAJE="PL/SQL"
      FECHA="25-03-2011"
      VERSIÓN="1.0"
      DISEÑADOR="EVERIS"
      PROGRAMADOR="EVERIS"
      AMBIENTE DESARROLLO="BD">
      <RETORNO>NA</RETORNO>
      <DESCRIPCIÓN>DETERMINA SI EXISTEN SOLICITUDES PENDIENTES DE CICLO</DESCRIPCIÓN>
      <PARÁMETROS>
         <ENTRADA>
              <PARAM NOM="EN_COD_CLIENTE" TIPO="NUMBER"> CODIGO DEL CLIENTE</PARAM>        
         </ENTRADA>
         <SALIDA>
            <PARAM NOM="SN_PENDIEN_CICLO"  TIPO="NUMBER >SOLICITUDES DE CICLO PENDIENTES</PARAM>
            <PARAM NOM="SN_COD_RETORNO"  TIPO="NUMERICO" >CÓDIGO DE RETORNO (DESCRIPCIÓN DE ERROR)</PARAM>
            <PARAM NOM="SV_MENS_RETORNO"  TIPO="VARCHAR" >MENSAJE DE RETORNO (CÓDIGO DE ERROR)</PARAM>
            <PARAM NOM="SN_NUM_EVENTO"  TIPO="NUMERICO" >NÚMERO DE EVENTO</PARAM>
         </SALIDA>
      </PARÁMETROS>
   </ELEMENTO>
</DOCUMENTACIÓN>
*/
IS

LN_CICLO_PENDIENTE         NUMBER;

LV_DES_ERROR               GE_ERRORES_PG.DESEVENT;
LV_SSQL                    GE_ERRORES_PG.VQUERY;
LV_NOMBRE_PROC             STRING(30)   := 'PV_OBTENER_SOL_PEND_CICLO_PR';
LV_PKG_PROC                STRING(60)   := GV_PACKAGE||'.'||LV_NOMBRE_PROC;

BEGIN

    SN_COD_RETORNO  := 0;
    SV_MENS_RETORNO := 'OK';
    SN_NUM_EVENTO     := 0;

    LV_SSQL := ' SELECT COUNT(1)FROM  GA_FINCICLO '
              ||    'WHERE COD_CLIENTE =' || EN_COD_CLIENTE 
              ||     'AND TRIM(COD_PLANTARIF) <> ''-1''';
      
    SELECT COUNT(1)
    INTO SN_PENDIEN_CICLO 
    FROM  GA_FINCICLO
    WHERE COD_CLIENTE = EN_COD_CLIENTE 
    AND TRIM(COD_PLANTARIF) <> '-1'; 
     
          
EXCEPTION
        
    WHEN OTHERS THEN
        SN_COD_RETORNO := GV_ERROR_OTHERS;
        IF NOT GE_ERRORES_PG.MENSAJEERROR(SN_COD_RETORNO,SV_MENS_RETORNO) THEN
          SV_MENS_RETORNO := GV_ERROR_NO_CLASIF;
        END IF;
        LV_DES_ERROR := SUBSTR(LV_NOMBRE_PROC || '('||EN_COD_CLIENTE||'); - ' || SQLERRM,1,GN_LARGOERRTEC);
        SV_MENS_RETORNO:=SUBSTR(SV_MENS_RETORNO,1,GN_LARGODESC);
        SN_NUM_EVENTO := GE_ERRORES_PG.GRABARPL(SN_NUM_EVENTO, GV_COD_MODULO, SV_MENS_RETORNO, '1.0', USER, 
        LV_PKG_PROC, LV_SSQL, SN_COD_RETORNO, LV_DES_ERROR );
        
END PV_OBTENER_SOL_PEND_CICLO_PR;


PROCEDURE PV_GET_LISTA_CONTRATOS_PR(
                                    EV_NOM_USUARIO        IN GE_SEG_USUARIO.NOM_USUARIO%TYPE,
                                    EV_COD_PROGRAMA       IN GE_SEG_PERFILES.COD_PROGRAMA%TYPE,
                                    EV_EQPRESTADO         IN GA_ABOCEL.IND_EQPRESTADO%TYPE,
                                    SC_LISTA_CONTRATOS    OUT REFCURSOR,
                                    SN_COD_RETORNO        OUT NOCOPY GE_ERRORES_TD.COD_MSGERROR%TYPE,
                                    SV_MENS_RETORNO        OUT NOCOPY GE_ERRORES_TD.DET_MSGERROR%TYPE,
                                    SN_NUM_EVENTO          OUT NOCOPY GE_ERRORES_PG.EVENTO
)
 /*
<DOCUMENTACIÓN
  TIPODOC = "PROCEDIMIENTO">
   <ELEMENTO
      NOMBRE = "PV_GET_LISTA_CONTRATOS_PR"
      LENGUAJE="PL/SQL"
      FECHA="10-04-2011"
      VERSIÓN="1.0"
      DISEÑADOR="EVERIS"
      PROGRAMADOR="EVERIS"
      AMBIENTE DESARROLLO="BD">
      <RETORNO>NA</RETORNO>
      <DESCRIPCIÓN> OBTIENE DATOS DEL AVISO DE SINIESTRO</DESCRIPCIÓN>
      <PARÁMETROS>
         <ENTRADA>
              <PARAM NOM="EV_NOM_USUARIO" TIPO="VARCHAR"> NOMBRE USUARIO </PARAM>
              <PARAM NOM="EV_COD_PROGRAMA" TIPO="VARCHAR"> CODIGO DE PROGRAMA </PARAM>
              <PARAM NOM="EV_EQPRESTADO" TIPO="VARCHAR"> INDICADCOR DE EQUIPO PRESTADO </PARAM>
         </ENTRADA>
         <SALIDA>
            <PARAM NOM="SC_LISTA_CONTRATOS"  TIPO="CURSOR" >CURSOR CON LISTA DE CONTRATOS</PARAM>
            <PARAM NOM="SN_COD_RETORNO"  TIPO="NUMERICO" >CÓDIGO DE RETORNO (DESCRIPCIÓN DE ERROR)</PARAM>
            <PARAM NOM="SV_MENS_RETORNO"  TIPO="VARCHAR" >MENSAJE DE RETORNO (CÓDIGO DE ERROR)</PARAM>
            <PARAM NOM="SN_NUM_EVENTO"  TIPO="NUMERICO" >NÚMERO DE EVENTO</PARAM>
         </SALIDA>
      </PARÁMETROS>
   </ELEMENTO>
</DOCUMENTACIÓN>
*/
IS
    LV_DES_ERROR               GE_ERRORES_PG.DESEVENT;
    LV_SSQL                    GE_ERRORES_PG.VQUERY;
    LV_NOMBRE_PROC             STRING(30)   := 'PV_GET_LISTA_CONTRATOS_PR';
    LV_PKG_PROC                STRING(60)   := GV_PACKAGE||'.'||LV_NOMBRE_PROC;
    
    LN_PERMISO_A                 NUMBER;
    LN_PERMISO_B                 NUMBER;
BEGIN

    SN_COD_RETORNO  := 0;
    SV_MENS_RETORNO := 'OK';
    SN_NUM_EVENTO   := 0;
    
   
    SELECT COUNT (A.COD_PROCESO) INTO LN_PERMISO_A
    FROM GE_SEG_PERFILES A, GE_SEG_GRPUSUARIO B
    WHERE A.COD_GRUPO = B.COD_GRUPO
    AND B.NOM_USUARIO = EV_NOM_USUARIO
    AND A.COD_PROGRAMA = EV_COD_PROGRAMA
    AND A.NUM_VERSION = (
        SELECT NVL (MAX (NUM_VERSION), 0)
        FROM GE_PROGRAMAS
        WHERE COD_PROGRAMA = EV_COD_PROGRAMA)
    AND A.COD_PROCESO = (
        SELECT COD_PROCESO
        FROM GAD_PROCESOS_PERFILES
        WHERE NOM_PERFIL_PROCESO = 'COD_PROC_COMODATO')
    AND ROWNUM = 1;
    
    
    SELECT COUNT (A.COD_PROCESO) INTO LN_PERMISO_B
    FROM GE_SEG_PERFILES A, GE_SEG_GRPUSUARIO B
    WHERE A.COD_GRUPO = B.COD_GRUPO
    AND B.NOM_USUARIO = EV_NOM_USUARIO
    AND A.COD_PROGRAMA = EV_COD_PROGRAMA
    AND A.NUM_VERSION = (
        SELECT NVL (MAX (NUM_VERSION), 0)
        FROM GE_PROGRAMAS
        WHERE COD_PROGRAMA = EV_COD_PROGRAMA)
    AND A.COD_PROCESO = (
        SELECT COD_PROCESO
        FROM GAD_PROCESOS_PERFILES
        WHERE NOM_PERFIL_PROCESO = 'COD_PROC_INDGMC')
    AND ROWNUM = 1;
        
    LV_SSQL := 'SELECT COD_TIPCONTRATO, DES_TIPCONTRATO, NVL(IND_COMODATO,0), '
            || 'MESES_MINIMO, IND_PRECIOLISTA, IND_PROCEQUI '
            || 'FROM GA_TIPCONTRATO '
            || 'WHERE SYSDATE BETWEEN FEC_DESDE AND NVL(FEC_HASTA, SYSDATE)'
            || 'AND COD_PRODUCTO = 1 '
            || 'AND IND_CONTCEL = ''V'' '
            || 'AND IND_CONTSEG = ''P'' ';
        
    IF LN_PERMISO_A > 0 THEN
        IF EV_EQPRESTADO <> '1' THEN
            LV_SSQL:= LV_SSQL || 'AND NVL(IND_COMODATO,0) <> 1 ';
        END IF;
    END IF; 
    
    IF LN_PERMISO_B > 0 THEN
        LV_SSQL:= LV_SSQL || 'AND IND_GMC = 0 ';
    END IF;    
        
OPEN SC_LISTA_CONTRATOS FOR LV_SSQL;

EXCEPTION
    
    WHEN OTHERS THEN
        SN_COD_RETORNO := GV_ERROR_OTHERS;
        IF NOT GE_ERRORES_PG.MENSAJEERROR(SN_COD_RETORNO,SV_MENS_RETORNO) THEN
          SV_MENS_RETORNO := GV_ERROR_NO_CLASIF;
        END IF;
        LV_DES_ERROR := SUBSTR(LV_NOMBRE_PROC || '('''||EV_NOM_USUARIO||''','''||EV_COD_PROGRAMA||''','''||EV_EQPRESTADO||'''); - ' || SQLERRM,1,GN_LARGOERRTEC);
        SV_MENS_RETORNO:=SUBSTR(SV_MENS_RETORNO,1,GN_LARGODESC);
        SN_NUM_EVENTO := GE_ERRORES_PG.GRABARPL(SN_NUM_EVENTO, GV_COD_MODULO, SV_MENS_RETORNO, '1.0', USER, 
        LV_PKG_PROC, LV_SSQL, SN_COD_RETORNO, LV_DES_ERROR );

END PV_GET_LISTA_CONTRATOS_PR;



PROCEDURE PV_GET_DATOS_PRODUCTO_PR(
                                    EN_NUM_ABONADO        IN GA_ABOCEL.NUM_ABONADO%TYPE,
                                    EV_TIP_TERMINAL       IN GA_EQUIPABOSER.TIP_TERMINAL%TYPE,
                                    SC_DATOS_PRODUCTO     OUT REFCURSOR,
                                    SN_COD_RETORNO        OUT NOCOPY GE_ERRORES_TD.COD_MSGERROR%TYPE,
                                    SV_MENS_RETORNO        OUT NOCOPY GE_ERRORES_TD.DET_MSGERROR%TYPE,
                                    SN_NUM_EVENTO          OUT NOCOPY GE_ERRORES_PG.EVENTO
)
 /*
<DOCUMENTACIÓN
  TIPODOC = "PROCEDIMIENTO">
   <ELEMENTO
      NOMBRE = "PV_GET_DATOS_PRODUCTO_PR"
      LENGUAJE="PL/SQL"
      FECHA="10-04-2011"
      VERSIÓN="1.0"
      DISEÑADOR="EVERIS"
      PROGRAMADOR="EVERIS"
      AMBIENTE DESARROLLO="BD">
      <RETORNO>NA</RETORNO>
      <DESCRIPCIÓN> OBTIENE DATOS DEL AVISO DE SINIESTRO</DESCRIPCIÓN>
      <PARÁMETROS>
         <ENTRADA>
              <PARAM NOM="EN_NUM_ABONADO" TIPO="NUMBER"> NUMERO DE ABONADO </PARAM>
              <PARAM NOM="EV_TIP_TERMINAL" TIPO="VARCHAR"> TIPO DE TERMINAL </PARAM>
         </ENTRADA>
         <SALIDA>
            <PARAM NOM="SC_DATOS_PRODUCTO"  TIPO="CURSOR" >CURSOR CON LISTA DE CONTRATOS</PARAM>
            <PARAM NOM="SN_COD_RETORNO"  TIPO="NUMERICO" >CÓDIGO DE RETORNO (DESCRIPCIÓN DE ERROR)</PARAM>
            <PARAM NOM="SV_MENS_RETORNO"  TIPO="VARCHAR" >MENSAJE DE RETORNO (CÓDIGO DE ERROR)</PARAM>
            <PARAM NOM="SN_NUM_EVENTO"  TIPO="NUMERICO" >NÚMERO DE EVENTO</PARAM>
         </SALIDA>
      </PARÁMETROS>
   </ELEMENTO>
</DOCUMENTACIÓN>
*/
IS
    LV_DES_ERROR               GE_ERRORES_PG.DESEVENT;
    LV_SSQL                    GE_ERRORES_PG.VQUERY;
    LV_NOMBRE_PROC             STRING(30)   := 'PV_GET_DATOS_PRODUCTO_PR';
    LV_PKG_PROC                STRING(60)   := GV_PACKAGE||'.'||LV_NOMBRE_PROC;
    
    LN_PERMISO                 NUMBER;
BEGIN

    SN_COD_RETORNO  := 0;
    SV_MENS_RETORNO := 'OK';
    SN_NUM_EVENTO   := 0;
    
    LV_SSQL := 'SELECT A.DES_EQUIPO, A.NUM_SERIE, '
            || 'DECODE(A.IND_PROCEQUI, ''I'', ''INTERNO'',''E'', ''EXTERNO'', ''S'', ''SUBSIDIADO''), '
            || 'D.DES_TERMINAL, B.DES_MODVENTA, A.NUM_SERIEMEC, '
            || 'DECODE(A.IND_PROPIEDAD, ''C'', ''CLIENTE'', ''E'', ''EMPRESA''), '
            || 'C.DES_USO, A.IND_PROCEQUI, B.IND_CUOTAS, B.COD_MODVENTA '
            || 'FROM GA_EQUIPABOSER A, GE_MODVENTA B, AL_USOS C, AL_TIPOS_TERMINALES D '
            || 'WHERE A.NUM_ABONADO = '||EN_NUM_ABONADO||' '
            || 'AND A.IND_EQUIACC = ''E'' '
            || 'AND A.FEC_ALTA = '
            || '(SELECT MAX(FEC_ALTA) FROM GA_EQUIPABOSER WHERE NUM_ABONADO = '||EN_NUM_ABONADO||' AND IND_EQUIACC = ''E'') '
            || 'AND B.COD_MODVENTA(+) = A.COD_MODVENTA '
            || 'AND C.COD_USO = A.COD_USO '
            || 'AND D.COD_PRODUCTO = 1 '
            || 'AND D.TIP_TERMINAL = A.TIP_TERMINAL '
            || 'AND A.TIP_TERMINAL = '''||EV_TIP_TERMINAL||'''';
    
OPEN SC_DATOS_PRODUCTO FOR
    SELECT A.DES_EQUIPO, A.NUM_SERIE,
    DECODE(A.IND_PROCEQUI, 'I', 'INTERNO','E', 'EXTERNO', 'S', 'SUBSIDIADO'),
    D.DES_TERMINAL, B.DES_MODVENTA, A.NUM_SERIEMEC,
    DECODE(A.IND_PROPIEDAD, 'C', 'CLIENTE', 'E', 'EMPRESA'),
    C.DES_USO, A.IND_PROCEQUI, B.IND_CUOTAS, B.COD_MODVENTA
    FROM GA_EQUIPABOSER A, GE_MODVENTA B, AL_USOS C, AL_TIPOS_TERMINALES D
    WHERE A.NUM_ABONADO = EN_NUM_ABONADO
    AND A.IND_EQUIACC = 'E'
    AND A.FEC_ALTA =
    (SELECT MAX(FEC_ALTA) FROM GA_EQUIPABOSER WHERE NUM_ABONADO = EN_NUM_ABONADO AND IND_EQUIACC = 'E')
    AND B.COD_MODVENTA(+) = A.COD_MODVENTA
    AND C.COD_USO = A.COD_USO
    AND D.COD_PRODUCTO = 1
    AND D.TIP_TERMINAL = A.TIP_TERMINAL
    AND A.TIP_TERMINAL = EV_TIP_TERMINAL;

EXCEPTION
    
    WHEN OTHERS THEN
        SN_COD_RETORNO := GV_ERROR_OTHERS;
        IF NOT GE_ERRORES_PG.MENSAJEERROR(SN_COD_RETORNO,SV_MENS_RETORNO) THEN
          SV_MENS_RETORNO := GV_ERROR_NO_CLASIF;
        END IF;
        LV_DES_ERROR := SUBSTR(LV_NOMBRE_PROC || '('||EN_NUM_ABONADO||','''||EV_TIP_TERMINAL||'''); - ' || SQLERRM,1,GN_LARGOERRTEC);
        SV_MENS_RETORNO:=SUBSTR(SV_MENS_RETORNO,1,GN_LARGODESC);
        SN_NUM_EVENTO := GE_ERRORES_PG.GRABARPL(SN_NUM_EVENTO, GV_COD_MODULO, SV_MENS_RETORNO, '1.0', USER, 
        LV_PKG_PROC, LV_SSQL, SN_COD_RETORNO, LV_DES_ERROR );

END PV_GET_DATOS_PRODUCTO_PR;

PROCEDURE PV_GET_DATOS_CONTRATO_PR(
                                    EV_COD_TIPCONTRATO    IN GA_ABOCEL.COD_TIPCONTRATO%TYPE,
                                    SC_DATOS_CONTRATO     OUT REFCURSOR,
                                    SN_COD_RETORNO        OUT NOCOPY GE_ERRORES_TD.COD_MSGERROR%TYPE,
                                    SV_MENS_RETORNO       OUT NOCOPY GE_ERRORES_TD.DET_MSGERROR%TYPE,
                                    SN_NUM_EVENTO         OUT NOCOPY GE_ERRORES_PG.EVENTO
)
 /*
<DOCUMENTACIÓN
  TIPODOC = "PROCEDIMIENTO">
   <ELEMENTO
      NOMBRE = "PV_GET_DATOS_CONTRATO_PR"
      LENGUAJE="PL/SQL"
      FECHA="10-04-2011"
      VERSIÓN="1.0"
      DISEÑADOR="EVERIS"
      PROGRAMADOR="EVERIS"
      AMBIENTE DESARROLLO="BD">
      <RETORNO>NA</RETORNO>
      <DESCRIPCIÓN> OBTIENE DATOS DEL AVISO DE SINIESTRO</DESCRIPCIÓN>
      <PARÁMETROS>
         <ENTRADA>
              <PARAM NOM="EV_COD_TIPCONTRATO" TIPO="VARCHAR"> CODIGO DE TIPO DE CONTRATO </PARAM>
         </ENTRADA>
         <SALIDA>
            <PARAM NOM="SC_DATOS_CONTRATO"  TIPO="CURSOR" >CURSOR CON DATOS DE UN CONTRATO</PARAM>
            <PARAM NOM="SN_COD_RETORNO"  TIPO="NUMERICO" >CÓDIGO DE RETORNO (DESCRIPCIÓN DE ERROR)</PARAM>
            <PARAM NOM="SV_MENS_RETORNO"  TIPO="VARCHAR" >MENSAJE DE RETORNO (CÓDIGO DE ERROR)</PARAM>
            <PARAM NOM="SN_NUM_EVENTO"  TIPO="NUMERICO" >NÚMERO DE EVENTO</PARAM>
         </SALIDA>
      </PARÁMETROS>
   </ELEMENTO>
</DOCUMENTACIÓN>
*/
IS
    LV_DES_ERROR               GE_ERRORES_PG.DESEVENT;
    LV_SSQL                    GE_ERRORES_PG.VQUERY;
    LV_NOMBRE_PROC             STRING(30)   := 'PV_GET_DATOS_CONTRATO_PR';
    LV_PKG_PROC                STRING(60)   := GV_PACKAGE||'.'||LV_NOMBRE_PROC;
    
    LN_PERMISO                 NUMBER;
BEGIN

    SN_COD_RETORNO  := 0;
    SV_MENS_RETORNO := 'OK';
    SN_NUM_EVENTO   := 0;
    
    LV_SSQL := 'SELECT COD_TIPCONTRATO, DES_TIPCONTRATO, NVL(IND_COMODATO,0), '
            || 'MESES_MINIMO, IND_PRECIOLISTA, IND_PROCEQUI '
            || 'FROM GA_TIPCONTRATO A '
            || 'WHERE A.COD_TIPCONTRATO = '''||EV_COD_TIPCONTRATO||'''';
    
   OPEN SC_DATOS_CONTRATO FOR
    SELECT COD_TIPCONTRATO, DES_TIPCONTRATO, NVL(IND_COMODATO,0),
    MESES_MINIMO, IND_PRECIOLISTA, IND_PROCEQUI
    FROM GA_TIPCONTRATO A
    WHERE A.COD_TIPCONTRATO = EV_COD_TIPCONTRATO;   

EXCEPTION
    
    WHEN OTHERS THEN
        SN_COD_RETORNO := GV_ERROR_OTHERS;
        IF NOT GE_ERRORES_PG.MENSAJEERROR(SN_COD_RETORNO,SV_MENS_RETORNO) THEN
          SV_MENS_RETORNO := GV_ERROR_NO_CLASIF;
        END IF;
        LV_DES_ERROR := SUBSTR(LV_NOMBRE_PROC || '('''||EV_COD_TIPCONTRATO||'''); - ' || SQLERRM,1,GN_LARGOERRTEC);
        SV_MENS_RETORNO:=SUBSTR(SV_MENS_RETORNO,1,GN_LARGODESC);
        SN_NUM_EVENTO := GE_ERRORES_PG.GRABARPL(SN_NUM_EVENTO, GV_COD_MODULO, SV_MENS_RETORNO, '1.0', USER, 
        LV_PKG_PROC, LV_SSQL, SN_COD_RETORNO, LV_DES_ERROR );

END PV_GET_DATOS_CONTRATO_PR;


PROCEDURE PV_GET_LISTA_MODALIDAD_PR(
                                    EV_NOM_USUARIO        IN GE_SEG_USUARIO.NOM_USUARIO%TYPE,
                                    EV_PROGRAMA           IN GE_SEG_PERFILES.COD_PROGRAMA%TYPE,
                                    EV_COD_TIP_COMIS      IN VE_VENDEDORES.COD_TIPCOMIS%TYPE,
                                    EV_COD_TIPCONTRATO    IN GA_TIPCONTRATO.COD_TIPCONTRATO%TYPE,
                                    EN_NUM_MESES          IN GA_TIPCONTRATO.MESES_MINIMO%TYPE,
                                    EV_COD_PLANTARIF      IN TA_PLANTARIF.COD_PLANTARIF%TYPE,
                                    SC_LISTA_MODALIDAD    OUT REFCURSOR,
                                    SN_COD_RETORNO        OUT NOCOPY GE_ERRORES_TD.COD_MSGERROR%TYPE,
                                    SV_MENS_RETORNO        OUT NOCOPY GE_ERRORES_TD.DET_MSGERROR%TYPE,
                                    SN_NUM_EVENTO          OUT NOCOPY GE_ERRORES_PG.EVENTO
)
 /*
<DOCUMENTACIÓN
  TIPODOC = "PROCEDIMIENTO">
   <ELEMENTO
      NOMBRE = "PV_GET_LISTA_MODALIDAD_PR"
      LENGUAJE="PL/SQL"
      FECHA="10-04-2011"
      VERSIÓN="1.0"
      DISEÑADOR="EVERIS"
      PROGRAMADOR="EVERIS"
      AMBIENTE DESARROLLO="BD">
      <RETORNO>NA</RETORNO>
      <DESCRIPCIÓN> OBTIENE DATOS DEL AVISO DE SINIESTRO</DESCRIPCIÓN>
      <PARÁMETROS>
         <ENTRADA>
              <PARAM NOM="EV_NOM_USUARIO" TIPO="VARCHAR"> NOMBRE USUARIO </PARAM>
              <PARAM NOM="EV_COD_PROGRAMA" TIPO="VARCHAR"> CODIGO DE PROGRAMA </PARAM>
              <PARAM NOM="EV_COD_TIPCOMIS" TIPO="VARCHAR"> CODIGO DE TIPO COMISIONISTA </PARAM>
              <PARAM NOM="EV_COD_TIPCONTRATO" TIPO="VARCHAR"> CODIGO DE TIPO DE CONTRATO </PARAM>
              <PARAM NOM="EN_NUM_MESES" TIPO="NUMBER"> NUMERO DE MESES DEL CONTRATO </PARAM>
         </ENTRADA>
         <SALIDA>
            <PARAM NOM="SC_LISTA_MODALIDAD"  TIPO="CURSOR" >CURSOR CON LISTA DE MODALIDADES</PARAM>
            <PARAM NOM="SN_COD_RETORNO"  TIPO="NUMERICO" >CÓDIGO DE RETORNO (DESCRIPCIÓN DE ERROR)</PARAM>
            <PARAM NOM="SV_MENS_RETORNO"  TIPO="VARCHAR" >MENSAJE DE RETORNO (CÓDIGO DE ERROR)</PARAM>
            <PARAM NOM="SN_NUM_EVENTO"  TIPO="NUMERICO" >NÚMERO DE EVENTO</PARAM>
         </SALIDA>
      </PARÁMETROS>
   </ELEMENTO>
</DOCUMENTACIÓN>
*/
IS
    LV_DES_ERROR               GE_ERRORES_PG.DESEVENT;
    LV_SSQL                    GE_ERRORES_PG.VQUERY;
    LV_NOMBRE_PROC             STRING(30)   := 'PV_GET_LISTA_MODALIDAD_PR';
    LV_PKG_PROC                STRING(60)   := GV_PACKAGE||'.'||LV_NOMBRE_PROC;
    LV_COD_OPERACION           GAD_MODPAGO_CATPLAN.COD_OPERACION%TYPE;
    LN_PERMISO                 NUMBER;
    LN_IND_CAUSA               GED_PARAMETROS.VAL_PARAMETRO%TYPE;
    LN_CANAL_VENTA             VE_TIPCOMIS.IND_VTA_EXTERNA%TYPE;
    LV_COD_CATEGORIA           VE_CATPLANTARIF.COD_CATEGORIA%TYPE;
    LV_CAU_CAMBIO              GED_PARAMETROS.VAL_PARAMETRO%TYPE;
BEGIN

    SN_COD_RETORNO  := 0;
    SV_MENS_RETORNO := 'OK';
    SN_NUM_EVENTO   := 0;
    
    LV_COD_OPERACION := 'RE';

            
    LV_SSQL := 'SELECT VAL_PARAMETRO FROM GED_PARAMETROS WHERE NOM_PARAMETRO = '''||LV_COD_OPERACION||'''';
    SELECT VAL_PARAMETRO INTO LN_IND_CAUSA
    FROM GED_PARAMETROS WHERE NOM_PARAMETRO = LV_COD_OPERACION;


    LV_SSQL := 'SELECT IND_VTA_EXTERNA '
            || 'FROM VE_TIPCOMIS '
            || 'WHERE COD_TIPCOMIS = '''||EV_COD_TIP_COMIS||'''';
    SELECT IND_VTA_EXTERNA
    INTO LN_CANAL_VENTA
    FROM VE_TIPCOMIS
    WHERE COD_TIPCOMIS = EV_COD_TIP_COMIS;


    LV_SSQL := 'SELECT COD_CATEGORIA FROM VE_CATPLANTARIF WHERE COD_PLANTARIF = '''||EV_COD_PLANTARIF||'''';
    SELECT COD_CATEGORIA INTO LV_COD_CATEGORIA
    FROM VE_CATPLANTARIF WHERE COD_PLANTARIF = EV_COD_PLANTARIF;


    SELECT COUNT(A.COD_PROCESO) INTO LN_PERMISO
    FROM GE_SEG_PERFILES A, GE_SEG_GRPUSUARIO B
    WHERE A.COD_GRUPO = B.COD_GRUPO
    AND B.NOM_USUARIO = EV_NOM_USUARIO
    AND A.COD_PROGRAMA = EV_PROGRAMA
    AND A.NUM_VERSION = 
        (SELECT NVL (MAX (NUM_VERSION), 0)
        FROM GE_PROGRAMAS WHERE COD_PROGRAMA = EV_PROGRAMA)
    AND A.COD_PROCESO = (
        SELECT COD_PROCESO FROM GAD_PROCESOS_PERFILES
        WHERE NOM_PERFIL_PROCESO = 'COD_PROC_MODVENTA')
    AND ROWNUM = 1;
    
    SELECT VAL_PARAMETRO INTO LV_CAU_CAMBIO FROM GED_PARAMETROS WHERE NOM_PARAMETRO = 'COD_CAUSA_RESTI';
           
    LV_SSQL := 'SELECT UNIQUE A.IND_CUOTAS, A.COD_MODVENTA, A.DES_MODVENTA '
            || 'FROM GE_MODVENTA A, GA_MODVENT_APLIC B '
            || 'WHERE A.COD_MODVENTA=B.COD_MODVENTA '
            || 'AND B.COD_PRODUCTO = 1 '
            || 'AND B.COD_APLIC LIKE ''%'||EV_PROGRAMA||'%'' '
            || 'AND B.COD_CANAL = '||LN_CANAL_VENTA||' '
            || 'AND A.COD_MODVENTA IN (SELECT COD_MODPAGO '
            || 'FROM GAD_MODPAGO_CATPLAN C '
            || 'WHERE C.COD_TIPCONTRATO = '''||EV_COD_TIPCONTRATO||''' '
            || 'AND C.NUM_MESES = '|| EN_NUM_MESES ||' '
            || 'AND C.COD_OPERACION = '''||LV_COD_OPERACION||''' '
            || 'AND C.IND_CAUSA = '||LN_IND_CAUSA||' ';

    IF LN_IND_CAUSA <> '0' AND LV_CAU_CAMBIO <> '' THEN
        LV_SSQL := LV_SSQL || 'AND C.COD_CAUSA = '''||LV_CAU_CAMBIO||''' ';
    END IF;

    LV_SSQL := LV_SSQL || 'AND C.COD_CATEGORIA = '''||LV_COD_CATEGORIA||''' '
            || 'AND C.COD_CANAL_VTA = '||LN_CANAL_VENTA||' '
            || 'AND SYSDATE BETWEEN C.FEC_DESDE AND C.FEC_HASTA '
            || 'AND C.COD_MODPAGO = A.COD_MODVENTA) ';

    IF LN_PERMISO = 1 THEN 
        LV_SSQL := LV_SSQL || 'AND IND_CUOTAS <> -1 ';
    END IF;
        
    OPEN SC_LISTA_MODALIDAD FOR LV_SSQL;   

EXCEPTION
    
    WHEN OTHERS THEN
        SN_COD_RETORNO := GV_ERROR_OTHERS;
        IF NOT GE_ERRORES_PG.MENSAJEERROR(SN_COD_RETORNO,SV_MENS_RETORNO) THEN
          SV_MENS_RETORNO := GV_ERROR_NO_CLASIF;
        END IF;
        LV_DES_ERROR := SUBSTR(LV_NOMBRE_PROC || '('''||EV_NOM_USUARIO||''','''||EV_PROGRAMA||''','''||EV_COD_TIP_COMIS
                        ||''','''||EV_COD_TIP_COMIS||''','''||EV_COD_TIPCONTRATO||''','||EN_NUM_MESES||'); - ' || SQLERRM,1,GN_LARGOERRTEC);
        SV_MENS_RETORNO:=SUBSTR(SV_MENS_RETORNO,1,GN_LARGODESC);
        SN_NUM_EVENTO := GE_ERRORES_PG.GRABARPL(SN_NUM_EVENTO, GV_COD_MODULO, SV_MENS_RETORNO, '1.0', USER, 
        LV_PKG_PROC, LV_SSQL, SN_COD_RETORNO, LV_DES_ERROR );

END PV_GET_LISTA_MODALIDAD_PR;


PROCEDURE PV_GET_LISTA_PRORROGAS_PR(
                                    SC_LISTA_PRORROGAS     OUT REFCURSOR,
                                    SN_COD_RETORNO         OUT NOCOPY GE_ERRORES_TD.COD_MSGERROR%TYPE,
                                    SV_MENS_RETORNO        OUT NOCOPY GE_ERRORES_TD.DET_MSGERROR%TYPE,
                                    SN_NUM_EVENTO          OUT NOCOPY GE_ERRORES_PG.EVENTO
)
 /*
<DOCUMENTACIÓN
  TIPODOC = "PROCEDIMIENTO">
   <ELEMENTO
      NOMBRE = "PV_GET_LISTA_PRORROGAS_PR"
      LENGUAJE="PL/SQL"
      FECHA="10-04-2011"
      VERSIÓN="1.0"
      DISEÑADOR="EVERIS"
      PROGRAMADOR="EVERIS"
      AMBIENTE DESARROLLO="BD">
      <RETORNO>NA</RETORNO>
      <DESCRIPCIÓN> OBTIENE DATOS DEL AVISO DE SINIESTRO</DESCRIPCIÓN>
      <PARÁMETROS>
         <ENTRADA>
         </ENTRADA>
         <SALIDA>
            <PARAM NOM="SC_LISTA_PRORROGAS"  TIPO="CURSOR" >CURSOR CON LISTA DE PRORROGAS</PARAM>
            <PARAM NOM="SN_COD_RETORNO"  TIPO="NUMERICO" >CÓDIGO DE RETORNO (DESCRIPCIÓN DE ERROR)</PARAM>
            <PARAM NOM="SV_MENS_RETORNO"  TIPO="VARCHAR" >MENSAJE DE RETORNO (CÓDIGO DE ERROR)</PARAM>
            <PARAM NOM="SN_NUM_EVENTO"  TIPO="NUMERICO" >NÚMERO DE EVENTO</PARAM>
         </SALIDA>
      </PARÁMETROS>
   </ELEMENTO>
</DOCUMENTACIÓN>
*/
IS
    LV_DES_ERROR               GE_ERRORES_PG.DESEVENT;
    LV_SSQL                    GE_ERRORES_PG.VQUERY;
    LV_NOMBRE_PROC             STRING(30)   := 'PV_GET_LISTA_PRORROGAS_PR';
    LV_PKG_PROC                STRING(60)   := GV_PACKAGE||'.'||LV_NOMBRE_PROC;
    
    LN_PERMISO                 NUMBER;
BEGIN

    SN_COD_RETORNO  := 0;
    SV_MENS_RETORNO := 'OK';
    SN_NUM_EVENTO   := 0;
    
    LV_SSQL := 'SELECT NUM_MESES,DES_PRORROGA FROM GA_MESES_PRORROGA ' 
            || 'WHERE SYSDATE BETWEEN FEC_DESDE AND FEC_HASTA ORDER BY NUM_MESES'; 
    
    OPEN SC_LISTA_PRORROGAS FOR
    SELECT NUM_MESES,DES_PRORROGA FROM GA_MESES_PRORROGA WHERE SYSDATE BETWEEN FEC_DESDE AND FEC_HASTA ORDER BY NUM_MESES;


EXCEPTION
    
    WHEN OTHERS THEN
        SN_COD_RETORNO := GV_ERROR_OTHERS;
        IF NOT GE_ERRORES_PG.MENSAJEERROR(SN_COD_RETORNO,SV_MENS_RETORNO) THEN
          SV_MENS_RETORNO := GV_ERROR_NO_CLASIF;
        END IF;
        LV_DES_ERROR := SUBSTR(LV_NOMBRE_PROC || '( ); - ' || SQLERRM,1,GN_LARGOERRTEC);
        SV_MENS_RETORNO:=SUBSTR(SV_MENS_RETORNO,1,GN_LARGODESC);
        SN_NUM_EVENTO := GE_ERRORES_PG.GRABARPL(SN_NUM_EVENTO, GV_COD_MODULO, SV_MENS_RETORNO, '1.0', USER, 
        LV_PKG_PROC, LV_SSQL, SN_COD_RETORNO, LV_DES_ERROR );

END PV_GET_LISTA_PRORROGAS_PR;


PROCEDURE PV_GET_LISTA_BODEGAS_PR(
                                    EN_COD_VENDEDOR        IN VE_VENDEDORES.COD_VENDEDOR%TYPE,
                                    EV_COD_OPERADORA       IN GE_OPERADORA_SCL.COD_OPERADORA_SCL%TYPE,
                                    SC_LISTA_BODEGAS       OUT REFCURSOR,
                                    SN_COD_RETORNO         OUT NOCOPY GE_ERRORES_TD.COD_MSGERROR%TYPE,
                                    SV_MENS_RETORNO        OUT NOCOPY GE_ERRORES_TD.DET_MSGERROR%TYPE,
                                    SN_NUM_EVENTO          OUT NOCOPY GE_ERRORES_PG.EVENTO
)
 /*
<DOCUMENTACIÓN
  TIPODOC = "PROCEDIMIENTO">
   <ELEMENTO
      NOMBRE = "PV_GET_LISTA_BODEGAS_PR"
      LENGUAJE="PL/SQL"
      FECHA="10-04-2011"
      VERSIÓN="1.0"
      DISEÑADOR="EVERIS"
      PROGRAMADOR="EVERIS"
      AMBIENTE DESARROLLO="BD">
      <RETORNO>NA</RETORNO>
      <DESCRIPCIÓN> OBTIENE LISTA DE BODEGAS
      </DESCRIPCIÓN>
      <PARÁMETROS>
         <ENTRADA>
            <PARAM NOM="EN_COD_VENDEDOR" TIPO="NUMBER">CODIGO DE VENDEDOR </PARAM>
            <PARAM NOM="EN_NUM_MESES" TIPO="NUMBER"> NUMERO DE MESES DEL CONTRATO </PARAM>
         </ENTRADA>
         <SALIDA>
            <PARAM NOM="SC_LISTA_PRORROGAS"  TIPO="CURSOR" >CURSOR CON LISTA DE BODEGAS</PARAM>
            <PARAM NOM="SN_COD_RETORNO"  TIPO="NUMERICO" >CÓDIGO DE RETORNO (DESCRIPCIÓN DE ERROR)</PARAM>
            <PARAM NOM="SV_MENS_RETORNO"  TIPO="VARCHAR" >MENSAJE DE RETORNO (CÓDIGO DE ERROR)</PARAM>
            <PARAM NOM="SN_NUM_EVENTO"  TIPO="NUMERICO" >NÚMERO DE EVENTO</PARAM>
         </SALIDA>
      </PARÁMETROS>
   </ELEMENTO>
</DOCUMENTACIÓN>
*/
IS
    LV_DES_ERROR               GE_ERRORES_PG.DESEVENT;
    LV_SSQL                    GE_ERRORES_PG.VQUERY;
    LV_NOMBRE_PROC             STRING(30)   := 'PV_GET_LISTA_BODEGAS_PR';
    LV_PKG_PROC                STRING(60)   := GV_PACKAGE||'.'||LV_NOMBRE_PROC;
    
    LN_PERMISO                 NUMBER;
BEGIN

    SN_COD_RETORNO  := 0;
    SV_MENS_RETORNO := 'OK';
    SN_NUM_EVENTO   := 0;
    
    LV_SSQL := 'SELECT  A.COD_BODEGA, B.DES_BODEGA '
            || 'FROM VE_VENDALMAC A, AL_BODEGAS B, '
            || 'AL_BODEGANODO C, GE_OPERADORA_SCL D '
            || 'WHERE A.COD_VENDEDOR = '||EN_COD_VENDEDOR||' '
            || 'AND SYSDATE BETWEEN A.FEC_ASIGNACION AND NVL(A.FEC_DESASIGNAC,SYSDATE) '
            || 'AND A.COD_BODEGA = B.COD_BODEGA '
            || 'AND B.COD_BODEGA = C.COD_BODEGA '
            || 'AND C.COD_BODEGANODO = D.COD_BODEGANODO '
            || 'AND D.COD_OPERADORA_SCL = '''||EV_COD_OPERADORA||''' '
            || 'ORDER BY B.DES_BODEGA';
    
    OPEN SC_LISTA_BODEGAS FOR
        SELECT A.COD_BODEGA, B.DES_BODEGA
        FROM VE_VENDALMAC A, AL_BODEGAS B,
        AL_BODEGANODO C, GE_OPERADORA_SCL D
        WHERE A.COD_VENDEDOR = EN_COD_VENDEDOR
        AND SYSDATE BETWEEN A.FEC_ASIGNACION AND NVL(A.FEC_DESASIGNAC,SYSDATE)
        AND A.COD_BODEGA = B.COD_BODEGA
        AND B.COD_BODEGA = C.COD_BODEGA
        AND C.COD_BODEGANODO = D.COD_BODEGANODO
        AND D.COD_OPERADORA_SCL = EV_COD_OPERADORA
        ORDER BY B.DES_BODEGA;


EXCEPTION
    
    WHEN OTHERS THEN
        SN_COD_RETORNO := GV_ERROR_OTHERS;
        IF NOT GE_ERRORES_PG.MENSAJEERROR(SN_COD_RETORNO,SV_MENS_RETORNO) THEN
          SV_MENS_RETORNO := GV_ERROR_NO_CLASIF;
        END IF;
        LV_DES_ERROR := SUBSTR(LV_NOMBRE_PROC || '('||EN_COD_VENDEDOR||','''||EV_COD_OPERADORA||''' ); - ' || SQLERRM,1,GN_LARGOERRTEC);
        SV_MENS_RETORNO:=SUBSTR(SV_MENS_RETORNO,1,GN_LARGODESC);
        SN_NUM_EVENTO := GE_ERRORES_PG.GRABARPL(SN_NUM_EVENTO, GV_COD_MODULO, SV_MENS_RETORNO, '1.0', USER, 
        LV_PKG_PROC, LV_SSQL, SN_COD_RETORNO, LV_DES_ERROR );

END PV_GET_LISTA_BODEGAS_PR;


PROCEDURE PV_GET_LISTA_USOS_PR(
                                    SC_LISTA_USOS          OUT REFCURSOR,
                                    SN_COD_RETORNO         OUT NOCOPY GE_ERRORES_TD.COD_MSGERROR%TYPE,
                                    SV_MENS_RETORNO        OUT NOCOPY GE_ERRORES_TD.DET_MSGERROR%TYPE,
                                    SN_NUM_EVENTO          OUT NOCOPY GE_ERRORES_PG.EVENTO
)
 /*
<DOCUMENTACIÓN
  TIPODOC = "PROCEDIMIENTO">
   <ELEMENTO
      NOMBRE = "PV_GET_LISTA_USOS_PR"
      LENGUAJE="PL/SQL"
      FECHA="10-04-2011"
      VERSIÓN="1.0"
      DISEÑADOR="EVERIS"
      PROGRAMADOR="EVERIS"
      AMBIENTE DESARROLLO="BD">
      <RETORNO>NA</RETORNO>
      <DESCRIPCIÓN> OBTIENE LISTA DE USOS</DESCRIPCIÓN>
      <PARÁMETROS>
         <ENTRADA>
         </ENTRADA>
         <SALIDA>
            <PARAM NOM="SC_LISTA_USOS"  TIPO="CURSOR" >CURSOR CON LISTA DE PRORROGAS</PARAM>
            <PARAM NOM="SN_COD_RETORNO"  TIPO="NUMERICO" >CÓDIGO DE RETORNO (DESCRIPCIÓN DE ERROR)</PARAM>
            <PARAM NOM="SV_MENS_RETORNO"  TIPO="VARCHAR" >MENSAJE DE RETORNO (CÓDIGO DE ERROR)</PARAM>
            <PARAM NOM="SN_NUM_EVENTO"  TIPO="NUMERICO" >NÚMERO DE EVENTO</PARAM>
         </SALIDA>
      </PARÁMETROS>
   </ELEMENTO>
</DOCUMENTACIÓN>
*/
IS
    LV_DES_ERROR               GE_ERRORES_PG.DESEVENT;
    LV_SSQL                    GE_ERRORES_PG.VQUERY;
    LV_NOMBRE_PROC             STRING(30)   := 'PV_GET_LISTA_USOS_PR';
    LV_PKG_PROC                STRING(60)   := GV_PACKAGE||'.'||LV_NOMBRE_PROC;
    
    LN_PERMISO                 NUMBER;
BEGIN

    SN_COD_RETORNO  := 0;
    SV_MENS_RETORNO := 'OK';
    SN_NUM_EVENTO   := 0;


LV_SSQL := 'SELECT A.COD_USO, A.DES_USO '
        || 'FROM AL_USOS A '
        || 'WHERE A.IND_USOVENTA >= (SELECT B.VAL_PARAMETRO FROM '
        || 'GED_PARAMETROS B WHERE B.NOM_PARAMETRO = ''USOS_VENTAS'' AND B.COD_PRODUCTO = 1 )';
        
    OPEN SC_LISTA_USOS FOR
    SELECT A.COD_USO, A.DES_USO
    FROM AL_USOS A
    WHERE A.IND_USOVENTA >= (
        SELECT B.VAL_PARAMETRO FROM GED_PARAMETROS B 
        WHERE B.NOM_PARAMETRO = 'USOS_VENTAS' AND B.COD_PRODUCTO = 1 );


EXCEPTION
    
    WHEN OTHERS THEN
        SN_COD_RETORNO := GV_ERROR_OTHERS;
        IF NOT GE_ERRORES_PG.MENSAJEERROR(SN_COD_RETORNO,SV_MENS_RETORNO) THEN
          SV_MENS_RETORNO := GV_ERROR_NO_CLASIF;
        END IF;
        LV_DES_ERROR := SUBSTR(LV_NOMBRE_PROC || '( ); - ' || SQLERRM,1,GN_LARGOERRTEC);
        SV_MENS_RETORNO:=SUBSTR(SV_MENS_RETORNO,1,GN_LARGODESC);
        SN_NUM_EVENTO := GE_ERRORES_PG.GRABARPL(SN_NUM_EVENTO, GV_COD_MODULO, SV_MENS_RETORNO, '1.0', USER, 
        LV_PKG_PROC, LV_SSQL, SN_COD_RETORNO, LV_DES_ERROR );

END PV_GET_LISTA_USOS_PR;


PROCEDURE PV_GET_LISTA_ESTADOS_PR(
                                    SC_LISTA_ESTADOS          OUT REFCURSOR,
                                    SN_COD_RETORNO         OUT NOCOPY GE_ERRORES_TD.COD_MSGERROR%TYPE,
                                    SV_MENS_RETORNO        OUT NOCOPY GE_ERRORES_TD.DET_MSGERROR%TYPE,
                                    SN_NUM_EVENTO          OUT NOCOPY GE_ERRORES_PG.EVENTO
)
 /*
<DOCUMENTACIÓN
  TIPODOC = "PROCEDIMIENTO">
   <ELEMENTO
      NOMBRE = "PV_GET_LISTA_ESTADOS_PR"
      LENGUAJE="PL/SQL"
      FECHA="10-04-2011"
      VERSIÓN="1.0"
      DISEÑADOR="EVERIS"
      PROGRAMADOR="EVERIS"
      AMBIENTE DESARROLLO="BD">
      <RETORNO>NA</RETORNO>
      <DESCRIPCIÓN> OBTIENE LISTA DE ESTADOS</DESCRIPCIÓN>
      <PARÁMETROS>
         <ENTRADA>
         </ENTRADA>
         <SALIDA>
            <PARAM NOM="SC_LISTA_ESTADOS"  TIPO="CURSOR" >CURSOR CON LISTA DE ESTADOS</PARAM>
            <PARAM NOM="SN_COD_RETORNO"  TIPO="NUMERICO" >CÓDIGO DE RETORNO (DESCRIPCIÓN DE ERROR)</PARAM>
            <PARAM NOM="SV_MENS_RETORNO"  TIPO="VARCHAR" >MENSAJE DE RETORNO (CÓDIGO DE ERROR)</PARAM>
            <PARAM NOM="SN_NUM_EVENTO"  TIPO="NUMERICO" >NÚMERO DE EVENTO</PARAM>
         </SALIDA>
      </PARÁMETROS>
   </ELEMENTO>
</DOCUMENTACIÓN>
*/
IS
    LV_DES_ERROR               GE_ERRORES_PG.DESEVENT;
    LV_SSQL                    GE_ERRORES_PG.VQUERY;
    LV_NOMBRE_PROC             STRING(30)   := 'PV_GET_LISTA_ESTADOS_PR';
    LV_PKG_PROC                STRING(60)   := GV_PACKAGE||'.'||LV_NOMBRE_PROC;
    
    LN_PERMISO                 NUMBER;
BEGIN

    SN_COD_RETORNO  := 0;
    SV_MENS_RETORNO := 'OK';
    SN_NUM_EVENTO   := 0;


LV_SSQL := 'SELECT COD_ESTADO, DES_ESTADO '
        || 'FROM AL_ESTADOS '
        || 'WHERE IND_DISPONIBILIDAD = 1';
        
    OPEN SC_LISTA_ESTADOS FOR
       SELECT COD_ESTADO, DES_ESTADO
       FROM AL_ESTADOS
       WHERE IND_DISPONIBILIDAD = 1;


EXCEPTION
    
    WHEN OTHERS THEN
        SN_COD_RETORNO := GV_ERROR_OTHERS;
        IF NOT GE_ERRORES_PG.MENSAJEERROR(SN_COD_RETORNO,SV_MENS_RETORNO) THEN
          SV_MENS_RETORNO := GV_ERROR_NO_CLASIF;
        END IF;
        LV_DES_ERROR := SUBSTR(LV_NOMBRE_PROC || '( ); - ' || SQLERRM,1,GN_LARGOERRTEC);
        SV_MENS_RETORNO:=SUBSTR(SV_MENS_RETORNO,1,GN_LARGODESC);
        SN_NUM_EVENTO := GE_ERRORES_PG.GRABARPL(SN_NUM_EVENTO, GV_COD_MODULO, SV_MENS_RETORNO, '1.0', USER, 
        LV_PKG_PROC, LV_SSQL, SN_COD_RETORNO, LV_DES_ERROR );

END PV_GET_LISTA_ESTADOS_PR;


PROCEDURE PV_GET_LISTA_ARTICULOS_PR(
                                    EV_TIP_TERMINAL        IN AL_ARTICULOS.TIP_TERMINAL%TYPE,
                                    EV_COD_TECNOLOGIA      IN AL_TECNOARTICULO_TD.COD_TECNOLOGIA%TYPE,
                                    SC_LISTA_ARTICULOS     OUT REFCURSOR,
                                    SN_COD_RETORNO         OUT NOCOPY GE_ERRORES_TD.COD_MSGERROR%TYPE,
                                    SV_MENS_RETORNO        OUT NOCOPY GE_ERRORES_TD.DET_MSGERROR%TYPE,
                                    SN_NUM_EVENTO          OUT NOCOPY GE_ERRORES_PG.EVENTO
)
 /*
<DOCUMENTACIÓN
  TIPODOC = "PROCEDIMIENTO">
   <ELEMENTO
      NOMBRE = "PV_GET_LISTA_ARTICULOS_PR"
      LENGUAJE="PL/SQL"
      FECHA="10-04-2011"
      VERSIÓN="1.0"
      DISEÑADOR="EVERIS"
      PROGRAMADOR="EVERIS"
      AMBIENTE DESARROLLO="BD">
      <RETORNO>NA</RETORNO>
      <DESCRIPCIÓN> OBTIENE LISTA DE ARTICULOS</DESCRIPCIÓN>
      <PARÁMETROS>
         <ENTRADA>
         </ENTRADA>
         <SALIDA>
            <PARAM NOM="SC_LISTA_ESTADOS"  TIPO="CURSOR" >CURSOR CON LISTA DE ARTICULOS</PARAM>
            <PARAM NOM="SN_COD_RETORNO"  TIPO="NUMERICO" >CÓDIGO DE RETORNO (DESCRIPCIÓN DE ERROR)</PARAM>
            <PARAM NOM="SV_MENS_RETORNO"  TIPO="VARCHAR" >MENSAJE DE RETORNO (CÓDIGO DE ERROR)</PARAM>
            <PARAM NOM="SN_NUM_EVENTO"  TIPO="NUMERICO" >NÚMERO DE EVENTO</PARAM>
         </SALIDA>
      </PARÁMETROS>
   </ELEMENTO>
</DOCUMENTACIÓN>
*/
IS
    LV_DES_ERROR               GE_ERRORES_PG.DESEVENT;
    LV_SSQL                    GE_ERRORES_PG.VQUERY;
    LV_NOMBRE_PROC             STRING(30)   := 'PV_GET_LISTA_ARTICULOS_PR';
    LV_PKG_PROC                STRING(60)   := GV_PACKAGE||'.'||LV_NOMBRE_PROC;
    
    LN_PERMISO                 NUMBER;
BEGIN

    SN_COD_RETORNO  := 0;
    SV_MENS_RETORNO := 'OK';
    SN_NUM_EVENTO   := 0;


LV_SSQL := 'SELECT A.COD_ARTICULO, A.DES_ARTICULO, A.MES_GARANTIA ' 
        || 'FROM AL_ARTICULOS A, AL_TECNOARTICULO_TD B '
        || 'WHERE A.COD_PRODUCTO = 1 '
        || 'AND A.IND_EQUIACC    = ''E'' '
        || 'AND A.TIP_TERMINAL   = '''||EV_TIP_TERMINAL||''' '
        || 'AND B.COD_ARTICULO   = A.COD_ARTICULO '
        || 'AND B.COD_TECNOLOGIA = '''||EV_COD_TECNOLOGIA||''' '
        || 'ORDER BY A.DES_ARTICULO';
        
    OPEN SC_LISTA_ARTICULOS FOR
        SELECT A.COD_ARTICULO, A.DES_ARTICULO, A.MES_GARANTIA 
        FROM AL_ARTICULOS A, AL_TECNOARTICULO_TD B
        WHERE A.COD_PRODUCTO = 1
        AND A.IND_EQUIACC    = 'E'
        AND A.TIP_TERMINAL   = EV_TIP_TERMINAL
        AND B.COD_ARTICULO   = A.COD_ARTICULO
        AND B.COD_TECNOLOGIA = EV_COD_TECNOLOGIA
        ORDER BY A.DES_ARTICULO;
    
    

EXCEPTION
    
    WHEN OTHERS THEN
        SN_COD_RETORNO := GV_ERROR_OTHERS;
        IF NOT GE_ERRORES_PG.MENSAJEERROR(SN_COD_RETORNO,SV_MENS_RETORNO) THEN
          SV_MENS_RETORNO := GV_ERROR_NO_CLASIF;
        END IF;
        LV_DES_ERROR := SUBSTR(LV_NOMBRE_PROC || '('''||EV_TIP_TERMINAL||''','''||EV_COD_TECNOLOGIA||'''); - ' || SQLERRM,1,GN_LARGOERRTEC);
        SV_MENS_RETORNO:=SUBSTR(SV_MENS_RETORNO,1,GN_LARGODESC);
        SN_NUM_EVENTO := GE_ERRORES_PG.GRABARPL(SN_NUM_EVENTO, GV_COD_MODULO, SV_MENS_RETORNO, '1.0', USER, 
        LV_PKG_PROC, LV_SSQL, SN_COD_RETORNO, LV_DES_ERROR );

END PV_GET_LISTA_ARTICULOS_PR;

PROCEDURE PV_GET_LISTA_CAT_TRIBUT_PR(
                                     EN_COD_CLIENTE              IN GA_CATRIBUTCLIE.COD_CLIENTE%TYPE,
                                     SC_LISTA_CATTRIBUT             OUT NOCOPY REFCURSOR,
                                     SN_COD_RETORNO                  OUT NOCOPY GE_ERRORES_PG.CODERROR,
                                     SV_MENS_RETORNO                 OUT NOCOPY GE_ERRORES_PG.MSGERROR,
                                     SN_NUM_EVENTO                   OUT NOCOPY GE_ERRORES_PG.EVENTO
)


    /*
<DOCUMENTACIÓN
  TIPODOC = "PROCEDURE">
   <ELEMENTO
      NOMBRE = "PV_GET_LISTA_CENTRALES_PR"
      LENGUAJE="PL/SQL"
      FECHA="12-04-2011"
      VERSIÓN="1.0"
      DISEÑADOR="EVERIS"
      PROGRAMADOR="EVERIS"
      AMBIENTE DESARROLLO="BD">
      <RETORNO></RETORNO>
      <DESCRIPCIÓN>OBTIENE DATOS DE LAS CELDAS </DESCRIPCIÓN>
      <PARÁMETROS>
         <ENTRADA>
          <PARAM NOM="EN_COD_PRODUCTO"  TIPO="NUMERIC">CODIGO DEL PRODUCTO DEL ABONADO</PARAM>
          <PARAM NOM="EV_COD_TECNOLOGIA"  TIPO="STRING">CODIGO DE TECNOLOGIA DEL ABONADO </PARAM>
         </ENTRADA>
         <RETORNO>
            <PARAM NOM="SC_LISTA_CATTRIBUT"    TIPO="CURSOR>    CURSOR DE SALIDA </PARAM>
            <PARAM NOM="SN_COD_RETORNO"    TIPO="NUMBER"> CODIGO RETORNO </PARAM>
            <PARAM NOM="SV_MENS_RETORNO"   TIPO="STRING"> GLOSA MENSAJE ERROR </PARAM>
            <PARAM NOM="SN_NUM_EVENTO"     TIPO="NUMBER"> NUMERO DE EVENTO </PARAM>
          </RETORNO>
      </PARÁMETROS>
   </ELEMENTO>
</DOCUMENTACIÓN>
*/


IS
    LV_DES_ERROR               GE_ERRORES_PG.DESEVENT;
    LV_SSQL                    GE_ERRORES_PG.VQUERY;
    LV_NOMBRE_PROC             STRING(30)   := 'PV_GET_LISTA_CAT_TRIBUT_PR';
    LV_PKG_PROC                STRING(60)   := GV_PACKAGE||'.'||LV_NOMBRE_PROC;
    
    LN_PERMISO                 NUMBER;
BEGIN

    SN_COD_RETORNO  := 0;
    SV_MENS_RETORNO := 'OK';
    SN_NUM_EVENTO   := 0;


    LV_SSQL := 'SELECT B.COD_TIPDOCUM, B.DES_TIPDOCUM, B.TIP_FOLIACION, A.COD_CATRIBUT ';
    LV_SSQL := LV_SSQL  || 'FROM GE_CATRIBDOCUM A, GE_TIPDOCUMEN B, GA_CATRIBUTCLIE C ';
    LV_SSQL := LV_SSQL  || 'WHERE C.COD_CLIENTE = '||EN_COD_CLIENTE;
    LV_SSQL := LV_SSQL  || ' AND A.COD_CATRIBUT = C.COD_CATRIBUT ';
    LV_SSQL := LV_SSQL  || 'AND A.COD_TIPDOCUM = B.COD_TIPDOCUM ';
    LV_SSQL := LV_SSQL  || 'AND SYSDATE BETWEEN C.FEC_DESDE AND C.FEC_HASTA';


    OPEN     SC_LISTA_CATTRIBUT FOR
    SELECT  B.COD_TIPDOCUM, B.DES_TIPDOCUM, B.TIP_FOLIACION, A.COD_CATRIBUT
    FROM    GE_CATRIBDOCUM A, GE_TIPDOCUMEN B, GA_CATRIBUTCLIE C
    WHERE   C.COD_CLIENTE = EN_COD_CLIENTE
    AND     A.COD_CATRIBUT = C.COD_CATRIBUT
    AND     A.COD_TIPDOCUM = B.COD_TIPDOCUM
    AND     SYSDATE BETWEEN C.FEC_DESDE AND C.FEC_HASTA;



EXCEPTION
    WHEN OTHERS THEN
        SN_COD_RETORNO := GV_ERROR_OTHERS;
        IF NOT GE_ERRORES_PG.MENSAJEERROR(SN_COD_RETORNO,SV_MENS_RETORNO) THEN
          SV_MENS_RETORNO := GV_ERROR_NO_CLASIF;
        END IF;
        LV_DES_ERROR := SUBSTR(LV_NOMBRE_PROC || '('||EN_COD_CLIENTE||'); - ' || SQLERRM,1,GN_LARGOERRTEC);
        SV_MENS_RETORNO:=SUBSTR(SV_MENS_RETORNO,1,GN_LARGODESC);
        SN_NUM_EVENTO := GE_ERRORES_PG.GRABARPL(SN_NUM_EVENTO, GV_COD_MODULO, SV_MENS_RETORNO, '1.0', USER, 
        LV_PKG_PROC, LV_SSQL, SN_COD_RETORNO, LV_DES_ERROR );

END PV_GET_LISTA_CAT_TRIBUT_PR;


PROCEDURE PV_GET_SERIES_DISP_PR(
                                 EN_COD_MODVENTA        IN AL_PRECIOS_VENTA.COD_MODVENTA%TYPE,
                                 EV_COD_CATEGORIA       IN AL_PRECIOS_VENTA.COD_CATEGORIA%TYPE,
                                 EN_IND_CAUSA           IN GAT_OPCIONES_EQUIPOS.IND_CAUSA%TYPE,
                                 EV_COD_OPERACION       IN GAT_OPCIONES_EQUIPOS.COD_OPERACION%TYPE,
                                 EN_NUM_MESES           IN GAT_OPCIONES_EQUIPOS.NUM_MESES%TYPE,
                                 EV_COD_TIPCONTRATO     IN GAT_OPCIONES_EQUIPOS.COD_TIPCONTRATO%TYPE,
                                 EV_TIP_TERMINAL        IN AL_ARTICULOS.TIP_TERMINAL%TYPE,
                                 EN_COD_ESTADO          IN AL_TIPOS_STOCK.COD_ESTADO%TYPE,
                                 EN_COD_ARTICULO        IN AL_ARTICULOS.COD_ARTICULO%TYPE,
                                 EN_COD_BODEGA          IN AL_SERIES.COD_BODEGA%TYPE,
                                 EN_COD_USO             IN AL_SERIES.COD_USO%TYPE,
                                 EN_CANT_ROWS           IN NUMBER,
                                 SC_SERIES_DISP         OUT NOCOPY REFCURSOR,
                                 SN_COD_RETORNO         OUT NOCOPY GE_ERRORES_PG.CODERROR,
                                 SV_MENS_RETORNO        OUT NOCOPY GE_ERRORES_PG.MSGERROR,
                                 SN_NUM_EVENTO          OUT NOCOPY GE_ERRORES_PG.EVENTO
)


    /*
<DOCUMENTACIÓN
  TIPODOC = "PROCEDURE">
   <ELEMENTO
      NOMBRE = "PV_GET_SERIES_DISP_PR"
      LENGUAJE="PL/SQL"
      FECHA="12-04-2011"
      VERSIÓN="1.0"
      DISEÑADOR="EVERIS"
      PROGRAMADOR="EVERIS"
      AMBIENTE DESARROLLO="BD">
      <RETORNO></RETORNO>
      <DESCRIPCIÓN>OBTIENE DATOS DE LAS CELDAS </DESCRIPCIÓN>
      <PARÁMETROS>
         <ENTRADA>
         </ENTRADA>
         <RETORNO>
            <PARAM NOM="SC_SERIES_DISP"    TIPO="CURSOR>  SERIES DISPONIBLES SEGUN FILTROS </PARAM>
            <PARAM NOM="SN_COD_RETORNO"    TIPO="NUMBER"> CODIGO RETORNO </PARAM>
            <PARAM NOM="SV_MENS_RETORNO"   TIPO="STRING"> GLOSA MENSAJE ERROR </PARAM>
            <PARAM NOM="SN_NUM_EVENTO"     TIPO="NUMBER"> NUMERO DE EVENTO </PARAM>
          </RETORNO>
      </PARÁMETROS>
   </ELEMENTO>
</DOCUMENTACIÓN>
*/


IS
    LV_DES_ERROR               GE_ERRORES_PG.DESEVENT;
    LV_SSQL                    GE_ERRORES_PG.VQUERY;
    LV_NOMBRE_PROC             STRING(30)   := 'PV_GET_SERIES_DISP_PR';
    LV_PKG_PROC                STRING(60)   := GV_PACKAGE||'.'||LV_NOMBRE_PROC;
    
    LV_TIPOS                   VARCHAR2(50);
    LN_COUNT                   NUMBER;
    LN_TIP_STOCK               AL_TIPOSTOCK_USOS.TIP_STOCK%TYPE;
    LV_CAUSA                   GED_PARAMETROS.VAL_PARAMETRO%TYPE;
BEGIN

    SN_COD_RETORNO  := 0;
    SV_MENS_RETORNO := 'OK';
    SN_NUM_EVENTO   := 0;
    
    LV_TIPOS := NULL;
    LN_COUNT := 1;
    WHILE LN_COUNT <> 0 LOOP
        LV_SSQL := 'SELECT COUNT(1) FROM AL_TIPOSTOCK_USOS WHERE COD_USO = '||EN_COD_USO;
        IF LV_TIPOS IS NOT NULL THEN
            LV_SSQL := LV_SSQL|| ' AND TIP_STOCK NOT IN  ('||LV_TIPOS||')';
        END IF;
        EXECUTE IMMEDIATE LV_SSQL INTO LN_COUNT;
        
        IF LN_COUNT = 0 AND LV_TIPOS IS NULL THEN
            
            OPEN SC_SERIES_DISP FOR
            SELECT B.DES_STOCK, A.NUM_SERIE, A.NUM_SERIEMEC, A.TIP_STOCK, B.IND_VALORAR
            FROM AL_TIPOS_STOCK B,AL_ARTICULOS C,AL_SERIES A
            WHERE A.COD_PRODUCTO = NULL
            AND A.COD_ARTICULO = C.COD_ARTICULO
            AND B.TIP_STOCK = A.TIP_STOCK;
            
            
            RAISE ERROR_GENERAL;
        END IF;

        IF LN_COUNT <> 0 THEN
            LV_SSQL := 'SELECT TIP_STOCK FROM AL_TIPOSTOCK_USOS WHERE COD_USO = '||EN_COD_USO;
            IF LV_TIPOS IS NOT NULL THEN
                LV_SSQL := LV_SSQL|| ' AND TIP_STOCK NOT IN  ('||LV_TIPOS||')';
            END IF;
            LV_SSQL := LV_SSQL|| ' AND ROWNUM = 1';
            EXECUTE IMMEDIATE LV_SSQL INTO LN_TIP_STOCK;
            IF LV_TIPOS IS NULL THEN
                LV_TIPOS := LN_TIP_STOCK;
            ELSE
                LV_TIPOS := LV_TIPOS ||','|| LN_TIP_STOCK;
            END IF;
        END IF;
    END LOOP;
    
    SELECT VAL_PARAMETRO INTO LV_CAUSA FROM GED_PARAMETROS WHERE NOM_PARAMETRO = 'COD_CAUSA_RESTI';

    LV_SSQL := 'SELECT B.DES_STOCK, A.NUM_SERIE, A.NUM_SERIEMEC, A.TIP_STOCK, B.IND_VALORAR '
        || 'FROM AL_TIPOS_STOCK B, AL_ARTICULOS C, AL_SERIES A '
        || 'WHERE A.COD_USO = '||EN_COD_USO||' '
        || 'AND A.COD_BODEGA = '||EN_COD_BODEGA||' '
        || 'AND A.COD_ARTICULO = '||EN_COD_ARTICULO||' '
        || 'AND A.COD_ESTADO = '||EN_COD_ESTADO||' '
        || 'AND A.COD_PRODUCTO = 1 '
        || 'AND A.COD_ESTADO IN(1,2,3) '
        || 'AND C.TIP_TERMINAL = '''||EV_TIP_TERMINAL||''' '
        || 'AND A.TIP_STOCK IN('||LV_TIPOS||') '
        || 'AND A.NUM_TELEFONO IS NULL '
        || 'AND A.COD_ARTICULO = C.COD_ARTICULO '
        || 'AND B.TIP_STOCK = A.TIP_STOCK '
        || 'AND A.COD_ARTICULO IN(SELECT D.COD_ARTICULO FROM GAT_OPCIONES_EQUIPOS D '
        || 'WHERE D.COD_TIPCONTRATO = '''||EV_COD_TIPCONTRATO||''' '
        || 'AND D.NUM_MESES = '||EN_NUM_MESES||' '
        || 'AND D.COD_OPERACION = '''||EV_COD_OPERACION||''' '
        || 'AND D.IND_CAUSA = '||EN_IND_CAUSA||' ';
    IF EN_IND_CAUSA <> '0' AND LV_CAUSA <> '' THEN
        LV_SSQL := LV_SSQL || 'AND D.COD_CAUSA = '||LV_CAUSA||' ';
    END IF;
    LV_SSQL := LV_SSQL || 'AND D.COD_CATEGORIA = '''||EV_COD_CATEGORIA||''' '
        || 'AND D.COD_MODPAGO = '||EN_COD_MODVENTA||' '
        || 'AND SYSDATE BETWEEN D.FEC_DESDE AND D.FEC_HASTA '
        || 'AND A.COD_ARTICULO = D.COD_ARTICULO) ';
    IF EN_CANT_ROWS IS NOT NULL THEN
        LV_SSQL := LV_SSQL || 'AND ROWNUM < '||EN_CANT_ROWS||' ';
    END IF;
    LV_SSQL := LV_SSQL || 'ORDER BY A.NUM_SERIE ASC';
        
OPEN SC_SERIES_DISP FOR LV_SSQL;


EXCEPTION
    WHEN ERROR_GENERAL THEN
        SN_COD_RETORNO := 110011;
        IF NOT GE_ERRORES_PG.MENSAJEERROR(SN_COD_RETORNO,SV_MENS_RETORNO) THEN
          SV_MENS_RETORNO := GV_ERROR_NO_CLASIF;
        END IF;
        LV_DES_ERROR := SUBSTR(LV_NOMBRE_PROC || '('||EN_COD_MODVENTA||','''||EV_COD_CATEGORIA||''','||EN_IND_CAUSA||','''||EV_COD_OPERACION||''','
        ||EN_NUM_MESES||','||EV_COD_TIPCONTRATO||','''||EV_TIP_TERMINAL||''','||EN_COD_ESTADO||','||EN_COD_ARTICULO||','||EN_COD_BODEGA||','||EN_COD_USO||'); - ' || SQLERRM,1,GN_LARGOERRTEC);
        SV_MENS_RETORNO:=SUBSTR(SV_MENS_RETORNO,1,GN_LARGODESC);
        SN_NUM_EVENTO := GE_ERRORES_PG.GRABARPL(SN_NUM_EVENTO, GV_COD_MODULO, SV_MENS_RETORNO, '1.0', USER, 
        LV_PKG_PROC, LV_SSQL, SN_COD_RETORNO, LV_DES_ERROR );
    WHEN OTHERS THEN
        SN_COD_RETORNO := GV_ERROR_OTHERS;
        IF NOT GE_ERRORES_PG.MENSAJEERROR(SN_COD_RETORNO,SV_MENS_RETORNO) THEN
          SV_MENS_RETORNO := GV_ERROR_NO_CLASIF;
        END IF;
        LV_DES_ERROR := SUBSTR(LV_NOMBRE_PROC || '('||EN_COD_MODVENTA||','''||EV_COD_CATEGORIA||''','||EN_IND_CAUSA||','''||EV_COD_OPERACION||''','
        ||EN_NUM_MESES||','||EV_COD_TIPCONTRATO||','''||EV_TIP_TERMINAL||''','||EN_COD_ESTADO||','||EN_COD_ARTICULO||','||EN_COD_BODEGA||','||EN_COD_USO||'); - ' || SQLERRM,1,GN_LARGOERRTEC);
        SV_MENS_RETORNO:=SUBSTR(SV_MENS_RETORNO,1,GN_LARGODESC);
        SN_NUM_EVENTO := GE_ERRORES_PG.GRABARPL(SN_NUM_EVENTO, GV_COD_MODULO, SV_MENS_RETORNO, '1.0', USER, 
        LV_PKG_PROC, LV_SSQL, SN_COD_RETORNO, LV_DES_ERROR );

END PV_GET_SERIES_DISP_PR;


PROCEDURE PV_GET_DATOS_PLAN_PR(  EV_COD_PLANTARIF       IN TA_PLANTARIF.COD_PLANTARIF%TYPE,
                                 SC_PLAN_TARIF          OUT NOCOPY REFCURSOR,
                                 SN_COD_RETORNO         OUT NOCOPY GE_ERRORES_PG.CODERROR,
                                 SV_MENS_RETORNO        OUT NOCOPY GE_ERRORES_PG.MSGERROR,
                                 SN_NUM_EVENTO          OUT NOCOPY GE_ERRORES_PG.EVENTO
)


    /*
<DOCUMENTACIÓN
  TIPODOC = "PROCEDURE">
   <ELEMENTO
      NOMBRE = "PV_GET_DATOS_PLAN_PR"
      LENGUAJE="PL/SQL"
      FECHA="17-04-2011"
      VERSIÓN="1.0"
      DISEÑADOR="EVERIS"
      PROGRAMADOR="EVERIS"
      AMBIENTE DESARROLLO="BD">
      <RETORNO></RETORNO>
      <DESCRIPCIÓN>OBTIENE DATOS DEL PLAN TARIFARIO </DESCRIPCIÓN>
      <PARÁMETROS>
         <ENTRADA>
         <PARAM NOM="EV_COD_PLANTARIF"  TIPO="VARCHAR">CODIGO DEL PLAN TARIFARIO </PARAM>
         </ENTRADA>
         <RETORNO>
            <PARAM NOM="SC_PLAN_TARIF"    TIPO="CURSOR>  DATOS DEL PLAN </PARAM>
            <PARAM NOM="SN_COD_RETORNO"    TIPO="NUMBER"> CODIGO RETORNO </PARAM>
            <PARAM NOM="SV_MENS_RETORNO"   TIPO="STRING"> GLOSA MENSAJE ERROR </PARAM>
            <PARAM NOM="SN_NUM_EVENTO"     TIPO="NUMBER"> NUMERO DE EVENTO </PARAM>
          </RETORNO>
      </PARÁMETROS>
   </ELEMENTO>
</DOCUMENTACIÓN>
*/

IS

    LV_DES_ERROR               GE_ERRORES_PG.DESEVENT;
    LV_SSQL                    GE_ERRORES_PG.VQUERY;
    LV_NOMBRE_PROC             STRING(30)   := 'PV_GET_DATOS_PLAN_PR';
    LV_PKG_PROC                STRING(60)   := GV_PACKAGE||'.'||LV_NOMBRE_PROC;
    
BEGIN

    SN_COD_RETORNO  := 0;
    SV_MENS_RETORNO := 'OK';
    SN_NUM_EVENTO   := 0;
    
    LV_SSQL := 'SELECT A.COD_PLANTARIF, A.DES_PLANTARIF, A.TIP_TERMINAL, A.COD_LIMCONSUMO, A.COD_CARGOBASICO, A.TIP_PLANCONSUMO, '
            || 'A.TIP_PLANTARIF, A.NUM_DIAS, A.NUM_ABONADOS, A.FEC_DESDE, A.FEC_HASTA, A.IND_FAMILIAR, A.TIP_UNITAS, A.CLA_PLANTARIF, '
            || 'A.IND_CARGO_HABIL, A.NUM_DIAS_EXPIRA, A.COD_PLAN_COMVERSE, A.COD_SERVICIO, A.COD_TIPLAN, B.COD_CATEGORIA '
            || 'FROM TA_PLANTARIF a, VE_CATPLANTARIF B '
            || 'WHERE A. COD_PLANTARIF = B.COD_PLANTARIF '
            || 'AND COD_PLANTARIF = ''' || EV_COD_PLANTARIF||'''';

    OPEN SC_PLAN_TARIF FOR
        SELECT A.COD_PLANTARIF, A.DES_PLANTARIF, A.TIP_TERMINAL, A.COD_LIMCONSUMO, A.COD_CARGOBASICO, A.TIP_PLANCONSUMO,
        A.TIP_PLANTARIF, A.NUM_DIAS, A.NUM_ABONADOS, A.FEC_DESDE, A.FEC_HASTA, A.IND_FAMILIAR, A.TIP_UNITAS, A.CLA_PLANTARIF,
        A.IND_CARGO_HABIL, A.NUM_DIAS_EXPIRA, A.COD_PLAN_COMVERSE, A.COD_SERVICIO, A.COD_TIPLAN, B.COD_CATEGORIA
        FROM TA_PLANTARIF A, VE_CATPLANTARIF B 
        WHERE A. COD_PLANTARIF = B.COD_PLANTARIF
        AND A.COD_PLANTARIF = EV_COD_PLANTARIF;

EXCEPTION
    WHEN OTHERS THEN
        SN_COD_RETORNO := GV_ERROR_OTHERS;
        IF NOT GE_ERRORES_PG.MENSAJEERROR(SN_COD_RETORNO,SV_MENS_RETORNO) THEN
          SV_MENS_RETORNO := GV_ERROR_NO_CLASIF;
        END IF;
        LV_DES_ERROR := SUBSTR(LV_NOMBRE_PROC || '('''||EV_COD_PLANTARIF||'''); - ' || SQLERRM,1,GN_LARGOERRTEC);
        SV_MENS_RETORNO:=SUBSTR(SV_MENS_RETORNO,1,GN_LARGODESC);
        SN_NUM_EVENTO := GE_ERRORES_PG.GRABARPL(SN_NUM_EVENTO, GV_COD_MODULO, SV_MENS_RETORNO, '1.0', USER, 
        LV_PKG_PROC, LV_SSQL, SN_COD_RETORNO, LV_DES_ERROR );

END PV_GET_DATOS_PLAN_PR;


PROCEDURE PV_INS_MODABOCEL_PR(   EN_NUM_ABONADO         IN GA_MODABOCEL.NUM_ABONADO%TYPE,
                                 EV_COD_OPERACION       IN GA_MODABOCEL.COD_TIPMODI%TYPE,
                                 EV_NOM_USUARIO         IN GA_MODABOCEL.NOM_USUARORA%TYPE,
                                 EV_TIP_TERMINAL        IN GA_MODABOCEL.TIP_TERMINAL%TYPE,
                                 EV_NUM_SERIE           IN GA_MODABOCEL.NUM_SERIE%TYPE,
                                 EV_COD_CAUCAMBIO       IN GA_MODABOCEL.COD_CAUSA%TYPE,
                                 EN_IND_EQPRESTADO      IN GA_MODABOCEL.IND_EQPRESTADO%TYPE,
                                 EV_COD_TIPCONTRATO     IN GA_MODABOCEL.COD_TIPCONTRATO%TYPE,
                                 EN_NUM_MESES           IN GA_MODABOCEL.NUM_MESES%TYPE,
                                 SN_COD_RETORNO         OUT NOCOPY GE_ERRORES_PG.CODERROR,
                                 SV_MENS_RETORNO        OUT NOCOPY GE_ERRORES_PG.MSGERROR,
                                 SN_NUM_EVENTO          OUT NOCOPY GE_ERRORES_PG.EVENTO
)


    /*
<DOCUMENTACIÓN
  TIPODOC = "PROCEDURE">
   <ELEMENTO
      NOMBRE = "PV_INS_MODABOCEL_PR"
      LENGUAJE="PL/SQL"
      FECHA="17-04-2011"
      VERSIÓN="1.0"
      DISEÑADOR="EVERIS"
      PROGRAMADOR="EVERIS"
      AMBIENTE DESARROLLO="BD">
      <RETORNO></RETORNO>
      <DESCRIPCIÓN>INSERTA UN REGISTRO EN LA TABLA GA_MODABOCEL</DESCRIPCIÓN>
      <PARÁMETROS>
         <ENTRADA>
         </ENTRADA>
         <RETORNO>
            <PARAM NOM="SN_COD_RETORNO"    TIPO="NUMBER"> CODIGO RETORNO </PARAM>
            <PARAM NOM="SV_MENS_RETORNO"   TIPO="STRING"> GLOSA MENSAJE ERROR </PARAM>
            <PARAM NOM="SN_NUM_EVENTO"     TIPO="NUMBER"> NUMERO DE EVENTO </PARAM>
          </RETORNO>
      </PARÁMETROS>
   </ELEMENTO>
</DOCUMENTACIÓN>
*/

IS

    LV_DES_ERROR                GE_ERRORES_PG.DESEVENT;
    LV_SSQL                     GE_ERRORES_PG.VQUERY;
    LV_NOMBRE_PROC              STRING(30)   := 'PV_INS_MODABOCEL_PR';
    LV_PKG_PROC                 STRING(60)   := GV_PACKAGE||'.'||LV_NOMBRE_PROC;
    LV_FORMATO_SEL2             GED_PARAMETROS.VAL_PARAMETRO%TYPE;
    LV_FORMATO_SEL7             GED_PARAMETROS.VAL_PARAMETRO%TYPE;
    LV_FEC_ACTUAL               VARCHAR2(25);
BEGIN

    SN_COD_RETORNO  := 0;
    SV_MENS_RETORNO := 'OK';
    SN_NUM_EVENTO   := 0;

    SELECT VAL_PARAMETRO INTO LV_FORMATO_SEL2 
    FROM GED_PARAMETROS WHERE NOM_PARAMETRO = 'FORMATO_SEL2';

    SELECT VAL_PARAMETRO INTO LV_FORMATO_SEL7 
    FROM GED_PARAMETROS WHERE NOM_PARAMETRO = 'FORMATO_SEL7';

    SELECT TO_CHAR(SYSDATE,LV_FORMATO_SEL2 || ' ' || LV_FORMATO_SEL7)
    INTO LV_FEC_ACTUAL FROM DUAL;
   
    LV_SSQL := 'INSERT INTO GA_MODABOCEL (NUM_ABONADO, COD_TIPMODI, FEC_MODIFICA, NOM_USUARORA, '
            || 'TIP_TERMINAL, NUM_SERIE, NUM_SERIEHEX, NUM_SERIEMEC, COD_CAUSA, '
            || 'IND_EQPRESTADO, COD_TIPCONTRATO, NUM_MESES, FEC_PRORROGA) VALUES ( '
            || EN_NUM_ABONADO||','''||EV_COD_OPERACION||''',TO_DATE('''||LV_FEC_ACTUAL||''','''||LV_FORMATO_SEL2||' '||LV_FORMATO_SEL7||''')'
            || ','''||EV_NOM_USUARIO||''','''||EV_TIP_TERMINAL||''','''||EV_NUM_SERIE||''',NULL,''*'','''||EV_COD_CAUCAMBIO||''','
            || EN_IND_EQPRESTADO||','''||EV_COD_TIPCONTRATO||''','||EN_NUM_MESES||',NULL)';
        
EXECUTE IMMEDIATE LV_SSQL;

EXCEPTION
    WHEN OTHERS THEN
        SN_COD_RETORNO := GV_ERROR_OTHERS;
        IF NOT GE_ERRORES_PG.MENSAJEERROR(SN_COD_RETORNO,SV_MENS_RETORNO) THEN
          SV_MENS_RETORNO := GV_ERROR_NO_CLASIF;
        END IF;
        LV_DES_ERROR := SUBSTR(LV_NOMBRE_PROC || '('||EN_NUM_ABONADO||','''||EV_COD_OPERACION||''','''||EV_NOM_USUARIO||''','''||EV_TIP_TERMINAL||''','''||EV_NUM_SERIE
        ||''','''||EV_COD_CAUCAMBIO||''','||EN_IND_EQPRESTADO||','''||EV_COD_TIPCONTRATO||''','||EN_NUM_MESES||'); - ' || SQLERRM,1,GN_LARGOERRTEC);
        SV_MENS_RETORNO:=SUBSTR(SV_MENS_RETORNO,1,GN_LARGODESC);
        SN_NUM_EVENTO := GE_ERRORES_PG.GRABARPL(SN_NUM_EVENTO, GV_COD_MODULO, SV_MENS_RETORNO, '1.0', USER, 
        LV_PKG_PROC, LV_SSQL, SN_COD_RETORNO, LV_DES_ERROR );

END PV_INS_MODABOCEL_PR;

PROCEDURE PV_INS_EQUIPABOSER_EQUI_PR(    
                                        EN_COD_BODEGA           IN GA_EQUIPABOSER.COD_BODEGA%TYPE,
                                        EV_NUM_SERIEMEC         IN GA_EQUIPABOSER.NUM_SERIEMEC%TYPE,
                                        EN_COD_ESTADO           IN GA_EQUIPABOSER.COD_ESTADO%TYPE,
                                        EN_NUM_MOVIMIENTO       IN GA_EQUIPABOSER.NUM_MOVIMIENTO%TYPE,
                                        EB_HAYCARGOART          IN VARCHAR2,
                                        EN_NUM_ABONADO          IN GA_EQUIPABOSER.NUM_ABONADO%TYPE,
                                        EV_NUM_SERIE            IN GA_EQUIPABOSER.NUM_SERIE%TYPE,
                                        EN_TIP_STOCK            IN GA_EQUIPABOSER.TIP_STOCK%TYPE,
                                        EN_COD_ARTICULO         IN GA_EQUIPABOSER.COD_ARTICULO%TYPE,
                                        EV_IND_PROCEQUI         IN GA_EQUIPABOSER.IND_PROCEQUI%TYPE,
                                        EB_PLISTA               IN VARCHAR2,
                                        EV_IND_PROPIEDAD        IN GA_EQUIPABOSER.IND_PROPIEDAD%TYPE,                                       
                                        EV_TIP_TERMINAL         IN GA_EQUIPABOSER.TIP_TERMINAL%TYPE,
                                        EV_DES_EQUIPO           IN GA_EQUIPABOSER.DES_EQUIPO%TYPE,
                                        EN_COD_USO              IN GA_EQUIPABOSER.COD_USO%TYPE,
                                        EN_IND_COMODATO         IN NUMBER,
                                        EV_COD_TECNOLOGIA       IN GA_EQUIPABOSER.COD_TECNOLOGIA%TYPE,
                                        EN_IMPORTE              IN GA_EQUIPABOSER.PRC_VENTA%TYPE,
                                        EN_TIPDTO               IN GA_EQUIPABOSER.TIP_DTO%TYPE,
                                        EN_VALDTO               IN GA_EQUIPABOSER.VAL_DTO%TYPE,
                                        EN_COD_MODVENTA         IN GA_EQUIPABOSER.COD_MODVENTA%TYPE,
                                        EN_COD_CUOTA            IN GA_EQUIPABOSER.COD_CUOTA%TYPE,
                                        EV_COD_CAUSA            IN GA_EQUIPABOSER.COD_CAUSA%TYPE,
                                        SN_COD_RETORNO          OUT NOCOPY GE_ERRORES_PG.CODERROR,
                                        SV_MENS_RETORNO         OUT NOCOPY GE_ERRORES_PG.MSGERROR,
                                        SN_NUM_EVENTO           OUT NOCOPY GE_ERRORES_PG.EVENTO
)


/*
<DOCUMENTACIÓN
  TIPODOC = "PROCEDURE">
   <ELEMENTO
      NOMBRE = "PV_INS_EQUIPABOSER_EQUI_PR"
      LENGUAJE="PL/SQL"
      FECHA="19-04-2011"
      VERSIÓN="1.0"
      DISEÑADOR="EVERIS"
      PROGRAMADOR="EVERIS"
      AMBIENTE DESARROLLO="BD">
      <RETORNO></RETORNO>
      <DESCRIPCIÓN>INSERTA UN REGISTRO EN LA TABLA GA_EQUIPABOSER</DESCRIPCIÓN>
      <PARÁMETROS>
         <ENTRADA>
         </ENTRADA>
         <RETORNO>
            <PARAM NOM="SN_COD_RETORNO"    TIPO="NUMBER"> CODIGO RETORNO </PARAM>
            <PARAM NOM="SV_MENS_RETORNO"   TIPO="STRING"> GLOSA MENSAJE ERROR </PARAM>
            <PARAM NOM="SN_NUM_EVENTO"     TIPO="NUMBER"> NUMERO DE EVENTO </PARAM>
          </RETORNO>
      </PARÁMETROS>
   </ELEMENTO>
</DOCUMENTACIÓN>
*/

IS

    LV_DES_ERROR                GE_ERRORES_PG.DESEVENT;
    LV_SSQL                     GE_ERRORES_PG.VQUERY;
    LV_NOMBRE_PROC              STRING(30)   := 'PV_INS_EQUIPABOSER_EQUI_PR';
    LV_PKG_PROC                 STRING(60)   := GV_PACKAGE||'.'||LV_NOMBRE_PROC;
    LV_FORMATO_SEL2             GED_PARAMETROS.VAL_PARAMETRO%TYPE;
    LV_FORMATO_SEL7             GED_PARAMETROS.VAL_PARAMETRO%TYPE;
    LV_SYSDATE                  VARCHAR2(25);
    LV_IND_EQPRESTADO           GA_EQUIPABOSER.IND_EQPRESTADO%TYPE;
    LV_NUM_SERIE_B              GA_ABOCEL.NUM_SERIE%TYPE;
BEGIN

    SN_COD_RETORNO  := 0;
    SV_MENS_RETORNO := 'OK';
    SN_NUM_EVENTO   := 0;
        
    SELECT VAL_PARAMETRO INTO LV_FORMATO_SEL2 
    FROM GED_PARAMETROS WHERE NOM_PARAMETRO = 'FORMATO_SEL2';

    SELECT VAL_PARAMETRO INTO LV_FORMATO_SEL7 
    FROM GED_PARAMETROS WHERE NOM_PARAMETRO = 'FORMATO_SEL7';

    SELECT TO_CHAR(SYSDATE,LV_FORMATO_SEL2 || ' ' || LV_FORMATO_SEL7)
    INTO LV_SYSDATE FROM DUAL;
    
    
    LV_SSQL := 'INSERT INTO GA_EQUIPABOSER '
            || '(NUM_ABONADO, NUM_SERIE, COD_PRODUCTO, IND_PROCEQUI, FEC_ALTA, IND_PROPIEDAD, ';
    IF EN_COD_BODEGA IS NOT NULL THEN
        LV_SSQL := LV_SSQL || ' COD_BODEGA, TIP_STOCK,';
    END IF;
    LV_SSQL := LV_SSQL || ' COD_ARTICULO, IND_EQUIACC, COD_MODVENTA, TIP_TERMINAL, COD_USO,';
    IF EN_COD_CUOTA IS NOT NULL THEN
        LV_SSQL := LV_SSQL || ' COD_CUOTA, ';
    END IF;    
    IF EN_COD_ESTADO IS NOT NULL THEN
        LV_SSQL := LV_SSQL || ' COD_ESTADO, ';
    END IF;
    IF EV_NUM_SERIEMEC IS NOT NULL THEN
        LV_SSQL := LV_SSQL || ' NUM_SERIEMEC,';
    END IF;
    LV_SSQL := LV_SSQL || ' DES_EQUIPO';
    IF EN_NUM_MOVIMIENTO IS NOT NULL THEN
        LV_SSQL := LV_SSQL || ', NUM_MOVIMIENTO';
    END IF;
    LV_SSQL := LV_SSQL || ' , COD_CAUSA, IND_EQPRESTADO, COD_TECNOLOGIA';
    IF EB_HAYCARGOART = 'TRUE' THEN
        LV_SSQL := LV_SSQL || ' , IMP_CARGO, TIP_DTO, VAL_DTO';
    END IF;
    LV_SSQL := LV_SSQL || ') VALUES ('
            || EN_NUM_ABONADO||','||EV_NUM_SERIE||', 1, ''' || EV_IND_PROCEQUI || ''''
            || ', TO_DATE('''||LV_SYSDATE||''','''||LV_FORMATO_SEL2||' '||LV_FORMATO_SEL7||'''), '''||EV_IND_PROPIEDAD||''', ';
    IF EN_COD_BODEGA IS NOT NULL THEN
        LV_SSQL := LV_SSQL ||EN_COD_BODEGA||','||EN_TIP_STOCK||',';
    END IF;
    LV_SSQL := LV_SSQL || EN_COD_ARTICULO||',''E'','||EN_COD_MODVENTA||','''||EV_TIP_TERMINAL||''','||EN_COD_USO||',';
    IF  EN_COD_CUOTA IS NOT NULL THEN
        LV_SSQL := LV_SSQL ||EN_COD_CUOTA||',';
    END IF;
    IF EN_COD_ESTADO IS NOT NULL THEN
        LV_SSQL := LV_SSQL ||EN_COD_ESTADO||',';
    END IF;
    IF EV_NUM_SERIEMEC IS NOT NULL THEN
    LV_SSQL := LV_SSQL ||EV_NUM_SERIEMEC||',';
    END IF;
    LV_SSQL := LV_SSQL ||''''||EV_DES_EQUIPO||''',';
    
    IF EN_NUM_MOVIMIENTO IS NOT NULL THEN
        LV_SSQL := LV_SSQL ||EN_NUM_MOVIMIENTO||',';
    END IF;
    
    IF EV_COD_CAUSA IS NOT NULL THEN
        LV_SSQL := LV_SSQL ||''''||EV_COD_CAUSA||''',';
    END IF;
       
    IF EV_IND_PROCEQUI = 'E' THEN
        LV_SSQL := LV_SSQL ||'2'',';
    ELSIF EB_PLISTA = 'TRUE' THEN
        LV_SSQL := LV_SSQL ||'3'',';
    ELSE
        SELECT DECODE(EN_IND_COMODATO,1, '1', '0') INTO LV_IND_EQPRESTADO FROM DUAL;
        LV_SSQL := LV_SSQL ||''''||LV_IND_EQPRESTADO||''',';
    END IF;
    
    LV_SSQL := LV_SSQL || ''''||EV_COD_TECNOLOGIA||'''';
    
    IF EB_HAYCARGOART = 'TRUE' THEN
        LV_SSQL := LV_SSQL ||','||EN_IMPORTE;
        IF EN_TIPDTO IS NOT NULL AND EN_VALDTO IS NOT NULL THEN
            LV_SSQL := LV_SSQL ||','|| EN_TIPDTO||','||EN_VALDTO;
        ELSE
            LV_SSQL := LV_SSQL ||', NULL,NULL';
        END IF;
    END IF;
    LV_SSQL := LV_SSQL || ')';
    
    EXECUTE IMMEDIATE LV_SSQL;
    
    BEGIN
        SELECT NUM_SERIE INTO LV_NUM_SERIE_B
        FROM GA_ABOCEL WHERE NUM_ABONADO = EN_NUM_ABONADO;
        
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            SELECT NUM_SERIE INTO LV_NUM_SERIE_B
            FROM GA_ABOAMIST WHERE NUM_ABONADO = EN_NUM_ABONADO;
    END;
    
    LV_SSQL := 'INSERT INTO GA_EQUIPABOSER '
            || '(NUM_ABONADO, NUM_SERIE, COD_PRODUCTO, IND_PROCEQUI, FEC_ALTA, IND_PROPIEDAD, '
            || 'COD_BODEGA, TIP_STOCK, COD_ARTICULO, IND_EQUIACC, COD_MODVENTA, TIP_TERMINAL, '
            || 'COD_USO, COD_CUOTA, COD_ESTADO, CAP_CODE, COD_PROTOCOLO, NUM_VELOCIDAD, '
            || 'COD_FRECUENCIA, COD_VERSION, NUM_SERIEMEC, DES_EQUIPO, COD_PAQUETE, NUM_MOVIMIENTO, '
            || 'COD_CAUSA, IND_EQPRESTADO, NUM_IMEI, COD_TECNOLOGIA) '
            || 'SELECT  NUM_ABONADO, NUM_SERIE, COD_PRODUCTO, IND_PROCEQUI, ' 
            || 'TO_DATE('''||LV_SYSDATE||''','''||LV_FORMATO_SEL2||' '||LV_FORMATO_SEL7||'''), IND_PROPIEDAD, COD_BODEGA, TIP_STOCK, COD_ARTICULO, '
            || 'IND_EQUIACC, COD_MODVENTA, TIP_TERMINAL, COD_USO, COD_CUOTA, '
            || 'COD_ESTADO, CAP_CODE, COD_PROTOCOLO, NUM_VELOCIDAD, COD_FRECUENCIA, '
            || 'COD_VERSION, NUM_SERIEMEC, DES_EQUIPO, COD_PAQUETE, NUM_MOVIMIENTO, '
            || ''''||EV_COD_CAUSA||''', IND_EQPRESTADO, '''||EV_NUM_SERIE||''', COD_TECNOLOGIA '
            || 'FROM GA_EQUIPABOSER A, '
            || '(SELECT MAX(FEC_ALTA) ULT_FECHA '
            || 'FROM GA_EQUIPABOSER '
            || 'WHERE NUM_ABONADO = '||EN_NUM_ABONADO||' AND '
            || 'NUM_SERIE = '''||LV_NUM_SERIE_B||''') B '
            || 'WHERE  A.NUM_ABONADO = '||EN_NUM_ABONADO||' ' 
            || 'AND A.NUM_SERIE = '''||LV_NUM_SERIE_B||''' ' 
            || 'AND A.FEC_ALTA = B.ULT_FECHA';
            
     EXECUTE IMMEDIATE LV_SSQL;
     
   /* INSERT INTO GA_EQUIPABOSER
    (NUM_ABONADO, NUM_SERIE, COD_PRODUCTO, IND_PROCEQUI, FEC_ALTA, IND_PROPIEDAD,
    COD_BODEGA, TIP_STOCK, COD_ARTICULO, IND_EQUIACC, COD_MODVENTA, TIP_TERMINAL,
    COD_USO, COD_CUOTA, COD_ESTADO, CAP_CODE, COD_PROTOCOLO, NUM_VELOCIDAD,
    COD_FRECUENCIA, COD_VERSION, NUM_SERIEMEC, DES_EQUIPO, COD_PAQUETE, NUM_MOVIMIENTO,
    COD_CAUSA, IND_EQPRESTADO, NUM_IMEI, COD_TECNOLOGIA)
    SELECT  NUM_ABONADO, NUM_SERIE, COD_PRODUCTO, IND_PROCEQUI, 
    TO_CHAR(TO_DATE(LV_SYSDATE, 'HH24:MI:SS')) ,
    IND_PROPIEDAD, COD_BODEGA, TIP_STOCK, COD_ARTICULO,
    IND_EQUIACC, COD_MODVENTA, TIP_TERMINAL, COD_USO, COD_CUOTA,
    COD_ESTADO, CAP_CODE, COD_PROTOCOLO, NUM_VELOCIDAD, COD_FRECUENCIA,
    COD_VERSION, NUM_SERIEMEC, DES_EQUIPO, COD_PAQUETE, NUM_MOVIMIENTO,
    EV_COD_CAUSA, IND_EQPRESTADO, EV_NUM_SERIE, COD_TECNOLOGIA
    FROM GA_EQUIPABOSER A,
    (SELECT MAX(FEC_ALTA) ULT_FECHA
        FROM GA_EQUIPABOSER
        WHERE NUM_ABONADO = EN_NUM_ABONADO AND
        NUM_SERIE = LV_NUM_SERIE_B) B
    WHERE  A.NUM_ABONADO = EN_NUM_ABONADO 
    AND A.NUM_SERIE = LV_NUM_SERIE_B 
    AND A.FEC_ALTA = B.ULT_FECHA;*/
   

EXCEPTION
    WHEN OTHERS THEN
        SN_COD_RETORNO := GV_ERROR_OTHERS;
        IF NOT GE_ERRORES_PG.MENSAJEERROR(SN_COD_RETORNO,SV_MENS_RETORNO) THEN
          SV_MENS_RETORNO := GV_ERROR_NO_CLASIF;
        END IF;
        LV_DES_ERROR := SUBSTR(LV_NOMBRE_PROC || '( ); - ' || SQLERRM,1,GN_LARGOERRTEC);
        SV_MENS_RETORNO:=SUBSTR(SV_MENS_RETORNO,1,GN_LARGODESC);
        SN_NUM_EVENTO := GE_ERRORES_PG.GRABARPL(SN_NUM_EVENTO, GV_COD_MODULO, SV_MENS_RETORNO, '1.0', USER, 
        LV_PKG_PROC, LV_SSQL, SN_COD_RETORNO, LV_DES_ERROR );

END PV_INS_EQUIPABOSER_EQUI_PR;

PROCEDURE PV_INS_GA_RESERVART_PR (EN_CODARTICULO            IN GA_RESERVART.COD_ARTICULO%TYPE,
                                     EN_CODBODEGA           IN GA_RESERVART.COD_BODEGA%TYPE,
                                     EN_CODSTOCK            IN GA_RESERVART.TIP_STOCK %TYPE,
                                     EN_CODUSOLINEA         IN GA_RESERVART.COD_USO%TYPE,
                                     EN_CODESTADO           IN GA_RESERVART.COD_ESTADO%TYPE,
                                     EV_USER                IN GA_RESERVART.NOM_USUARIO%TYPE,
                                     EV_NUMSERIE            IN GA_RESERVART.NUM_SERIE%TYPE,
                                     SN_NUM_TRANSACCION     OUT NOCOPY GA_RESERVART.NUM_TRANSACCION%TYPE,
                                     SN_COD_RETORNO         OUT NOCOPY GE_ERRORES_PG.CODERROR,
                                     SV_MENS_RETORNO        OUT NOCOPY GE_ERRORES_PG.MSGERROR,
                                     SN_NUM_EVENTO          OUT NOCOPY GE_ERRORES_PG.EVENTO ) IS
/*
 <DOCUMENTACIÓN TIPODOC = "PROCEDIMIENTO">
<ELEMENTO NOMBRE = "PV_INS_GA_RESERVART_PR"
LENGUAJE="PL/SQL"
FECHA="19-04-2011"
VERSIÓN="1.0.0"
DISEÑADOR="EVERIS"
PROGRAMADOR="EVERIS"
AMBIENTE="BD">
<RETORNO> RETORNA OK O ERROR DE LA INSERCION </RETORNO>
<DESCRIPCIÓN> INSERTA UNA RESERVA DE UN ARTICULO</DESCRIPCIÓN>
<PARÁMETROS>
    <ENTRADA>
        <PARAM NOM="EN_CODARTICULO"  TIPO="NUMBER">CODIGO DEL ARTICULO </PARAM>
        <PARAM NOM="EN_CODBODEGA"  TIPO="NUMBER">CODIGO DE LA BODEGA </PARAM>
        <PARAM NOM="EN_CODSTOCK"  TIPO="NUMBER">CODIGO DEL STOCK</PARAM>
        <PARAM NOM="EN_CODUSOLINEA"  TIPO="NUMBER">CODIGO DEL USO DE LA LINEA</PARAM>
        <PARAM NOM="EN_CODESTADO"  TIPO="NUMBER">CODIGO DE ESTADO</PARAM>
        <PARAM NOM="EV_USER"  TIPO="VARCHAR">NOMBRE DEL USUARIO</PARAM>
        <PARAM NOM="EV_NUMSERIE"  TIPO="VARCHAR">NUMERO DE LA SERIE</PARAM>
   </ENTRADA>
    <SALIDA>
        <PARAM NOM="SN_COD_RETORNO"    TIPO="NUMBER"> CODIGO RETORNO </PARAM>
        <PARAM NOM="SV_MENS_RETORNO"   TIPO="STRING"> GLOSA MENSAJE ERROR </PARAM>
        <PARAM NOM="SN_NUM_EVENTO"     TIPO="NUMBER"> NUMERO DE EVENTO </PARAM>
    </SALIDA>
</PARÁMETROS>
</ELEMENTO>
</DOCUMENTACIÓN>
*/

    LV_DES_ERROR                GE_ERRORES_PG.DESEVENT;
    LV_SSQL                     GE_ERRORES_PG.VQUERY;
    LV_NOMBRE_PROC              STRING(30)   := 'PV_INS_GA_RESERVART_PR';
    LV_PKG_PROC                 STRING(60)   := GV_PACKAGE||'.'||LV_NOMBRE_PROC;
BEGIN

    SN_COD_RETORNO  := 0;
    SV_MENS_RETORNO := 'OK';
    SN_NUM_EVENTO   := 0;
        

      SELECT GA_SEQ_TRANSACABO.NEXTVAL INTO SN_NUM_TRANSACCION FROM DUAL;

    LV_SSQL := 'INSERT INTO GA_RESERVART '
            || '(NUM_TRANSACCION, NUM_LINEA, NUM_ORDEN, COD_ARTICULO, COD_PRODUCTO, '
            || 'FEC_RESERVA, COD_BODEGA, TIP_STOCK, COD_USO, COD_ESTADO, '
            || 'NUM_UNIDADES, NOM_USUARIO, NUM_SERIE) ' 
            || 'VALUES ('||SN_NUM_TRANSACCION||', 1, 1, '|| EN_CODARTICULO||','||  GN_COD_PRODUCTO||', SYSDATE  ' 
            || ','|| EN_CODBODEGA||','|| EN_CODSTOCK||','|| EN_CODUSOLINEA||','||EN_CODESTADO||', 1,'|| EV_USER||','|| EV_NUMSERIE||')' ;



    INSERT INTO GA_RESERVART
     (NUM_TRANSACCION, NUM_LINEA, NUM_ORDEN, COD_ARTICULO, COD_PRODUCTO,
     FEC_RESERVA, COD_BODEGA, TIP_STOCK, COD_USO, COD_ESTADO,
     NUM_UNIDADES, NOM_USUARIO, NUM_SERIE)
     VALUES (SN_NUM_TRANSACCION, 1, 1,  EN_CODARTICULO,  GN_COD_PRODUCTO, SYSDATE,
     EN_CODBODEGA, EN_CODSTOCK,  EN_CODUSOLINEA,  EN_CODESTADO, 1, EV_USER,  EV_NUMSERIE);



EXCEPTION
    WHEN OTHERS THEN
        SN_COD_RETORNO := GV_ERROR_OTHERS;
        IF NOT GE_ERRORES_PG.MENSAJEERROR(SN_COD_RETORNO,SV_MENS_RETORNO) THEN
          SV_MENS_RETORNO := GV_ERROR_NO_CLASIF;
        END IF;
        LV_DES_ERROR := SUBSTR(LV_NOMBRE_PROC || '( ); - ' || SQLERRM,1,GN_LARGOERRTEC);
        SV_MENS_RETORNO:=SUBSTR(SV_MENS_RETORNO,1,GN_LARGODESC);
        SN_NUM_EVENTO := GE_ERRORES_PG.GRABARPL(SN_NUM_EVENTO, GV_COD_MODULO, SV_MENS_RETORNO, '1.0', USER, 
        LV_PKG_PROC, LV_SSQL, SN_COD_RETORNO, LV_DES_ERROR );
END PV_INS_GA_RESERVART_PR;


PROCEDURE PV_GET_DATOS_SERIE_PR (
                               EN_CODUSO            IN AL_SERIES.COD_USO%TYPE,
                             EV_TIPTERMINAL       IN AL_ARTICULOS.TIP_TERMINAL%TYPE,
                             EV_NUMSERIE          IN AL_SERIES.NUM_SERIE%TYPE,
                             SV_DES_STOCK         OUT NOCOPY AL_TIPOS_STOCK.DES_STOCK%TYPE,
                             SV_NUM_SERIE         OUT NOCOPY AL_SERIES.NUM_SERIE%TYPE,
                             SV_NUM_SERIEMEC      OUT NOCOPY AL_SERIES.NUM_SERIEMEC%TYPE,
                             SN_TIP_STOCK            OUT NOCOPY AL_TIPOS_STOCK.TIP_STOCK%TYPE,
                             SN_IND_VALORAR       OUT NOCOPY AL_TIPOS_STOCK.IND_VALORAR%TYPE,
                             SN_COD_ESTADO         OUT NOCOPY AL_SERIES.COD_ESTADO%TYPE,
                             SN_NUM_TELEFONO       OUT NOCOPY AL_SERIES.NUM_TELEFONO%TYPE,
                             SN_COD_BODEGA           OUT NOCOPY AL_SERIES.COD_BODEGA%TYPE,
                             SN_COD_ARTICULO       OUT NOCOPY AL_ARTICULOS.COD_ARTICULO%TYPE,
                             SV_DES_ARTICULO       OUT NOCOPY AL_ARTICULOS.DES_ARTICULO%TYPE,
                             SN_MESGARANTIA       OUT NOCOPY AL_ARTICULOS.MES_GARANTIA%TYPE,
                             SN_COD_RETORNO          OUT NOCOPY GE_ERRORES_PG.CODERROR,
                             SV_MENS_RETORNO        OUT NOCOPY GE_ERRORES_PG.MSGERROR,
                             SN_NUM_EVENTO           OUT NOCOPY GE_ERRORES_PG.EVENTO ) IS
/*
 <DOCUMENTACIÓN TIPODOC = "PROCEDIMIENTO">
<ELEMENTO NOMBRE = "PV_GET_DATOS_SERIE_PR"
LENGUAJE="PL/SQL"
FECHA="19-04-2011"
VERSIÓN="1.0.0"
DISEÑADOR="EVERIS"
PROGRAMADOR="EVERIS"
AMBIENTE="BD">
<RETORNO> RETORNA LOS DATOS DE UNA SERIE </RETORNO>
<DESCRIPCIÓN> CONSULTA Y RETORNA DATOS DE UNA SERIE EN PARTICULAR </DESCRIPCIÓN>
<PARÁMETROS>
    <ENTRADA>
        <PARAM NOM="EN_CODUSO"  TIPO="NUMBER">CODIGO DE USO </PARAM>
        <PARAM NOM="EN_TIPTERMINAL"  TIPO="NUMBER">TIPO DEL TERMINAL </PARAM>
        <PARAM NOM="EN_NUMSERIE"  TIPO="NUMBER">NUMERO DE LA SERIE DEL TERMINAL</PARAM>
    </ENTRADA>
    <SALIDA>
        <PARAM NOM="SV_DES_STOCK"  TIPO="VARCHAR"> </PARAM>
        <PARAM NOM="SV_NUM_SERIE"  TIPO="CURSOR"> </PARAM>
        <PARAM NOM="SV_NUM_SERIEMEC"  TIPO="CURSOR"> </PARAM>
        <PARAM NOM="SN_TIP_STOCK"  TIPO="CURSOR"> </PARAM>
        <PARAM NOM="SN_IND_VALORAR"  TIPO="CURSOR"> </PARAM>
        <PARAM NOM="SN_COD_ESTADO"  TIPO="CURSOR"> </PARAM>
        <PARAM NOM="SN_NUM_TELEFONO"  TIPO="CURSOR"> </PARAM>
        <PARAM NOM="SN_COD_BODEGA"  TIPO="CURSOR"> </PARAM>
        <PARAM NOM="SN_COD_RETORNO"    TIPO="NUMBER"> CODIGO RETORNO </PARAM>
        <PARAM NOM="SV_MENS_RETORNO"   TIPO="STRING"> GLOSA MENSAJE ERROR </PARAM>
        <PARAM NOM="SN_NUM_EVENTO"     TIPO="NUMBER"> NUMERO DE EVENTO </PARAM>
    </SALIDA>
</PARÁMETROS>
</ELEMENTO>
</DOCUMENTACIÓN>
*/
    LV_DES_ERROR                GE_ERRORES_PG.DESEVENT;
    LV_SSQL                     GE_ERRORES_PG.VQUERY;
    LV_NOMBRE_PROC              STRING(30)   := 'PV_GET_DATOS_SERIE_PR';
    LV_PKG_PROC                 STRING(60)   := GV_PACKAGE||'.'||LV_NOMBRE_PROC;

BEGIN

    SN_COD_RETORNO := 0;
    SV_MENS_RETORNO := 'OK';
    SN_NUM_EVENTO := 0;
    
    IF EV_TIPTERMINAL IS NOT NULL THEN

        LV_SSQL := 'SELECT B.DES_STOCK, A.NUM_SERIE, A.NUM_SERIEMEC, A.TIP_STOCK, B.IND_VALORAR, A.COD_ESTADO,A.NUM_TELEFONO , A.COD_BODEGA, C.COD_ARTICULO, C.des_articulo , C.MES_GARANTIA '
                || 'FROM AL_TIPOS_STOCK B,AL_ARTICULOS C,AL_SERIES A '
                || 'WHERE A.COD_USO = '||EN_CODUSO||' '
                || 'AND C.TIP_TERMINAL = '''|| EV_TIPTERMINAL ||''' '
                || 'AND A.COD_PRODUCTO = 1 '
                || 'AND A.NUM_SERIE = '''|| EV_NUMSERIE ||''' '
                || 'AND A.COD_ARTICULO = C.COD_ARTICULO '
                || 'AND B.TIP_STOCK = A.TIP_STOCK';


        SELECT B.DES_STOCK, A.NUM_SERIE, A.NUM_SERIEMEC, A.TIP_STOCK,B.IND_VALORAR, A.COD_ESTADO,A.NUM_TELEFONO , A.COD_BODEGA, C.COD_ARTICULO, C.DES_ARTICULO, C.MES_GARANTIA
        INTO SV_DES_STOCK, SV_NUM_SERIE, SV_NUM_SERIEMEC, SN_TIP_STOCK, SN_IND_VALORAR, SN_COD_ESTADO, SN_NUM_TELEFONO, SN_COD_BODEGA, SN_COD_ARTICULO, SV_DES_ARTICULO, SN_MESGARANTIA
        FROM AL_TIPOS_STOCK B,AL_ARTICULOS C,AL_SERIES A
        WHERE A.COD_USO = EN_CODUSO 
        AND C.TIP_TERMINAL = EV_TIPTERMINAL
        AND A.COD_PRODUCTO =  1
        AND A.NUM_SERIE= EV_NUMSERIE
        AND A.COD_ARTICULO = C.COD_ARTICULO
        AND B.TIP_STOCK = A.TIP_STOCK;
    
    ELSE
    
        LV_SSQL := 'SELECT B.DES_STOCK, A.NUM_SERIE, A.NUM_SERIEMEC, A.TIP_STOCK, B.IND_VALORAR, A.COD_ESTADO,A.NUM_TELEFONO , A.COD_BODEGA, C.COD_ARTICULO, C.des_articulo , C.MES_GARANTIA '
                || 'FROM AL_TIPOS_STOCK B,AL_ARTICULOS C,AL_SERIES A '
                || 'WHERE A.COD_USO = '||EN_CODUSO||' '
                || 'AND A.COD_PRODUCTO = 1 '
                || 'AND A.NUM_SERIE = '''|| EV_NUMSERIE ||''' '
                || 'AND A.COD_ARTICULO = C.COD_ARTICULO '
                || 'AND B.TIP_STOCK = A.TIP_STOCK';


        SELECT B.DES_STOCK, A.NUM_SERIE, A.NUM_SERIEMEC, A.TIP_STOCK,B.IND_VALORAR, A.COD_ESTADO,A.NUM_TELEFONO , A.COD_BODEGA, C.COD_ARTICULO, C.DES_ARTICULO, C.MES_GARANTIA
        INTO SV_DES_STOCK, SV_NUM_SERIE, SV_NUM_SERIEMEC, SN_TIP_STOCK, SN_IND_VALORAR, SN_COD_ESTADO, SN_NUM_TELEFONO, SN_COD_BODEGA, SN_COD_ARTICULO, SV_DES_ARTICULO, SN_MESGARANTIA
        FROM AL_TIPOS_STOCK B,AL_ARTICULOS C,AL_SERIES A
        WHERE A.COD_USO = EN_CODUSO 
        AND A.COD_PRODUCTO =  1
        AND A.NUM_SERIE= EV_NUMSERIE
        AND A.COD_ARTICULO = C.COD_ARTICULO
        AND B.TIP_STOCK = A.TIP_STOCK;
    
    END IF;

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        SN_COD_RETORNO := 100011;
        IF NOT GE_ERRORES_PG.MENSAJEERROR(SN_COD_RETORNO,SV_MENS_RETORNO) THEN
          SV_MENS_RETORNO := GV_ERROR_NO_CLASIF;
        END IF;
        LV_DES_ERROR := SUBSTR(LV_NOMBRE_PROC || '( ); - ' || SQLERRM,1,GN_LARGOERRTEC);
        SV_MENS_RETORNO:=SUBSTR(SV_MENS_RETORNO,1,GN_LARGODESC);
        SN_NUM_EVENTO := GE_ERRORES_PG.GRABARPL(SN_NUM_EVENTO, GV_COD_MODULO, SV_MENS_RETORNO, '1.0', USER, 
        LV_PKG_PROC, LV_SSQL, SN_COD_RETORNO, LV_DES_ERROR );

    WHEN OTHERS THEN
        SN_COD_RETORNO := GV_ERROR_OTHERS;
        IF NOT GE_ERRORES_PG.MENSAJEERROR(SN_COD_RETORNO,SV_MENS_RETORNO) THEN
          SV_MENS_RETORNO := GV_ERROR_NO_CLASIF;
        END IF;
        LV_DES_ERROR := SUBSTR(LV_NOMBRE_PROC || '( ); - ' || SQLERRM,1,GN_LARGOERRTEC);
        SV_MENS_RETORNO:=SUBSTR(SV_MENS_RETORNO,1,GN_LARGODESC);
        SN_NUM_EVENTO := GE_ERRORES_PG.GRABARPL(SN_NUM_EVENTO, GV_COD_MODULO, SV_MENS_RETORNO, '1.0', USER, 
        LV_PKG_PROC, LV_SSQL, SN_COD_RETORNO, LV_DES_ERROR );
END PV_GET_DATOS_SERIE_PR;


PROCEDURE PV_GET_LISTA_CUOTAS_PR (
                             EV_NOM_USUARIO       IN GE_SEG_USUARIO.NOM_USUARIO%TYPE,
                             EN_COD_MODVENTA      IN GE_MODVENTA.COD_MODVENTA%TYPE,
                             SC_LISTA_CUOTAS      OUT NOCOPY REFCURSOR,
                             SV_APLICA_CUOTAS     OUT NOCOPY VARCHAR2,
                             SN_COD_RETORNO          OUT NOCOPY GE_ERRORES_PG.CODERROR,
                             SV_MENS_RETORNO        OUT NOCOPY GE_ERRORES_PG.MSGERROR,
                             SN_NUM_EVENTO           OUT NOCOPY GE_ERRORES_PG.EVENTO 
                             ) IS
/*
 <DOCUMENTACIÓN TIPODOC = "PROCEDIMIENTO">
<ELEMENTO NOMBRE = "PV_GET_LISTA_CUOTAS_PR"
LENGUAJE="PL/SQL"
FECHA="19-04-2011"
VERSIÓN="1.0.0"
DISEÑADOR="EVERIS"
PROGRAMADOR="EVERIS"
AMBIENTE="BD">
<RETORNO> RETORNA LOS DATOS DE UNA SERIE </RETORNO>
<DESCRIPCIÓN> CONSULTA Y RETORNA DATOS DE UNA SERIE EN PARTICULAR </DESCRIPCIÓN>
<PARÁMETROS>
    <ENTRADA>
    </ENTRADA>
    <SALIDA>
        <PARAM NOM="SV_DES_STOCK"  TIPO="VARCHAR"> </PARAM>
        <PARAM NOM="SV_NUM_SERIE"  TIPO="CURSOR"> </PARAM>
        <PARAM NOM="SV_NUM_SERIEMEC"  TIPO="CURSOR"> </PARAM>
        <PARAM NOM="SN_TIP_STOCK"  TIPO="CURSOR"> </PARAM>
        <PARAM NOM="SN_IND_VALORAR"  TIPO="CURSOR"> </PARAM>
        <PARAM NOM="SN_COD_ESTADO"  TIPO="CURSOR"> </PARAM>
        <PARAM NOM="SN_NUM_TELEFONO"  TIPO="CURSOR"> </PARAM>
        <PARAM NOM="SN_COD_BODEGA"  TIPO="CURSOR"> </PARAM>
        <PARAM NOM="SN_COD_RETORNO"    TIPO="NUMBER"> CODIGO RETORNO </PARAM>
        <PARAM NOM="SV_MENS_RETORNO"   TIPO="STRING"> GLOSA MENSAJE ERROR </PARAM>
        <PARAM NOM="SN_NUM_EVENTO"     TIPO="NUMBER"> NUMERO DE EVENTO </PARAM>
    </SALIDA>
</PARÁMETROS>
</ELEMENTO>
</DOCUMENTACIÓN>
*/
    LV_DES_ERROR                GE_ERRORES_PG.DESEVENT;
    LV_SSQL                     GE_ERRORES_PG.VQUERY;
    LV_NOMBRE_PROC              STRING(30)   := 'PV_GET_LISTA_CUOTAS_PR';
    LV_PKG_PROC                 STRING(60)   := GV_PACKAGE||'.'||LV_NOMBRE_PROC;
    
    LN_IND_CUOTAS               GE_MODVENTA.IND_CUOTAS%TYPE;
    LN_COD_MODPRICTA            GED_PARAMETROS.VAL_PARAMETRO%TYPE;
    LN_CUOTA_UNO                GED_PARAMETROS.VAL_PARAMETRO%TYPE;
    LN_PERMISO                  NUMBER;
    LN_EXISTE                   NUMBER;
    LN_PERMISO_B                NUMBER;
    LN_CUOTA_DEF                GED_PARAMETROS.VAL_PARAMETRO%TYPE;
BEGIN

    SN_COD_RETORNO  := 0;
    SV_MENS_RETORNO := 'OK';
    SN_NUM_EVENTO   := 0;

    SELECT IND_CUOTAS INTO LN_IND_CUOTAS 
    FROM GE_MODVENTA WHERE COD_MODVENTA = EN_COD_MODVENTA;

    IF LN_IND_CUOTAS  = 1 THEN

        SELECT TO_NUMBER(VAL_PARAMETRO) INTO LN_COD_MODPRICTA 
        FROM GED_PARAMETROS WHERE NOM_PARAMETRO = 'COD_MODPRICTA';

        SELECT TO_NUMBER(VAL_PARAMETRO) INTO LN_CUOTA_UNO 
        FROM GED_PARAMETROS WHERE NOM_PARAMETRO = 'COD_CONCONS';

        SELECT COUNT (A.COD_PROCESO) INTO LN_PERMISO
        FROM GE_SEG_PERFILES A, GE_SEG_GRPUSUARIO B
        WHERE A.COD_GRUPO = B.COD_GRUPO
        AND B.NOM_USUARIO = EV_NOM_USUARIO
        AND A.COD_PROGRAMA = 'GPA'
        AND A.NUM_VERSION = (
            SELECT NVL (MAX (NUM_VERSION), 0)
            FROM GE_PROGRAMAS
            WHERE COD_PROGRAMA = 'GPA')
        AND A.COD_PROCESO = (
            SELECT COD_PROCESO
            FROM GAD_PROCESOS_PERFILES
            WHERE NOM_PERFIL_PROCESO = 'COD_PROC_CARGOACUENTA')
        AND ROWNUM = 1;
       
        BEGIN
            LV_SSQL := 'SELECT COD_CUOTA, DES_CUOTA FROM GE_TIPCUOTAS ';
            IF EN_COD_MODVENTA <> LN_COD_MODPRICTA AND LN_PERMISO = 0 THEN
                
                SELECT 1 INTO LN_EXISTE FROM GE_TIPCUOTAS
                WHERE COD_CUOTA <> LN_CUOTA_UNO;
                
                LV_SSQL := LV_SSQL || ' WHERE COD_CUOTA <> '||LN_CUOTA_UNO;
                
            ELSIF EN_COD_MODVENTA = LN_COD_MODPRICTA THEN
            
                SELECT 1 INTO LN_EXISTE FROM GE_TIPCUOTAS
                WHERE COD_CUOTA = LN_CUOTA_UNO;
                
                LV_SSQL := LV_SSQL || ' WHERE COD_CUOTA = '||LN_CUOTA_UNO;
            END IF;
            
            OPEN SC_LISTA_CUOTAS FOR LV_SSQL;
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                SELECT TO_NUMBER(VAL_PARAMETRO) INTO LN_CUOTA_DEF 
                FROM GED_PARAMETROS WHERE NOM_PARAMETRO = 'CUOTA_DEF';
            
                OPEN SC_LISTA_CUOTAS FOR 
                SELECT LN_CUOTA_DEF, LN_CUOTA_DEF||' CUOTA' FROM DUAL;
                
        END;        
        SV_APLICA_CUOTAS := 'TRUE';                
        
--        SELECT COUNT (A.COD_PROCESO) INTO LN_PERMISO_B
--        FROM GE_SEG_PERFILES A, GE_SEG_GRPUSUARIO B
--        WHERE A.COD_GRUPO = B.COD_GRUPO
--        AND B.NOM_USUARIO = EV_NOM_USUARIO
--        AND A.COD_PROGRAMA = 'GPA'
--        AND A.NUM_VERSION = (
--            SELECT NVL (MAX (NUM_VERSION), 0)
--            FROM GE_PROGRAMAS
--            WHERE COD_PROGRAMA = 'GPA')
--        AND A.COD_PROCESO = (
--            SELECT COD_PROCESO
--            FROM GAD_PROCESOS_PERFILES
--            WHERE NOM_PERFIL_PROCESO = 'COD_PROC_DIFERIDA')
--        AND ROWNUM = 1;
--        
--        IF LN_PERMISO_B > 0 THEN
--            SB_APLICA_DIFERIDO := TRUE;
--        END IF;
    ELSE
        --SB_APLICA_DIFERIDO := FALSE;
        SV_APLICA_CUOTAS := 'FALSE';
    END IF;

EXCEPTION
    WHEN OTHERS THEN
        SN_COD_RETORNO := GV_ERROR_OTHERS;
        IF NOT GE_ERRORES_PG.MENSAJEERROR(SN_COD_RETORNO,SV_MENS_RETORNO) THEN
          SV_MENS_RETORNO := GV_ERROR_NO_CLASIF;
        END IF;
        LV_DES_ERROR := SUBSTR(LV_NOMBRE_PROC || '('''||EV_NOM_USUARIO||''','||EN_COD_MODVENTA||'); - ' || SQLERRM,1,GN_LARGOERRTEC);
        SV_MENS_RETORNO:=SUBSTR(SV_MENS_RETORNO,1,GN_LARGODESC);
        SN_NUM_EVENTO := GE_ERRORES_PG.GRABARPL(SN_NUM_EVENTO, GV_COD_MODULO, SV_MENS_RETORNO, '1.0', USER, 
        LV_PKG_PROC, LV_SSQL, SN_COD_RETORNO, LV_DES_ERROR );
END PV_GET_LISTA_CUOTAS_PR;

PROCEDURE PV_GET_DATOS_CAUSA_PR(
                                    EV_COD_CAUCASER         IN GA_CAUCASER.COD_CAUCASER%TYPE,
                                    SC_DATOS_CAUSA          OUT REFCURSOR,
                                    SN_COD_RETORNO          OUT NOCOPY GE_ERRORES_TD.COD_MSGERROR%TYPE,
                                    SV_MENS_RETORNO         OUT NOCOPY GE_ERRORES_TD.DET_MSGERROR%TYPE,
                                    SN_NUM_EVENTO           OUT NOCOPY GE_ERRORES_PG.EVENTO
)
 /*
<DOCUMENTACIÓN
  TIPODOC = "PROCEDIMIENTO">
   <ELEMENTO
      NOMBRE = "PV_GET_DATOS_ABONADO_PR"
      LENGUAJE="PL/SQL"
      FECHA="10-06-2008"
      VERSIÓN="1.0"
      DISEÑADOR="EVERIS"
      PROGRAMADOR="EVERIS"
      AMBIENTE DESARROLLO="BD">
      <RETORNO>NA</RETORNO>
      <DESCRIPCIÓN> OBTIENE DATOS DE ABONADO</DESCRIPCIÓN>
      <PARÁMETROS>
         <ENTRADA>
              <PARAM NOM="EN_NUM_ABONADO" TIPO="NUMBER"> NUMERO DE ABONADO</PARAM>
         </ENTRADA>
         <SALIDA>
            <PARAM NOM="SC_DATOS_ABONADO"  TIPO="CURSOR" >CURSOR CON DATOS DE ABONADO</PARAM>
            <PARAM NOM="SN_COD_RETORNO"  TIPO="NUMERICO" >CÓDIGO DE RETORNO (DESCRIPCIÓN DE ERROR)</PARAM>
            <PARAM NOM="SV_MENS_RETORNO"  TIPO="VARCHAR" >MENSAJE DE RETORNO (CÓDIGO DE ERROR)</PARAM>
            <PARAM NOM="SN_NUM_EVENTO"  TIPO="NUMERICO" >NÚMERO DE EVENTO</PARAM>
         </SALIDA>
      </PARÁMETROS>
   </ELEMENTO>
</DOCUMENTACIÓN>
*/
IS
    LV_DES_ERROR               GE_ERRORES_PG.DESEVENT;
    LV_SSQL                    GE_ERRORES_PG.VQUERY;
    LV_NOMBRE_PROC             STRING(30)   := 'PV_GET_DATOS_ABONADO_PR';
    LV_PKG_PROC                STRING(60)   := GV_PACKAGE||'.'||LV_NOMBRE_PROC;
    LN_NUM_TRANSACC            GA_TRANSACABO.NUM_TRANSACCION%TYPE;
    
BEGIN

    SN_COD_RETORNO  := 0;
    SV_MENS_RETORNO := 'OK';
    SN_NUM_EVENTO   := 0;
    
    LV_SSQL := 'SELECT DES_CAUCASER, IND_ANTIGUEDAD, IND_CARGO, IND_DEV_ALMACEN, COD_ESTADO_DEV ' 
            || 'FROM GA_CAUCASER WHERE COD_CAUCASER = '''||EV_COD_CAUCASER||'''';
    
    OPEN SC_DATOS_CAUSA FOR
    SELECT DES_CAUCASER, IND_ANTIGUEDAD, IND_CARGO, IND_DEV_ALMACEN, COD_ESTADO_DEV 
    FROM GA_CAUCASER 
    WHERE COD_CAUCASER = EV_COD_CAUCASER;
    
EXCEPTION
    WHEN OTHERS THEN
        SN_COD_RETORNO := GV_ERROR_OTHERS;
        IF NOT GE_ERRORES_PG.MENSAJEERROR(SN_COD_RETORNO,SV_MENS_RETORNO) THEN
            SV_MENS_RETORNO := GV_ERROR_NO_CLASIF;
        END IF;
        LV_DES_ERROR := SUBSTR(LV_NOMBRE_PROC || '('''||EV_COD_CAUCASER||'''); - ' || SQLERRM,1,GN_LARGOERRTEC);
        SV_MENS_RETORNO:=SUBSTR(SV_MENS_RETORNO,1,GN_LARGODESC);
        SN_NUM_EVENTO := GE_ERRORES_PG.GRABARPL(SN_NUM_EVENTO, GV_COD_MODULO, SV_MENS_RETORNO, '1.0', USER, 
        LV_PKG_PROC, LV_SSQL, SN_COD_RETORNO, LV_DES_ERROR );
END PV_GET_DATOS_CAUSA_PR;

PROCEDURE PV_GET_IND_VTA_EXTERNA_VEND_PR(
                                        EN_COD_VENDEDOR IN VE_VENDEDORES.COD_VENDEDOR%TYPE,
                                        SN_IND_VTA_EXTERNA OUT VE_TIPCOMIS.IND_VTA_EXTERNA%TYPE,
                                        SN_COD_RETORNO OUT NOCOPY GE_ERRORES_TD.COD_MSGERROR%TYPE,
                                        SV_MENS_RETORNO OUT NOCOPY GE_ERRORES_TD.DET_MSGERROR%TYPE,
                                        SN_NUM_EVENTO OUT NOCOPY GE_ERRORES_PG.EVENTO
)
/*
<DOCUMENTACIÓN
TIPODOC = "PROCEDIMIENTO">
<ELEMENTO
NOMBRE = "PV_GET_IND_VTA_EXTERNA_VEND_PR"
LENGUAJE="PL/SQL"
FECHA="22-04-2011"
VERSIÓN="1.0"
DISEÑADOR="EVERIS"
PROGRAMADOR="EVERIS"
AMBIENTE DESARROLLO="BD">
<RETORNO>NA</RETORNO>
<DESCRIPCIÓN>OBTIENE EL INDICADOR DE VENTA EXTERNA ASOCIADO A UN VENDEDOR</DESCRIPCIÓN>
<PARÁMETROS>
<ENTRADA>
<PARAM NOM="EN_COD_VENDEDOR" TIPO="NUMERICO"> CODIGO DEL VENDEDOR</PARAM>
</ENTRADA>
<SALIDA>
<PARAM NOM="SN_IND_ABONO" TIPO="NUMERICO" >INDICADOR DE VENTA EXTERNA ASOCIADO AL VENDEDOR</PARAM>
<PARAM NOM="SN_COD_RETORNO" TIPO="NUMERICO" >CÓDIGO DE RETORNO (DESCRIPCIÓN DE ERROR)</PARAM>
<PARAM NOM="SV_MENS_RETORNO" TIPO="VARCHAR" >MENSAJE DE RETORNO (CÓDIGO DE ERROR)</PARAM>
<PARAM NOM="SN_NUM_EVENTO" TIPO="NUMERICO" >NÚMERO DE EVENTO</PARAM>
</SALIDA>
</PARÁMETROS>
</ELEMENTO>
</DOCUMENTACIÓN>
*/
IS
LV_DES_ERROR GE_ERRORES_PG.DESEVENT;
LV_SSQL GE_ERRORES_PG.VQUERY;
LV_NOMBRE_PROC STRING(30) := 'PV_GET_IND_VTA_EXTERNA_VEND_PR';
LV_PKG_PROC STRING(60) := GV_PACKAGE||'.'||LV_NOMBRE_PROC;

BEGIN

SN_COD_RETORNO := 0;
SV_MENS_RETORNO := 'OK';
SN_NUM_EVENTO := 0;

LV_SSQL := ' SELECT A.IND_VTA_EXTERNA ' ||
' FROM VE_TIPCOMIS A, VE_VENDEDORES B ' ||
' WHERE B.COD_VENDEDOR = ' || EN_COD_VENDEDOR ||
' AND A.COD_TIPCOMIS = B.COD_TIPCOMIS ';

    SELECT A.IND_VTA_EXTERNA
    INTO SN_IND_VTA_EXTERNA
    FROM VE_TIPCOMIS A, VE_VENDEDORES B
    WHERE B.COD_VENDEDOR = EN_COD_VENDEDOR
    AND A.COD_TIPCOMIS = B.COD_TIPCOMIS;

EXCEPTION

WHEN OTHERS THEN
SN_COD_RETORNO := GV_ERROR_OTHERS;
IF NOT GE_ERRORES_PG.MENSAJEERROR(SN_COD_RETORNO,SV_MENS_RETORNO) THEN
SV_MENS_RETORNO := GV_ERROR_NO_CLASIF;
END IF;
LV_DES_ERROR := SUBSTR(LV_NOMBRE_PROC || '('||EN_COD_VENDEDOR||'); - ' || SQLERRM,1,GN_LARGOERRTEC);
SV_MENS_RETORNO:=SUBSTR(SV_MENS_RETORNO,1,GN_LARGODESC);
SN_NUM_EVENTO := GE_ERRORES_PG.GRABARPL(SN_NUM_EVENTO, GV_COD_MODULO, SV_MENS_RETORNO, '1.0', USER,
LV_PKG_PROC, LV_SSQL, SN_COD_RETORNO, LV_DES_ERROR );

END PV_GET_IND_VTA_EXTERNA_VEND_PR;

PROCEDURE PV_GET_IND_ABONO_MODVENTA_PR(
    EN_COD_MODVENTA IN GE_MODVENTA.COD_MODVENTA%TYPE,
    SN_IND_ABONO OUT GE_MODVENTA.IND_ABONO%TYPE,
    SN_COD_RETORNO OUT NOCOPY GE_ERRORES_TD.COD_MSGERROR%TYPE,
    SV_MENS_RETORNO OUT NOCOPY GE_ERRORES_TD.DET_MSGERROR%TYPE,
    SN_NUM_EVENTO OUT NOCOPY GE_ERRORES_PG.EVENTO
)
/*
<DOCUMENTACIÓN
TIPODOC = "PROCEDIMIENTO">
<ELEMENTO
NOMBRE = "PV_GET_IND_ABONO_MODVENTA_PR"
LENGUAJE="PL/SQL"
FECHA="22-04-2011"
VERSIÓN="1.0"
DISEÑADOR="EVERIS"
PROGRAMADOR="EVERIS"
AMBIENTE DESARROLLO="BD">
<RETORNO>NA</RETORNO>
<DESCRIPCIÓN>OBTIENE EL INDICADOR DE ABONO ASOCIADO A LA VENTA</DESCRIPCIÓN>
<PARÁMETROS>
<ENTRADA>
<PARAM NOM="EN_COD_MODVENTA" TIPO="NUMERICO"> CODIGO DE LA MODALIDAD DE LA VENTA</PARAM>
</ENTRADA>
<SALIDA>
<PARAM NOM="SN_IND_ABONO" TIPO="NUMERICO" >INDICADOR DE ABONO ASOCIADO A LA MODALIDAD DE LA VENTA</PARAM>
<PARAM NOM="SN_COD_RETORNO" TIPO="NUMERICO" >CÓDIGO DE RETORNO (DESCRIPCIÓN DE ERROR)</PARAM>
<PARAM NOM="SV_MENS_RETORNO" TIPO="VARCHAR" >MENSAJE DE RETORNO (CÓDIGO DE ERROR)</PARAM>
<PARAM NOM="SN_NUM_EVENTO" TIPO="NUMERICO" >NÚMERO DE EVENTO</PARAM>
</SALIDA>
</PARÁMETROS>
</ELEMENTO>
</DOCUMENTACIÓN>
*/
IS
LV_DES_ERROR GE_ERRORES_PG.DESEVENT;
LV_SSQL GE_ERRORES_PG.VQUERY;
LV_NOMBRE_PROC STRING(30)       := 'PV_GET_IND_ABONO_MODVENTA_PR';
LV_PKG_PROC STRING(60)          := GV_PACKAGE||'.'||LV_NOMBRE_PROC;

BEGIN

    SN_COD_RETORNO := 0;
    SV_MENS_RETORNO := 'OK';
    SN_NUM_EVENTO := 0;

    LV_SSQL := 'SELECT IND_ABONO '
            || 'FROM GE_MODVENTA '
            || 'WHERE COD_MODVENTA = ' || EN_COD_MODVENTA;

    SELECT IND_ABONO INTO SN_IND_ABONO
    FROM GE_MODVENTA
    WHERE COD_MODVENTA = EN_COD_MODVENTA;

EXCEPTION

    WHEN OTHERS THEN
        SN_COD_RETORNO := GV_ERROR_OTHERS;
        IF NOT GE_ERRORES_PG.MENSAJEERROR(SN_COD_RETORNO,SV_MENS_RETORNO) THEN
        SV_MENS_RETORNO := GV_ERROR_NO_CLASIF;
        END IF;
        LV_DES_ERROR := SUBSTR(LV_NOMBRE_PROC || '('||EN_COD_MODVENTA||'); - ' || SQLERRM,1,GN_LARGOERRTEC);
        SV_MENS_RETORNO:=SUBSTR(SV_MENS_RETORNO,1,GN_LARGODESC);
        SN_NUM_EVENTO := GE_ERRORES_PG.GRABARPL(SN_NUM_EVENTO, GV_COD_MODULO, SV_MENS_RETORNO, '1.0', USER,
        LV_PKG_PROC, LV_SSQL, SN_COD_RETORNO, LV_DES_ERROR );

END PV_GET_IND_ABONO_MODVENTA_PR;

PROCEDURE PV_UPDATE_SINIESTRO_PR(
                                    EN_NUM_SINIESTRO      IN GA_SINIESTROS.NUM_SINIESTRO%TYPE,
                                    SN_COD_RETORNO        OUT NOCOPY GE_ERRORES_TD.COD_MSGERROR%TYPE,
                                    SV_MENS_RETORNO       OUT NOCOPY GE_ERRORES_TD.DET_MSGERROR%TYPE,
                                    SN_NUM_EVENTO         OUT NOCOPY GE_ERRORES_PG.EVENTO
)
 /*
<DOCUMENTACIÓN
  TIPODOC = "PROCEDIMIENTO">
   <ELEMENTO
      NOMBRE = "PV_UPDATE_SINIESTRO_PR"
      LENGUAJE="PL/SQL"
      FECHA="10-04-2011"
      VERSIÓN="1.0"
      DISEÑADOR="EVERIS"
      PROGRAMADOR="EVERIS"
      AMBIENTE DESARROLLO="BD">
      <RETORNO>NA</RETORNO>
      <DESCRIPCIÓN> ACTUALIZA ESTADO DEL SINIESTRO</DESCRIPCIÓN>
      <PARÁMETROS>
         <ENTRADA>
              <PARAM NOM="EN_NUM_SINIESTRO" TIPO="NUMBER"> NUMERO DE SINIESTRO</PARAM>
         </ENTRADA>
         <SALIDA>
            <PARAM NOM="SN_COD_RETORNO"  TIPO="NUMERICO" >CÓDIGO DE RETORNO (DESCRIPCIÓN DE ERROR)</PARAM>
            <PARAM NOM="SV_MENS_RETORNO"  TIPO="VARCHAR" >MENSAJE DE RETORNO (CÓDIGO DE ERROR)</PARAM>
            <PARAM NOM="SN_NUM_EVENTO"  TIPO="NUMERICO" >NÚMERO DE EVENTO</PARAM>
         </SALIDA>
      </PARÁMETROS>
   </ELEMENTO>
</DOCUMENTACIÓN>
*/
IS
    LV_DES_ERROR               GE_ERRORES_PG.DESEVENT;
    LV_SSQL                    GE_ERRORES_PG.VQUERY;
    LV_NOMBRE_PROC             STRING(30)   := 'PV_UPDATE_SINIESTRO_PR';
    LV_PKG_PROC                STRING(60)   := GV_PACKAGE||'.'||LV_NOMBRE_PROC;
    
    LV_GSFORMATO_SEL2          VARCHAR2(20);
BEGIN

    SN_COD_RETORNO  := 0;
    SV_MENS_RETORNO := 'OK';
    SN_NUM_EVENTO   := 0;
    
    LV_SSQL := 'SELECT VAL_PARAMETRO '
            || 'FROM GED_PARAMETROS '
            || 'WHERE COD_MODULO = ''GE'' '
            || 'AND COD_PRODUCTO= 1 '
            || 'AND NOM_PARAMETRO =''FORMATO_SEL2'' ';
    
    SELECT VAL_PARAMETRO INTO LV_GSFORMATO_SEL2
    FROM GED_PARAMETROS
    WHERE COD_MODULO = 'GE'
    AND COD_PRODUCTO=1
    AND NOM_PARAMETRO ='FORMATO_SEL2';
    
    LV_SSQL := 'UPDATE GA_SINIESTROS SET '
            || 'COD_ESTADO = ''RE'', '
            --|| 'FEC_RESTITUC = TO_DATE(TO_CHAR(SYSDATE, '''||LV_GSFORMATO_SEL2||''')) '   01-07-2011
            || 'FEC_RESTITUC = TO_DATE(SYSDATE, '''||LV_GSFORMATO_SEL2||''') '
            || 'WHERE NUM_SINIESTRO = '||EN_NUM_SINIESTRO;
    
    UPDATE GA_SINIESTROS SET
    COD_ESTADO = 'RE',
    --FEC_RESTITUC = TO_DATE(TO_CHAR(SYSDATE, LV_GSFORMATO_SEL2)) 01-07-2011
    FEC_RESTITUC = TO_DATE(SYSDATE, LV_GSFORMATO_SEL2)
    WHERE NUM_SINIESTRO = EN_NUM_SINIESTRO;

EXCEPTION

    WHEN OTHERS THEN
        SN_COD_RETORNO := GV_ERROR_OTHERS;
        IF NOT GE_ERRORES_PG.MENSAJEERROR(SN_COD_RETORNO,SV_MENS_RETORNO) THEN
          SV_MENS_RETORNO := GV_ERROR_NO_CLASIF;
        END IF;
        LV_DES_ERROR := SUBSTR(LV_NOMBRE_PROC || '('||EN_NUM_SINIESTRO||'); - ' || SQLERRM,1,GN_LARGOERRTEC);
        SV_MENS_RETORNO:=SUBSTR(SV_MENS_RETORNO,1,GN_LARGODESC);
        SN_NUM_EVENTO := GE_ERRORES_PG.GRABARPL(SN_NUM_EVENTO, GV_COD_MODULO, SV_MENS_RETORNO, '1.0', USER, 
        LV_PKG_PROC, LV_SSQL, SN_COD_RETORNO, LV_DES_ERROR );

END PV_UPDATE_SINIESTRO_PR;


PROCEDURE PV_HISTORICO_SINIESTRO_PR(
                                    EN_NUM_SINIESTRO      IN GA_SINIESTROS.NUM_SINIESTRO%TYPE,
                                    SN_COD_RETORNO        OUT NOCOPY GE_ERRORES_TD.COD_MSGERROR%TYPE,
                                    SV_MENS_RETORNO       OUT NOCOPY GE_ERRORES_TD.DET_MSGERROR%TYPE,
                                    SN_NUM_EVENTO         OUT NOCOPY GE_ERRORES_PG.EVENTO
)
 /*
<DOCUMENTACIÓN
  TIPODOC = "PROCEDIMIENTO">
   <ELEMENTO
      NOMBRE = "PV_HISTORICO_SINIESTRO_PR"
      LENGUAJE="PL/SQL"
      FECHA="10-04-2011"
      VERSIÓN="1.0"
      DISEÑADOR="EVERIS"
      PROGRAMADOR="EVERIS"
      AMBIENTE DESARROLLO="BD">
      <RETORNO>NA</RETORNO>
      <DESCRIPCIÓN> PASA A HISTORICO EL SINIESTRO</DESCRIPCIÓN>
      <PARÁMETROS>
         <ENTRADA>
              <PARAM NOM="EN_NUM_SINIESTRO" TIPO="NUMBER"> NUMERO DE SINIESTRO</PARAM>
         </ENTRADA>
         <SALIDA>
            <PARAM NOM="SN_COD_RETORNO"  TIPO="NUMERICO" >CÓDIGO DE RETORNO (DESCRIPCIÓN DE ERROR)</PARAM>
            <PARAM NOM="SV_MENS_RETORNO"  TIPO="VARCHAR" >MENSAJE DE RETORNO (CÓDIGO DE ERROR)</PARAM>
            <PARAM NOM="SN_NUM_EVENTO"  TIPO="NUMERICO" >NÚMERO DE EVENTO</PARAM>
         </SALIDA>
      </PARÁMETROS>
   </ELEMENTO>
</DOCUMENTACIÓN>
*/
IS
    LV_DES_ERROR               GE_ERRORES_PG.DESEVENT;
    LV_SSQL                    GE_ERRORES_PG.VQUERY;
    LV_NOMBRE_PROC             STRING(30)   := 'PV_HISTORICO_SINIESTRO_PR';
    LV_PKG_PROC                STRING(60)   := GV_PACKAGE||'.'||LV_NOMBRE_PROC;
    
    LV_GSFORMATO_SEL2          VARCHAR2(20);
BEGIN

    SN_COD_RETORNO  := 0;
    SV_MENS_RETORNO := 'OK';
    SN_NUM_EVENTO   := 0;
    
    LV_SSQL := 'INSERT INTO GA_HDETSINIE(NUM_SINIESTRO, COD_ESTADO, FEC_DETALLE, '
            || 'NOM_USUARORA, FEC_HISTORICO, OBS_DETALLE ) '
            || '(SELECT NUM_SINIESTRO, COD_ESTADO, FEC_DETALLE, '
            || 'NOM_USUARORA,SYSDATE, OBS_DETALLE '
            || 'FROM GA_DETSINIE WHERE NUM_SINIESTRO = '||EN_NUM_SINIESTRO||')';
    INSERT INTO GA_HDETSINIE(NUM_SINIESTRO, COD_ESTADO, FEC_DETALLE, 
    NOM_USUARORA, FEC_HISTORICO, OBS_DETALLE )
    (SELECT NUM_SINIESTRO, COD_ESTADO, FEC_DETALLE, 
    NOM_USUARORA,SYSDATE, OBS_DETALLE 
    FROM GA_DETSINIE WHERE NUM_SINIESTRO = EN_NUM_SINIESTRO);

    LV_SSQL := 'DELETE GA_DETSINIE WHERE NUM_SINIESTRO = '||EN_NUM_SINIESTRO;
    DELETE GA_DETSINIE WHERE NUM_SINIESTRO = EN_NUM_SINIESTRO;

    LV_SSQL := 'INSERT INTO GA_HSINIESTROS (NUM_SINIESTRO, NUM_ABONADO, COD_PRODUCTO, COD_CAUSA, COD_ESTADO, '
            || 'NUM_TERMINAL, NUM_SERIE, FEC_SINIESTRO, FEC_HISTORICO, COD_CARGOBASICO, COD_SERVICIO, '
            || 'FEC_FORMALIZA, FEC_ANULA, FEC_RESTITUC, NUM_CONSTPOL, NUM_SOLLIQ, NUM_SERIEREP, TIP_TERMINAL, IND_SUSP) ' 
            || '(SELECT NUM_SINIESTRO, NUM_ABONADO, COD_PRODUCTO, COD_CAUSA, COD_ESTADO, '
            || 'NUM_TERMINAL, NUM_SERIE, FEC_SINIESTRO, SYSDATE, COD_CARGOBASICO, COD_SERVICIO, '
            || 'FEC_FORMALIZA, FEC_ANULA, FEC_RESTITUC, NUM_CONSTPOL, NUM_SOLLIQ, NUM_SERIEREP, TIP_TERMINAL, IND_SUSP ' 
            || 'FROM GA_SINIESTROS WHERE NUM_SINIESTRO = '||EN_NUM_SINIESTRO||')';
    INSERT INTO GA_HSINIESTROS (NUM_SINIESTRO, NUM_ABONADO, COD_PRODUCTO, COD_CAUSA, COD_ESTADO,
    NUM_TERMINAL, NUM_SERIE, FEC_SINIESTRO, FEC_HISTORICO, COD_CARGOBASICO, COD_SERVICIO, 
    FEC_FORMALIZA, FEC_ANULA, FEC_RESTITUC, NUM_CONSTPOL, NUM_SOLLIQ, NUM_SERIEREP, TIP_TERMINAL, IND_SUSP) 
    (SELECT NUM_SINIESTRO, NUM_ABONADO, COD_PRODUCTO, COD_CAUSA, COD_ESTADO, 
    NUM_TERMINAL, NUM_SERIE, FEC_SINIESTRO, SYSDATE, COD_CARGOBASICO, COD_SERVICIO,
    FEC_FORMALIZA, FEC_ANULA, FEC_RESTITUC, NUM_CONSTPOL, NUM_SOLLIQ, NUM_SERIEREP, TIP_TERMINAL, IND_SUSP 
    FROM GA_SINIESTROS WHERE NUM_SINIESTRO = EN_NUM_SINIESTRO);

    LV_SSQL := 'DELETE GA_SINIESTROS WHERE NUM_SINIESTRO = '||EN_NUM_SINIESTRO;
    DELETE GA_SINIESTROS WHERE NUM_SINIESTRO = EN_NUM_SINIESTRO;

EXCEPTION

    WHEN OTHERS THEN
        SN_COD_RETORNO := GV_ERROR_OTHERS;
        IF NOT GE_ERRORES_PG.MENSAJEERROR(SN_COD_RETORNO,SV_MENS_RETORNO) THEN
          SV_MENS_RETORNO := GV_ERROR_NO_CLASIF;
        END IF;
        LV_DES_ERROR := SUBSTR(LV_NOMBRE_PROC || '('||EN_NUM_SINIESTRO||'); - ' || SQLERRM,1,GN_LARGOERRTEC);
        SV_MENS_RETORNO:=SUBSTR(SV_MENS_RETORNO,1,GN_LARGODESC);
        SN_NUM_EVENTO := GE_ERRORES_PG.GRABARPL(SN_NUM_EVENTO, GV_COD_MODULO, SV_MENS_RETORNO, '1.0', USER, 
        LV_PKG_PROC, LV_SSQL, SN_COD_RETORNO, LV_DES_ERROR );

END PV_HISTORICO_SINIESTRO_PR;

PROCEDURE PV_INSTA_OS_ONLINE_PR(
                                EN_NUM_OS                 IN  CI_ORSERV.NUM_OS%TYPE,
                                EV_COD_OS                 IN  CI_ORSERV.COD_OS%TYPE,
                                EN_PRODUCTO               IN  CI_ORSERV.PRODUCTO%TYPE,
                                EN_TIP_INTER              IN  CI_ORSERV.TIP_INTER%TYPE,
                                EN_COD_INTER              IN  CI_ORSERV.COD_INTER%TYPE,
                                EV_USUARIO                IN  CI_ORSERV.USUARIO%TYPE,
                                --ED_FECHA                  IN  CI_ORSERV.FECHA%TYPE, 30-06-2011
                                EV_FECHA                  IN  VARCHAR2,
                                EV_COMENTARIO             IN  CI_ORSERV.COMENTARIO%TYPE,
                                EN_NUM_CARGO              IN  CI_ORSERV.NUM_CARGO%TYPE,
                                EV_COD_MODULO             IN  CI_ORSERV.COD_MODULO%TYPE,
                                EN_ID_GESTOR              IN  CI_ORSERV.ID_GESTOR%TYPE,
                                EN_NUM_MOVIMIENTO         IN  CI_ORSERV.NUM_MOVIMIENTO%TYPE,
                                EN_COD_ESTADO             IN  CI_ORSERV.COD_ESTADO%TYPE,
                                SN_COD_RETORNO            OUT NOCOPY GE_ERRORES_PG.CODERROR,
                                SV_MENS_RETORNO           OUT NOCOPY GE_ERRORES_PG.MSGERROR,
                                SN_NUM_EVENTO             OUT NOCOPY GE_ERRORES_PG.EVENTO
) IS


 /*
    <DOCUMENTACIÓN TIPODOC = "PROCEDIMIENTO">
    <ELEMENTO NOMBRE = "PV_INSTA_OS_ONLINE_PR
    LENGUAJE="PL/SQL"
    FECHA="22-04-2011"
    VERSIÓN="1.0.0"
    DISEÑADOR="EVERIS"
    PROGRAMADOR="EVERIS"
    AMBIENTE="BD">
    <RETORNO>  </RETORNO>
    <DESCRIPCIÓN> REGISTRA ORDEN DE SERVICIO ONLINE</DESCRIPCIÓN>
    <PARÁMETROS>
        <ENTRADA>
            <PARAM NOM="EN_NUM_OS"         TIPO="NUMBER"> NÚMERO DE ORDEN DE SERVICIO</PARAM>
            <PARAM NOM="EV_COD_OS"         TIPO="STRING"> CÓDIGO DE ORDEN DE SERVICIO</PARAM>
            <PARAM NOM="EN_PRODUCTO"       TIPO="NUMBER"> CÓDIGO DE PRODUCTO</PARAM>
            <PARAM NOM="EN_TIP_INTER"      TIPO="NUMBER"> TIPO INTERLOCUTOR</PARAM>
            <PARAM NOM="EN_COD_INTER"      TIPO="NUMBER"> CÓDIGO SUJETO/PARAM>
            <PARAM NOM="EV_USUARIO"        TIPO="STRING"> USUARIO QUE EJECUTA LA ORDEN DE SERVICIO</PARAM>
            <PARAM NOM="EV_FECHA"          TIPO="STRING"  > FECHA DE LA ORDEN DE SERVICIO</PARAM>
            <PARAM NOM="EV_COMENTARIO"     TIPO="STRING"> COMENTARIO ASOCIADO A LA ORDEN DE SERVICIO</PARAM>
            <PARAM NOM="EN_NUM_CARGO"      TIPO="NUMBER"> NÚMERO DE CARGOS</PARAM>
            <PARAM NOM="EV_COD_MODULO"     TIPO="STRING"> CÓDIGO DE MODULO</PARAM>
            <PARAM NOM="EN_ID_GESTOR"      TIPO="NUMBER"> ID GESTOR</PARAM>
            <PARAM NOM="EN_NUM_MOVIMIENTO" TIPO="NUMBER"> NÚMERO DE MOVIMIENTO</PARAM>
            <PARAM NOM="EN_COD_ESTADO"     TIPO="NUMBER"> CÓDIGO DE ESTADO</PARAM>
            <PARAM NOM="EN_COD_VENDEDOR"   TIPO="NUMBER"> CÓDIGO DE VENDEDOR</PARAM>
          </ENTRADA>
        <SALIDA>
            <PARAM NOM="SN_COD_RETORNO"    TIPO="NUMBER"> CODIGO RETORNO </PARAM>
            <PARAM NOM="SV_MENS_RETORNO"   TIPO="STRING"> GLOSA MENSAJE ERROR </PARAM>
            <PARAM NOM="SN_NUM_EVENTO"     TIPO="NUMBER"> NUMERO DE EVENTO </PARAM>
        </SALIDA>
    </PARÁMETROS>
    </ELEMENTO>
    </DOCUMENTACIÓN>
    */



LV_DES_ERROR               GE_ERRORES_PG.DESEVENT;
LV_SSQL                    GE_ERRORES_PG.VQUERY;
LV_NOMBRE_PROC             STRING(30)   := 'PV_INSTA_OS_ONLINE_PR';
LV_PKG_PROC                STRING(60)   := GV_PACKAGE||'.'||LV_NOMBRE_PROC;

LD_FECHA                   CI_ORSERV.FECHA%TYPE; --30-06-2011

BEGIN

    SN_COD_RETORNO := 0;
    SV_MENS_RETORNO := 'OK';
    SN_NUM_EVENTO := 0;

    LD_FECHA:= TO_DATE(EV_FECHA,'DD-MM-YYYY'); --30-06-2011

    LV_SSQL := 'INSERT INTO CI_ORSERV (';
    LV_SSQL := LV_SSQL || ' NUM_OS, COD_OS, PRODUCTO,';
    LV_SSQL := LV_SSQL || ' TIP_INTER, COD_INTER, USUARIO,';
    LV_SSQL := LV_SSQL || ' FECHA, COMENTARIO, NUM_CARGO,';
    LV_SSQL := LV_SSQL || ' COD_MODULO, ID_GESTOR, NUM_MOVIMIENTO,';
    LV_SSQL := LV_SSQL || ' COD_ESTADO) ';
    LV_SSQL := LV_SSQL || ' VALUES(';
    LV_SSQL := LV_SSQL || EN_NUM_OS || ',''' || EV_COD_OS || ''',' ||  EN_PRODUCTO || ',';
    LV_SSQL := LV_SSQL || EN_TIP_INTER || ',' || EN_COD_INTER || ',''' || EV_USUARIO || ''',';
    LV_SSQL := LV_SSQL || EV_FECHA || ',''' || EV_COMENTARIO || ''',' || EN_NUM_CARGO || ',';
    LV_SSQL := LV_SSQL || '''' || EV_COD_MODULO || ''',' || EN_ID_GESTOR || ',' || EN_NUM_MOVIMIENTO || ',';
    LV_SSQL := LV_SSQL || EN_COD_ESTADO || ')';


    INSERT INTO CI_ORSERV (
       NUM_OS, COD_OS, PRODUCTO,
       TIP_INTER, COD_INTER, USUARIO,
       FECHA, COMENTARIO, NUM_CARGO,
       COD_MODULO, ID_GESTOR, NUM_MOVIMIENTO,
       COD_ESTADO)
    VALUES ( EN_NUM_OS, EV_COD_OS, EN_PRODUCTO,
        EN_TIP_INTER, EN_COD_INTER, EV_USUARIO,
        LD_FECHA, EV_COMENTARIO, EN_NUM_CARGO,
        EV_COD_MODULO, EN_ID_GESTOR, EN_NUM_MOVIMIENTO,
        EN_COD_ESTADO);




EXCEPTION
     WHEN OTHERS THEN
        SN_COD_RETORNO := GV_ERROR_OTHERS;
        IF NOT GE_ERRORES_PG.MENSAJEERROR(SN_COD_RETORNO,SV_MENS_RETORNO) THEN
          SV_MENS_RETORNO := GV_ERROR_NO_CLASIF;
        END IF;
        LV_DES_ERROR := SUBSTR(LV_NOMBRE_PROC || '( ); - ' || SQLERRM,1,GN_LARGOERRTEC);
        SV_MENS_RETORNO:=SUBSTR(SV_MENS_RETORNO,1,GN_LARGODESC);
        SN_NUM_EVENTO := GE_ERRORES_PG.GRABARPL(SN_NUM_EVENTO, GV_COD_MODULO, SV_MENS_RETORNO, '1.0', USER, 
        LV_PKG_PROC, LV_SSQL, SN_COD_RETORNO, LV_DES_ERROR );

END PV_INSTA_OS_ONLINE_PR;

PROCEDURE PV_GET_DATOS_MODALIDAD_PR(
    EN_COD_MODVENTA     IN GE_MODVENTA.COD_MODVENTA%TYPE,
    SC_DATOS_MODALIDAD  OUT REFCURSOR,
    SN_COD_RETORNO      OUT NOCOPY GE_ERRORES_TD.COD_MSGERROR%TYPE,
    SV_MENS_RETORNO     OUT NOCOPY GE_ERRORES_TD.DET_MSGERROR%TYPE,
    SN_NUM_EVENTO       OUT NOCOPY GE_ERRORES_PG.EVENTO
)
/*
<DOCUMENTACIÓN
TIPODOC = "PROCEDIMIENTO">
<ELEMENTO
NOMBRE = "PV_GET_DATOS_MODALIDAD_PR"
LENGUAJE="PL/SQL"
FECHA="22-04-2011"
VERSIÓN="1.0"
DISEÑADOR="EVERIS"
PROGRAMADOR="EVERIS"
AMBIENTE DESARROLLO="BD">
<RETORNO>NA</RETORNO>
<DESCRIPCIÓN>OBTIENE EL INDICADOR DE ABONO ASOCIADO A LA VENTA</DESCRIPCIÓN>
<PARÁMETROS>
<ENTRADA>
<PARAM NOM="EN_COD_MODVENTA" TIPO="NUMERICO"> CODIGO DE LA MODALIDAD DE LA VENTA</PARAM>
</ENTRADA>
<SALIDA>
<PARAM NOM="SN_IND_ABONO" TIPO="NUMERICO" >INDICADOR DE ABONO ASOCIADO A LA MODALIDAD DE LA VENTA</PARAM>
<PARAM NOM="SN_COD_RETORNO" TIPO="NUMERICO" >CÓDIGO DE RETORNO (DESCRIPCIÓN DE ERROR)</PARAM>
<PARAM NOM="SV_MENS_RETORNO" TIPO="VARCHAR" >MENSAJE DE RETORNO (CÓDIGO DE ERROR)</PARAM>
<PARAM NOM="SN_NUM_EVENTO" TIPO="NUMERICO" >NÚMERO DE EVENTO</PARAM>
</SALIDA>
</PARÁMETROS>
</ELEMENTO>
</DOCUMENTACIÓN>
*/
IS
LV_DES_ERROR GE_ERRORES_PG.DESEVENT;
LV_SSQL GE_ERRORES_PG.VQUERY;
LV_NOMBRE_PROC STRING(30)       := 'PV_GET_DATOS_MODALIDAD_PR';
LV_PKG_PROC STRING(60)          := GV_PACKAGE||'.'||LV_NOMBRE_PROC;

BEGIN

    SN_COD_RETORNO := 0;
    SV_MENS_RETORNO := 'OK';
    SN_NUM_EVENTO := 0;


    LV_SSQL := 'SELECT A.DES_MODVENTA, A.IND_CUOTAS, A.IND_PAGADO, A.COD_CAUPAGO, A.IND_ABONO '
            || 'FROM GE_MODVENTA '
            || 'WHERE COD_MODVENTA = ' || EN_COD_MODVENTA;

    OPEN SC_DATOS_MODALIDAD FOR
    SELECT A.DES_MODVENTA, A.IND_CUOTAS, A.IND_PAGADO, A.COD_CAUPAGO, A.IND_ABONO 
    FROM GE_MODVENTA A
    WHERE COD_MODVENTA = EN_COD_MODVENTA;

EXCEPTION

    WHEN OTHERS THEN
        SN_COD_RETORNO := GV_ERROR_OTHERS;
        IF NOT GE_ERRORES_PG.MENSAJEERROR(SN_COD_RETORNO,SV_MENS_RETORNO) THEN
        SV_MENS_RETORNO := GV_ERROR_NO_CLASIF;
        END IF;
        LV_DES_ERROR := SUBSTR(LV_NOMBRE_PROC || '('||EN_COD_MODVENTA||'); - ' || SQLERRM,1,GN_LARGOERRTEC);
        SV_MENS_RETORNO:=SUBSTR(SV_MENS_RETORNO,1,GN_LARGODESC);
        SN_NUM_EVENTO := GE_ERRORES_PG.GRABARPL(SN_NUM_EVENTO, GV_COD_MODULO, SV_MENS_RETORNO, '1.0', USER,
        LV_PKG_PROC, LV_SSQL, SN_COD_RETORNO, LV_DES_ERROR );

END PV_GET_DATOS_MODALIDAD_PR;


PROCEDURE PV_INS_EQUIPABOSER_SIMC_PR(    
                                        EN_COD_BODEGA           IN GA_EQUIPABOSER.COD_BODEGA%TYPE,
                                        EV_NUM_SERIEMEC         IN GA_EQUIPABOSER.NUM_SERIEMEC%TYPE,
                                        EN_COD_ESTADO           IN GA_EQUIPABOSER.COD_ESTADO%TYPE,
                                        EN_NUM_MOVIMIENTO       IN GA_EQUIPABOSER.NUM_MOVIMIENTO%TYPE,
                                        EB_HAYCARGOART          IN VARCHAR2,
                                        EN_NUM_ABONADO          IN GA_EQUIPABOSER.NUM_ABONADO%TYPE,
                                        EV_NUM_SERIE            IN GA_EQUIPABOSER.NUM_SERIE%TYPE,
                                        EN_TIP_STOCK            IN GA_EQUIPABOSER.TIP_STOCK%TYPE,
                                        EN_COD_ARTICULO         IN GA_EQUIPABOSER.COD_ARTICULO%TYPE,
                                        EV_IND_PROCEQUI         IN GA_EQUIPABOSER.IND_PROCEQUI%TYPE,
                                        EV_IND_PROPIEDAD        IN GA_EQUIPABOSER.IND_PROPIEDAD%TYPE,                                       
                                        EV_TIP_TERMINAL         IN GA_EQUIPABOSER.TIP_TERMINAL%TYPE,
                                        EV_DES_EQUIPO           IN GA_EQUIPABOSER.DES_EQUIPO%TYPE,
                                        EN_COD_USO              IN GA_EQUIPABOSER.COD_USO%TYPE,
                                        EB_PLISTA               IN VARCHAR2,                                        
                                        EN_IND_COMODATO         IN NUMBER,                                        
                                        EV_COD_TECNOLOGIA       IN GA_EQUIPABOSER.COD_TECNOLOGIA%TYPE,
                                        EN_IMPORTE              IN GA_EQUIPABOSER.PRC_VENTA%TYPE,
                                        EN_TIPDTO               IN GA_EQUIPABOSER.TIP_DTO%TYPE,
                                        EN_VALDTO               IN GA_EQUIPABOSER.VAL_DTO%TYPE,
                                        EN_COD_MODVENTA         IN GA_EQUIPABOSER.COD_MODVENTA%TYPE,
                                        EN_COD_CUOTA            IN GA_EQUIPABOSER.COD_CUOTA%TYPE,
                                        EV_COD_CAUSA            IN GA_EQUIPABOSER.COD_CAUSA%TYPE,
                                        SN_COD_RETORNO          OUT NOCOPY GE_ERRORES_PG.CODERROR,
                                        SV_MENS_RETORNO         OUT NOCOPY GE_ERRORES_PG.MSGERROR,
                                        SN_NUM_EVENTO           OUT NOCOPY GE_ERRORES_PG.EVENTO
)


/*
<DOCUMENTACIÓN
  TIPODOC = "PROCEDURE">
   <ELEMENTO
      NOMBRE = "PV_INS_EQUIPABOSER_SIMC_PR"
      LENGUAJE="PL/SQL"
      FECHA="19-04-2011"
      VERSIÓN="1.0"
      DISEÑADOR="EVERIS"
      PROGRAMADOR="EVERIS"
      AMBIENTE DESARROLLO="BD">
      <RETORNO></RETORNO>
      <DESCRIPCIÓN>INSERTA UN REGISTRO EN LA TABLA GA_EQUIPABOSER</DESCRIPCIÓN>
      <PARÁMETROS>
         <ENTRADA>
         </ENTRADA>
         <RETORNO>
            <PARAM NOM="SN_COD_RETORNO"    TIPO="NUMBER"> CODIGO RETORNO </PARAM>
            <PARAM NOM="SV_MENS_RETORNO"   TIPO="STRING"> GLOSA MENSAJE ERROR </PARAM>
            <PARAM NOM="SN_NUM_EVENTO"     TIPO="NUMBER"> NUMERO DE EVENTO </PARAM>
          </RETORNO>
      </PARÁMETROS>
   </ELEMENTO>
</DOCUMENTACIÓN>
*/

IS

    LV_DES_ERROR                GE_ERRORES_PG.DESEVENT;
    LV_SSQL                     GE_ERRORES_PG.VQUERY;
    LV_NOMBRE_PROC              STRING(30)   := 'PV_INS_EQUIPABOSER_SIMC_PR';
    LV_PKG_PROC                 STRING(60)   := GV_PACKAGE||'.'||LV_NOMBRE_PROC;
    LV_FORMATO_SEL2             GED_PARAMETROS.VAL_PARAMETRO%TYPE;
    LV_FORMATO_SEL7             GED_PARAMETROS.VAL_PARAMETRO%TYPE;
    LV_SYSDATE                  VARCHAR2(25);
    LV_IND_EQPRESTADO           GA_EQUIPABOSER.IND_EQPRESTADO%TYPE;
    LV_NUM_SERIE_B              GA_ABOCEL.NUM_SERIE%TYPE;
BEGIN

    SN_COD_RETORNO  := 0;
    SV_MENS_RETORNO := 'OK';
    SN_NUM_EVENTO   := 0;
        
    SELECT VAL_PARAMETRO INTO LV_FORMATO_SEL2 
    FROM GED_PARAMETROS WHERE NOM_PARAMETRO = 'FORMATO_SEL2';

    SELECT VAL_PARAMETRO INTO LV_FORMATO_SEL7 
    FROM GED_PARAMETROS WHERE NOM_PARAMETRO = 'FORMATO_SEL7';

    SELECT TO_CHAR(SYSDATE,LV_FORMATO_SEL2 || ' ' || LV_FORMATO_SEL7)
    INTO LV_SYSDATE FROM DUAL;
    
    
    LV_SSQL := 'INSERT INTO GA_EQUIPABOSER '
            || '(NUM_ABONADO, NUM_SERIE, COD_PRODUCTO, IND_PROCEQUI, FEC_ALTA, IND_PROPIEDAD, ';
    IF EN_COD_BODEGA IS NOT NULL THEN
        LV_SSQL := LV_SSQL || 'COD_BODEGA, TIP_STOCK, ';
    END IF;
    LV_SSQL := LV_SSQL || 'COD_ARTICULO, IND_EQUIACC, COD_MODVENTA, TIP_TERMINAL, COD_USO,';
     IF EN_COD_CUOTA IS NOT NULL THEN
        LV_SSQL := LV_SSQL || ' COD_CUOTA, ';
    END IF;     
    IF EN_COD_ESTADO IS NOT NULL THEN
        LV_SSQL := LV_SSQL || 'COD_ESTADO, ';
    END IF;
    IF EV_NUM_SERIEMEC IS NOT NULL THEN
        LV_SSQL := LV_SSQL || ' NUM_SERIEMEC, ';
    END IF;
    LV_SSQL := LV_SSQL || ' DES_EQUIPO, ';
    IF EN_NUM_MOVIMIENTO IS NOT NULL THEN
        LV_SSQL := LV_SSQL || 'NUM_MOVIMIENTO, ';
    END IF;
    LV_SSQL := LV_SSQL || 'COD_CAUSA, IND_EQPRESTADO, COD_TECNOLOGIA'
            || ')  VALUES ('
            || EN_NUM_ABONADO||','''||EV_NUM_SERIE||''', 1, '''||EV_IND_PROCEQUI||''', '
            || 'TO_DATE('''||LV_SYSDATE||''','''||LV_FORMATO_SEL2||' '||LV_FORMATO_SEL7||'''), '''||EV_IND_PROPIEDAD||''', ';
    IF EN_COD_BODEGA IS NOT NULL THEN
        LV_SSQL := LV_SSQL ||EN_COD_BODEGA||', '||EN_TIP_STOCK||',';
    END IF;
    LV_SSQL := LV_SSQL || EN_COD_ARTICULO||', ''E'', '||EN_COD_MODVENTA ||', '''||EV_TIP_TERMINAL||''', '
            || EN_COD_USO||', ';
    IF  EN_COD_CUOTA IS NOT NULL THEN
        LV_SSQL := LV_SSQL ||EN_COD_CUOTA||',';
    END IF;
    IF EN_COD_ESTADO IS NOT NULL THEN
      LV_SSQL := LV_SSQL ||EN_COD_ESTADO||', ';
    END IF;
    IF EV_NUM_SERIEMEC IS NOT NULL THEN
      LV_SSQL := LV_SSQL ||''''||EV_NUM_SERIEMEC||''', ';
    END IF;
    LV_SSQL := LV_SSQL ||''''||EV_DES_EQUIPO||''', ';
    IF EN_NUM_MOVIMIENTO IS NOT NULL THEN
        LV_SSQL := LV_SSQL || EN_NUM_MOVIMIENTO||', ';
    END IF;
    IF EV_COD_CAUSA IS NOT NULL THEN
        LV_SSQL := LV_SSQL || ''''||EV_COD_CAUSA||''', ';
    END IF;
    IF EV_IND_PROCEQUI = 'E' THEN
        LV_SSQL := LV_SSQL ||'''2'', ';
    ELSIF EB_PLISTA = 'TRUE' THEN
        LV_SSQL := LV_SSQL ||'''3'', ';
    ELSE
        SELECT DECODE(EN_IND_COMODATO,1, '1', '0') INTO LV_IND_EQPRESTADO FROM DUAL;
        LV_SSQL := LV_SSQL ||''''||LV_IND_EQPRESTADO||''', ';
    END IF;
    LV_SSQL := LV_SSQL || ''''||EV_COD_TECNOLOGIA||''')';
    
    EXECUTE IMMEDIATE LV_SSQL;

    BEGIN
        SELECT NUM_IMEI INTO LV_NUM_SERIE_B
        FROM GA_ABOCEL WHERE NUM_ABONADO = EN_NUM_ABONADO;
        
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            SELECT NUM_IMEI INTO LV_NUM_SERIE_B
            FROM GA_ABOAMIST WHERE NUM_ABONADO = EN_NUM_ABONADO;
    END;
    
    
     LV_SSQL := 'INSERT INTO GA_EQUIPABOSER '
            || '(NUM_ABONADO, NUM_SERIE, COD_PRODUCTO, IND_PROCEQUI, FEC_ALTA, IND_PROPIEDAD, '
            || 'COD_BODEGA, TIP_STOCK, COD_ARTICULO, IND_EQUIACC, COD_MODVENTA, TIP_TERMINAL, '
            || 'COD_USO, COD_CUOTA, COD_ESTADO, CAP_CODE, COD_PROTOCOLO, NUM_VELOCIDAD, '
            || 'COD_FRECUENCIA, COD_VERSION, NUM_SERIEMEC, DES_EQUIPO, COD_PAQUETE, NUM_MOVIMIENTO, '
            || 'COD_CAUSA, IND_EQPRESTADO, COD_TECNOLOGIA,IMP_CARGO, TIP_DTO, VAL_DTO) '
            || 'SELECT  NUM_ABONADO, NUM_SERIE, COD_PRODUCTO, IND_PROCEQUI, ' 
            || 'TO_DATE('''||LV_SYSDATE||''','''||LV_FORMATO_SEL2||' '||LV_FORMATO_SEL7||'''), IND_PROPIEDAD, COD_BODEGA, TIP_STOCK, COD_ARTICULO, '
            || 'IND_EQUIACC, COD_MODVENTA, TIP_TERMINAL, COD_USO, COD_CUOTA, '
            || 'COD_ESTADO, CAP_CODE, COD_PROTOCOLO, NUM_VELOCIDAD, COD_FRECUENCIA, '
            || 'COD_VERSION, NUM_SERIEMEC, DES_EQUIPO, COD_PAQUETE, NUM_MOVIMIENTO, '
            || ''''||EV_COD_CAUSA||''', IND_EQPRESTADO, COD_TECNOLOGIA, IMP_CARGO, TIP_DTO, VAL_DTO'
            || ' FROM GA_EQUIPABOSER A, '
            || '(SELECT MAX(FEC_ALTA) ULT_FECHA '
            || 'FROM GA_EQUIPABOSER '
            || 'WHERE NUM_ABONADO = '||EN_NUM_ABONADO||' AND '
            || 'NUM_SERIE = '''||LV_NUM_SERIE_B||''') B '
            || 'WHERE  A.NUM_ABONADO = '||EN_NUM_ABONADO||' ' 
            || 'AND A.NUM_SERIE = '''||LV_NUM_SERIE_B||''' ' 
            || 'AND A.FEC_ALTA = B.ULT_FECHA';
            
     EXECUTE IMMEDIATE LV_SSQL;            

   /* INSERT INTO GA_EQUIPABOSER
        (NUM_ABONADO, NUM_SERIE, COD_PRODUCTO, IND_PROCEQUI, FEC_ALTA, IND_PROPIEDAD, 
        COD_BODEGA, TIP_STOCK, COD_ARTICULO, IND_EQUIACC, COD_MODVENTA, TIP_TERMINAL, 
        COD_USO, COD_CUOTA, COD_ESTADO, CAP_CODE, COD_PROTOCOLO, NUM_VELOCIDAD, 
        COD_FRECUENCIA, COD_VERSION, NUM_SERIEMEC, DES_EQUIPO, COD_PAQUETE, NUM_MOVIMIENTO, 
        COD_CAUSA, IND_EQPRESTADO, COD_TECNOLOGIA, IMP_CARGO, TIP_DTO, VAL_DTO)
    SELECT NUM_ABONADO, NUM_SERIE, COD_PRODUCTO, IND_PROCEQUI, TO_DATE(LV_SYSDATE), IND_PROPIEDAD, 
        COD_BODEGA, TIP_STOCK, COD_ARTICULO, IND_EQUIACC, COD_MODVENTA, TIP_TERMINAL, 
        COD_USO, COD_CUOTA, COD_ESTADO, CAP_CODE, COD_PROTOCOLO, NUM_VELOCIDAD, 
        COD_FRECUENCIA, COD_VERSION, NUM_SERIEMEC, DES_EQUIPO, COD_PAQUETE, NUM_MOVIMIENTO,
        EV_COD_CAUSA, IND_EQPRESTADO, COD_TECNOLOGIA, IMP_CARGO, TIP_DTO, VAL_DTO 
    FROM GA_EQUIPABOSER A,
    (SELECT MAX(FEC_ALTA) ULT_FECHA 
        FROM GA_EQUIPABOSER
        WHERE NUM_ABONADO = EN_NUM_ABONADO AND
        NUM_SERIE = LV_NUM_SERIE_B) B
    WHERE A.NUM_ABONADO = EN_NUM_ABONADO AND
    A.NUM_SERIE = LV_NUM_SERIE_B AND
    A.FEC_ALTA = B.ULT_FECHA;*/
    
EXCEPTION
    WHEN OTHERS THEN
        SN_COD_RETORNO := GV_ERROR_OTHERS;
        IF NOT GE_ERRORES_PG.MENSAJEERROR(SN_COD_RETORNO,SV_MENS_RETORNO) THEN
          SV_MENS_RETORNO := GV_ERROR_NO_CLASIF;
        END IF;
        LV_DES_ERROR := SUBSTR(LV_NOMBRE_PROC || '( ); - ' || SQLERRM,1,GN_LARGOERRTEC);
        SV_MENS_RETORNO:=SUBSTR(SV_MENS_RETORNO,1,GN_LARGODESC);
        SN_NUM_EVENTO := GE_ERRORES_PG.GRABARPL(SN_NUM_EVENTO, GV_COD_MODULO, SV_MENS_RETORNO, '1.0', USER, 
        LV_PKG_PROC, LV_SSQL, SN_COD_RETORNO, LV_DES_ERROR );

END PV_INS_EQUIPABOSER_SIMC_PR;

PROCEDURE PV_UPD_ABONADO_PR(    
                                        EV_NOM_TABLA            IN VARCHAR2,
                                        EV_NUM_SERIEMEC         IN GA_ABOCEL.NUM_SERIEMEC%TYPE,
                                        EN_NUM_ABONADO          IN GA_ABOCEL.NUM_ABONADO%TYPE,
                                        EV_NUM_SERIE            IN GA_ABOCEL.NUM_SERIE%TYPE,
                                        EV_IND_PROCEQUI         IN GA_ABOCEL.IND_PROCEQUI%TYPE,
                                        EN_COD_MODVENTA         IN GA_ABOCEL.COD_MODVENTA%TYPE,                                   
                                        EV_TIP_TERMINAL         IN GA_ABOCEL.TIP_TERMINAL%TYPE,
                                        EN_COD_USO              IN GA_ABOCEL.COD_USO%TYPE,
                                        EN_IND_COMODATO         IN NUMBER,
                                        EB_CHK_TERMINAL         IN VARCHAR2,
                                        EV_COD_TECNOLOGIA       IN GA_ABOCEL.COD_TECNOLOGIA%TYPE,
                                        EV_NUM_CONTRATO         IN GA_ABOCEL.NUM_CONTRATO%TYPE,
                                        EV_NUM_ANEXO            IN GA_ABOCEL.NUM_ANEXO%TYPE,
                                        EV_COD_TIPCONTRATO      IN GA_ABOCEL.COD_TIPCONTRATO%TYPE,
                                        SN_COD_RETORNO          OUT NOCOPY GE_ERRORES_PG.CODERROR,
                                        SV_MENS_RETORNO         OUT NOCOPY GE_ERRORES_PG.MSGERROR,
                                        SN_NUM_EVENTO           OUT NOCOPY GE_ERRORES_PG.EVENTO
)


/*
<DOCUMENTACIÓN
  TIPODOC = "PROCEDURE">
   <ELEMENTO
      NOMBRE = "PV_INS_EQUIPABOSER_SIMC_PR"
      LENGUAJE="PL/SQL"
      FECHA="19-04-2011"
      VERSIÓN="1.0"
      DISEÑADOR="EVERIS"
      PROGRAMADOR="EVERIS"
      AMBIENTE DESARROLLO="BD">
      <RETORNO></RETORNO>
      <DESCRIPCIÓN>INSERTA UN REGISTRO EN LA TABLA GA_EQUIPABOSER</DESCRIPCIÓN>
      <PARÁMETROS>
         <ENTRADA>
         </ENTRADA>
         <RETORNO>
            <PARAM NOM="SN_COD_RETORNO"    TIPO="NUMBER"> CODIGO RETORNO </PARAM>
            <PARAM NOM="SV_MENS_RETORNO"   TIPO="STRING"> GLOSA MENSAJE ERROR </PARAM>
            <PARAM NOM="SN_NUM_EVENTO"     TIPO="NUMBER"> NUMERO DE EVENTO </PARAM>
          </RETORNO>
      </PARÁMETROS>
   </ELEMENTO>
</DOCUMENTACIÓN>
*/

IS

    LV_DES_ERROR                GE_ERRORES_PG.DESEVENT;
    LV_SSQL                     GE_ERRORES_PG.VQUERY;
    LV_NOMBRE_PROC              STRING(30)   := 'PV_UPD_ABONADO_PR';
    LV_PKG_PROC                 STRING(60)   := GV_PACKAGE||'.'||LV_NOMBRE_PROC;
    LV_TERM_GSM                 GED_PARAMETROS.VAL_PARAMETRO%TYPE;
    LV_SIMC_GSM                 GED_PARAMETROS.VAL_PARAMETRO%TYPE;
    LV_IND_EQPRESTADO           GA_EQUIPABOSER.IND_EQPRESTADO%TYPE;
    LV_NUM_MESES                NUMBER;
    
BEGIN

    SELECT MESES_MINIMO INTO LV_NUM_MESES 
    FROM GA_TIPCONTRATO WHERE COD_TIPCONTRATO = EV_COD_TIPCONTRATO;

    SN_COD_RETORNO  := 0;
    SV_MENS_RETORNO := 'OK';
    SN_NUM_EVENTO   := 0;
        
    SELECT VAL_PARAMETRO INTO LV_TERM_GSM 
    FROM GED_PARAMETROS WHERE NOM_PARAMETRO = 'COD_TERMINAL_GSM';

    SELECT VAL_PARAMETRO INTO LV_SIMC_GSM 
    FROM GED_PARAMETROS WHERE NOM_PARAMETRO = 'COD_SIMCARD_GSM';

    LV_SSQL := 'UPDATE ' || EV_NOM_TABLA|| ' SET ';

    IF EB_CHK_TERMINAL = 'TRUE' THEN
        LV_SSQL := LV_SSQL || ' COD_SITUACION = ''RTP''';
    ELSE
        LV_SSQL := LV_SSQL || ' COD_SITUACION = ''CSP''';
    END IF;

    LV_SSQL := LV_SSQL || ', IND_PROCEQUI = ''' || EV_IND_PROCEQUI|| '''';

    IF EV_TIP_TERMINAL = LV_TERM_GSM THEN
        LV_SSQL := LV_SSQL || ', NUM_IMEI = ''' || EV_NUM_SERIE || '''';
    ELSE
        LV_SSQL := LV_SSQL || ', NUM_SERIE = ''' || EV_NUM_SERIE || ''''
                || ', NUM_SERIEMEC = ''' || EV_NUM_SERIEMEC || '''';
    END IF;
    LV_SSQL := LV_SSQL || ', NUM_SERIEHEX = '' '''
            || ', TIP_TERMINAL = ''' || EV_TIP_TERMINAL || ''''
            || ', FEC_ULTMOD = SYSDATE ';
    IF EV_NOM_TABLA = 'GA_ABOCEL' THEN
        SELECT DECODE(EN_IND_COMODATO,1, '1', '0') INTO LV_IND_EQPRESTADO FROM DUAL;
        LV_SSQL := LV_SSQL || ', IND_EQPRESTADO = ''' || LV_IND_EQPRESTADO || '''';
    END IF;
    IF EN_COD_MODVENTA IS NOT NULL THEN
        LV_SSQL := LV_SSQL || ', COD_MODVENTA = ' || EN_COD_MODVENTA;
    END IF;
    IF EV_NUM_CONTRATO IS NOT NULL AND EV_COD_TIPCONTRATO IS NOT NULL THEN
        LV_SSQL := LV_SSQL || ', NUM_CONTRATO = ''' || EV_NUM_CONTRATO || ''''
                || ', NUM_ANEXO = ''' || EV_NUM_ANEXO || ''''
                || ', COD_TIPCONTRATO = ''' || EV_COD_TIPCONTRATO || ''''
                || ', FEC_PRORROGA = SYSDATE ' ;
        IF EV_TIP_TERMINAL <> LV_SIMC_GSM  THEN
            LV_SSQL := LV_SSQL || ', FEC_FINCONTRA = ADD_MONTHS(FEC_FINCONTRA, ' || LV_NUM_MESES || ') ';
        END IF;
    END IF;
    LV_SSQL := LV_SSQL || ', COD_TECNOLOGIA = ''' || EV_COD_TECNOLOGIA || ''''
            || ' WHERE NUM_ABONADO = ' || EN_NUM_ABONADO;
            
    EXECUTE IMMEDIATE LV_SSQL;       
    
EXCEPTION
    WHEN OTHERS THEN
        SN_COD_RETORNO := GV_ERROR_OTHERS;
        IF NOT GE_ERRORES_PG.MENSAJEERROR(SN_COD_RETORNO,SV_MENS_RETORNO) THEN
          SV_MENS_RETORNO := GV_ERROR_NO_CLASIF;
        END IF;
        LV_DES_ERROR := SUBSTR(LV_NOMBRE_PROC || '( ); - ' || SQLERRM,1,GN_LARGOERRTEC);
        SV_MENS_RETORNO:=SUBSTR(SV_MENS_RETORNO,1,GN_LARGODESC);
        SN_NUM_EVENTO := GE_ERRORES_PG.GRABARPL(SN_NUM_EVENTO, GV_COD_MODULO, SV_MENS_RETORNO, '1.0', USER, 
        LV_PKG_PROC, LV_SSQL, SN_COD_RETORNO, LV_DES_ERROR );

END PV_UPD_ABONADO_PR;

PROCEDURE PV_INSTA_CONTCTA_PR(
                                EN_COD_PRODUCTO         IN GA_ABOCEL.COD_PRODUCTO%TYPE,
                                EN_NUM_ABONADO          IN GA_ABOCEL.NUM_ABONADO%TYPE,
                                EN_COD_CUENTA           IN GA_ABOCEL.COD_CUENTA%TYPE,
                                EV_COD_TIPCONTRATO      IN GA_ABOCEL.COD_TIPCONTRATO%TYPE,
                                EV_NUM_CONTRATO         IN GA_ABOCEL.NUM_CONTRATO%TYPE,
                                EV_NUM_ANEXO            IN GA_ABOCEL.NUM_ANEXO%TYPE,
                                SN_COD_RETORNO          OUT NOCOPY GE_ERRORES_PG.CODERROR,
                                SV_MENS_RETORNO         OUT NOCOPY GE_ERRORES_PG.MSGERROR,
                                SN_NUM_EVENTO           OUT NOCOPY GE_ERRORES_PG.EVENTO
) IS

LV_DES_ERROR              GE_ERRORES_PG.DESEVENT;
LV_SSQL                   GE_ERRORES_PG.VQUERY;
LV_NOMBRE_PROC            STRING(30)   := 'PV_INSTA_CONTCTA_PR';
LV_PKG_PROC               STRING(60)   := GV_PACKAGE||'.'||LV_NOMBRE_PROC;
LN_VALOR                  NUMBER(1);

BEGIN
    SN_COD_RETORNO := 0;
    SV_MENS_RETORNO := 'OK';
    SN_NUM_EVENTO := 0;


     BEGIN

        LV_SSQL := 'SELECT 1 FROM GA_CONTCTA '
                || 'WHERE COD_CUENTA = ' || EN_COD_CUENTA
                || ' AND COD_PRODUCTO =  ' || EN_COD_PRODUCTO
                || ' AND COD_TIPCONTRATO = ' || EV_COD_TIPCONTRATO
                || ' AND num_contrato = ' || EV_NUM_CONTRATO
                || ' AND num_anexo = ' || EV_NUM_ANEXO;

        SELECT 1 INTO LN_VALOR FROM GA_CONTCTA
        WHERE COD_CUENTA = EN_COD_CUENTA
        AND COD_PRODUCTO = EN_COD_PRODUCTO
        AND COD_TIPCONTRATO = EV_COD_TIPCONTRATO
        AND NUM_CONTRATO = EV_NUM_CONTRATO
        AND NUM_ANEXO = EV_NUM_ANEXO;

    EXCEPTION
        WHEN NO_DATA_FOUND THEN

            LV_SSQL := 'INSERT INTO GA_CONTCTA '
                    || '(COD_CUENTA, COD_PRODUCTO, COD_TIPCONTRATO, '
                    || 'NUM_CONTRATO, NUM_ANEXO, NUM_MESES, NUM_VENTA, '
                    || 'FEC_CONTRATO, NUM_ABONADOS, NUM_ABONADO ) '
                    || '(SELECT '||EN_COD_CUENTA||','||EN_COD_PRODUCTO||','''||EV_COD_TIPCONTRATO||''','''||EV_NUM_CONTRATO||''', '''
                    || EV_NUM_ANEXO||''', B.NUM_MESES, A.NUM_VENTA, SYSDATE, 1, '
                    || 'A.NUM_ABONADO FROM GA_ABOCEL A, GA_PERCONTRATO B '
                    || 'WHERE B.COD_PRODUCTO = A.COD_PRODUCTO '
                    || 'AND B.COD_TIPCONTRATO = '''||EV_COD_TIPCONTRATO||''''
                    || 'AND A.NUM_ABONADO = ' || EN_NUM_ABONADO
                    || ' AND A.COD_PRODUCTO = ' ||  EN_COD_PRODUCTO || ')';

            INSERT INTO GA_CONTCTA
            (COD_CUENTA, COD_PRODUCTO, COD_TIPCONTRATO,
            NUM_CONTRATO, NUM_ANEXO, NUM_MESES, NUM_VENTA,
            FEC_CONTRATO,  NUM_ABONADOS, NUM_ABONADO )
            (SELECT EN_COD_CUENTA, EN_COD_PRODUCTO, EV_COD_TIPCONTRATO, EV_NUM_CONTRATO,
            EV_NUM_ANEXO, B.NUM_MESES, A.NUM_VENTA, SYSDATE, 1,
            A.NUM_ABONADO FROM GA_ABOCEL A, GA_PERCONTRATO B
            WHERE    B.COD_PRODUCTO = A.COD_PRODUCTO
            AND B.COD_TIPCONTRATO = EV_COD_TIPCONTRATO
            AND A.NUM_ABONADO    = EN_NUM_ABONADO
            AND A.COD_PRODUCTO = EN_COD_PRODUCTO);

    END;


EXCEPTION
    WHEN OTHERS THEN
        SN_COD_RETORNO := GV_ERROR_OTHERS;
        IF NOT GE_ERRORES_PG.MENSAJEERROR(SN_COD_RETORNO,SV_MENS_RETORNO) THEN
          SV_MENS_RETORNO := GV_ERROR_NO_CLASIF;
        END IF;
        LV_DES_ERROR := SUBSTR(LV_NOMBRE_PROC || '( ); - ' || SQLERRM,1,GN_LARGOERRTEC);
        SV_MENS_RETORNO:=SUBSTR(SV_MENS_RETORNO,1,GN_LARGODESC);
        SN_NUM_EVENTO := GE_ERRORES_PG.GRABARPL(SN_NUM_EVENTO, GV_COD_MODULO, SV_MENS_RETORNO, '1.0', USER, 
        LV_PKG_PROC, LV_SSQL, SN_COD_RETORNO, LV_DES_ERROR );
        
END PV_INSTA_CONTCTA_PR;

PROCEDURE PV_OBTIENE_BPLISTA_PR(
                                EN_NUM_ABONADO          IN GA_ABOCEL.NUM_ABONADO%TYPE,
                                EV_TIP_TERMINAL         IN GA_ABOCEL.TIP_TERMINAL%TYPE,
                                SV_PLISTA               OUT VARCHAR2,
                                SN_COD_RETORNO          OUT NOCOPY GE_ERRORES_PG.CODERROR,
                                SV_MENS_RETORNO         OUT NOCOPY GE_ERRORES_PG.MSGERROR,
                                SN_NUM_EVENTO           OUT NOCOPY GE_ERRORES_PG.EVENTO
) IS

LV_DES_ERROR              GE_ERRORES_PG.DESEVENT;
LV_SSQL                   GE_ERRORES_PG.VQUERY;
LV_NOMBRE_PROC            STRING(30)   := 'PV_OBTIENE_BPLSITA_PR';
LV_PKG_PROC               STRING(60)   := GV_PACKAGE||'.'||LV_NOMBRE_PROC;
LN_COUNT                  NUMBER(2);
LV_FORMATO_SEL2           GED_PARAMETROS.VAL_PARAMETRO%TYPE;
LV_FORMATO_SEL7           GED_PARAMETROS.VAL_PARAMETRO%TYPE;
LV_TIP_TERM_GSM           GED_PARAMETROS.VAL_PARAMETRO%TYPE;
LV_TIP_SIMCARD_GSM        GED_PARAMETROS.VAL_PARAMETRO%TYPE;
LV_POL_REC_SIMCARD        GED_PARAMETROS.VAL_PARAMETRO%TYPE;
LV_ABONADO                GA_ABOCEL.NUM_ABONADO%TYPE;
LV_ABO                    VARCHAR2(200);
LV_MIN_FEC_ALTA           VARCHAR2(20);
LV_NUM_SERIE              GA_ABOCEL.NUM_SERIE%TYPE;
LD_SYSDATE                DATE;
LN_MESES_ANTIGUEDAD       NUMBER;
LN_MESES_MINIMO           NUMBER;

ERROR_SIMCARD             EXCEPTION;

BEGIN
    SN_COD_RETORNO := 0;
    SV_MENS_RETORNO := 'OK';
    SN_NUM_EVENTO := 0;
    
    SELECT VAL_PARAMETRO INTO LV_FORMATO_SEL2 
    FROM GED_PARAMETROS WHERE NOM_PARAMETRO = 'FORMATO_SEL2';

    SELECT VAL_PARAMETRO INTO LV_FORMATO_SEL7 
    FROM GED_PARAMETROS WHERE NOM_PARAMETRO = 'FORMATO_SEL7';
    
    SELECT VAL_PARAMETRO INTO LV_TIP_TERM_GSM
    FROM GED_PARAMETROS WHERE NOM_PARAMETRO = 'COD_TERMINAL_GSM';
    
    SELECT VAL_PARAMETRO INTO LV_TIP_SIMCARD_GSM
    FROM GED_PARAMETROS WHERE NOM_PARAMETRO = 'COD_SIMCARD_GSM';

    --OBTENER FLAG DE POLITICAS DE RECAMBIO DE SIMCARD
    LV_SSQL := ' SELECT VAL_PARAMETRO INTO LV_POL_REC_SIMCARD ' || 
               ' FROM GED_PARAMETROS ' ||
               ' WHERE NOM_PARAMETRO = ''SW_POLITICA_SIMCARD''' ||
               ' AND COD_MODULO = ' || GV_COD_MODULO ||
               ' AND COD_PRODUCTO = ' || GN_COD_PRODUCTO;

    SELECT VAL_PARAMETRO INTO LV_POL_REC_SIMCARD 
    FROM GED_PARAMETROS
    WHERE NOM_PARAMETRO = 'SW_POLITICA_SIMCARD'
      AND COD_MODULO = GV_COD_MODULO
      AND COD_PRODUCTO = GN_COD_PRODUCTO;
      
    LN_COUNT:=1;

    LV_ABONADO:= EN_NUM_ABONADO;
    LV_ABO := EN_NUM_ABONADO ;
     
    
    --SI EL TIPO DE TERMINAL ES SIMCARD Y  LA POLITICA DE RECAMBIO ES CERO, RETORNAR TRUE
    IF EV_TIP_TERMINAL = LV_TIP_SIMCARD_GSM THEN
    
        IF LV_POL_REC_SIMCARD = '0' THEN
        
            RAISE ERROR_SIMCARD;
        
        END IF;
    
    END IF;

    WHILE LN_COUNT <> 0 LOOP

        BEGIN
                
            SELECT COUNT(1) INTO LN_COUNT  FROM GA_TRASPABO  WHERE NUM_ABONADO = LV_ABONADO AND NUM_ABONADO <> NUM_ABONADOANT;

            IF LN_COUNT <> 0 THEN
                SELECT NUM_ABONADOANT INTO LV_ABONADO FROM GA_TRASPABO  WHERE NUM_ABONADO =  LV_ABONADO AND NUM_ABONADO <> NUM_ABONADOANT;
                LV_ABO := LV_ABO ||','|| LV_ABONADO;
            END IF;
                    
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
            NULL;
        END;                

    END LOOP;
    
    BEGIN
    
      BEGIN 
    
       LV_SSQL := 'SELECT MAX_FEC_ALTA, NUM_SERIE FROM '
                || '(SELECT TO_CHAR(TO_DATE(MAX(FEC_ALTA), ''' ||LV_FORMATO_SEL2||' ' || LV_FORMATO_SEL7 || ''')) MAX_FEC_ALTA, NUM_SERIE '
                || 'FROM GA_EQUIPABOSER '
                || 'WHERE NUM_ABONADO IN ('''||LV_ABO||''') '
                || 'AND (COD_CAUSA IN (SELECT COD_CAUCASER FROM GA_CAUCASER WHERE COD_PRODUCTO = 1  AND IND_ANTIGUEDAD = 1) OR COD_CAUSA IS NULL) '
                || 'AND IND_PROCEQUI = ''I'' '
                || 'AND (IND_EQPRESTADO <> ''3'' OR IND_EQPRESTADO IS NULL) ';
                
        IF EV_TIP_TERMINAL = LV_TIP_TERM_GSM THEN
           LV_SSQL := LV_SSQL || 'AND TIP_TERMINAL = ''' || EV_TIP_TERMINAL || ''' ';
        ELSE
           LV_SSQL := LV_SSQL || 'AND TIP_TERMINAL NOT IN (''' || LV_TIP_SIMCARD_GSM || ''') ';
        END IF;
        
        LV_SSQL := LV_SSQL || 'GROUP BY FEC_ALTA, NUM_SERIE ORDER BY FEC_ALTA DESC) ';
        
        LV_SSQL := LV_SSQL || 'WHERE ROWNUM = 1';
        
        EXECUTE IMMEDIATE LV_SSQL INTO LV_MIN_FEC_ALTA, LV_NUM_SERIE;
      
      EXCEPTION 
        WHEN NO_DATA_FOUND THEN
          LV_NUM_SERIE := NULL;
          LV_MIN_FEC_ALTA := NULL; 
      
      END; 

        IF LV_NUM_SERIE IS NOT NULL THEN

            LV_SSQL := 'SELECT TO_CHAR(TO_DATE(MIN(FEC_ALTA), '''||LV_FORMATO_SEL2||' '||LV_FORMATO_SEL7||''')) FROM GA_EQUIPABOSER '
                    || 'WHERE NUM_ABONADO IN ('''||LV_ABO||''') '
                    || 'AND NUM_SERIE = ''' || LV_NUM_SERIE || ''' '
                    || 'AND IND_PROCEQUI = ''I'' ';
                    
           EXECUTE IMMEDIATE LV_SSQL INTO LV_MIN_FEC_ALTA;
           
           IF LV_MIN_FEC_ALTA IS NULL THEN
              RAISE ERROR_GENERAL;
           END IF;
           
        ELSE
            RAISE ERROR_GENERAL;
        END IF;
        
        --SELECT TO_DATE(TO_CHAR(SYSDATE, LV_FORMATO_SEL2)) 01-06-2011 
        --INTO LD_SYSDATE FROM DUAL;
        SELECT TO_DATE(TO_CHAR(SYSDATE, LV_FORMATO_SEL2),LV_FORMATO_SEL2) 
        INTO LD_SYSDATE FROM DUAL;
        
        --SELECT MONTHS_BETWEEN(TO_DATE(LV_MIN_FEC_ALTA), LD_SYSDATE) 
        SELECT MONTHS_BETWEEN(TO_DATE(LV_MIN_FEC_ALTA,LV_FORMATO_SEL2||' '||LV_FORMATO_SEL7), LD_SYSDATE)
        INTO LN_MESES_ANTIGUEDAD FROM DUAL;
        
        SELECT NVL(MESES_MINIMO,0) INTO LN_MESES_MINIMO
        FROM GA_TIPCONTRATO 
        WHERE COD_TIPCONTRATO = (SELECT COD_TIPCONTRATO FROM GA_ABOCEL WHERE NUM_ABONADO = EN_NUM_ABONADO);
        
        IF LN_MESES_MINIMO > LN_MESES_ANTIGUEDAD THEN
            SV_PLISTA := 'FALSE';
        ELSE
            SV_PLISTA := 'TRUE';
        END IF;
    
    EXCEPTION
        WHEN ERROR_GENERAL THEN
            SV_PLISTA := 'FALSE';
    END;

EXCEPTION
    WHEN ERROR_SIMCARD THEN
        SV_PLISTA := 'TRUE';
        
    WHEN OTHERS THEN
        SN_COD_RETORNO := GV_ERROR_OTHERS;
        IF NOT GE_ERRORES_PG.MENSAJEERROR(SN_COD_RETORNO,SV_MENS_RETORNO) THEN
          SV_MENS_RETORNO := GV_ERROR_NO_CLASIF;
        END IF;
        LV_DES_ERROR := SUBSTR(LV_NOMBRE_PROC || '( ); - ' || SQLERRM,1,GN_LARGOERRTEC);
        SV_MENS_RETORNO:=SUBSTR(SV_MENS_RETORNO,1,GN_LARGODESC);
        SN_NUM_EVENTO := GE_ERRORES_PG.GRABARPL(SN_NUM_EVENTO, GV_COD_MODULO, SV_MENS_RETORNO, '1.0', USER, 
        LV_PKG_PROC, LV_SSQL, SN_COD_RETORNO, LV_DES_ERROR );
        
END PV_OBTIENE_BPLISTA_PR;

PROCEDURE PV_INS_MOVIMIENTO_PR(
                                EN_NUM_ABONADO          IN GA_ABOCEL.NUM_ABONADO%TYPE,
                                EV_TIP_TERMINAL         IN GA_ABOCEL.TIP_TERMINAL%TYPE,
                                EV_NUM_SERIE_NEW        IN GA_ABOCEL.NUM_SERIE%TYPE,
                                EV_NUM_SERIE_ABO        IN GA_ABOCEL.NUM_SERIE%TYPE,
                                EV_COD_TECNOLOGIA       IN GA_ABOCEL.COD_TECNOLOGIA%TYPE,
                                EN_COD_CLIENTE          IN GA_ABOCEL.COD_CLIENTE%TYPE,
                                EN_COD_CENTRAL          IN GA_ABOCEL.COD_CENTRAL%TYPE,
                                EN_NUM_CELULAR          IN GA_ABOCEL.NUM_CELULAR%TYPE,
                                EV_NUM_IMEI             IN GA_ABOCEL.NUM_IMEI%TYPE,
                                EN_NUM_OS               IN CI_ORSERV.NUM_OS%TYPE,
                                EV_COD_OS               IN CI_ORSERV.COD_OS%TYPE,
                                EN_SECUENCIA_ICC_ANT    IN ICC_MOVIMIENTO.NUM_MOVANT%TYPE,
                                EN_NUM_SINIESTRO        IN GA_SINIESTROS.NUM_SINIESTRO%TYPE,
                                EV_NOM_USUARIO          IN GA_USUARIOS.NOM_USUARIO%TYPE,
                                EN_SECUENCIA_ICC        IN ICC_MOVIMIENTO.NUM_MOVIMIENTO%TYPE,
                                SN_COD_RETORNO          OUT NOCOPY GE_ERRORES_PG.CODERROR,
                                SV_MENS_RETORNO         OUT NOCOPY GE_ERRORES_PG.MSGERROR,
                                SN_NUM_EVENTO           OUT NOCOPY GE_ERRORES_PG.EVENTO
) IS

LV_DES_ERROR              GE_ERRORES_PG.DESEVENT;
LV_SSQL                   GE_ERRORES_PG.VQUERY;
LV_NOMBRE_PROC            STRING(30)   := 'PV_INS_MOVIMIENTO_PR';
LV_PKG_PROC               STRING(60)   := GV_PACKAGE||'.'||LV_NOMBRE_PROC;
LV_FORMATO_SEL2           GED_PARAMETROS.VAL_PARAMETRO%TYPE;
LV_FORMATO_SEL7           GED_PARAMETROS.VAL_PARAMETRO%TYPE;
LV_TIP_SIMCARD_GSM        GED_PARAMETROS.VAL_PARAMETRO%TYPE;
LN_IND_SUSP               GA_SINIESTROS.IND_SUSP%TYPE;
LV_NUM_IMSI               VARCHAR2(50);
LV_SERVSUPL               VARCHAR2(10);
LV_NIVEL                  VARCHAR2(10);
LV_CADENA                 VARCHAR2(999);
LV_FEC_INGRE              VARCHAR2(25);
LN_NUM_TRANSACCION        NUMBER;
LN_NUM_SECUENCIA          NUMBER;
LC_DATOS_SERVICIOS        REFCURSOR;
LN_NUM_ABONADO            ICC_MOVIMIENTO.NUM_ABONADO%TYPE;
LN_COD_ESTADO             ICC_MOVIMIENTO.COD_ESTADO%TYPE;
LV_COD_ACTABO             ICC_MOVIMIENTO.COD_ACTABO%TYPE;
LV_COD_MODULO             ICC_MOVIMIENTO.COD_MODULO%TYPE;
LV_USUARIO                ICC_MOVIMIENTO.NOM_USUARORA%TYPE;
LV_TIP_TERMINAL           ICC_MOVIMIENTO.TIP_TERMINAL%TYPE;
LN_COD_CENTRAL            ICC_MOVIMIENTO.COD_CENTRAL%TYPE; 
LN_IND_BLOQUEO            ICC_MOVIMIENTO.IND_BLOQUEO%TYPE;
LV_TIP_TERMINAL_NUE       ICC_MOVIMIENTO.TIP_TERMINAL%TYPE;
LN_NUM_CELULAR            ICC_MOVIMIENTO.NUM_CELULAR%TYPE;
LV_NUM_SERIE              ICC_MOVIMIENTO.NUM_SERIE%TYPE;
LN_NUM_CELULAR_NUE        ICC_MOVIMIENTO.NUM_CELULAR%TYPE;
LV_NUM_SERIE_NUE          ICC_MOVIMIENTO.NUM_SERIE%TYPE;
LV_COD_SUSPREHA           ICC_MOVIMIENTO.COD_SUSPREHA%TYPE;
LV_COD_SERVICIOS          ICC_MOVIMIENTO.COD_SERVICIOS%TYPE;
LV_NUM_MIN                ICC_MOVIMIENTO.NUM_MIN%TYPE;
LV_NUM_MIN_NUE            ICC_MOVIMIENTO.NUM_MIN%TYPE;
LV_TIP_TECNOLOGIA         ICC_MOVIMIENTO.TIP_TECNOLOGIA%TYPE;
LV_IMSI_NUE               ICC_MOVIMIENTO.IMSI%TYPE;
LV_IMEI                   ICC_MOVIMIENTO.IMEI%TYPE;
LV_IMEI_NUE               ICC_MOVIMIENTO.IMEI%TYPE;
LV_ICC                    ICC_MOVIMIENTO.ICC%TYPE;
LV_ICC_NUE                ICC_MOVIMIENTO.ICC%TYPE;
LN_CARGA                  ICC_MOVIMIENTO.CARGA%TYPE;
LN_CENTRAL_NUE            ICC_MOVIMIENTO.COD_CENTRAL%TYPE; 
LV_PLAN                   ICC_MOVIMIENTO.PLAN%TYPE; 
LN_VALOR_PLAN             ICC_MOVIMIENTO.VALOR_PLAN%TYPE; 
LV_NUM_MSN                ICC_MOVIMIENTO.NUM_MSNB%TYPE;
LV_NUM_ERROR              PV_ERRORES_OOSS_TO.NUM_ERROR%TYPE;
LN_NUM_OOSS               PV_ERRORES_OOSS_TO.NUM_OS%TYPE;
LV_COD_OS                 PV_ERRORES_OOSS_TO.COD_OS%TYPE;
LN_NUM_MOV_ANT            ICC_MOVIMIENTO.NUM_MOVANT%TYPE;
LV_COD_ERROR              PV_ERRORES_OOSS_TO.COD_ERROR%TYPE;
LV_GLS_ERROR              PV_ERRORES_OOSS_TO.GLS_ERROR%TYPE;

ERROR_OOSS           EXCEPTION;

BEGIN
    SN_COD_RETORNO := 0;
    SV_MENS_RETORNO := 'OK';
    SN_NUM_EVENTO := 0;
    
    SELECT VAL_PARAMETRO INTO LV_FORMATO_SEL2
    FROM GED_PARAMETROS WHERE COD_MODULO = 'GE' AND NOM_PARAMETRO ='FORMATO_SEL2';
    
    SELECT VAL_PARAMETRO INTO LV_FORMATO_SEL7
    FROM GED_PARAMETROS WHERE COD_MODULO = 'GE' AND NOM_PARAMETRO ='FORMATO_SEL7';
    
    SELECT VAL_PARAMETRO INTO LV_TIP_SIMCARD_GSM
    FROM GED_PARAMETROS WHERE NOM_PARAMETRO ='COD_SIMCARD_GSM';
    
    IF EV_TIP_TERMINAL = LV_TIP_SIMCARD_GSM THEN
        LV_COD_ACTABO       := 'SA';
        /* INICIO DE BEJECACTINTARCEL */
        SELECT GA_SEQ_TRANSACABO.NEXTVAL INTO LN_NUM_TRANSACCION FROM DUAL;

        SELECT FN_RECUPERA_IMSI(EV_NUM_SERIE_NEW) INTO LV_NUM_IMSI FROM DUAL;

        P_ACTZA_IMSI_INTARCEL(LN_NUM_TRANSACCION, EN_COD_CLIENTE, EN_NUM_ABONADO, LV_NUM_IMSI, LV_COD_ACTABO);

        SELECT COD_RETORNO, DES_CADENA
        INTO SN_COD_RETORNO, SV_MENS_RETORNO
        FROM GA_TRANSACABO
        WHERE NUM_TRANSACCION = LN_NUM_TRANSACCION;

        IF SN_COD_RETORNO <> 0 THEN
            DELETE FROM GA_TRANSACABO WHERE NUM_TRANSACCION = LN_NUM_TRANSACCION;
            RAISE ERROR_GENERAL;
        END IF;
        /*FIN DE BEJECACTINTARCEL */
        OPEN LC_DATOS_SERVICIOS FOR
            SELECT COD_SERVSUPL, COD_NIVEL  
            FROM GA_SERVSUPLABO 
            WHERE NUM_ABONADO = EN_NUM_ABONADO
            AND IND_ESTADO < 3;

            LOOP
            FETCH LC_DATOS_SERVICIOS INTO LV_SERVSUPL, LV_NIVEL;
                EXIT WHEN LC_DATOS_SERVICIOS%NOTFOUND;
                WHILE LENGTH(LV_NIVEL) < 4
                LOOP
                    LV_NIVEL := '0'||LV_NIVEL;
                END LOOP;
                    
                IF LENGTH(LV_SERVSUPL) = 1 THEN
                    LV_SERVSUPL := '0' || LV_SERVSUPL;
                END IF;
                LV_CADENA := LV_CADENA ||LV_SERVSUPL||LV_NIVEL;
            END LOOP;
        CLOSE LC_DATOS_SERVICIOS;
        
        
        LN_COD_ESTADO       := 9;
        LV_COD_SERVICIOS    := LV_CADENA;
        LV_IMSI_NUE         := LV_NUM_IMSI;
        LV_IMEI_NUE         := NULL;
        LV_NUM_SERIE        := EV_NUM_SERIE_ABO;
        LV_NUM_SERIE_NUE    := EV_NUM_SERIE_NEW;
        LV_ICC_NUE          := EV_NUM_SERIE_NEW;
        
    ELSE
        LV_COD_ACTABO       := 'CE';
        LN_COD_ESTADO       := 1;
        LV_IMSI_NUE         := NULL;
        LV_IMEI_NUE         := EV_NUM_SERIE_NEW;
        LV_NUM_SERIE        := EV_NUM_SERIE_ABO;
        LV_ICC_NUE          := NULL;
        LV_COD_SERVICIOS    := NULL;
    END IF;
    
    BEGIN
        SELECT IND_SUSP INTO LN_IND_SUSP
        FROM GA_SINIESTROS 
        WHERE NUM_ABONADO = EN_NUM_ABONADO AND 
        NUM_SINIESTRO = EN_NUM_SINIESTRO;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            NULL;
    END;            
    
    IF LN_IND_SUSP = 1 THEN
        LN_NUM_MOV_ANT := EN_SECUENCIA_ICC_ANT;
    END IF;
    
    LN_NUM_SECUENCIA    := EN_SECUENCIA_ICC;
    LN_NUM_ABONADO      := EN_NUM_ABONADO;
    LV_COD_MODULO       := 'GA';
    LV_USUARIO          := EV_NOM_USUARIO;
    SELECT TO_CHAR(SYSDATE,LV_FORMATO_SEL2||' '||LV_FORMATO_SEL7) INTO LV_FEC_INGRE FROM DUAL;
    LV_TIP_TERMINAL     := EV_TIP_TERMINAL;
    LN_COD_CENTRAL      := EN_COD_CENTRAL;
    LN_IND_BLOQUEO      := 0;
    LN_NUM_CELULAR      := EN_NUM_CELULAR;    
    LN_NUM_CELULAR_NUE  := EN_NUM_CELULAR;
    LV_TIP_TERMINAL_NUE := EV_TIP_TERMINAL;
    LV_IMEI             := EV_NUM_IMEI;
    LV_ICC              := EV_NUM_SERIE_ABO;
    LV_COD_SUSPREHA     := NULL;
    SELECT AL_FN_PREFIJO_NUMERO(EN_NUM_CELULAR) INTO LV_NUM_MIN FROM DUAL;
    LV_NUM_MIN_NUE      := '';
    LV_TIP_TECNOLOGIA   := EV_COD_TECNOLOGIA;
    LN_CARGA            := NULL;
    LN_CENTRAL_NUE      := EN_COD_CENTRAL;
    LV_PLAN             := NULL;
    LN_VALOR_PLAN       := NULL;
    LV_NUM_MSN          := '';
    SELECT PV_ERRORES_SQ.NEXTVAL INTO LV_NUM_ERROR FROM DUAL;
    LN_NUM_OOSS         := EN_NUM_OS;
    LV_COD_OS           := EV_COD_OS;
    
    LV_SSQL := 'GA_APROVISIONAR_CENTRAL_PG.GA_APROVISIONAR_PV_PR('||
        LN_NUM_SECUENCIA||','||LN_NUM_ABONADO||','''||LN_COD_ESTADO||''','''||
        LV_COD_ACTABO||''','''||LV_COD_MODULO||''','''||LV_USUARIO||''','''||
        LV_FEC_INGRE||''','''||LV_TIP_TERMINAL||''','||LN_COD_CENTRAL||','||
        LN_IND_BLOQUEO||','''||LV_TIP_TERMINAL_NUE||''','||LN_NUM_CELULAR||','||
        LV_NUM_SERIE||''','||LN_NUM_CELULAR_NUE||','''||LV_NUM_SERIE_NUE||''','''||
        LV_COD_SUSPREHA||''','''||LV_COD_SERVICIOS||''','''||LV_NUM_MIN||''','''||
        LV_NUM_MIN_NUE||''','''||LV_TIP_TECNOLOGIA||''','''||LV_IMSI_NUE||''','''||
        LV_IMEI||''','''||LV_IMEI_NUE||''','''||LV_ICC||''','''||
        LV_ICC_NUE||''','''||LN_CARGA||','||LN_CENTRAL_NUE||','''||
        LV_PLAN||''','||LN_VALOR_PLAN||','''||LV_NUM_MSN||''','''||
        LV_NUM_ERROR||''','||LN_NUM_OOSS||','''||LV_COD_OS||''','||LN_NUM_MOV_ANT||')';
    
    GA_APROVISIONAR_CENTRAL_PG.GA_APROVISIONAR_PV_PR( 
        LN_NUM_SECUENCIA, LN_NUM_ABONADO, LN_COD_ESTADO, 
        LV_COD_ACTABO, LV_COD_MODULO, LV_USUARIO, 
        LV_FEC_INGRE, LV_TIP_TERMINAL, LN_COD_CENTRAL, 
        LN_IND_BLOQUEO, LV_TIP_TERMINAL_NUE, LN_NUM_CELULAR,
        LV_NUM_SERIE, LN_NUM_CELULAR_NUE, LV_NUM_SERIE_NUE, 
        LV_COD_SUSPREHA, LV_COD_SERVICIOS, LV_NUM_MIN,
        LV_NUM_MIN_NUE, LV_TIP_TECNOLOGIA, LV_IMSI_NUE, 
        LV_IMEI, LV_IMEI_NUE, LV_ICC, 
        LV_ICC_NUE, LN_CARGA, LN_CENTRAL_NUE, 
        LV_PLAN, LN_VALOR_PLAN, LV_NUM_MSN, 
        LV_NUM_ERROR, LN_NUM_OOSS, LV_COD_OS, LN_NUM_MOV_ANT);
        
        SELECT COD_ERROR, GLS_ERROR
        INTO LV_COD_ERROR, LV_GLS_ERROR
        FROM PV_ERRORES_OOSS_TO
        WHERE NUM_ERROR = LV_NUM_ERROR;
        
        IF LV_COD_ERROR = '0' THEN
                DELETE PV_ERRORES_OOSS_TO WHERE NUM_ERROR = LV_NUM_ERROR;
        ELSE 
            RAISE ERROR_OOSS;
        END IF;

        

EXCEPTION
    WHEN ERROR_OOSS THEN 
        SN_COD_RETORNO := LV_COD_ERROR;
        LV_DES_ERROR := LV_GLS_ERROR;
        SV_MENS_RETORNO:= 'PROBLEMAS AL INSERTAR MOVIMIENTO';
        SN_NUM_EVENTO := GE_ERRORES_PG.GRABARPL(SN_NUM_EVENTO, GV_COD_MODULO, SV_MENS_RETORNO, '1.0', USER, 
        LV_PKG_PROC, LV_SSQL, SN_COD_RETORNO, LV_DES_ERROR );
    
    WHEN ERROR_GENERAL THEN
        LV_DES_ERROR := SUBSTR(LV_NOMBRE_PROC || '( ); - ' || SQLERRM,1,GN_LARGOERRTEC);
        SV_MENS_RETORNO:=SUBSTR(SV_MENS_RETORNO,1,GN_LARGODESC);
        SN_NUM_EVENTO := GE_ERRORES_PG.GRABARPL(SN_NUM_EVENTO, GV_COD_MODULO, SV_MENS_RETORNO, '1.0', USER, 
        LV_PKG_PROC, LV_SSQL, SN_COD_RETORNO, LV_DES_ERROR );
    WHEN OTHERS THEN
        SN_COD_RETORNO := GV_ERROR_OTHERS;
        IF NOT GE_ERRORES_PG.MENSAJEERROR(SN_COD_RETORNO,SV_MENS_RETORNO) THEN
          SV_MENS_RETORNO := GV_ERROR_NO_CLASIF;
        END IF;
        LV_DES_ERROR := SUBSTR(LV_NOMBRE_PROC || '( ); - ' || SQLERRM,1,GN_LARGOERRTEC);
        SV_MENS_RETORNO:=SUBSTR(SV_MENS_RETORNO,1,GN_LARGODESC);
        SN_NUM_EVENTO := GE_ERRORES_PG.GRABARPL(SN_NUM_EVENTO, GV_COD_MODULO, SV_MENS_RETORNO, '1.0', USER, 
        LV_PKG_PROC, LV_SSQL, SN_COD_RETORNO, LV_DES_ERROR );
        
END PV_INS_MOVIMIENTO_PR;

PROCEDURE PV_REABILITAR_SUSPENSION_PR(
                                EV_NOM_TABLA_ABO        IN VARCHAR2,
                                EV_COD_ACTABO           IN VARCHAR2,
                                EN_NUM_ABONADO          IN GA_ABOCEL.NUM_ABONADO%TYPE,
                                EV_TIP_TERMINAL_ABO     IN GA_ABOCEL.TIP_TERMINAL%TYPE,
                                EV_NUM_SERIEHEX_ABO     IN GA_ABOCEL.NUM_SERIEHEX%TYPE,
                                EV_NUM_SERIE_ABO        IN GA_ABOCEL.NUM_SERIE%TYPE,
                                EV_COD_TECNOLOGIA_ABO   IN GA_ABOCEL.COD_TECNOLOGIA%TYPE,
                                EV_COD_PLANTARIF_ABO    IN GA_ABOCEL.COD_PLANTARIF%TYPE,
                                EN_COD_CENTRAL_ABO      IN GA_ABOCEL.COD_CENTRAL%TYPE,
                                EN_NUM_CELULAR_ABO      IN GA_ABOCEL.NUM_CELULAR%TYPE,
                                EV_NUM_IMEI_ABO         IN GA_ABOCEL.NUM_IMEI%TYPE,
                                EN_NUM_OS               IN CI_ORSERV.NUM_OS%TYPE,
                                EV_COD_OOSS             IN CI_ORSERV.COD_OS%TYPE,
                                EN_NUM_SEQ_MOV          IN ICC_MOVIMIENTO.NUM_MOVIMIENTO%TYPE,
                                EV_NOM_USUARIO          IN GA_USUARIOS.NOM_USUARIO%TYPE,
                                SN_COD_RETORNO          OUT NOCOPY GE_ERRORES_PG.CODERROR,
                                SV_MENS_RETORNO         OUT NOCOPY GE_ERRORES_PG.MSGERROR,
                                SN_NUM_EVENTO           OUT NOCOPY GE_ERRORES_PG.EVENTO
) IS

LV_DES_ERROR              GE_ERRORES_PG.DESEVENT;
LV_SSQL                   GE_ERRORES_PG.VQUERY;
LV_NOMBRE_PROC            STRING(30)   := 'PV_REABILITAR_SUSPENSION_PR';
LV_PKG_PROC               STRING(60)   := GV_PACKAGE||'.'||LV_NOMBRE_PROC;
LV_FORMATO_SEL2           GED_PARAMETROS.VAL_PARAMETRO%TYPE;
LV_FORMATO_SEL7           GED_PARAMETROS.VAL_PARAMETRO%TYPE;
LV_CODSER                 GA_SERVSUPLABO.COD_SERVICIO%TYPE;
LV_COD_ANULA_OS           GED_PARAMETROS.VAL_PARAMETRO%TYPE;
LV_SERIE                  GA_ABOCEL.NUM_SERIE%TYPE;
LV_TECNOLOGIA             GA_ABOCEL.COD_TECNOLOGIA%TYPE;
LV_IMEI                   GA_ABOCEL.NUM_IMEI%TYPE;
LV_NUM_SERHEX             GA_ABOCEL.NUM_SERIEHEX%TYPE;
LV_COD_TIPLAN             TA_PLANTARIF.COD_TIPLAN%TYPE;
LV_COD_ACTABO_AUX         PV_ACTABO_TIPLAN.COD_ACTABO%TYPE;
LV_COD_ACTUACION          PV_ACTABO_TIPLAN.COD_ACTABO%TYPE;
LV_IMSI                   VARCHAR2(50);
LV_FEC_INGRESO            VARCHAR2(25);
LN_NUM_SECUENCIA          NUMBER;
LN_NUM_ABONADO            ICC_MOVIMIENTO.NUM_ABONADO%TYPE;
LN_COD_ESTADO             ICC_MOVIMIENTO.COD_ESTADO%TYPE;
LV_COD_ACTABO             ICC_MOVIMIENTO.COD_ACTABO%TYPE;
LV_COD_MODULO             ICC_MOVIMIENTO.COD_MODULO%TYPE;
LV_USUARIO                ICC_MOVIMIENTO.NOM_USUARORA%TYPE;
LV_TIP_TERMINAL           ICC_MOVIMIENTO.TIP_TERMINAL%TYPE;
LN_COD_CENTRAL            ICC_MOVIMIENTO.COD_CENTRAL%TYPE; 
LN_IND_BLOQUEO            ICC_MOVIMIENTO.IND_BLOQUEO%TYPE;
LN_NUM_CELULAR            ICC_MOVIMIENTO.NUM_CELULAR%TYPE;
LV_NUM_SERIE              ICC_MOVIMIENTO.NUM_SERIE%TYPE;
LV_COD_SUSPREHA           ICC_MOVIMIENTO.COD_SUSPREHA%TYPE;
LV_COD_SERVICIOS          ICC_MOVIMIENTO.COD_SERVICIOS%TYPE;
LV_NUM_MIN                ICC_MOVIMIENTO.NUM_MIN%TYPE;
LV_TIP_TECNOLOGIA         ICC_MOVIMIENTO.TIP_TECNOLOGIA%TYPE;
LV_IMSI_NUE               ICC_MOVIMIENTO.IMSI%TYPE;
LV_ICC                    ICC_MOVIMIENTO.ICC%TYPE;
LV_ICC_NUE                ICC_MOVIMIENTO.ICC%TYPE;
LV_NUM_ERROR              PV_ERRORES_OOSS_TO.NUM_ERROR%TYPE;
LN_NUM_OOSS               PV_ERRORES_OOSS_TO.NUM_OS%TYPE;
LV_COD_OOSS               PV_ERRORES_OOSS_TO.COD_OS%TYPE;
LN_NUM_MOVANT             ICC_MOVIMIENTO.NUM_MOVANT%TYPE;
BEGIN
    SN_COD_RETORNO := 0;
    SV_MENS_RETORNO := 'OK';
    SN_NUM_EVENTO := 0;
    
LV_SSQL := 'UPDATE '||EV_NOM_TABLA_ABO||' SET '
    || 'COD_SITUACION = DECODE (COD_SITUACION, ''SAA'',''RTP'',''AOS'',''RAO'',''ATS'',''RAT'',''CVS'',''RCV'',''RDS'',''RRD'',''RTP''), '
    || 'FEC_ULTMOD = SYSDATE '
    || 'WHERE NUM_ABONADO = '||EN_NUM_ABONADO;    
EXECUTE IMMEDIATE LV_SSQL;

SELECT COD_SERVICIO INTO LV_CODSER
FROM GA_SUSPREHABO 
WHERE NUM_ABONADO = EN_NUM_ABONADO AND IND_SINIESTRO = 1;

UPDATE GA_SUSPREHABO SET 
FEC_REHABD = SYSDATE, 
TIP_REGISTRO = 3
WHERE NUM_ABONADO = EN_NUM_ABONADO
AND IND_SINIESTRO = 1
AND COD_SERVICIO = LV_CODSER;

    
SELECT VAL_PARAMETRO INTO LV_FORMATO_SEL2
FROM GED_PARAMETROS WHERE COD_MODULO = 'GE' AND NOM_PARAMETRO ='FORMATO_SEL2';
    
SELECT VAL_PARAMETRO INTO LV_FORMATO_SEL7
FROM GED_PARAMETROS WHERE COD_MODULO = 'GE' AND NOM_PARAMETRO ='FORMATO_SEL7';
    
IF EV_NOM_TABLA_ABO <> 'GA_ABOAMIST' THEN
SELECT AL_FN_PREFIJO_NUMERO(EN_NUM_CELULAR_ABO) INTO LV_NUM_MIN FROM DUAL;
IF LV_NUM_MIN IS NULL THEN
    SN_COD_RETORNO := 11021;
    SV_MENS_RETORNO := 'No existe Prefijo asociado al Abonado';
    RAISE ERROR_GENERAL;
END IF;
END IF;

SELECT VAL_PARAMETRO INTO LV_COD_ANULA_OS 
FROM GED_PARAMETROS WHERE NOM_PARAMETRO = 'COD_ANULA_OS';

IF EV_COD_OOSS = LV_COD_ANULA_OS THEN --RE
    LV_SERIE := EV_NUM_SERIE_ABO;
    LV_TECNOLOGIA := EV_COD_TECNOLOGIA_ABO;
    LV_IMEI := EV_NUM_IMEI_ABO;
    LV_NUM_SERHEX := EV_NUM_SERIEHEX_ABO;
ELSE --'AN
    BEGIN
        SELECT NUM_SERIE, COD_TECNOLOGIA, NUM_IMEI, NUM_SERIEHEX
        INTO LV_SERIE, LV_TECNOLOGIA, LV_IMEI, LV_NUM_SERHEX
        FROM GA_ABOCEL WHERE NUM_ABONADO = EN_NUM_ABONADO;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            SN_COD_RETORNO := 11020;
            SV_MENS_RETORNO := 'Error al Rescatar datos del Abonado para insertar movimiento';
            RAISE ERROR_GENERAL;
    END;
END IF;
      
SELECT COD_TIPLAN INTO LV_COD_TIPLAN
FROM TA_PLANTARIF WHERE COD_PLANTARIF = EV_COD_PLANTARIF_ABO;
      
begin

    SELECT COD_ACTABO INTO LV_COD_ACTABO_AUX
    FROM PV_ACTABO_TIPLAN
    WHERE COD_TIPLAN = LV_COD_TIPLAN
    AND COD_TIPMODI = EV_COD_ACTABO
    AND COD_OS = EV_COD_OOSS;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        LV_COD_ACTABO := EV_COD_ACTABO;
END;
    
LN_NUM_MOVANT := NULL;
LN_NUM_SECUENCIA := EN_NUM_SEQ_MOV;
LN_NUM_ABONADO := EN_NUM_ABONADO;
LN_COD_ESTADO := 1;
LN_IND_BLOQUEO := 0;
LV_COD_MODULO := 'GA';
LV_USUARIO := EV_NOM_USUARIO;
LN_COD_CENTRAL := EN_COD_CENTRAL_ABO;
LN_NUM_CELULAR := EN_NUM_CELULAR_ABO;
LV_COD_ACTUACION := LV_COD_ACTABO;
SELECT TO_CHAR(SYSDATE,LV_FORMATO_SEL2||' '||LV_FORMATO_SEL7) INTO LV_FEC_INGRESO FROM DUAL;
LV_NUM_SERIE := LV_NUM_SERHEX;
LV_COD_SERVICIOS := '';--SCADENASERVNIVEL
LV_COD_SUSPREHA := LV_CODSER ;
LV_TIP_TERMINAL := EV_TIP_TERMINAL_ABO;
LV_NUM_MIN := LV_NUM_MIN;
LV_TIP_TECNOLOGIA := LV_TECNOLOGIA;
SELECT FN_RECUPERA_IMSI(LV_SERIE) INTO LV_IMSI FROM DUAL;
LV_IMEI := LV_IMEI;
LV_ICC := LV_SERIE;
IF (EV_COD_OOSS = LV_COD_ANULA_OS) THEN --RE
   LV_IMSI_NUE := LV_IMSI;
   LV_ICC_NUE := LV_ICC;
END IF;
SELECT PV_ERRORES_SQ.NEXTVAL INTO LV_NUM_ERROR FROM DUAL;
LN_NUM_OOSS := EN_NUM_OS;
LV_COD_OOSS := EV_COD_OOSS;
   
    
    GA_APROVISIONAR_CENTRAL_PG.GA_APROVISIONAR_PV_PR( 
        LN_NUM_SECUENCIA, LN_NUM_ABONADO, LN_COD_ESTADO, 
        LV_COD_ACTABO, LV_COD_MODULO, LV_USUARIO, 
        LV_FEC_INGRESO, LV_TIP_TERMINAL, LN_COD_CENTRAL, 
        LN_IND_BLOQUEO, NULL, LN_NUM_CELULAR,
        LV_NUM_SERIE, NULL, NULL, 
        LV_COD_SUSPREHA, LV_COD_SERVICIOS, LV_NUM_MIN,
        NULL, LV_TIP_TECNOLOGIA, LV_IMSI_NUE, 
        LV_IMEI, NULL, LV_ICC, 
        LV_ICC_NUE, NULL, NULL, 
        NULL, NULL, NULL, 
        LV_NUM_ERROR, LN_NUM_OOSS, LV_COD_OOSS, LN_NUM_MOVANT);
        
EXCEPTION
    WHEN ERROR_GENERAL THEN
        LV_DES_ERROR := SUBSTR(LV_NOMBRE_PROC || '( ); - ' || SQLERRM,1,GN_LARGOERRTEC);
        SV_MENS_RETORNO:=SUBSTR(SV_MENS_RETORNO,1,GN_LARGODESC);
        SN_NUM_EVENTO := GE_ERRORES_PG.GRABARPL(SN_NUM_EVENTO, GV_COD_MODULO, SV_MENS_RETORNO, '1.0', USER, 
        LV_PKG_PROC, LV_SSQL, SN_COD_RETORNO, LV_DES_ERROR );
    WHEN OTHERS THEN
        SN_COD_RETORNO := GV_ERROR_OTHERS;
        IF NOT GE_ERRORES_PG.MENSAJEERROR(SN_COD_RETORNO,SV_MENS_RETORNO) THEN
          SV_MENS_RETORNO := GV_ERROR_NO_CLASIF;
        END IF;
        LV_DES_ERROR := SUBSTR(LV_NOMBRE_PROC || '( ); - ' || SQLERRM,1,GN_LARGOERRTEC);
        SV_MENS_RETORNO:=SUBSTR(SV_MENS_RETORNO,1,GN_LARGODESC);
        SN_NUM_EVENTO := GE_ERRORES_PG.GRABARPL(SN_NUM_EVENTO, GV_COD_MODULO, SV_MENS_RETORNO, '1.0', USER, 
        LV_PKG_PROC, LV_SSQL, SN_COD_RETORNO, LV_DES_ERROR );
        
END PV_REABILITAR_SUSPENSION_PR;


PROCEDURE PV_CAMBIA_ESTADO_MOV_PR(
                                    EN_NUM_MOVIMIENTO     IN ICC_MOVIMIENTO.NUM_MOVIMIENTO%TYPE,
                                    SN_COD_RETORNO        OUT NOCOPY GE_ERRORES_TD.COD_MSGERROR%TYPE,
                                    SV_MENS_RETORNO        OUT NOCOPY GE_ERRORES_TD.DET_MSGERROR%TYPE,
                                    SN_NUM_EVENTO          OUT NOCOPY GE_ERRORES_PG.EVENTO
)
 /*
<DOCUMENTACIÓN
  TIPODOC = "PROCEDIMIENTO">
   <ELEMENTO
      NOMBRE = "PV_CAMBIA_ESTADO_MOV_PR"
      LENGUAJE="PL/SQL"
      FECHA="10-06-2011"
      VERSIÓN="1.0"
      DISEÑADOR="EVERIS"
      PROGRAMADOR="EVERIS"
      AMBIENTE DESARROLLO="BD">
      <RETORNO>NA</RETORNO>
      <DESCRIPCIÓN> OBTIENE DATOS DE ABONADO</DESCRIPCIÓN>
      <PARÁMETROS>
         <ENTRADA>
              <PARAM NOM="EN_NUM_MOVIMEINTO" TIPO="NUMBER"> NUMERO DE MOVIMIENTO</PARAM>
         </ENTRADA>
         <SALIDA>
            <PARAM NOM="SN_COD_RETORNO"  TIPO="NUMERICO" >CÓDIGO DE RETORNO (DESCRIPCIÓN DE ERROR)</PARAM>
            <PARAM NOM="SV_MENS_RETORNO"  TIPO="VARCHAR" >MENSAJE DE RETORNO (CÓDIGO DE ERROR)</PARAM>
            <PARAM NOM="SN_NUM_EVENTO"  TIPO="NUMERICO" >NÚMERO DE EVENTO</PARAM>
         </SALIDA>
      </PARÁMETROS>
   </ELEMENTO>
</DOCUMENTACIÓN>
*/
IS
    LV_DES_ERROR               GE_ERRORES_PG.DESEVENT;
    LV_SSQL                    GE_ERRORES_PG.VQUERY;
    LV_NOMBRE_PROC             STRING(30)   := 'PV_CAMBIA_ESTADO_MOV_PR';
    LV_PKG_PROC                STRING(60)   := GV_PACKAGE||'.'||LV_NOMBRE_PROC;
    LN_NUM_TRANSACC            GA_TRANSACABO.NUM_TRANSACCION%TYPE;
    
BEGIN

    SN_COD_RETORNO  := 0;
    SV_MENS_RETORNO := 'OK';
    SN_NUM_EVENTO   := 0;

    UPDATE ICC_MOVIMIENTO SET
    COD_ESTADO = 1
    WHERE NUM_MOVIMIENTO = EN_NUM_MOVIMIENTO;

EXCEPTION
    WHEN OTHERS THEN
        SN_COD_RETORNO := GV_ERROR_OTHERS;
        IF NOT GE_ERRORES_PG.MENSAJEERROR(SN_COD_RETORNO,SV_MENS_RETORNO) THEN
          SV_MENS_RETORNO := GV_ERROR_NO_CLASIF;
        END IF;
        LV_DES_ERROR := SUBSTR(LV_NOMBRE_PROC || '( ); - ' || SQLERRM,1,GN_LARGOERRTEC);
        SV_MENS_RETORNO:=SUBSTR(SV_MENS_RETORNO,1,GN_LARGODESC);
        SN_NUM_EVENTO := GE_ERRORES_PG.GRABARPL(SN_NUM_EVENTO, GV_COD_MODULO, SV_MENS_RETORNO, '1.0', USER, 
        LV_PKG_PROC, LV_SSQL, SN_COD_RETORNO, LV_DES_ERROR );
        
END PV_CAMBIA_ESTADO_MOV_PR;

PROCEDURE PV_GET_ESTADO_VENTA_PR(
                                    EN_NUM_ABONADO        IN GA_ABOCEL.NUM_ABONADO%TYPE,
                                    SV_EST_VENTA          OUT GA_VENTAS.IND_ESTVENTA%TYPE,
                                    SN_COD_RETORNO        OUT NOCOPY GE_ERRORES_TD.COD_MSGERROR%TYPE,
                                    SV_MENS_RETORNO       OUT NOCOPY GE_ERRORES_TD.DET_MSGERROR%TYPE,
                                    SN_NUM_EVENTO         OUT NOCOPY GE_ERRORES_PG.EVENTO
)
 /*
<DOCUMENTACIÓN
  TIPODOC = "PROCEDIMIENTO">
   <ELEMENTO
      NOMBRE = "PV_GET_ESTADO_VENTA_PR"
      LENGUAJE="PL/SQL"
      FECHA="09-06-2011"
      VERSIÓN="1.0"
      DISEÑADOR="EVERIS"
      PROGRAMADOR="EVERIS"
      AMBIENTE DESARROLLO="BD">
      <RETORNO>NA</RETORNO>
      <DESCRIPCIÓN>OBTIENE ESTADO VENTA DE ABONADO</DESCRIPCIÓN>
      <PARÁMETROS>
         <ENTRADA>
              <PARAM NOM="EN_NUM_ABONADO" TIPO="NUMBER"> NUMERO DE ABONADO</PARAM>
         </ENTRADA>
         <SALIDA>
            <PARAM NOM="SV_EST_VENTA"  TIPO="VARCHAR2" >ESTADO VENTA DE ABONADO</PARAM>
            <PARAM NOM="SN_COD_RETORNO"  TIPO="NUMERICO" >CÓDIGO DE RETORNO (DESCRIPCIÓN DE ERROR)</PARAM>
            <PARAM NOM="SV_MENS_RETORNO"  TIPO="VARCHAR" >MENSAJE DE RETORNO (CÓDIGO DE ERROR)</PARAM>
            <PARAM NOM="SN_NUM_EVENTO"  TIPO="NUMERICO" >NÚMERO DE EVENTO</PARAM>
         </SALIDA>
      </PARÁMETROS>
   </ELEMENTO>
</DOCUMENTACIÓN>
*/
IS
    LV_DES_ERROR               GE_ERRORES_PG.DESEVENT;
    LV_SSQL                    GE_ERRORES_PG.VQUERY;
    LV_NOMBRE_PROC             STRING(30)   := 'PV_GET_ESTADO_VENTA_PR';
    LV_PKG_PROC                STRING(60)   := GV_PACKAGE||'.'||LV_NOMBRE_PROC;
    LN_NUM_TRANSACC            GA_TRANSACABO.NUM_TRANSACCION%TYPE;
    
    LV_NUM_VENTA               NUMBER;
    LV_TABLA                   VARCHAR2(20);
    LV_CAMPOS                  VARCHAR2(5000);
    LV_GSFORMATO_SEL2          VARCHAR2(20);
BEGIN

    SN_COD_RETORNO  := 0;
    SV_MENS_RETORNO := 'OK';
    SN_NUM_EVENTO   := 0;

    SELECT NUM_VENTA
    INTO LV_NUM_VENTA
    FROM GA_ABOCEL
    WHERE NUM_ABONADO = EN_NUM_ABONADO;
    
    SELECT IND_ESTVENTA
    INTO SV_EST_VENTA
    FROM GA_VENTAS
    WHERE NUM_VENTA = LV_NUM_VENTA; 
    

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        SN_COD_RETORNO := 2655;
        IF NOT GE_ERRORES_PG.MENSAJEERROR(SN_COD_RETORNO,SV_MENS_RETORNO) THEN
          SV_MENS_RETORNO := GV_ERROR_NO_CLASIF;
        END IF;
        LV_DES_ERROR := SUBSTR(LV_NOMBRE_PROC || '('||EN_NUM_ABONADO||'); - ' || SQLERRM,1,GN_LARGOERRTEC);
        SV_MENS_RETORNO:=SUBSTR(SV_MENS_RETORNO,1,GN_LARGODESC);
        SN_NUM_EVENTO := GE_ERRORES_PG.GRABARPL(SN_NUM_EVENTO, GV_COD_MODULO, SV_MENS_RETORNO, '1.0', USER, 
        LV_PKG_PROC, LV_SSQL, SN_COD_RETORNO, LV_DES_ERROR );

    WHEN OTHERS THEN
        SN_COD_RETORNO := GV_ERROR_OTHERS;
        IF NOT GE_ERRORES_PG.MENSAJEERROR(SN_COD_RETORNO,SV_MENS_RETORNO) THEN
          SV_MENS_RETORNO := GV_ERROR_NO_CLASIF;
        END IF;
        LV_DES_ERROR := SUBSTR(LV_NOMBRE_PROC || '('||EN_NUM_ABONADO||'); - ' || SQLERRM,1,GN_LARGOERRTEC);
        SV_MENS_RETORNO:=SUBSTR(SV_MENS_RETORNO,1,GN_LARGODESC);
        SN_NUM_EVENTO := GE_ERRORES_PG.GRABARPL(SN_NUM_EVENTO, GV_COD_MODULO, SV_MENS_RETORNO, '1.0', USER, 
        LV_PKG_PROC, LV_SSQL, SN_COD_RETORNO, LV_DES_ERROR );

END PV_GET_ESTADO_VENTA_PR;

END PV_GEST_LIM_CON_CONSULTAS_PG;
/
SHOW ERRORS