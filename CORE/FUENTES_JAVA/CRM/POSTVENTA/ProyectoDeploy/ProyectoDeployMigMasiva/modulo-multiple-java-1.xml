<project name="modulo" default="All" basedir=".">

	<!--Autor: Jimmy Alexander LÃ³pez Pereira-->
	<!--Fecha: 24-06-08-->
	<!--Version: 1.0-->

	<!-- Archivo de properties de un componente dado -->
	<property name="param.proyecto.properties" value="${value.proyecto.properties}" />

	<!-- Archivo de propiedades a setear -->
	<property file="system.properties" />
	<property file="${param.proyecto.properties}" />
	<property file="componente.properties" />

	<!--Libreria de utilidades -->
	<import file="${gvalue.plantilla.build.utility}" />



	<!-- Directorio raiz del proyecto o workspace hasta antes de Meta Data de eclipse -->
	<property name="param.value.proyecto.dir" value="${value.proyecto.dir}" />

	<!-- Nombre del modulo a generar -->
	<property name="param.value.modulo" value="${value.modulo}" />

	<!-- Directorio de generacion de clases compiladas -->
	<property name="param.value.build" value="${value.build}" />

	<!-- Directorio de la libreria del proyecto a generar -->
	<property name="param.value.build.lib" value="${value.build.lib}" />

	<!-- Indice de la iteracion de la compilacion -->
	<property name="param.iteracion.compilacion" value="${value.iteracion.compilacion}" />

	<!-- Proyectos Fuentes de la compilacion -->
	<property name="param.value.multiple.java.src" value="${value.multiple.java.src.var}" />

	<!-- Patrones de inclusion para generar el jar -->
	<property name="param.value.multiple.java.pattern.include" value="${value.multiple.java.pattern.include.var}" />

	<!-- Patrones de exclusion para generar el jar -->
	<property name="param.value.multiple.java.pattern.exclude" value="${value.multiple.java.pattern.exclude.var}" />



	<!-- Directorio raiz del proyecto o workspace hasta antes de Meta Data de eclipse -->
	<property name="proyecto.dir" value="${param.value.proyecto.dir}" />

	<!-- Nombre del modulo a generar -->
	<property name="nombre.modulo" value="${param.value.modulo}" />

	<!-- Directorio de fuentes Java -->
	<property name="source" value="${proyecto.dir}/" />

	<!-- Directorio de generacion de clases compiladas -->
	<property name="build" value="${param.value.build}" />

	<!-- Directorio de generacion de clases compiladas para un modulo -->
	<property name="build.modulo" value="${build}/${nombre.modulo}" />

	<!-- Directorio de librerias generadas (.jar) en cada compilacion de un modulo -->
	<property name="lib" value="${param.value.build.lib}" />

	<!-- Directorio de libreria J2EE -->
	<property name="lib.j2EE" value="${gvalue.lib.j2ee}" />

	<!-- Directorio raiz donde comienzan a colocarse las clases de cada modulo -->
	<property name="classes.dir" value="${build.modulo}/${gvalue.deploy.classes}" />

	<!-- Nombre del jar de modulo generado -->
	<property name="modulo.jar.file" value="${lib}/${param.value.modulo}.jar" />

	<!-- Librerias especificas de App Server -->
	<property name="app.server.lib" value="${gvalue.lib.servidor}" />

	<!-- Librerias especificas de App de build -->
	<property name="app.lib" value="${gvalue.app.lib}" />

	<!-- Librerias especificas de App externas -->
	<property name="app.lib.externa" value="${gvalue.lib.j2ee.externa}" />	

	<path id="classpath">
		<fileset dir="${app.server.lib}">
			<include name="**/*.jar" />
			<include name="**/*.zip" />
		</fileset>
	</path>
	<path id="classpath.general">
		<fileset dir="${lib.j2EE}">
			<include name="**/*.jar" />
			<include name="**/*.zip" />
		</fileset>
		<fileset dir="${app.lib.externa}">
			<include name="**/*.jar" />
			<include name="**/*.zip" />
		</fileset>		
	</path>

	<path id="classpath.lib.generada">
		<fileset dir="${lib}">
			<include name="**/*.jar" />
			<include name="**/*.zip" />
		</fileset>
	</path>

	<path id="classpath.lib.app">
		<fileset dir="${app.lib}">
			<include name="**/*.jar" />
			<include name="**/*.zip" />
		</fileset>
	</path>

	<target name="clean" depends="Limpiar,GenerarModulo">
	</target>

	<target name="All">
		<if>
			<equals arg1="${param.iteracion.compilacion}" arg2="${gvalue.cero}" />
			<then>
				<echo message="Iteracion cero se crean todas la estructuras de directorios" />
				<antcall target="clean">
				</antcall>
			</then>
			<else>
				<echo message="Iteracion distinta de cero no se crean todas la estructuras de directorios" />
				<antcall target="GenerarModulo">
				</antcall>
			</else>
		</if>
	</target>

	<!-- Muestra las variables de las properties -->
	<target name="Inicializar">
		<echo>Inicializando variables....</echo>
		<echo>
			Iteracion de compilacion[${param.iteracion.compilacion}]
		</echo>
		<echo>Directorio de Proyecto[${proyecto.dir}]</echo>
		<echo>Nombre de Modulo[${nombre.modulo}]</echo>
		<echo>Directorio de Fuentes[${source}]</echo>
		<echo>
			Directorio de Construccion de modulo[${build.modulo}]
		</echo>
		<echo>
			Directorio de librerias generadas al compilar un
			modulo[${lib}]
		</echo>
		<echo>
			Nombre del jar de modulo a generar[${modulo.jar.file}]
		</echo>
		<!-- Archivo de properties de un componente dado -->
		<echo>Properties J2EE[${param.proyecto.properties}]</echo>
		<echo>
			Directorio de libreria de aplicacion [${gvalue.app.lib}]
		</echo>

		<echo>
			variable de multiple java
			src[${param.value.multiple.java.src}]
		</echo>
		<echo>
			variable de multiple java pattern
			include[${param.value.multiple.java.pattern.include}]
		</echo>
		<echo>
			variable de multiple java pattern
			exclude[${param.value.multiple.java.pattern.exclude}]
		</echo>
	</target>

	<!-- Borra el directorio build del modulo -->
	<target name="Limpiar">
		<echo>Borrando directorio ${build.modulo}</echo>
		<delete dir="${build.modulo}" />
	</target>

	<!-- Crea la estructura de directorios del modulo -->
	<target name="CrearDirectorios">
		<echo>Creando directorios...</echo>
		<mkdir dir="${build}" />
		<mkdir dir="${lib}" />
		<mkdir dir="${build.modulo}" />
		<mkdir dir="${classes.dir}" />
	</target>

	<!-- Compilacion de fuentes -->
	<target name="Compilar">
		<echo>Compilando fuentes...</echo>
		<antcallback target="armarNuevosFuentes" return="sourceNuevo" />

		<echo>Directorio de Fuentes nuevo[${sourceNuevo}]</echo>

		<javac srcdir="${sourceNuevo}" destdir="${classes.dir}" deprecation="${gvalue.java.compiler.options.deprecation}" debug="${gvalue.java.compiler.options.debug}">
			<classpath refid="classpath" />
			<classpath refid="classpath.general" />
			<classpath refid="classpath.lib.generada" />
			<classpath refid="classpath.lib.app" />
		</javac>
	</target>


	<!-- Arma la lista de fuentes para compilar -->
	<target name="armarNuevosFuentes">
		<echo>Armando nuevos fuentes...</echo>
		<var name="sourceNuevo" value="" />
		<for list="${param.value.multiple.java.src}" param="fuente">
			<sequential>
				<echo>Proyecto [@{fuente}]</echo>
				<var name="modulo.fuente" value="@{fuente}"/>
				<echo>modulo.fuente [${modulo.fuente}]</echo>
				<condition property="existe.propiedad.src" value="${gvalue.SI}"
					else="${gvalue.NO}">
					<and>
						<isset property="${modulo.fuente}${gvalue.src}" />
					</and>
				</condition>
				<echo>Existe propiedad src de modulo[${existe.propiedad.src}]</echo>

				<if>
					<equals arg1="${existe.propiedad.src}" arg2="${gvalue.NO}" />
					<then>
						<var name="sourceNuevo"
							value="${sourceNuevo}${source}@{fuente}/${gvalue.src.valor}${gvalue.dos.puntos}" />
						<echo message="Agrega SRC al directorio fuente" />
					</then>
					<else>
						<if>
							<equals arg1="${existe.src}" arg2="${gvalue.SI}" />
							<then>
								<var name="sourceNuevo"
									value="${sourceNuevo}${source}@{fuente}/${gvalue.src.valor}${gvalue.dos.puntos}" />
								<echo message="Agrega SRC al directorio fuente" />
							</then>
							<else>
								<echo message="SRC sin modificar" />
								<var name="sourceNuevo" value="${sourceNuevo}${source}@{fuente}${gvalue.dos.puntos}" />
							</else>
						</if>
					</else>
				</if>
			</sequential>
		</for>
		<echo>sourceNuevo [${sourceNuevo}]</echo>
	</target>

	


	<!-- Copia archivo de propiedades de los modulos -->
	<target name="CopiarPropertiesMasivo">
		<echo>Copia properties masivo...</echo>
		<for list="${param.value.multiple.java.src}" param="fuente">
			<sequential>
				<echo>Proyecto [@{fuente}]</echo>
				<var name="modulo.fuente" value="@{fuente}"/>
				<echo>modulo.fuente [${modulo.fuente}]</echo>	
				<condition property="existe.propiedad.src" value="${gvalue.SI}"
					else="${gvalue.NO}">
					<and>
						<isset property="${modulo.fuente}${gvalue.src}" />
					</and>
				</condition>
				<echo>Existe propiedad src de modulo[${existe.propiedad.src}]</echo>				
				
				<if>
					<equals arg1="${existe.propiedad.src}" arg2="${gvalue.NO}" />
					<then>
						<var name="sourceNuevo"
							value="${source}@{fuente}/${gvalue.src.valor}" />
						<echo message="Agrega SRC al directorio fuente" />
					</then>
					<else>
						<if>
							<equals arg1="${existe.src}" arg2="${gvalue.SI}" />
							<then>
								<var name="sourceNuevo"
									value="${source}@{fuente}/${gvalue.src.valor}" />
								<echo message="Agrega SRC al directorio fuente" />
							</then>
							<else>
								<echo message="SRC sin modificar" />
								<var name="sourceNuevo" value="${source}@{fuente}" />
							</else>
						</if>
					</else>
				</if>
				<antcall target="CopiarRecursosJava">
					<param name="value.param.recursos" value="${gvalue.deploy.recurso.java}" />
					<param name="value.param.from" value="${sourceNuevo}" />
					<param name="value.param.to" value="${classes.dir}" />
				</antcall>
			</sequential>
		</for>
		<echo>sourceNuevo [${sourceNuevo}]</echo>
	</target>


	<!-- Copia recursos de java -->
	<target name="CopiarRecursosJava">
		<echo>Copiando archivo de recursos de java...</echo>
		<antcall target="CopiarRecursos">
			<param name="value.param.recursos" value="${gvalue.deploy.recurso.java}" />
			<param name="value.param.from" value="${sourceNuevo}" />
			<param name="value.param.to" value="${classes.dir}" />
		</antcall>
	</target>



	<!-- Generacion del jar -->
	<target name="GenerarJar">
		<echo>Generando archivo .Jar...</echo>
		<jar destfile="${modulo.jar.file}">
			<fileset dir="${classes.dir}" excludes="${param.value.multiple.java.pattern.exclude}" includes="${param.value.multiple.java.pattern.include}">
			</fileset>
		</jar>

		<copy todir="${gvalue.app.lib}" file="${modulo.jar.file}">
		</copy>
	</target>

	<target name="GenerarModulo" depends="Inicializar, CrearDirectorios, Compilar,CopiarPropertiesMasivo, GenerarJar">
	</target>


	<!-- Generacion del modulo 
		<target name="GenerarModulo" depends="Inicializar, CrearDirectorios, Compilar, CopiarPropertiesMasivo, GenerarJar">
		</target>
	-->

</project>
