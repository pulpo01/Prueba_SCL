<project name="modulo" default="All" basedir=".">

	<!--Autor: Jimmy Alexander LÃ³pez Pereira-->
	<!--Fecha: 05-06-08-->
	<!--Version: 1.0-->

	<!-- Archivo de properties de un componente dado -->
	<property name="param.proyecto.properties" value="${value.proyecto.properties}" />

	<!-- Archivo de propiedades a setear -->
	<property file="general.properties" />
	<property file="system.properties" />
	<property file="componente.properties" />
	<property file="${param.proyecto.properties}" />

	<!--Libreria de utilidades -->

	<import file="${gvalue.plantilla.build.utility}" />

	<!-- Define la tarea ant contribucion,  el jar debe estar en la libreria de ant y de eclipse -->
	<taskdef resource="net/sf/antcontrib/antlib.xml">
		<classpath>
			<pathelement location="/usr/share/java/lib/ant-contrib-version.jar" />
		</classpath>
	</taskdef>



	<!-- Directorio raiz del proyecto o workspace hasta antes de Meta Data de eclipse -->
	<property name="param.value.proyecto.dir" value="${value.proyecto.dir}" />

	<!-- Nombre del modulo a generar -->
	<property name="param.value.modulo" value="${value.modulo}" />

	<!-- Directorio de generacion de clases compiladas -->
	<property name="param.value.build" value="${value.build}" />

	<!-- Directorio de la libreria del proyecto a generar -->
	<property name="param.value.build.lib" value="${value.build.lib}" />

	<!-- Indice de la iteracion de la compilacion -->
	<property name="param.iteracion.compilacion" value="${value.iteracion.compilacion}" />


	<!-- Directorio raiz del proyecto o workspace hasta antes de Meta Data de eclipse -->
	<property name="proyecto.dir" value="${param.value.proyecto.dir}" />


	<!-- Nombre del modulo a generar -->
	<property name="nombre.modulo" value="${param.value.modulo}" />

	<!-- Directorio de fuentes Java -->
	<property name="source" value="${proyecto.dir}/${nombre.modulo}" />

	<!-- Valor de la propiedad del modulo EAR a generar dinamico  'proyecto.ear'-->
	<propertycopy name="nombre.modulo.ear" from="${nombre.modulo}${gvalue.ear}" />

	<!-- Directorio de fuentes EAR dinamico -->
	<property name="source.ear" value="${proyecto.dir}/${nombre.modulo.ear}" />

	<!-- Directorio de generacion de clases compiladas -->
	<property name="build" value="${param.value.build}" />

	<!-- Directorio de generacion de clases compiladas para un modulo -->
	<property name="build.modulo" value="${build}/${nombre.modulo}" />

	<!-- Directorio EAR del proyecto  -->
	<property name="build.modulo.dir.ear" value="${build}/${gvalue.valor.ear}" />

	<!-- Directorio de generacion de ear dinamico -->
	<property name="build.modulo.ear" value="${build}/${nombre.modulo.ear}" />

	<!-- Directorio de librerias generadas (.jar) en cada compilacion de un modulo -->
	<property name="lib" value="${param.value.build.lib}" />

	<!-- Directorio de libreria J2EE -->
	<property name="lib.j2EE" value="${gvalue.lib.j2ee}" />

	<!-- valor de la propiedad dinamica de libreria local 'proyecto.dependencias.lib.local'  -->
	<propertycopy name="dependencias.lib.local" from="${nombre.modulo}${gvalue.lib.local}" />
	
	<!-- valor de la propiedad dinamica de libreria de App 'proyecto.dependencias.lib.app'  -->
	<propertycopy name="dependencias.lib.app" from="${nombre.modulo}${gvalue.lib.app}" />

	<!-- Directorio raiz donde comienzan a colocarse las clases de cada modulo -->
	<property name="classes.dir" value="${build.modulo}/${gvalue.deploy.classes}" />

	<!-- Nombre del jar de modulo server generado -->
	<property name="modulo.jar.file.server" value="${lib}/${param.value.modulo}${gvalue.jar}" />

	<!-- Nombre del jar de modulo cliente generado -->
	<property name="modulo.jar.file.client" value="${lib}/${param.value.modulo}${gvalue.deploy.suffix.ejb}${gvalue.jar}" />

	<!-- Librerias especificas de App Server -->
	<property name="app.server.lib" value="${gvalue.lib.servidor}" />

	<!-- Librerias especificas de App de build -->
	<property name="app.lib" value="${gvalue.app.lib}" />
	
	<!-- Librerias especificas de App externas -->
	<property name="app.lib.externa" value="${gvalue.lib.j2ee.externa}" />	

	<path id="classpath">
		<fileset dir="${app.server.lib}">
			<include name="**/*.jar" />
			<include name="**/*.zip" />
		</fileset>
	</path>
	<path id="classpath.general">
		<fileset dir="${lib.j2EE}">
			<include name="**/*.jar" />
			<include name="**/*.zip" />
		</fileset>
		<fileset dir="${app.lib.externa}">
			<include name="**/*.jar" />
			<include name="**/*.zip" />
		</fileset>
	</path>

	<path id="classpath.lib.generada">
		<fileset dir="${lib}">
			<include name="**/*.jar" />
			<include name="**/*.zip" />
		</fileset>
	</path>

	<path id="classpath.lib.app">
		<fileset dir="${app.lib}">
			<include name="**/*.jar" />
			<include name="**/*.zip" />
		</fileset>
	</path>

	<!-- Proceso de borrado de directorios y llamada al modulo principal -->
	<target name="clean" depends="Limpiar, GenerarModulo">
	</target>

	<!-- Inicio del proceso -->
	<target name="All">
		<if>
			<equals arg1="${param.iteracion.compilacion}" arg2="0" />
			<then>
				<echo message="Iteracion cero se crean todas la estructuras de directorios" />
				<antcall target="clean">
				</antcall>
			</then>
			<else>
				<echo message="Iteracion distinta de cero no se crean todas la estructuras de directorios" />
				<antcall target="GenerarModulo">
				</antcall>
			</else>
		</if>
	</target>

	<!-- Muestra las variables de las properties -->
	<target name="Inicializar">
		<echo>Inicializando variables....</echo>
		<echo>
			Iteracion de compilacion[${param.iteracion.compilacion}]
		</echo>
		<echo>Directorio de Proyecto[${proyecto.dir}]</echo>
		<echo>Directorio de Proyecto EAR[${build.modulo.dir.ear}]</echo>
		<echo>Nombre de Modulo[${nombre.modulo}]</echo>
		<echo>Nombre de Modulo EAR[${nombre.modulo.ear}]</echo>
		<echo>Directorio de Fuentes[${source}]</echo>
		<echo>Directorio de Fuentes de EAR[${source.ear}]</echo>
		<echo>
			Directorio de Construccion de modulo[${build.modulo}]
		</echo>

		<echo>
			Directorio de Construccion de modulo
			EAR[${build.modulo.ear}]
		</echo>
		<echo>
			Directorio de librerias generadas al compilar un
			modulo[${lib}]
		</echo>
		<echo>
			Nombre del jar de modulo server a
			generar[${modulo.jar.file.server}]
		</echo>

		<echo>
			Nombre del jar de modulo cliente a
			generar[${modulo.jar.file.client}]
		</echo>
		<!-- Archivo de properties de un componente dado -->
		<echo>Properties J2EE[${param.proyecto.properties}]</echo>
		<echo>
			Directorio de libreria de aplicacion [${gvalue.app.lib}]
		</echo>
		<echo>
			Librerias de proyecto a generar [${dependencias.lib.local}]
		</echo>
		<echo>
			Librerias de aplicacion a generar [${dependencias.lib.app}]
		</echo>
		<echo>Librerias del App Server[${gvalue.lib.servidor}]</echo>
		<echo>Librerias J2EE[${gvalue.lib.j2ee}]</echo>
		<echo>Librerias J2EE Externa[${gvalue.lib.j2ee.externa}]</echo>
	</target>

	<!-- Borra el directorio build del modulo -->
	<target name="Limpiar">
		<echo>Borrando directorio ${build.modulo}</echo>
		<delete dir="${build.modulo}" />
	</target>

	<!-- Crea la estructura de directorios del modulo -->
	<target name="CrearDirectorios">
		<echo>Creando directorios...</echo>
		<mkdir dir="${build}" />
		<mkdir dir="${lib}" />
		<mkdir dir="${build.modulo}" />
		<mkdir dir="${build.modulo.ear}" />
		<mkdir dir="${build.modulo.dir.ear}" />
		<mkdir dir="${classes.dir}" />
	</target>

	<!-- Setea el valor de si el proyecto EJB se divide en 2 o no -->
	<target name="verificarsiTieneProyectoCliente">
		<echo>Creando directorios...</echo>
		<!-- Verifica si tiene un proyecto cliente -->
		<condition property="tiene.propiedad.proyecto.cliente" value="${gvalue.SI}" else="${gvalue.NO}">
			<and>
				<isset property="${nombre.modulo}${gvalue.Client}" />
			</and>
		</condition>
		<echo>
			Existe propiedad de Proyecto Cliente [${nombre.modulo}${gvalue.Client}]
		</echo>
		<if>
			<equals arg1="${tiene.propiedad.proyecto.cliente}" arg2="${gvalue.SI}" />
			<then>
				<echo message="Proyecto tiene propiedad seteada" />
				<propertycopy name="propiedad.proyecto.cliente" from="${nombre.modulo}${gvalue.Client}" />
				<echo>
					Propiedad proyecto cliente[${propiedad.proyecto.cliente}]
				</echo>
				<if>
					<equals arg1="${propiedad.proyecto.cliente}" arg2="${gvalue.SI}" />
					<then>
						<echo message="Proyecto tiene propiedad seteada a SI" />
						<property name="valor.propiedad.proyecto.cliente" value="${gvalue.SI}" />
					</then>
					<else>
						<echo message="Proyecto tiene propiedad seteada a NO" />
						<property name="valor.propiedad.proyecto.cliente" value="${gvalue.NO}" />
					</else>
				</if>
			</then>
			<else>
				<echo message="Proyecto no tiene propiedad seteada. Se asume que el proyecto tiene un componente cliente" />
				<property name="valor.propiedad.proyecto.cliente" value="${gvalue.SI}" />
			</else>
		</if>
	</target>


	<!-- Compilacion de fuentes -->
	<target name="Compilar">
		<echo>Compilando fuentes...</echo>
		<property name="sourceNuevoEjbServer" value="${source}/${gvalue.deploy.ejb.src}" />
		<echo>Directorio de Fuentes EJB Server[${sourceNuevoEjbServer}]</echo>

		<!-- Verifica si tiene proyecto cliente o no-->
		<if>
			<equals arg1="${valor.propiedad.proyecto.cliente}" arg2="${gvalue.SI}" />
			<then>
				<echo message="Existe proyecto cliente" />
				<property name="sourceNuevoEjbClient" value="${source}${gvalue.deploy.suffix.ejb}/${gvalue.deploy.ejb.src}" />
				<echo>
					Directorio de Fuentes EJB Cliente[${sourceNuevoEjbClient}]
				</echo>
				<javac destdir="${classes.dir}" deprecation="${gvalue.java.compiler.options.deprecation}" debug="${gvalue.java.compiler.options.debug}">
					<src path="${sourceNuevoEjbServer}" />
					<src path="${sourceNuevoEjbClient}" />
					<classpath refid="classpath" />
					<classpath refid="classpath.general" />
					<classpath refid="classpath.lib.generada" />
					<classpath refid="classpath.lib.app" />
				</javac>
			</then>
			<else>
				<echo message="No existe proyecto cliente" />
				<javac destdir="${classes.dir}" deprecation="${gvalue.java.compiler.options.deprecation}" debug="${gvalue.java.compiler.options.debug}">
					<src path="${sourceNuevoEjbServer}" />
					<classpath refid="classpath" />
					<classpath refid="classpath.general" />
					<classpath refid="classpath.lib.generada" />
					<classpath refid="classpath.lib.app" />
				</javac>
			</else>
		</if>
	</target>

	<!-- Copia recursos del EJB cliente -->
	<target name="CopiarRecursosEJBCliente">
		<echo>Copiando archivo de recursos del EJB cliente...</echo>
		<!-- Verifica si tiene proyecto cliente o no-->
		<if>
			<equals arg1="${valor.propiedad.proyecto.cliente}" arg2="${gvalue.SI}" />
			<then>
				<echo message="Existe proyecto cliente" />
				<antcall target="CopiarRecursos">
					<param name="value.param.recursos" value="${gvalue.deploy.recurso.ejb.client}" />
					<param name="value.param.from" value="${sourceNuevoEjbClient}" />
					<param name="value.param.to" value="${classes.dir}" />
				</antcall>
			</then>
			<else>
				<echo message="No existe proyecto cliente" />
				<antcall target="CopiarRecursos">
					<param name="value.param.recursos" value="${gvalue.deploy.recurso.ejb.client}" />
					<param name="value.param.from" value="${sourceNuevoEjbServer}" />
					<param name="value.param.to" value="${classes.dir}" />
				</antcall>
			</else>
		</if>
	</target>

	<!-- Copia recursos del EJB server -->
	<target name="CopiarRecursosEJBServer">
		<echo>Copiando archivo de recursos del EJB Server...</echo>
		<antcall target="CopiarRecursos">
			<param name="value.param.recursos" value="${gvalue.deploy.recurso.ejb.server}" />
			<param name="value.param.from" value="${sourceNuevoEjbServer}" />
			<param name="value.param.to" value="${classes.dir}" />
		</antcall>
	</target>


	<!-- Generacion del jar -->
	<target name="GenerarJar">
		<echo>
			Generando archivo EJB Server [${modulo.jar.file.server}]...
		</echo>

		<!-- Verifica si tiene proyecto cliente o no-->
		<if>
			<equals arg1="${valor.propiedad.proyecto.cliente}" arg2="${gvalue.SI}" />
			<then>
				<echo message="Existe proyecto cliente" />
				<jar destfile="${modulo.jar.file.server}" manifest="${sourceNuevoEjbServer}/${gvalue.meta.inf}/${gvalue.manifest.mf}">
					<fileset dir="${classes.dir}" includes="${gvalue.pattern.ejb.server},${gvalue.deploy.recurso.ejb.server},${gvalue.fuentes.java}">
					</fileset>
				</jar>
				<echo>
					Generando archivo EJB Client [${modulo.jar.file.client}]...
				</echo>
				<jar destfile="${modulo.jar.file.client}" manifest="${sourceNuevoEjbClient}/${gvalue.meta.inf}/${gvalue.manifest.mf}">
					<fileset dir="${classes.dir}" excludes="${gvalue.pattern.ejb.server}" includes="${gvalue.pattern.ejb.client},${gvalue.deploy.recurso.ejb.client},${gvalue.fuentes.java}">
					</fileset>
				</jar>

				<copy todir="${gvalue.app.lib}" file="${modulo.jar.file.client}">
				</copy>
			</then>
			<else>
				<echo message="No existe proyecto cliente" />
				<jar destfile="${modulo.jar.file.server}" manifest="${sourceNuevoEjbServer}/${gvalue.meta.inf}/${gvalue.manifest.mf}">
					<fileset dir="${classes.dir}" includes="${gvalue.pattern.ejb.server},${gvalue.deploy.recurso.ejb.server},${gvalue.pattern.ejb.client},,${gvalue.deploy.recurso.ejb.client},${gvalue.fuentes.java}">
					</fileset>
				</jar>

				<!-- Busca el nombre del jar del Ejb Client-->
				<antcallback target="obtieneNombreEjbClient" return="valor.modulo.jar.file.client" />

				<jar destfile="${valor.modulo.jar.file.client}">
					<fileset dir="${classes.dir}" excludes="${gvalue.pattern.ejb.server}" includes="${gvalue.pattern.ejb.client},${gvalue.fuentes.java}">
					</fileset>
				</jar>

				<copy todir="${gvalue.app.lib}" file="${valor.modulo.jar.file.client}">
				</copy>
			</else>
		</if>

	</target>


	<!-- Setea el nombre para el Ejb client -->
	<target name="obtieneNombreEjbClient">
		<echo>existePropiedadEjbClientName...</echo>

		<!-- Verifica si tiene una propiedad xxx.Cliente.name -->
		<condition property="tiene.propiedad.client.name" value="${gvalue.SI}" else="${gvalue.NO}">
			<and>
				<isset property="${nombre.modulo}${gvalue.Client.name}" />
			</and>
		</condition>
		<echo>
			Existe propiedad de Proyecto [${nombre.modulo}${gvalue.Client.name}]
		</echo>
		<if>
			<equals arg1="${tiene.propiedad.client.name}" arg2="${gvalue.SI}" />
			<then>
				<echo message="Proyecto tiene propiedad seteada" />
				<propertycopy name="propiedad.proyecto" from="${nombre.modulo}${gvalue.Client.name}" override="true" />
				<echo>
					Valor de propiedad proyecto [${propiedad.proyecto}]
				</echo>
				<var name="valor.modulo.jar.file.client" value="${lib}/${propiedad.proyecto}" />
			</then>
			<else>
				<echo message="Proyecto no tiene propiedad seteada" />
				<var name="valor.modulo.jar.file.client" value="${modulo.jar.file.client}" />
			</else>
		</if>
		<echo>
			Nombre del jar del Ejb Client generado [${valor.modulo.jar.file.client}]
		</echo>
	</target>


	<!-- Copia fuentes java -->
	<target name="CopiarFuentesJava">
		<echo>CopiarFuentesJava [${gvalue.copia.fuentes.java}]</echo>
		<if>
			<equals arg1="${gvalue.copia.fuentes.java}" arg2="${gvalue.SI}" />
			<then>
				<echo>Copiando Fuentes java...</echo>
				<!-- Verifica si tiene proyecto cliente o no-->
				<antcall target="CopiarRecursos">
					<param name="value.param.recursos" value="${gvalue.fuentes.java}" />
					<param name="value.param.from" value="${sourceNuevoEjbServer}" />
					<param name="value.param.to" value="${classes.dir}" />
				</antcall>
				<if>
					<equals arg1="${valor.propiedad.proyecto.cliente}" arg2="${gvalue.SI}" />
					<then>
						<echo message="Existe proyecto cliente" />
						<antcall target="CopiarRecursos">
							<param name="value.param.recursos" value="${gvalue.fuentes.java}" />
							<param name="value.param.from" value="${sourceNuevoEjbClient}" />
							<param name="value.param.to" value="${classes.dir}" />
						</antcall>
					</then>
				</if>
			</then>
		</if>
	</target>

	<!-- Copia Librerias del proyecto al directorio del EAR -->
	<target name="CopiarlibreriasdeProyectoaEAR">
		<echo>Copiando Librerias del proyecto al EAR...</echo>
		<antcall target="CopiarRecursos">
			<param name="value.param.recursos" value="${dependencias.lib.local}" />
			<param name="value.param.from" value="${lib}" />
			<param name="value.param.to" value="${build.modulo.ear}" />
		</antcall>
	</target>

	<!-- Copia Librerias del proyecto al directorio del EAR -->
	<target name="CopiarlibreriasdeAplicacionaEAR">
		<echo>Copiando Librerias del aplicacion al EAR...</echo>
		<antcall target="CopiarRecursos">
			<param name="value.param.recursos" value="${dependencias.lib.app}" />
			<param name="value.param.from" value="${gvalue.app.lib}" />
			<param name="value.param.to" value="${build.modulo.ear}" />
		</antcall>
	</target>

	<!-- Copia Librerias J2EE al directorio del EAR -->
	<target name="CopiarlibreriasdeJ2EEaEAR">
		<echo>Copiando Librerias J2EE al EAR...</echo>
		<antcall target="CopiarRecursos">
			<param name="value.param.recursos" value="${gvalue.J2EE.lib}" />
			<param name="value.param.from" value="${gvalue.lib.j2ee}" />
			<param name="value.param.to" value="${build.modulo.ear}" />
		</antcall>
	</target>
	
	<!-- Copia Librerias J2EE externas al directorio del EAR -->
	<target name="CopiarlibreriasdeJ2EEExternaaEAR">
		<echo>Copiando Librerias J2EE externas al EAR...</echo>
		<!-- Verifica si tiene una propiedad xxx.Cliente.name -->
		<condition property="tiene.propiedad.lib.local.externa" value="${gvalue.SI}" else="${gvalue.NO}">
			<and>
				<isset property="${nombre.modulo}${gvalue.lib.local.externa}" />
			</and>
		</condition>
		<echo>
			Existe propiedad de Proyecto [${nombre.modulo}${gvalue.lib.local.externa}]
		</echo>
		<if>
			<equals arg1="${tiene.propiedad.lib.local.externa}" arg2="${gvalue.SI}" />
			<then>
				<echo message="Proyecto tiene propiedad seteada" />
				<propertycopy name="propiedad.proyecto" from="${nombre.modulo}${gvalue.lib.local.externa}" override="true" />
				<echo>
					Valor de propiedad proyecto [${propiedad.proyecto}]
				</echo>
				<antcall target="CopiarRecursos">
					<param name="value.param.recursos" value="${propiedad.proyecto}" />
					<param name="value.param.from" value="${gvalue.lib.j2ee.externa}" />
					<param name="value.param.to" value="${build.modulo.ear}" />
				</antcall>	
			</then>
			<else>
				<echo message="Proyecto no tiene propiedad seteada de libreria local externa. No se realiza copia a ear" />
			</else>
		</if>	
	</target>	



	<!-- Generacion del EAR -->
	<target name="GenerarEAR">
		<echo>
			Generando archivo EAR [${build.modulo.ear}${gvalue.ear}]...
		</echo>
		<!-- Obtiene el directorio de fuentes de Ear -->
		<antcallback target="obtieneDirectorioFuentesdeEar" return="valor.modulo.ear.content" />

		<ear destfile="${build.modulo.dir.ear}/${nombre.modulo.ear}${gvalue.ear}" appxml="${source.ear}/${valor.modulo.ear.content}/${gvalue.meta.inf}/${gvalue.application.xml}">
			<fileset dir="${build.modulo.ear}" includes="${gvalue.includes.ear}" />
		</ear>
		<copy todir="${gvalue.build.ear}" file="${build.modulo.dir.ear}/${nombre.modulo.ear}${gvalue.ear}">
		</copy>
	</target>

	<!-- Obtiene el directorio de fuentes de Ear -->
	<target name="obtieneDirectorioFuentesdeEar">
		<echo>obtieneDirectorioFuentesdeEar...</echo>
		<!-- Verifica si tiene una propiedad xxx.ear.content -->
		<condition property="tiene.propiedad.ear.content" value="${gvalue.SI}" else="${gvalue.NO}">
			<and>
				<isset property="${nombre.modulo}${gvalue.ear.content}" />
			</and>
		</condition>
		<echo>
			Existe propiedad de Proyecto [${nombre.modulo}${gvalue.ear.content}]
		</echo>
		<if>
			<equals arg1="${tiene.propiedad.ear.content}" arg2="${gvalue.SI}" />
			<then>
				<echo message="Proyecto tiene propiedad seteada" />
				<propertycopy name="propiedad.proyecto" from="${nombre.modulo}${gvalue.ear.content}" override="true" />
				<echo>
					Valor de propiedad proyecto [${propiedad.proyecto}]
				</echo>
				<var name="valor.modulo.ear.content" value="${propiedad.proyecto}" />
			</then>
			<else>
				<echo message="Proyecto no tiene propiedad seteada" />
				<var name="valor.modulo.ear.content" value="${gvalue.EarContent}" />
			</else>
		</if>
		<echo>
			Nombre del directorio donde estan los fuentes del ear [${valor.modulo.ear.content}]
		</echo>
	</target>

	<!-- Generacion del modulo -->
	<target name="GenerarModulo" depends="Inicializar, CrearDirectorios, verificarsiTieneProyectoCliente, Compilar, CopiarRecursosEJBServer, CopiarRecursosEJBCliente, CopiarFuentesJava, GenerarJar, CopiarlibreriasdeProyectoaEAR, CopiarlibreriasdeAplicacionaEAR,CopiarlibreriasdeJ2EEaEAR, CopiarlibreriasdeJ2EEExternaaEAR,GenerarEAR">
	</target>

</project>