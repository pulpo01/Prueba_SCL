<project name="modulo" default="All" basedir=".">

	<!--Autor: Jimmy Alexander LÃ³pez Pereira-->
	<!--Fecha: 01-07-08-->
	<!--Version: 1.0-->

	<!-- Archivo de properties de un componente dado -->
	<property name="param.proyecto.properties" value="${value.proyecto.properties}" />

	<!-- Archivo de propiedades a setear -->
	<property file="general.properties" />
	<property file="system.properties" />
	<property file="componente.properties" />
	<property file="${param.proyecto.properties}" />

	<!--Libreria de utilidades -->

	<import file="${gvalue.plantilla.build.utility}" />

	<!-- Define la tarea ant contribucion,  el jar debe estar en la libreria de ant y de eclipse -->
	<taskdef resource="net/sf/antcontrib/antlib.xml">
		<classpath>
			<pathelement location="/usr/share/java/lib/ant-contrib-version.jar" />
		</classpath>
	</taskdef>



	<!-- Directorio raiz del proyecto o workspace hasta antes de Meta Data de eclipse -->
	<property name="param.value.proyecto.dir" value="${value.proyecto.dir}" />

	<!-- Nombre del modulo a generar -->
	<property name="param.value.modulo" value="${value.modulo}" />

	<!-- Directorio de generacion de clases compiladas -->
	<property name="param.value.build" value="${value.build}" />

	<!-- Directorio de la libreria del proyecto a generar -->
	<property name="param.value.build.lib" value="${value.build.lib}" />

	<!-- Indice de la iteracion de la compilacion -->
	<property name="param.iteracion.compilacion" value="${value.iteracion.compilacion}" />


	<!-- Directorio raiz del proyecto o workspace hasta antes de Meta Data de eclipse -->
	<property name="proyecto.dir" value="${param.value.proyecto.dir}" />


	<!-- Nombre del modulo a generar -->
	<property name="nombre.modulo" value="${param.value.modulo}" />

	<!-- Directorio de fuentes Java -->
	<property name="source" value="${proyecto.dir}/${nombre.modulo}" />

	<!-- Valor de la propiedad del modulo EAR a generar dinamico  'proyecto.ear'-->
	<propertycopy name="nombre.modulo.ear" from="${nombre.modulo}${gvalue.ear}" />


	<!-- Valor del contexto-->
	<propertycopy name="nombre.contexto" from="${nombre.modulo}${gvalue.ws.context}" />

	<!-- Valor del uri-->
	<propertycopy name="nombre.uri" from="${nombre.modulo}${gvalue.ws.uri}" />

	<!-- Nombre del Ejb-->
	<propertycopy name="nombre.ejb" from="${nombre.modulo}${gvalue.ejb.name}" />

	<!-- Nombre del Soap Action del tag Service-->
	<propertycopy name="nombre.soap.action" from="${nombre.modulo}${gvalue.ws.http.soap.action}" />

	<!-- Directorio de fuentes EAR dinamico -->
	<property name="source.ear" value="${proyecto.dir}/${nombre.modulo.ear}" />

	<!-- Directorio de generacion de clases compiladas -->
	<property name="build" value="${param.value.build}" />

	<!-- Directorio de generacion de clases compiladas para un modulo -->
	<property name="build.modulo" value="${build}/${nombre.modulo}" />

	<!-- Directorio TMP-->
	<property name="directorio.tmp" value="${build.modulo}/${gvalue.ws.tmp}" />

	<!-- Directorio EAR del proyecto  -->
	<property name="build.modulo.dir.ear" value="${build}/${gvalue.valor.ear}" />

	<!-- Directorio de generacion de ear dinamico -->
	<property name="build.modulo.ear" value="${build}/${nombre.modulo.ear}" />

	<!-- Directorio de librerias generadas (.jar) en cada compilacion de un modulo -->
	<property name="lib" value="${param.value.build.lib}" />

	<!-- Directorio de libreria J2EE -->
	<property name="lib.j2EE" value="${gvalue.lib.j2ee}" />

	<!-- valor de la propiedad dinamica de libreria local 'proyecto.dependencias.lib.local'  -->
	<propertycopy name="dependencias.lib.local" from="${nombre.modulo}${gvalue.lib.local}" />

	<!-- valor de la propiedad dinamica de libreria de App 'proyecto.dependencias.lib.app'  -->
	<propertycopy name="dependencias.lib.app" from="${nombre.modulo}${gvalue.lib.app}" />

	<!-- Directorio raiz donde comienzan a colocarse las clases de cada modulo -->
	<property name="classes.dir" value="${build.modulo}/${gvalue.deploy.classes}" />

	<!-- Nombre del jar de modulo server generado -->
	<property name="modulo.jar.file.server" value="${lib}/${param.value.modulo}.jar" />

	<!-- Nombre del jar de modulo cliente generado -->
	<property name="modulo.jar.file.client" value="${lib}/${param.value.modulo}${gvalue.deploy.suffix.ejb}.jar" />

	<!-- Librerias especificas de App Server -->
	<property name="app.server.lib" value="${gvalue.lib.servidor}" />

	<!-- Librerias especificas de App de build -->
	<property name="app.lib" value="${gvalue.app.lib}" />
	
	<!-- Librerias especificas de App externas -->
	<property name="app.lib.externa" value="${gvalue.lib.j2ee.externa}" />	

	<path id="classpath">
		<fileset dir="${app.server.lib}">
			<include name="**/*.jar" />
			<include name="**/*.zip" />
		</fileset>
	</path>
	<path id="classpath.general">
		<fileset dir="${lib.j2EE}">
			<include name="**/*.jar" />
			<include name="**/*.zip" />
		</fileset>
		<fileset dir="${app.lib.externa}">
			<include name="**/*.jar" />
			<include name="**/*.zip" />
		</fileset>	
	</path>

	<path id="classpath.lib.generada">
		<fileset dir="${lib}">
			<include name="**/*.jar" />
			<include name="**/*.zip" />
		</fileset>
	</path>

	<path id="classpath.lib.app">
		<fileset dir="${app.lib}">
			<include name="**/*.jar" />
			<include name="**/*.zip" />
		</fileset>
	</path>

	<!-- Tarea para generar el webservice -->
	<taskdef name="servicegen" classname="weblogic.ant.taskdefs.webservices.servicegen.ServiceGenTask">
		<classpath refid="classpath" />
	</taskdef>

	<!-- Tarea para generar el cliente del webservice -->
	<taskdef name="clientgen" classname="weblogic.ant.taskdefs.webservices.clientgen.ClientGenTask">
		<classpath refid="classpath" />
	</taskdef>

	<!-- Tarea para validar la aplicacion J2EE -->
	<taskdef name="wlappc" classname="weblogic.ant.taskdefs.j2ee.Appc">
		<classpath refid="classpath" />
	</taskdef>

	<!-- Tarea para generar los tipos del webservice -->
	<taskdef name="autotype" classname="weblogic.ant.taskdefs.webservices.javaschema.JavaSchema">
		<classpath refid="classpath" />
	</taskdef>

	<target name="clean" depends="Limpiar, GenerarModulo">
	</target>

	<target name="All">
		<if>
			<equals arg1="${param.iteracion.compilacion}" arg2="0" />
			<then>
				<echo message="Iteracion cero se crean todas la estructuras de directorios" />
				<antcall target="clean">
				</antcall>
			</then>
			<else>
				<echo message="Iteracion distinta de cero no se crean todas la estructuras de directorios" />
				<antcall target="GenerarModulo">
				</antcall>
			</else>
		</if>
	</target>

	<!-- Muestra las variables de las properties -->
	<target name="Inicializar">
		<echo>Inicializando variables....</echo>
		<echo>
		Iteracion de compilacion[${param.iteracion.compilacion}]
		</echo>
		<echo>Directorio de Proyecto[${proyecto.dir}]</echo>
		<echo>Directorio de Proyecto EAR[${build.modulo.dir.ear}]</echo>
		<echo>Nombre de Modulo[${nombre.modulo}]</echo>
		<echo>Nombre de Contexto[${nombre.contexto}]</echo>
		<echo>Nombre de Uri[${nombre.uri}]</echo>
		<echo>Nombre de Ejb[${nombre.ejb}]</echo>
		<echo>Directorio temporal del WS[${directorio.tmp}]</echo>
		<echo>Nombre de Modulo EAR[${nombre.modulo.ear}]</echo>
		<echo>Directorio de Fuentes[${source}]</echo>
		<echo>Directorio de Fuentes de EAR[${source.ear}]</echo>
		<echo>Soap Action[${nombre.soap.action}]</echo>


		<echo>
			Directorio de Construccion de modulo[${build.modulo}]
		</echo>

		<echo>
			Directorio de Construccion de modulo EAR[${build.modulo.ear}]
		</echo>
		<echo>
			Directorio de librerias generadas al compilar un modulo[${lib}]
		</echo>
		<echo>
			Nombre del jar de modulo server a generar[${modulo.jar.file.server}]
		</echo>

		<echo>
			Nombre del jar de modulo cliente a generar[${modulo.jar.file.client}]
		</echo>
		<!-- Archivo de properties de un componente dado -->
		<echo>Properties J2EE[${param.proyecto.properties}]</echo>
		<echo>
			Directorio de libreria de aplicacion [${gvalue.app.lib}]
		</echo>
		<echo>
			Librerias de proyecto a generar [${dependencias.lib.local}]
		</echo>
		<echo>
			Librerias de aplicacion a generar [${dependencias.lib.app}]
		</echo>
		<echo>Librerias del App Server[${gvalue.lib.servidor}]</echo>
		<echo>Librerias J2EE[${gvalue.lib.j2ee}]</echo>
		<echo>Librerias J2EE Externa[${gvalue.lib.j2ee.externa}]</echo>
	</target>

	<!-- Borra el directorio build del modulo -->
	<target name="Limpiar">
		<echo>Borrando directorio ${build.modulo}</echo>
		<delete dir="${build.modulo}" />
	</target>

	<!-- Crea la estructura de directorios del modulo -->
	<target name="CrearDirectorios">
		<echo>Creando directorios...</echo>
		<mkdir dir="${build}" />
		<mkdir dir="${lib}" />
		<mkdir dir="${build.modulo}" />
		<mkdir dir="${directorio.tmp}" />
		<mkdir dir="${build.modulo.ear}" />
		<mkdir dir="${build.modulo.dir.ear}" />
		<mkdir dir="${classes.dir}" />
	</target>

	<!-- Setea el valor de si el proyecto EJB se divide en 2 o no -->
	<target name="verificarsiTieneProyectoCliente">
		<echo>Creando directorios...</echo>
		<!-- Verifica si tiene un proyecto cliente -->
		<condition property="tiene.propiedad.proyecto.cliente" value="${gvalue.SI}" else="${gvalue.NO}">
			<and>
				<isset property="${nombre.modulo}${gvalue.Client}" />
			</and>
		</condition>
		<echo>
			Existe propiedad de Proyecto Cliente [${nombre.modulo}${gvalue.Client}]
		</echo>
		<if>
			<equals arg1="${tiene.propiedad.proyecto.cliente}" arg2="${gvalue.SI}" />
			<then>
				<echo message="Proyecto tiene propiedad seteada" />
				<propertycopy name="propiedad.proyecto.cliente" from="${nombre.modulo}${gvalue.Client}" />
				<echo>
					Propiedad proyecto cliente[${propiedad.proyecto.cliente}]
				</echo>
				<if>
					<equals arg1="${propiedad.proyecto.cliente}" arg2="${gvalue.SI}" />
					<then>
						<echo message="Proyecto tiene propiedad seteada a SI" />
						<property name="valor.propiedad.proyecto.cliente" value="${gvalue.SI}" />
					</then>
					<else>
						<echo message="Proyecto tiene propiedad seteada a NO" />
						<property name="valor.propiedad.proyecto.cliente" value="${gvalue.NO}" />
					</else>
				</if>
			</then>
			<else>
				<echo message="Proyecto no tiene propiedad seteada. Se asume que el proyecto tiene un componente cliente" />
				<property name="valor.propiedad.proyecto.cliente" value="${gvalue.SI}" />
			</else>
		</if>
	</target>

	<!-- Compilacion de fuentes -->
	<target name="Compilar">
		<echo>Compilando fuentes...</echo>
		<property name="sourceNuevoEjbServer" value="${source}/${gvalue.deploy.ejb.src}" />
		<echo>Directorio de Fuentes EJB Server[${sourceNuevoEjbServer}]</echo>

		<!-- Verifica si tiene proyecto cliente o no-->
		<if>
			<equals arg1="${valor.propiedad.proyecto.cliente}" arg2="${gvalue.SI}" />
			<then>
				<echo message="Existe proyecto cliente" />
				<property name="sourceNuevoEjbClient" value="${source}${gvalue.deploy.suffix.ejb}/${gvalue.deploy.ejb.src}" />
				<echo>
					Directorio de Fuentes EJB Cliente[${sourceNuevoEjbClient}]
				</echo>
				<javac destdir="${classes.dir}" deprecation="${gvalue.java.compiler.options.deprecation}" debug="${gvalue.java.compiler.options.debug}">
					<src path="${sourceNuevoEjbServer}" />
					<src path="${sourceNuevoEjbClient}" />
					<classpath refid="classpath" />
					<classpath refid="classpath.general" />
					<classpath refid="classpath.lib.generada" />
					<classpath refid="classpath.lib.app" />
				</javac>
			</then>
			<else>
				<echo message="No existe proyecto cliente" />
				<javac destdir="${classes.dir}" deprecation="${gvalue.java.compiler.options.deprecation}" debug="${gvalue.java.compiler.options.debug}">
					<src path="${sourceNuevoEjbServer}" />
					<classpath refid="classpath" />
					<classpath refid="classpath.general" />
					<classpath refid="classpath.lib.generada" />
					<classpath refid="classpath.lib.app" />
				</javac>
			</else>
		</if>
	</target>

	<!-- Copia recursos del EJB cliente -->
	<target name="CopiarRecursosEJBCliente">
		<echo>Copiando archivo de recursos del EJB cliente...</echo>
		<!-- Verifica si tiene proyecto cliente o no-->
		<if>
			<equals arg1="${valor.propiedad.proyecto.cliente}" arg2="${gvalue.SI}" />
			<then>
				<echo message="Existe proyecto cliente" />
				<antcall target="CopiarRecursos">
					<param name="value.param.recursos" value="${gvalue.deploy.recurso.ejb.client}" />
					<param name="value.param.from" value="${sourceNuevoEjbClient}" />
					<param name="value.param.to" value="${classes.dir}" />
				</antcall>
			</then>
			<else>
				<echo message="No existe proyecto cliente" />
				<antcall target="CopiarRecursos">
					<param name="value.param.recursos" value="${gvalue.deploy.recurso.ejb.client}" />
					<param name="value.param.from" value="${sourceNuevoEjbServer}" />
					<param name="value.param.to" value="${classes.dir}" />
				</antcall>
			</else>
		</if>
	</target>

	<!-- Copia recursos del EJB server -->
	<target name="CopiarRecursosEJBServer">
		<echo>Copiando archivo de recursos del EJB Server...</echo>
		<antcall target="CopiarRecursos">
			<param name="value.param.recursos" value="${gvalue.deploy.recurso.ejb.server}" />
			<param name="value.param.from" value="${sourceNuevoEjbServer}" />
			<param name="value.param.to" value="${classes.dir}" />
		</antcall>
	</target>


	<!-- Generacion del jar -->
	<target name="GenerarJar">
		<echo>Generando archivo EJB Server [${modulo.jar.file.server}]...</echo>

		<!-- Verifica si tiene proyecto cliente o no-->
		<if>
			<equals arg1="${valor.propiedad.proyecto.cliente}" arg2="${gvalue.SI}" />
			<then>
				<echo message="Existe proyecto cliente" />
				<jar destfile="${modulo.jar.file.server}" manifest="${sourceNuevoEjbClient}/${gvalue.meta.inf}/${gvalue.manifest.mf}" filesetmanifest="merge">
					<fileset dir="${classes.dir}" includes="${gvalue.pattern.ejb.client},${gvalue.deploy.recurso.ejb.server},${gvalue.deploy.recurso.ejb.client},${gvalue.fuentes.java}" excludes="${gvalue.deploy.recurso.ws.server}">
					</fileset>
				</jar>
			</then>
			<else>
				<echo message="No existe proyecto cliente" />
				<echo>sourceNuevoEjbServer [${sourceNuevoEjbServer}]...</echo>
				<jar destfile="${modulo.jar.file.server}" manifest="${sourceNuevoEjbServer}/${gvalue.meta.inf}/${gvalue.manifest.mf}" filesetmanifest="merge">
					<fileset dir="${classes.dir}" includes="${gvalue.pattern.ejb.client},${gvalue.deploy.recurso.ejb.server},${gvalue.deploy.recurso.ejb.client},${gvalue.fuentes.java}" excludes="${gvalue.deploy.recurso.ws.server}">
					</fileset>
				</jar>
			</else>
		</if>


		<copy todir="${directorio.tmp}" file="${modulo.jar.file.server}">
		</copy>

		<echo>Validando la estructura del EJB jar generado...</echo>
		<!-- Validando la estructura del EJB jar generado -->
		<wlappc source="${modulo.jar.file.server}">
			<classpath refid="classpath" />
			<classpath refid="classpath.general" />
			<classpath refid="classpath.lib.generada" />
			<classpath refid="classpath.lib.app" />
		</wlappc>
	</target>
	
	
	<!-- Copia fuentes java -->
	<target name="CopiarFuentesJava">
		<echo>CopiarFuentesJava [${gvalue.copia.fuentes.java}]</echo>
		<if>
			<equals arg1="${gvalue.copia.fuentes.java}" arg2="${gvalue.SI}" />
			<then>
				<echo>Copiando Fuentes java...</echo>
				<!-- Verifica si tiene proyecto cliente o no-->
				<antcall target="CopiarRecursos">
					<param name="value.param.recursos" value="${gvalue.fuentes.java}" />
					<param name="value.param.from" value="${sourceNuevoEjbServer}" />
					<param name="value.param.to" value="${classes.dir}" />
				</antcall>
				<if>
					<equals arg1="${valor.propiedad.proyecto.cliente}" arg2="${gvalue.SI}" />
					<then>
						<echo message="Existe proyecto cliente" />
						<antcall target="CopiarRecursos">
							<param name="value.param.recursos" value="${gvalue.fuentes.java}" />
							<param name="value.param.from" value="${sourceNuevoEjbClient}" />
							<param name="value.param.to" value="${classes.dir}" />
						</antcall>
					</then>
				</if>
			</then>
		</if>
	</target>	

	<!-- Copia Librerias del proyecto al directorio del EAR -->
	<target name="CopiarlibreriasdeProyectoaEAR">
		<echo>Copiando Librerias del proyecto al EAR...</echo>
		<antcall target="CopiarRecursos">
			<param name="value.param.recursos" value="${dependencias.lib.local}" />
			<param name="value.param.from" value="${lib}" />
			<param name="value.param.to" value="${directorio.base.tmp}" />
		</antcall>
	</target>

	<!-- Copia Librerias del proyecto al directorio del EAR -->
	<target name="CopiarlibreriasdeAplicacionaEAR">
		<echo>Copiando Librerias del aplicacion al EAR...</echo>
		<antcall target="CopiarRecursos">
			<param name="value.param.recursos" value="${dependencias.lib.app}" />
			<param name="value.param.from" value="${gvalue.app.lib}" />
			<param name="value.param.to" value="${directorio.base.tmp}" />
		</antcall>
	</target>

	<!-- Copia Librerias J2EE al directorio del EAR -->
	<target name="CopiarlibreriasdeJ2EEaEAR">
		<echo>Copiando Librerias J2EE al EAR...</echo>
		<antcall target="CopiarRecursos">
			<param name="value.param.recursos" value="${gvalue.J2EE.lib}" />
			<param name="value.param.from" value="${gvalue.lib.j2ee}" />
			<param name="value.param.to" value="${directorio.base.tmp}" />
		</antcall>
	</target>
	
	
	<!-- Copia Librerias J2EE externas al directorio del EAR -->
	<target name="CopiarlibreriasdeJ2EEExternaaEAR">
		<echo>Copiando Librerias J2EE externas al EAR...</echo>
		<!-- Verifica si tiene una propiedad xxx.Cliente.name -->
		<condition property="tiene.propiedad.lib.local.externa" value="${gvalue.SI}" else="${gvalue.NO}">
			<and>
				<isset property="${nombre.modulo}${gvalue.lib.local.externa}" />
			</and>
		</condition>
		<echo>
			Existe propiedad de Proyecto [${nombre.modulo}${gvalue.lib.local.externa}]
		</echo>
		<if>
			<equals arg1="${tiene.propiedad.lib.local.externa}" arg2="${gvalue.SI}" />
			<then>
				<echo message="Proyecto tiene propiedad seteada" />
				<propertycopy name="propiedad.proyecto" from="${nombre.modulo}${gvalue.lib.local.externa}" override="true" />
				<echo>
					Valor de propiedad proyecto [${propiedad.proyecto}]
				</echo>
				<antcall target="CopiarRecursos">
					<param name="value.param.recursos" value="${propiedad.proyecto}" />
					<param name="value.param.from" value="${gvalue.lib.j2ee.externa}" />
					<param name="value.param.to" value="${directorio.base.tmp}" />
				</antcall>	
			</then>
			<else>
				<echo message="Proyecto no tiene propiedad seteada de libreria local externa. No se realiza copia a ear" />
			</else>
		</if>	
	</target>		


	<!-- Generacion del EAR -->
	<target name="GenerarEAR">
		<echo>Generando archivo EAR [${build.modulo.ear}${gvalue.ear}]...</echo>
		<zip destfile="${directorio.base}/${nombre.modulo.ear}${gvalue.ear}" basedir="${directorio.base.tmp}">
		</zip>
		<copy todir="${build.modulo.dir.ear}" file="${directorio.base}/${nombre.modulo.ear}${gvalue.ear}">
		</copy>
		<copy todir="${gvalue.build.ear}" file="${directorio.base}/${nombre.modulo.ear}${gvalue.ear}">
		</copy>
	</target>

	<!-- Generacion del modulo -->
	<target name="GenerarModulo" depends="Inicializar, CrearDirectorios, verificarsiTieneProyectoCliente, Compilar, CopiarRecursosEJBServer, CopiarRecursosEJBCliente, CopiarFuentesJava, GenerarJar, GenerarWS,  CopiarlibreriasdeProyectoaEAR, CopiarlibreriasdeAplicacionaEAR,CopiarlibreriasdeJ2EEaEAR, CopiarlibreriasdeJ2EEExternaaEAR, GenerarEAR">
	</target>

	<!-- Generacion del xml de configuracion -->
	<target name="GenerarXmlWS">
		<echo>Generando Xml de configuracion del webservice... </echo>
		<property name="directorio.base" value="${basedir}/${build.modulo}" />
		<echo>Directorio Base ${directorio.base} </echo>
		<property name="directorio.base.tmp" value="${directorio.base}/${gvalue.ws.tmp}" />
		<echo>Directorio Base Temporal ${directorio.base.tmp} </echo>
		<echoxml file="${build.modulo}/${gvalue.lista.proyectos.ws.config.xml}">
			<web-service>
				<display-name>Web Services ${nombre.modulo.ear}</display-name>
				<destination-path>${directorio.base.tmp}/${nombre.modulo.ear}${gvalue.ear}</destination-path>
				<temporary-directory>${directorio.base.tmp}</temporary-directory>
				<context>${nombre.contexto}</context>
				<!-- generate the ws -->
				<stateless-session-ejb-service>
					<path>${directorio.base.tmp}</path>
					<uri>${nombre.uri}</uri>
					<ejb-name>${nombre.ejb}</ejb-name>
				</stateless-session-ejb-service>
				<!-- generate the wsdl -->
				<wsdl-gen>
					<wsdl-dir>${directorio.base.tmp}/${gvalue.ws.wsdl}</wsdl-dir>
					<!-- over-write a pregenerated wsdl , turn it 'false' to use the pregenerated wsdl-->
					<option name="force">${gvalue.ws.force}</option>
					<option name="httpServerURL">${nombre.soap.action}</option>
				</wsdl-gen>
				<!-- generate the proxy -->
				<proxy-gen>
					<proxy-dir>${directorio.base.tmp}/${gvalue.ws.proxy}</proxy-dir>
					<option name="include-source">gvalue.ws.include-source</option>
				</proxy-gen>

			</web-service>
		</echoxml>
	</target>

	<!-- Generacion del Webservice -->
	<target name="GenerarWS">
		<property name="directorio.base" value="${basedir}/${build.modulo}" />
		<echo>Directorio Base ${directorio.base} </echo>
		<property name="directorio.base.tmp" value="${directorio.base}/${gvalue.ws.tmp}" />
		<echo>Directorio Base Temporal ${directorio.base.tmp} </echo>

		<servicegen destEar="${directorio.base.tmp}" warName="${nombre.modulo}${gvalue.web.war}">
			<service ejbJar="${modulo.jar.file.server}" targetNamespace="${nombre.soap.action}" serviceName="${nombre.modulo}" serviceURI="${nombre.uri}" generateTypes="True" expandMethods="True">
				<client packageName="${gvalue.package.com}" clientJarName="${nombre.modulo}${gvalue.Client}${gvalue.jar}" />
			</service>
			<classpath refid="classpath" />
			<classpath refid="classpath.general" />
			<classpath refid="classpath.lib.generada" />
			<classpath refid="classpath.lib.app" />
		</servicegen>
	</target>
</project>