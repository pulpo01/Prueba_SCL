//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : P-TMM-08004
//  @ File Name : RateUsageRecordsSrv.java
//  @ Date : 09/09/2008
//  @ Author : hsegura
//
//

package com.tmmas.scl.operation.smo.ssir.RateUsageRecordsSrv.srv;

import java.math.*;
import java.sql.SQLException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.commons.configuration.CompositeConfiguration;
import org.apache.log4j.Logger;

import com.tmmas.cl.framework20.util.UtilLog;
import com.tmmas.cl.framework20.util.UtilProperty;
import com.tmmas.scl.framework.CustomerDomain.CustomerABE.dto.ClienteDTO;
import com.tmmas.scl.framework.CustomerDomain.CustomerABE.dto.OficinaDTO;
import com.tmmas.scl.framework.CustomerDomain.CustomerBillABE.dto.CabeceraDocumentoDTO;
import com.tmmas.scl.framework.CustomerDomain.CustomerBillABE.dto.CargoDTO;
import com.tmmas.scl.framework.CustomerDomain.CustomerBillABE.dto.DescuentoDTO;
import com.tmmas.scl.framework.CustomerDomain.CustomerBillABE.dto.DetalleDocumentoDTO;
import com.tmmas.scl.framework.CustomerDomain.CustomerBillABE.dto.EjecutarFacturaDTO;
import com.tmmas.scl.framework.CustomerDomain.CustomerBillABE.dto.FacturaMiscelaneaEntradaDTO;
import com.tmmas.scl.framework.CustomerDomain.CustomerBillABE.dto.FacturaMiscelaneaSalidaDTO;
import com.tmmas.scl.framework.CustomerDomain.CustomerBillABE.dto.MensajeDoctoDTO;
import com.tmmas.scl.framework.CustomerDomain.CustomerBillABE.dto.ProcesoDTO;
import com.tmmas.scl.framework.CustomerDomain.CustomerBillABE.dto.RegistrarCargoDTO;
import com.tmmas.scl.framework.CustomerDomain.exception.RateUsageRecordsException;
import com.tmmas.scl.framework.Sistema.bo.Interface.ConfiguracionSistemaBOIT;
import com.tmmas.scl.framework.Sistema.bo.Interface.UsuarioBOIT;
import com.tmmas.scl.framework.Sistema.dto.UsuarioQueryDTO;
import com.tmmas.scl.framework.Sistema.manager.FactorySistema;
import com.tmmas.scl.framework.customerdomainfacturacion.CustomerABE.bo.Interface.ClienteBOIT;
import com.tmmas.scl.framework.customerdomainfacturacion.CustomerABE.bo.Interface.OficinaBOIT;
import com.tmmas.scl.framework.customerdomainfacturacion.CustomerBillABE.bo.Interface.CentroEmisorBOIT;
import com.tmmas.scl.framework.customerdomainfacturacion.CustomerBillABE.bo.Interface.CuotaBOIT;
import com.tmmas.scl.framework.customerdomainfacturacion.CustomerBillABE.bo.Interface.FacturadorBOIT;
import com.tmmas.scl.framework.customerdomainfacturacion.CustomerBillABE.bo.Interface.MensajeDoctoBOIT;
import com.tmmas.scl.framework.customerdomainfacturacion.manager.FactoryCustomerABE;
import com.tmmas.scl.framework.customerdomainfacturacion.manager.FactoryCustomerBillABE;
import com.tmmas.scl.operation.smo.ssir.RateUsageRecordsSrv.Interface.RateUsageRecordsSrvIT;

public class RateUsageRecordsSrv implements RateUsageRecordsSrvIT {
	private static Logger logger = Logger.getLogger(RateUsageRecordsSrv.class);

	private CompositeConfiguration config;

	// private static FactorySistema factorySistema = new FactorySistema();

	private UsuarioBOIT usuarioBO = new FactorySistema().getInstance()
			.getUsuarioBO();

	private OficinaBOIT oficinaBO = new FactoryCustomerABE().getInstance()
			.getOficinaBO();

	private ClienteBOIT clienteBO = new FactoryCustomerABE().getInstance()
			.getClienteBO();

	private CuotaBOIT cuotaBO = new FactoryCustomerBillABE().getInstance()
			.getCuotaBO();

	private CentroEmisorBOIT centroEmisorBO = new FactoryCustomerBillABE()
			.getInstance().getCentroEmisorBO();

	private MensajeDoctoBOIT mensajeDoctoBOIT = new FactoryCustomerBillABE()
			.getInstance().getMensajeDoctoBO();

	private ConfiguracionSistemaBOIT configuracionSistemaBO = new FactorySistema()
			.getConfiguracionSistemaBO();

	private FacturadorBOIT facturadorBO = new FactoryCustomerBillABE()
			.getInstance().getFacturadorBO();

	public RateUsageRecordsSrv() {
		super();
		config = UtilProperty
				.getConfiguration("ServicioFacturacionWS.properties",
						"com/tmmas/scl/framework/properties/archivorecursos.properties");
	}

	/**
	 * Metodo COMANDANTE, es quien maneja el preceso de feneracion de factura,
	 * llamando a las funciones requeridos.
	 */
	public FacturaMiscelaneaSalidaDTO generarFacturaMiscelanea(
			FacturaMiscelaneaEntradaDTO facturaMiscelaneaEntradaDTO)
			throws RateUsageRecordsException {
		UtilLog.setLog(config.getString("RateUsageRecordsSrv.log"));
		logger.debug("generarFacturaMiscelanea(CUATRO):start");
		// return null;
		String fechaSistema = null, letra = null, numDecimal = null, sepMilesMonto = null, sepDecimalMonto = null, sepDecimalOracle = null, secuenciaFactura = null, cantidadDecimales = null, numProceso = null, secMensaje = null, zonaImpositiva = null, centroEmisor = null, cod_modgener = null, codDcto = null, codMoneFact = null;

		FacturaMiscelaneaSalidaDTO facturaMiscelaneaSalidaDTO = new FacturaMiscelaneaSalidaDTO();

		ClienteDTO clienteDTO = null;
		OficinaDTO oficinaDTO = null;

		// obtener parametros generales para insercion
		fechaSistema = configuracionSistemaBO.obtenerFechaSistema();

		clienteDTO = clienteBO.obtenerDatosCliente(facturaMiscelaneaEntradaDTO
				.getCabeceraDocumento().getCodigoCliente(), fechaSistema);
		oficinaDTO = oficinaBO.obtenerOficina(facturaMiscelaneaEntradaDTO
				.getUsuarioSistema());
		if (oficinaDTO.getCodOficina() != null) {
			zonaImpositiva = usuarioBO.obtenerZonaImpositiva(oficinaDTO
					.getCodOficina());
		} else {

			facturaMiscelaneaSalidaDTO = putErrors(config
					.getString("cod_error_oficinausuario"), config
					.getString("msg_error_oficinausuario"));
			logger.debug("generarFacturaMiscelanea(CINCO):end");
			return facturaMiscelaneaSalidaDTO;
		}
		try {//JHJ 26102012
			numDecimal = configuracionSistemaBO.obtenerParamGral("NUM_DECIMAL");
			sepMilesMonto = configuracionSistemaBO
					.obtenerParamGral("SEP_MILES_MONTOS");
			sepDecimalMonto = configuracionSistemaBO
					.obtenerParamGral("SEP_DECIMALES_MONTOS");
			sepDecimalOracle = configuracionSistemaBO
					.obtenerParamGral("SEP_DECIMALES_ORACLE");
			// recupera la cantidad de numeros decimales permitidos para la
			// inserción
			cantidadDecimales = configuracionSistemaBO
					.obtenerParamGral("NUM_DECIMAL_FACT");

		} catch (RateUsageRecordsException e) {

			logger.debug("RateUsageRecordsException ", e);
			throw new RateUsageRecordsException(config
					.getString("cod_error_obtenerparamgener"), e
					.getCodigoEvento(), config
					.getString("msg_error_obtenerparamgener"));

		}
		facturaMiscelaneaSalidaDTO = validarParametrosNegocio(
				facturaMiscelaneaEntradaDTO, clienteDTO, fechaSistema,
				zonaImpositiva, numDecimal, sepDecimalOracle);

		// validaciones exitosas
		if (facturaMiscelaneaSalidaDTO != null
				&& facturaMiscelaneaSalidaDTO.getSnError() == null) {
			// obtiene parametros para la insercion de proceso de cargo y
			try {
				codDcto = configuracionSistemaBO
						.obtenerDatosGener("SN_COD_MISCELA");
				codMoneFact = configuracionSistemaBO
						.obtenerDatosGener("COD_MONEFACT");
			} catch (RateUsageRecordsException e) {
				logger.debug("RateUsageRecordsException ", e);
				throw new RateUsageRecordsException(config
						.getString("cod_error_obtenerdatogener"), e
						.getCodigoEvento(), config
						.getString("msg_error_obtenerdatogener"));

			}
			letra = configuracionSistemaBO.obtenerLetra(codDcto, clienteDTO
					.getCodCatImpositiva());

			secuenciaFactura = configuracionSistemaBO.obtenerSecuencia(config
					.getString("nomsecuenciafactura"));
			numProceso = configuracionSistemaBO.obtenerSecuencia(config
					.getString("nomsecuenciaproceso"));
			/*
			 * secMensaje = configuracionSistemaBO.obtenerSecuencia(config
			 * .getString("nomsecuenciamensaje"));
			 */

			centroEmisor = centroEmisorBO.obtenerCentroEmisor(oficinaDTO
					.getCodOficina(), codDcto);

			cod_modgener = configuracionSistemaBO.obtenerModGener(clienteDTO
					.getCodCategoria(), facturaMiscelaneaEntradaDTO
					.getModalidadCobro(), centroEmisor, codDcto);

			// registrar mensaje

			MensajeDoctoDTO mensajeDoctoDTO = new MensajeDoctoDTO();
			if (facturaMiscelaneaEntradaDTO.getTipoGlosa() != null
					&& !facturaMiscelaneaEntradaDTO.getTipoGlosa().trim()
							.equals("")) {

				mensajeDoctoDTO = registrarMensajeDTO(
						facturaMiscelaneaEntradaDTO, clienteDTO.getIdioma(),
						secMensaje, numProceso, fechaSistema);
				// resgistrar mensaje
				try {
					if (!mensajeDoctoBOIT.registrarMensaje(mensajeDoctoDTO)) {
						return putErrors(config
								.getString("cod_error_glosaregistrar"), config
								.getString("msg_error_glosaregistrar"));
					}
				} catch (RateUsageRecordsException e) {
					if (e.getCodigo() != null
							&& e.getCodigo().trim().equalsIgnoreCase("1")) {
						return putErrors(config
								.getString("cod_error_mensajenoexiste"), config
								.getString("msg_error_mensajenoexiste"));
					}

				}
			}

			// registrar proceso
			facturadorBO.registrarProceso(this.prapararDTORegistrarProceso(
					facturaMiscelaneaEntradaDTO, fechaSistema, letra,
					secuenciaFactura, numProceso, centroEmisor, codDcto,
					oficinaDTO.getCodVendedor()));

			// registrar los cargos
			facturadorBO.registrarCargo(this.prapararDTORegistrarCargo(
					facturaMiscelaneaEntradaDTO, oficinaDTO, numProceso,
					fechaSistema, clienteDTO.getCodCatImpositiva(),
					codMoneFact, cantidadDecimales));

			// ejecuta la factur, graba en la fa_intefaz
			facturadorBO.ejecutarFactura(this.prapararDTOEjecutarFactura(
					facturaMiscelaneaEntradaDTO, numProceso, cod_modgener,
					codDcto, fechaSistema));
			facturaMiscelaneaSalidaDTO.setNumeroProceso(numProceso);
			facturaMiscelaneaSalidaDTO
					.setMontoFacturaNeto(calcularMontoFacturado(facturaMiscelaneaEntradaDTO));
			// return facturaMiscelaneaSalidaDTO;
		}
		logger.debug("generarFacturaMiscelanea(SEIS):end");
		return facturaMiscelaneaSalidaDTO;
	}

	/**
	 * 
	 * @param facturaMiscelaneaEntradaDTO
	 * @param clienteDTO
	 * @param fechaSistema
	 * @param zonaImpositiva
	 * @return
	 * @throws RateUsageRecordsException
	 */
	private FacturaMiscelaneaSalidaDTO validarParametrosNegocio(
			FacturaMiscelaneaEntradaDTO facturaMiscelaneaEntradaDTO,
			ClienteDTO clienteDTO, String fechaSistema, String zonaImpositiva,
			String numDecimal, String sepDecimalMonto)
			throws RateUsageRecordsException {

		FacturaMiscelaneaSalidaDTO facturaMiscelaneaSalidaDTO = new FacturaMiscelaneaSalidaDTO();
		CabeceraDocumentoDTO cabeceraDocumentoDTO = facturaMiscelaneaEntradaDTO
				.getCabeceraDocumento();
		DetalleDocumentoDTO detalleDocumentoDTO = facturaMiscelaneaEntradaDTO
				.getDetalleDocumento();
		CargoDTO[] listConceptosDTO = detalleDocumentoDTO.getListCargoDTO();
		String modalidadCobro = facturaMiscelaneaEntradaDTO.getModalidadCobro();
		UsuarioQueryDTO usuarioQueryDTO = new UsuarioQueryDTO();
		usuarioQueryDTO.setNomUsuario(facturaMiscelaneaEntradaDTO
				.getUsuarioSistema());
		long numeroCuotas = Long.parseLong(facturaMiscelaneaEntradaDTO
				.getNumeroCuotas());

		// verifica la versión del programa
		if (!configuracionSistemaBO.verificarVersion()) {
			return putErrors(config.getString("cod_error_version"), config
					.getString("msg_error_version"));
		}

		// validación del usuario
		if (!usuarioBO.validarUsuario(usuarioQueryDTO)) {
			return putErrors(config.getString("cod_error_usuarioEjecutor"),
					config.getString("msg_error_usuarioEjecutor"));
		}

		if (!this.validarCliente(clienteDTO)) {
			return putErrors(config.getString("cod_error_codCliente"), config
					.getString("msg_error_codCliente"));
		}
		// modalidadCobrocontado = 1 modalidadCobroregalo = 5
		if (!modalidadCobro.equalsIgnoreCase(config
				.getString("modalidadCobrocontado"))
				&& !modalidadCobro.equalsIgnoreCase(config
						.getString("modalidadCobroregalo"))) {

			if (!cuotaBO.validarCantidadCuotas(numeroCuotas)) {
				return putErrors(config.getString("cod_error_numeroCuotas"),
						config.getString("msg_error_numeroCuotas"));

			}
		}

		if (!facturadorBO
				.validarMoneda(facturaMiscelaneaEntradaDTO.getMoneda())) {
			return putErrors(config
					.getString("cod_error_monedaConceptosDocumentos"), config
					.getString("msg_error_monedaConceptosDocumentos"));

		}

		if (!facturadorBO.validarTipoDocumento(facturaMiscelaneaEntradaDTO
				.getTipoDocumento(), clienteDTO)) {
			return putErrors(config.getString("cod_error_tipoDocumento"),
					config.getString("msg_error_tipoDocumento"));
		}

		if (!configuracionSistemaBO
				.validarFechaVencimiento(cabeceraDocumentoDTO
						.getFechaVencimiento())) {
			return putErrors(config.getString("cod_error_fechaVencimiento"),
					config.getString("msg_error_fechaVencimiento"));
		}

		// valida los cargos...
		CargoDTO cargoDTO = null;
		boolean afectoinicial = false, afectoActual = false;

		if (listConceptosDTO.length <= Integer.parseInt(config
				.getString("cantidadconceptos"))) {
			for (int i = 0; i < listConceptosDTO.length; i++) {

				cargoDTO = (CargoDTO) listConceptosDTO[i];
				// valida formato monto
				if (!validaFormatoDecimales(cargoDTO.getImporteUnitario(),
						numDecimal, sepDecimalMonto)) {
					
					logger.debug("ENTRO A VALIDAR cod_error_formatomontocargo"); 
					return putErrors(config
							.getString("cod_error_formatomontocargo"), config
							.getString("msg_error_formatomontocargo"));
				}
				// cod_error_formatomontodescuento

				DescuentoDTO[] listDescuentoDTO = cargoDTO.getDescuentoDTO();
				if (listDescuentoDTO != null) {
					if (listDescuentoDTO.length > 1) {
						return putErrors(config
								.getString("cod_error_descuentos"), config
								.getString("msg_error_descuentos"));
					} else

					if (listDescuentoDTO.length > 0) {
						// valida si el descuento corresponde al cargo
						if (!facturadorBO.validarConceptoDescuento(cargoDTO
								.getCodigoConceptoCargo(), listDescuentoDTO[0]
								.getCodigoConceptoDescuento())) {
							return putErrors(
									config
											.getString("cod_error_cargodescuento"),
									config
											.getString("msg_error_cargodescuento"));
						}

						// valida formato monto descuento
						if (!validaFormatoDecimales(listDescuentoDTO[0]
								.getImporteDescuento(), numDecimal,
								sepDecimalMonto)) {
							return putErrors(
									config
											.getString("cod_error_formatomontodescuento"),
									config
											.getString("msg_error_formatomontodescuento"));
						}
						// valida descuento en cuanto y cantidad minima maxima
						if (!validaTipoMontoPorcentaje(listDescuentoDTO[0]
								.getTipoMonto(), listDescuentoDTO[0]
								.getImporteDescuento())) {
							return putErrors(
									config
											.getString("cod_error_formatomontodescuento"),
									config
											.getString("msg_error_formatomontodescuento"));
						}
						if (listDescuentoDTO[0].getTipoMonto() != null
								&& listDescuentoDTO[0].getTipoMonto().trim()
										.equalsIgnoreCase("M")) {
							if (!validaDescuentoCargo(listDescuentoDTO[0]
									.getImporteDescuento(), cargoDTO
									.getImporteUnitario(), cargoDTO
									.getCantidad())) {
								return putErrors(
										config
												.getString("cod_error_cantidaddescuento"),
										config
												.getString("msg_error_cantidaddescuento"));

							}
						} else if (listDescuentoDTO[0].getImporteDescuento() != null
								&& (Double.parseDouble(listDescuentoDTO[0]
										.getImporteDescuento().trim()) < 0 || Double
										.parseDouble(listDescuentoDTO[0]
												.getImporteDescuento().trim()) > 1)) {
							return putErrors(
									config
											.getString("cod_error_descuentoporcentaje"),
									config
											.getString("msg_error_descuentoporcentaje"));

						}

					}

				}
				// validar cada cargo
				if (!facturadorBO.validarCargo(cargoDTO)) {
					return putErrors(config
							.getString("cod_error_cargoinvalido"), config
							.getString("msg_error_cargoinvalido"));
				}

				afectoActual = facturadorBO.validarConceptoAfecto(cargoDTO
						.getCodigoConceptoCargo(), clienteDTO
						.getCodCatImpositiva(), zonaImpositiva, fechaSistema);
				if (i == 0) {
					afectoinicial = afectoActual;

				} else {
					if (afectoinicial != afectoActual) {
						return putErrors(config
								.getString("cod_error_cargoinvalido"), config
								.getString("msg_error_cargoinvalido")
								+ " "
								+ cargoDTO.getCodigoConceptoCargo()
								+ " afecto = "
								+ afectoActual
								+ " y el resto de conceptos afecto = "
								+ afectoinicial);
					}

				}
			}
		} else {
			return putErrors(config.getString("cod_error_cantidad"), config
					.getString("msg_error_cantidad")
					+ config.getString("cantidadconceptos"));
		}

		return facturaMiscelaneaSalidaDTO;

	}

	/**
	 * 
	 * @param facturaMiscelaneaEntradaDTO
	 * @return
	 */

	private String calcularMontoFacturado(
			FacturaMiscelaneaEntradaDTO facturaMiscelaneaEntradaDTO) {
		logger.debug("calcularMontoFacturado():start");
		double cantidad = 0;
		double importeUnitario = 0;
		double importeDescuento = 0;
		double monto = 0;

		String tipoMonto = "";
		DescuentoDTO[] descuentoDTO;
		CargoDTO[] cargoDTO;
try{
		DetalleDocumentoDTO detalleDocumentoDTO = facturaMiscelaneaEntradaDTO
				.getDetalleDocumento();

		cargoDTO = detalleDocumentoDTO.getListCargoDTO();
		for (int i = 0; i < cargoDTO.length; i++) {
			descuentoDTO = cargoDTO[i].getDescuentoDTO();

			cantidad = Double.parseDouble(cargoDTO[i].getCantidad().trim());
			importeUnitario = Double.parseDouble(cargoDTO[i]
					.getImporteUnitario().trim());

			// for (int j = 0; j < descuentoDTO.length; j++) {
			// tipoMonto = descuentoDTO[j].getTipoMonto();
			logger.debug("Calculo de monto, las formulas son : ");
			logger.debug("Tipo monto descuento 'P' : monto += (cantidad * importeUnitario) - (cantidad	* importeUnitario * importeDescuento)");
			logger.debug("Tipo monto descuento 'M' : monto += (cantidad * importeUnitario) - importeDescuento");
			logger.debug("Sin descuentos           : monto += cantidad * importeUnitario");			
			if (descuentoDTO != null && descuentoDTO.length > 0) {
				tipoMonto = descuentoDTO[0].getTipoMonto();
				importeDescuento = Double.parseDouble(descuentoDTO[0]
						.getImporteDescuento().trim());
				logger.debug("Tipo monto descuento: "+tipoMonto);
				if (tipoMonto != null && "P".equalsIgnoreCase(tipoMonto.trim())) {
					monto += (cantidad * importeUnitario) - (cantidad
							* importeUnitario) * importeDescuento;								
					logger.debug(monto +"+="+ cantidad+"*"+importeUnitario+"-"+cantidad+"*"+importeUnitario+"*"+importeDescuento);
				} else {					
					logger.debug(monto +"+="+ cantidad+"*"+importeUnitario+"-"+importeDescuento);					
					monto += (cantidad * importeUnitario) - importeDescuento;
				}
			} else {
				logger.debug("Sin descuentos: ");				
				logger.debug(monto +"+="+ cantidad+"*"+importeUnitario);				
				//monto += (cantidad * importeUnitario) - importeDescuento;
				monto += cantidad * importeUnitario;
			}
			// }
		}
	} catch (Exception e) {
		logger.debug("error : " + e.getMessage());
		return  "0";
	}
		logger.debug("calcularMontoFacturado():end");
		return String.valueOf(monto);
	}

	private boolean validarCliente(ClienteDTO clienteDTO)
			throws RateUsageRecordsException {

		if (clienteDTO != null && clienteDTO.getCodCategoria() != null
				&& clienteDTO.getCodCatImpositiva() != null
		// && clienteDTO.getCodSubcategoria() != null
		) {
			return true;
		}
		return false;
	}

	/**
	 * setea el codigo de error y el mensaje de error a un DTO de salida
	 * 
	 * @param codError
	 * @param msnError
	 * @return
	 */
	private FacturaMiscelaneaSalidaDTO putErrors(String codError,
			String msnError) {
		logger.debug("putErrors():start");
		FacturaMiscelaneaSalidaDTO facturaMiscelaneaSalidaDTO = new FacturaMiscelaneaSalidaDTO();
		facturaMiscelaneaSalidaDTO.setSnError(codError);
		facturaMiscelaneaSalidaDTO.setSvMensaje(msnError);
		logger.debug("setSnError Encontre JHJ[" + codError + "]");
		logger.debug("setSvMensaje Encontre JHJ [ " + msnError + "]");
		logger.debug("putErrors(Encontre JHJ):end");
		return facturaMiscelaneaSalidaDTO;
	}

	/**
	 * 
	 * @param facturaMiscelaneaEntradaDTO
	 * @param fechaSistema
	 * @param letra
	 * @param secuenciaFactura
	 * @param numProceso
	 * @return
	 * @throws RateUsageRecordsException
	 */
	private ProcesoDTO prapararDTORegistrarProceso(
			FacturaMiscelaneaEntradaDTO facturaMiscelaneaEntradaDTO,
			String fechaSistema, String letra, String secuenciaFactura,
			String numProceso, String centroEmisor, String codDcto,
			String codVendedor) throws RateUsageRecordsException {
		ProcesoDTO procesoDTO = new ProcesoDTO();

		procesoDTO.setNumProceso(Long.parseLong(numProceso)); // EN_NUM_PROCESO

		procesoDTO.setCodTipDocum(Integer.parseInt(codDcto));
		procesoDTO.setCodVenAgente(Long.parseLong(codVendedor));// EN_COD_VENDEDOR_AGENTE
		procesoDTO.setLetraAg(letra);

		procesoDTO.setCodCentremi(Integer.parseInt(centroEmisor));// EN_COD_CENTREMI
		// FA_SISTEMA_PG.RECCENTREMI
		procesoDTO.setNumSecuag(Long.parseLong(secuenciaFactura));// FA_SEQ_MISCELANEA
		procesoDTO.setFecEfectividad(fechaSistema);
		procesoDTO.setNomUsuarora(facturaMiscelaneaEntradaDTO
				.getUsuarioSistema());// EV_NOM_USUARORA USUARIO
		procesoDTO.setIndEstado(0);// EN_IND_ESTADO "0"

		return procesoDTO;
	}

	/**
	 * 
	 * @param facturaMiscelaneaEntradaDTO
	 * @param idiomaCliente
	 * @param secMensaje
	 * @param numProceso
	 * @param fechaSistem
	 * @return
	 */
	private MensajeDoctoDTO registrarMensajeDTO(
			FacturaMiscelaneaEntradaDTO facturaMiscelaneaEntradaDTO,
			String idiomaCliente, String secMensaje, String numProceso,
			String fechaSistema) {
		MensajeDoctoDTO mensajeDoctoDTO = new MensajeDoctoDTO();
		if (facturaMiscelaneaEntradaDTO.getTipoGlosa().trim().equalsIgnoreCase(
				"1")) {
			mensajeDoctoDTO.setCorrMensaje(facturaMiscelaneaEntradaDTO
					.getCabeceraDocumento().getGlosa());
		} else {
			mensajeDoctoDTO.setDescMensTotal(facturaMiscelaneaEntradaDTO
					.getCabeceraDocumento().getGlosa());
			mensajeDoctoDTO.setCodIdioma(idiomaCliente);
			// mensajeDoctoDTO.setCorrMensaje(secMensaje);
		}

		mensajeDoctoDTO.setModalidadCobro(facturaMiscelaneaEntradaDTO
				.getModalidadCobro());
		mensajeDoctoDTO.setNumProceso(numProceso);
		mensajeDoctoDTO.setNomUsuario(facturaMiscelaneaEntradaDTO
				.getUsuarioSistema());
		mensajeDoctoDTO.setFechIngreso(fechaSistema); // llama a
		// registrar
		// mensaje

		return mensajeDoctoDTO;
	}

	/**
	 * 
	 * @param facturaMiscelaneaEntradaDTO
	 * @return
	 * @throws RateUsageRecordsException
	 */
	private RegistrarCargoDTO prapararDTORegistrarCargo(
			FacturaMiscelaneaEntradaDTO facturaMiscelaneaEntradaDTO,
			OficinaDTO oficinaDTO, String numProceso, String fechaSistema,
			String catImpositiva, String codMoneFact, String cantidadDecimales)
			throws RateUsageRecordsException {
		RegistrarCargoDTO registrarCargoDTO = new RegistrarCargoDTO();
		// setea todos los cargos
		registrarCargoDTO.setCargoDTO(facturaMiscelaneaEntradaDTO
				.getDetalleDocumento().getListCargoDTO());
		registrarCargoDTO.setNumProceso(Long.parseLong(numProceso));// EN_NUM_PROCESO

		registrarCargoDTO.setCodCliente(Long
				.parseLong(facturaMiscelaneaEntradaDTO.getCabeceraDocumento()
						.getCodigoCliente()));// EN_COD_CLIENTE IN NUMBER
		registrarCargoDTO.setCodProducto(1);// EN_COD_PRODUCTO IN NUMBER, //1
		registrarCargoDTO.setCodMoneda(facturaMiscelaneaEntradaDTO.getMoneda()); // EV_COD_MONEDA

		registrarCargoDTO.setFecValor(fechaSistema);// EV_FEC_VALOR IN VARCHAR2,

		registrarCargoDTO.setFecEfectividad(fechaSistema);// EV_FEC_EFECTIVIDAD
		registrarCargoDTO.setCodCatImpositiva(Long.parseLong(catImpositiva));
		registrarCargoDTO.setImpMontabase(0);// EN_IMP_MONTOBASE IN NUMBER,
		// //=0
		registrarCargoDTO.setCodRegion(oficinaDTO.getRegion());// EV_COD_REGION
		// IN VARCHAR2,
		registrarCargoDTO.setCodProvincia(oficinaDTO.getProvincia());// EV_COD_PROVINCIA
		registrarCargoDTO.setCodCiudad(oficinaDTO.getComuna()); // EV_COD_CIUDAD

		registrarCargoDTO.setIndFactura(1);// EN_IND_FACTUR IN NUMBER, // = 1
		registrarCargoDTO.setIndEstado(0);// 0
		registrarCargoDTO.setCodPortador(0);// EN_COD_PORTADOR IN NUMBER, // = 0
		registrarCargoDTO.setCodCicloFactura(0); // EN_COD_CICLFACT IN
		registrarCargoDTO.setCodPlanComercial(1);
		registrarCargoDTO.setIndModVenta(Long
				.parseLong(facturaMiscelaneaEntradaDTO.getModalidadCobro()));// EN_IND_MODVENTA

		registrarCargoDTO.setMonedaImp(facturaMiscelaneaEntradaDTO.getMoneda());// EV_COD_MONEDAIMP
		registrarCargoDTO.setCodMoneFac(codMoneFact);
		registrarCargoDTO.setImpConversion(1);// EN_IMP_CONVERSION IN NUMBER,
		registrarCargoDTO.setCantidadDecimales(cantidadDecimales);
		return registrarCargoDTO;
	}

	/**
	 * 
	 * @param facturaMiscelaneaEntradaDTO
	 * @return
	 * @throws RateUsageRecordsException
	 */
	private EjecutarFacturaDTO prapararDTOEjecutarFactura(
			FacturaMiscelaneaEntradaDTO facturaMiscelaneaEntradaDTO,
			String numProceso, String EV_cod_modgener,
			String EV_cod_tipmovimien, String fechaSistema)
			throws RateUsageRecordsException {
		EjecutarFacturaDTO ejecutarFacturaDTO = new EjecutarFacturaDTO();

		ejecutarFacturaDTO.setEV_num_proceso(numProceso);// EV_num_proceso IN
		// VARCHAR2
		ejecutarFacturaDTO.setEV_num_venta("0"); // EV_num_venta IN
		// VARCHAR2,-- "0"
		ejecutarFacturaDTO.setEV_cod_modgener(EV_cod_modgener); // TODO obtener

		ejecutarFacturaDTO.setEV_cod_tipmovimien(EV_cod_tipmovimien);
		ejecutarFacturaDTO.setEV_cod_catribut(facturaMiscelaneaEntradaDTO
				.getTipoDocumento());// EV_cod_catribut IN VARCHAR2,--
		// categoria TRIBUTARIA B o F

		ejecutarFacturaDTO.setEV_cod_estadoc("100"); // EV_cod_estadoc IN
		// VARCHAR2,-- "100"
		ejecutarFacturaDTO.setEV_cod_estproc("3");// EV_cod_estproc IN
		// VARCHAR2,--
		// "3"
		ejecutarFacturaDTO.setEV_fec_vencimiento(facturaMiscelaneaEntradaDTO
				.getCabeceraDocumento().getFechaVencimiento());// EV_fec_vencimiento

		ejecutarFacturaDTO.setEV_fec_ingreso(fechaSistema);// EV_fec_ingreso IN
		// VARCHAR2,-- "0"
		ejecutarFacturaDTO.setEV_cod_modventa(facturaMiscelaneaEntradaDTO
				.getModalidadCobro()); // modalidad cobro
		ejecutarFacturaDTO.setEV_num_cuotas(facturaMiscelaneaEntradaDTO
				.getNumeroCuotas());// EV_num_cuotas IN VARCHAR2,-- Paramtero de
		ejecutarFacturaDTO.setEV_pref_plaza_rel("          ");// 10 espacios
		// en blanco
		// (porque si va
		// null, inserta
		// valor por
		// defecto en
		// BD)
		return ejecutarFacturaDTO;
	}

	private boolean validaFormatoMonto(String monto, String formato,
			String sepDecimal) {
		/*
		 * if (monto != null && !monto.trim().equals("")) { try { String[] mont =
		 * null; if (!sepDecimal.equals(".")) { mont = monto.split("."); } else {
		 * if (!sepDecimal.equals(",")) { mont = monto.split(","); } } if (mont !=
		 * null && mont.length > 1) { return false; } else if (mont != null)
		 * Double.parseDouble(mont[0]); } catch (Exception e) { } }
		 */
		return true;

	}

	/**
	 * 
	 * @param monto
	 * @param separador
	 * @param numDecimales
	 * @return
	 */
	private boolean validaFormatoDecimales(String monto, String numDecimales,
			String separador) {
		
		
		//**************************  186866 se cambia la forma de validar formato de decimales
		//**************************  Esta es la original
		//boolean result = false;
		//logger.debug("error : validaFormatoDecimales(RateUsageRecordsSRV)");
		//double temp=0;
	//	try {
		//	temp=Double.parseDouble(monto);
			//temp=Long.parseLong(monto);
			//if (monto != null && !monto.trim().equals("")) {
				//logger.debug("error TEMP: ahora esta como long   :" + temp);
				//logger.debug("error TEMP: ahora esta como long" + String.valueOf(temp));
				
				//logger.debug("error MONTO:  " + monto);
//				int ind = String.valueOf(temp).indexOf(separador);
//				logger.debug("error IND : "+ ind);
//				if (ind==-1 || ind > 0
//						&& ind + Integer.parseInt(numDecimales.trim()) + 1 < String.valueOf(temp)
//								.length()) {
//					result = false;
//				} else
//					result = true;
//			}
//		} catch (Exception e) {
//			logger.debug("error : " + e.getMessage());
//			result = false;
//		}
//		return result;
		//**************************  186866 se cambia la forma de validar formato de decimales
		//**************************  Esta es la original

		boolean toReturn = false;
		logger.debug("validaFormatoDecimales:inicio");
		logger.debug("monto [" + monto + "]");
		logger.debug("cantidadDecimales [" + numDecimales + "]");
		logger.debug("separador [" + separador + "]");	

		try
		{
			String parteEntera = "[0-9]+";
			String parteDecimal = "(\\" + separador + "[0-9]{1," + numDecimales + "}){0,1}";
			Pattern pattern = Pattern.compile(parteEntera + parteDecimal);
			Matcher matcher = pattern.matcher(monto);
			toReturn = matcher.matches();
			logger.debug("validaFormatoDecimales:fin");
			logger.debug("Retorna [" + toReturn + "]");
		}
		catch (Exception e)
		{
			logger.debug("error : " + e.getMessage());
			return false;
		}
		return toReturn;
	}

	private boolean validaTipoMontoPorcentaje(String tipoMontoPorcentaje,
			String porcentaje) {
		boolean result = false;
		try{
		if (tipoMontoPorcentaje != null
				&& !"".equals(tipoMontoPorcentaje)
				&& (tipoMontoPorcentaje.trim().equalsIgnoreCase("P") || tipoMontoPorcentaje
						.trim().equalsIgnoreCase("M"))) {
			if (tipoMontoPorcentaje.trim().equalsIgnoreCase("P")) {
				result = validaPorcentaje(porcentaje.trim());
			} else {
				if (Double.parseDouble(porcentaje.trim()) >= 0) {
					result = true;
				}
			}

		}
	} catch (Exception e) {
		logger.debug("error : " + e.getMessage());			
		result = false;
	}
		return result;

	}

	private boolean validaPorcentaje(String porcentaje) {
		try {
			if (porcentaje != null && !porcentaje.trim().equals("")
					&& Double.parseDouble(porcentaje.trim()) >= 0
					&& Double.parseDouble(porcentaje.trim()) <= 1) {
				return true;
			}

		} catch (Exception e) {
			logger.debug("error : " + e.getMessage());			
			return false;
		}
		return false;
	}

	private boolean validaDescuentoCargo(String importeDescuento,
			String importeCargo, String cantidadUnidadesCargo)
			throws RateUsageRecordsException {

		boolean result = true;
		try {
			double valorDescuento = importeDescuento != null
					&& !importeDescuento.trim().equals("") ? Double
					.parseDouble(importeDescuento) : 0;
			double valorCargo = importeCargo != null
					&& !importeCargo.trim().equals("") ? Double
					.parseDouble(importeCargo) : 0;

			double cantidad = cantidadUnidadesCargo != null
					&& !cantidadUnidadesCargo.trim().equals("") ? Double
					.parseDouble(cantidadUnidadesCargo) : 0;

			// además debe validar que el monto del
			// descuento no sea
			// superior al cargo*cantidad
			if (valorDescuento > (valorCargo * cantidad)) {
				result = false;
			}
		} catch (Exception e) {
			logger.debug("error : " + e.getMessage());
			throw new RateUsageRecordsException(e);

		}
		return result;
	}

}
