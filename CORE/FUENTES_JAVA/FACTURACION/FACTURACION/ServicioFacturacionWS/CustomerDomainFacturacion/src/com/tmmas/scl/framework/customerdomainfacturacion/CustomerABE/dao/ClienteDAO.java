//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : P-TMM-08004
//  @ File Name : ClienteDAO.java
//  @ Date : 09/09/2008
//  @ Author : hsegura
//
//

package com.tmmas.scl.framework.customerdomainfacturacion.CustomerABE.dao;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;

import org.apache.commons.configuration.CompositeConfiguration;
import org.apache.log4j.Logger;

import com.tmmas.cl.framework.base.ConnectionDAO;
import com.tmmas.cl.framework20.util.UtilProperty;
import com.tmmas.scl.framework.CustomerDomain.CustomerABE.dto.ClienteDTO;
import com.tmmas.scl.framework.CustomerDomain.exception.RateUsageRecordsException;
import com.tmmas.scl.framework.Sistema.dao.UsuarioDAO;
import com.tmmas.scl.framework.Sistema.helper.FacturaConnectionPool;
import com.tmmas.scl.framework.customerdomainfacturacion.CustomerABE.dao.Interface.ClienteDAOIT;

public class ClienteDAO extends ConnectionDAO implements ClienteDAOIT {
	private static FacturaConnectionPool myConnectionPool = FacturaConnectionPool
			.getInstance();

	private static Logger logger = Logger.getLogger(ClienteDAO.class);

	private CompositeConfiguration config;

	public ClienteDAO() {
		super();
		config = UtilProperty
				.getConfiguration("ServicioFacturacionWS.properties",
						"com/tmmas/scl/framework/properties/archivorecursos.properties");
	}

	private long codigoError=0;
	private String msError=" ";
	private long snEvento=0 ;
	public ClienteDTO obtenerDatosCliente(String codCliente, String fechaActual)
			throws RateUsageRecordsException {
		logger.debug("obtenerDatosCliente():start");
		Connection conn = null;
		ResultSet rs = null;
		PreparedStatement ps = null;
		ClienteDTO clienteDTOResult = new ClienteDTO();
		;
		CallableStatement cstmt = null;
		/**
		 * PROCEDURE GA_OBTENERDATOSCLIENTE_PR (
		 * 
		 * EN_CODCLIENTE IN NUMBER,
		 * 
		 * EV_FECHASISTEMA IN VARCHAR2,
		 * 
		 * SV_CODSUBCATEGORIA OUT NOCOPY VARCHAR2,
		 * 
		 * SV_CODCATRIBUT OUT NOCOPY VARCHAR2,
		 * 
		 * SN_CODCATIMPOS OUT NOCOPY NUMBER,
		 * 
		 * SV_CODIDIOMA OUT NOCOPY VARCHAR2,
		 * 
		 * SN_COD_RETORNO OUT NOCOPY NUMBER,
		 * 
		 * SV_MENS_RETORNO OUT NOCOPY VARCHAR2,
		 * 
		 * SN_NUM_EVENTO OUT NOCOPY NUMBER)
		 */
		String call = "{call  GA_CUSTOMER_ABE_PG.GA_OBTENERDATOSCLIENTE_PR (?,?,?,?,?,?,?,?,?)}";
		logger.debug("Antes de obtener conexion");
		try {
			conn = getConnectionFromWLSInitialContext(myConnectionPool
					.getJndiForDataSource());
		} catch (Exception e1) {
			logger.debug("Exception de conexion", e1);
			throw new RateUsageRecordsException("-2129", 0,
					"No se pudo obtener una conexión : " + e1.getMessage());
		}

		try {
			logger.debug("Antes de ejecutar : " + call);
			cstmt = conn.prepareCall(call, ResultSet.TYPE_SCROLL_INSENSITIVE,
					ResultSet.CONCUR_READ_ONLY);

			logger.debug("Parametros de entrada : ");
			logger.debug("EN_CODCLIENTE [" + codCliente + "]");
			logger.debug("EV_FECHASISTEMA [" + fechaActual + "]");
			
			cstmt.setLong(1, Long.parseLong(codCliente));
			cstmt.setString(2, fechaActual);
			cstmt.registerOutParameter(3, Types.VARCHAR);
			cstmt.registerOutParameter(4, Types.VARCHAR);
			cstmt.registerOutParameter(5, Types.NUMERIC);
			cstmt.registerOutParameter(6, Types.VARCHAR);
			cstmt.registerOutParameter(7, Types.NUMERIC);
			cstmt.registerOutParameter(8, Types.VARCHAR);
			cstmt.registerOutParameter(9, Types.NUMERIC);
			cstmt.execute();

			 codigoError = cstmt.getLong(7);
			 msError = cstmt.getString(8);
			 snEvento = cstmt.getLong(9);

			logger.debug("Despues de execute() ");
			logger.debug("Valor de  SN_ERROR [" + codigoError + "]");
			logger.debug("Valor de  SV_MENSAJE[" + msError + "]");
			logger.debug("Valor de  SN_EVENTO[" + snEvento + "]");

			if (codigoError == 0) {
				clienteDTOResult.setCodSubcategoria(cstmt.getString(3));
				clienteDTOResult.setCodCategoria(cstmt.getString(4));
				clienteDTOResult.setCodCatImpositiva(String.valueOf(cstmt
						.getLong(5)));
				clienteDTOResult.setIdioma(cstmt.getString(6));
			} else
				throw new RateUsageRecordsException(
						String.valueOf(codigoError), codigoError, "SQLException : "
								+ msError);
		} catch (SQLException e) {
			logger.debug("SQLException ", e);
			throw new RateUsageRecordsException(String
					.valueOf(e.getErrorCode()), codigoError, "SQLException : "
					+ e.getMessage());

		} finally {
			try {
				if (ps != null) {
					ps.close();
				}

				if (rs != null) {
					rs.close();
				}

				if (conn != null) {
					conn.close();
				}
			} catch (Exception e) {
				logger.debug("Exception ", e);
				throw new RateUsageRecordsException("-2129", codigoError, "Exception : "
						+ e.getMessage());
			}
		}
		logger.debug("obtenerDatosCliente():end");
		return clienteDTOResult;
	}


	public String obtenerCategoriaTributaria() throws RateUsageRecordsException {
		logger.debug("obtenerCategoriaTributaria():start");
		Connection conn = null;
		ResultSet rs = null;
		PreparedStatement ps = null;

		CallableStatement cstmt = null;

		String call = "{call  GA_CUSTOMER_ABE_PG.GA_OBTENERDATOSCLIENTE_PR (?,?,?,?,?,?,?,?,?)}";
		logger.debug("Antes de obtener conexion");
		try {
			conn = getConnectionFromWLSInitialContext(myConnectionPool
					.getJndiForDataSource());
		} catch (Exception e1) {
			logger.debug("Exception de conexion", e1);
			throw new RateUsageRecordsException("-2129", codigoError,
					"No se pudo obtener una conexión : " + e1.getMessage());
		}

		try {
			logger.debug("Antes de ejecutar : " + call);
			try {
				cstmt = conn.prepareCall(call,
						ResultSet.TYPE_SCROLL_INSENSITIVE,
						ResultSet.CONCUR_READ_ONLY);
				cstmt.registerOutParameter(1, Types.NUMERIC);
				cstmt.execute();
			} catch (SQLException e) {
				logger.debug("SQLException ", e);
				throw new RateUsageRecordsException("-2129", codigoError,
						"SQLException : " + e.getMessage());
			}

		} finally {
			try {
				if (ps != null) {
					ps.close();
				}

				if (rs != null) {
					rs.close();
				}

				if (conn != null) {
					conn.close();
				}
			} catch (Exception e) {
				logger.debug("Exception ", e);
				throw new RateUsageRecordsException("-2129",codigoError, "Exception : "
						+ e.getMessage());
			}
		}
		logger.debug("obtenerCategoriaTributaria():end");
		return null;
	}

	public void obtenerCategoriaImpositiva() throws RateUsageRecordsException {

	}

	public void obtenerIdentificadorCliente() throws RateUsageRecordsException {

	}

	public String obtenerSubcategoriaCliente() throws RateUsageRecordsException {
		return null;
	}


	public String obtenerZonaImpositiva(String codOficina)
			throws RateUsageRecordsException {
		logger.debug("obtenerZonaImpositiva():start");
		Connection conn = null;
		ResultSet rs = null;
		PreparedStatement ps = null;
		String zona = null;
		CallableStatement cstmt = null;

		String call = "{call GA_CUSTOMER_ABE_PG.GA_OBTENERZONAIMPOSITIVA_PR (?,?,?,?,?)}";
		logger.debug("Antes de obtener conexion");
		try {
			conn = getConnectionFromWLSInitialContext(myConnectionPool
					.getJndiForDataSource());
		} catch (Exception e1) {
			logger.debug("Exception de conexion", e1);
			throw new RateUsageRecordsException("-2129", 0,
					"No se pudo obtener una conexión : " + e1.getMessage());
		}

		try {
			logger.debug("Antes de ejecutar : " + call);
	
				cstmt = conn.prepareCall(call,
						ResultSet.TYPE_SCROLL_INSENSITIVE,
						ResultSet.CONCUR_READ_ONLY);
				
				logger.debug("Parametros entrada : ");
				logger.debug("COD_OFICINA [" + codOficina + "]");				
				cstmt.setString(1, codOficina);
				cstmt.registerOutParameter(2, Types.NUMERIC);
				cstmt.registerOutParameter(3, Types.NUMERIC);
				cstmt.registerOutParameter(4, Types.VARCHAR);
				cstmt.registerOutParameter(5, Types.NUMERIC);
				cstmt.execute();
				 codigoError = cstmt.getLong(3);
				 msError = cstmt.getString(4);
				 snEvento = cstmt.getLong(5);

				logger.debug("Despues de execute() ");
				logger.debug("Valor de  SN_ERROR [" + codigoError + "]");
				logger.debug("Valor de  SV_MENSAJE[" + msError + "]");
				logger.debug("Valor de  SN_EVENTO[" + snEvento + "]");

				if (codigoError == 0) {
					zona = String.valueOf(cstmt.getLong(2));
				} else
					throw new RateUsageRecordsException(
							String.valueOf(codigoError), codigoError, "SQLException : "
									+ msError);
			} catch (SQLException e) {
				logger.debug("SQLException ", e);
				throw new RateUsageRecordsException(String
						.valueOf(e.getErrorCode()), codigoError, "SQLException : "
						+ e.getMessage());
			

		} finally {
			try {
				if (ps != null) {
					ps.close();
				}

				if (rs != null) {
					rs.close();
				}

				if (conn != null) {
					conn.close();
				}
			} catch (Exception e) {
				logger.debug("Exception ", e);
				throw new RateUsageRecordsException("-2129",codigoError, "Exception : "
						+ e.getMessage());
			}
		}
		logger.debug("obtenerZonaImpositiva():end");
		return zona;
	}
}
