//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : P-TMM-08004
//  @ File Name : MensajeDoctoDAO.java
//  @ Date : 09/09/2008
//  @ Author : promero
//
//

package com.tmmas.scl.framework.customerdomainfacturacion.CustomerBillABE.dao;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;

import org.apache.log4j.Logger;

import com.tmmas.cl.framework.base.ConnectionDAO;
import com.tmmas.scl.framework.CustomerDomain.CustomerBillABE.dto.MensajeDoctoDTO;
import com.tmmas.scl.framework.CustomerDomain.exception.RateUsageRecordsException;
import com.tmmas.scl.framework.Sistema.helper.FacturaConnectionPool;
import com.tmmas.scl.framework.customerdomainfacturacion.CustomerBillABE.dao.Interface.MensajeDoctoDAOIT;

public class MensajeDoctoDAO extends ConnectionDAO implements MensajeDoctoDAOIT {

	private static FacturaConnectionPool myConnectionPool = FacturaConnectionPool
			.getInstance();

	private static Logger logger = Logger.getLogger(MensajeDoctoDAO.class);

	private long codigoError;

	private String msError;

	private long snEvento;;

	public boolean registrarMensaje(MensajeDoctoDTO mensajeDoctoDTO)
			throws RateUsageRecordsException {

		boolean bRetorno = false;
		logger.debug("registrarMensaje():start");
		Connection conn = null;
		ResultSet rs = null;
		PreparedStatement ps = null;

		CallableStatement cstmt = null;
		/**
		 * PROCEDURE FA_REGISTRAR_MENSAJE_PR (
		 * 
		 * EN_CORRMENSAJE IN NUMBER,
		 * 
		 * EV_DESCMENSAJE IN VARCHAR2,
		 * 
		 * EN_NUMLINEA IN NUMBER,
		 * 
		 * EV_CODIDIOMA IN VARCHAR2,
		 * 
		 * EV_DESCMENSLIN IN VARCHAR2,
		 * 
		 * SN_COD_RETORNO OUT NOCOPY NUMBER,
		 * 
		 * SV_MENS_RETORNO OUT NOCOPY VARCHAR2,
		 * 
		 * SN_NUM_EVENTO OUT NOCOPY NUMBER);
		 */
		String call = "{call FA_SERVICIOS_PG.FA_REGISTRAR_MENSAJE_PR( ?,?,?,?,?,?,?,? ) }";
		logger.debug("Antes de obtener conexion");
		try {
			conn = getConnectionFromWLSInitialContext(myConnectionPool
					.getJndiForDataSource());
		} catch (Exception e1) {
			logger.debug("Exception de conexion", e1);
			throw new RateUsageRecordsException("-2129", 0,
					"No se pudo obtener una conexión : " + e1.getMessage());
		}

		try {
			logger.debug("Antes de ejecutar : " + call);

			cstmt = conn.prepareCall(call, ResultSet.TYPE_SCROLL_INSENSITIVE,
					ResultSet.CONCUR_READ_ONLY);
			logger.debug("Parámetros : ");
			logger.debug("EN_CORRMENSAJE [" + mensajeDoctoDTO.getCorrMensaje()
					+ "]");
			logger.debug("EV_DESCMENSAJE [" + mensajeDoctoDTO.getDescMensaje()
					+ "]");
			logger.debug("EN_NUMLINEA [" + mensajeDoctoDTO.getNumLinea() + "]");
			logger.debug("EV_CODIDIOMA [" + mensajeDoctoDTO.getCodIdioma()
					+ "]");
			logger.debug("EV_DESCMENSLIN [" + mensajeDoctoDTO.getDescMensLin()
					+ "]");

			cstmt.setLong(1, Long.parseLong(mensajeDoctoDTO.getCorrMensaje()));
			cstmt.setString(2, mensajeDoctoDTO.getDescMensaje());
			cstmt.setInt(3, mensajeDoctoDTO.getNumLinea());
			cstmt.setString(4, mensajeDoctoDTO.getCodIdioma());
			cstmt.setString(5, mensajeDoctoDTO.getDescMensLin());

			cstmt.registerOutParameter(6, Types.NUMERIC);
			cstmt.registerOutParameter(7, Types.VARCHAR);
			cstmt.registerOutParameter(8, Types.NUMERIC);

			cstmt.execute();
			codigoError = cstmt.getLong(6);
			msError = cstmt.getString(7);
			snEvento = cstmt.getLong(8);

			logger.debug("Despues de execute() ");
			logger.debug("Valor de  SN_ERROR [" + codigoError + "]");
			logger.debug("Valor de  SV_MENSAJE[" + msError + "]");
			logger.debug("Valor de  SN_EVENTO[" + snEvento + "]");

			if (codigoError == 0) {
				bRetorno = true;
			} else
				throw new RateUsageRecordsException(
						String.valueOf(codigoError), snEvento,
						"SQLException : " + msError);
		} catch (SQLException e) {
			logger.debug("SQLException ", e);
			throw new RateUsageRecordsException(String
					.valueOf(e.getErrorCode()), snEvento, "SQLException : "
					+ e.getMessage());

		} finally {
			try {
				if (ps != null) {
					ps.close();
				}

				if (rs != null) {
					rs.close();
				}

				if (conn != null) {
					conn.close();
				}
			} catch (Exception e) {
				logger.debug("Exception ", e);
				throw new RateUsageRecordsException("-2129", 0, "Exception : "
						+ e.getMessage());
			}
		}
		logger.debug("registrarMensaje():end");
		return bRetorno;

	}

	public boolean registrarMensajeViejo(MensajeDoctoDTO mensajeDoctoDTO)
			throws RateUsageRecordsException {

		boolean bRetorno = false;
		logger.debug("registrarMensajeViejo():start");
		Connection conn = null;
		ResultSet rs = null;
		PreparedStatement ps = null;

		CallableStatement cstmt = null;
		/**
		 * 
		 * PROCEDURE FA_REGISTRAR_MENSPROCESO_PR ( EN_NUMPROCESO IN NUMBER,
		 * 
		 * EN_CODFORMULARIO IN NUMBER,
		 * 
		 * EN_CODBLOQUE IN NUMBER,
		 * 
		 * EN_CORRMENSAJE IN NUMBER,
		 * 
		 * EN_NUMLINEAS IN NUMBER,
		 * 
		 * EV_CODORIGEN IN VARCHAR2,
		 * 
		 * EV_DESCMENSAJE IN VARCHAR2,
		 * 
		 * EV_INDFACTURADO IN VARCHAR2,
		 * 
		 * EV_NOMUSUARIO IN VARCHAR2,
		 * 
		 * EV_FECHASISTEMA IN VARCHAR2,
		 * 
		 * SN_COD_RETORNO OUT NOCOPY NUMBER,
		 * 
		 * SV_MENS_RETORNO OUT NOCOPY VARCHAR2,
		 * 
		 * SN_NUM_EVENTO OUT NOCOPY NUMBER);
		 */
		String call = "{call FA_SERVICIOS_PG.FA_REGISTRAR_MENSPROCESO_PR( ?,?,?,?,?,?,?,?,?,?,?,?,? ) }";
		logger.debug("Antes de obtener conexion");
		try {
			conn = getConnectionFromWLSInitialContext(myConnectionPool
					.getJndiForDataSource());
		} catch (Exception e1) {
			logger.debug("Exception de conexion", e1);
			throw new RateUsageRecordsException("-2129", 0,
					"No se pudo obtener una conexión : " + e1.getMessage());
		}

		try {
			logger.debug("Antes de ejecutar : " + call);

			cstmt = conn.prepareCall(call, ResultSet.TYPE_SCROLL_INSENSITIVE,
					ResultSet.CONCUR_READ_ONLY);

			logger.debug("Parámetros : ");
			logger.debug("EN_NUMPROCESO [" + mensajeDoctoDTO.getNumProceso()
					+ "]");
			logger.debug("EN_CODFORMULARIO ["
					+ mensajeDoctoDTO.getCodFormulario() + "]");
			logger.debug("EN_CODBLOQUE [" + mensajeDoctoDTO.getCodBloque()
					+ "]");
			logger.debug("EN_CORRMENSAJE [" + mensajeDoctoDTO.getCorrMensaje()
					+ "]");
			logger.debug("EN_NUMLINEAS [" + mensajeDoctoDTO.getDescMensLin()
					+ "]");
			logger.debug("EV_CODORIGEN [" + mensajeDoctoDTO.getCodOrigen()
					+ "]");
			logger.debug("EV_DESCMENSAJE [" + mensajeDoctoDTO.getDescMensaje()
					+ "]");
			logger.debug("EV_INDFACTURADO ["
					+ mensajeDoctoDTO.getIndFacturado() + "]");
			logger.debug("EV_NOMUSUARIO [" + mensajeDoctoDTO.getNomUsuario()
					+ "]");
			logger.debug("EV_FECHASISTEMA [" + mensajeDoctoDTO.getFechIngreso()
					+ "]");

			cstmt.setLong(1, Long.parseLong(mensajeDoctoDTO.getNumProceso()));
			cstmt
					.setLong(2, Long.parseLong(mensajeDoctoDTO
							.getCodFormulario()));
			cstmt.setLong(3, Long.parseLong(mensajeDoctoDTO.getCodBloque()));
			cstmt.setLong(4, Long.parseLong(mensajeDoctoDTO.getCorrMensaje()));
			cstmt.setLong(5, mensajeDoctoDTO.getNumLineas());
			cstmt.setString(6, mensajeDoctoDTO.getCodOrigen());
			cstmt.setString(7, mensajeDoctoDTO.getDescMensaje());
			cstmt.setString(8, mensajeDoctoDTO.getIndFacturado());
			cstmt.setString(9, mensajeDoctoDTO.getNomUsuario());
			cstmt.setString(10, mensajeDoctoDTO.getFechIngreso());
			cstmt.registerOutParameter(11, Types.NUMERIC);
			cstmt.registerOutParameter(12, Types.VARCHAR);
			cstmt.registerOutParameter(13, Types.NUMERIC);

			cstmt.execute();
			codigoError = cstmt.getLong(11);
			msError = cstmt.getString(12);
			snEvento = cstmt.getLong(13);

			logger.debug("Despues de execute() ");
			logger.debug("Valor de  SN_ERROR [" + codigoError + "]");
			logger.debug("Valor de  SV_MENSAJE[" + msError + "]");
			logger.debug("Valor de  SN_EVENTO[" + snEvento + "]");

			if (codigoError == 0) {
				bRetorno = true;
			} else
				throw new RateUsageRecordsException(
						String.valueOf(codigoError), snEvento,
						"SQLException : " + msError);
		} catch (SQLException e) {
			logger.debug("SQLException ", e);
			throw new RateUsageRecordsException(String
					.valueOf(e.getErrorCode()), snEvento, "SQLException : "
					+ e.getMessage());

		} finally {
			try {
				if (ps != null) {
					ps.close();
				}

				if (rs != null) {
					rs.close();
				}

				if (conn != null) {
					conn.close();
				}
			} catch (Exception e) {
				logger.debug("Exception ", e);
				throw new RateUsageRecordsException("-2129", 0, "Exception : "
						+ e.getMessage());
			}
		}
		logger.debug("registrarMensajeViejo():end");
		return bRetorno;
	}

	public boolean validarMensaje(MensajeDoctoDTO mensajeDoctoDTO)
			throws RateUsageRecordsException {
		long valor;
		boolean bRetorno = false;
		logger.debug("validarMensaje():start");
		Connection conn = null;
		ResultSet rs = null;
		PreparedStatement ps = null;

		CallableStatement cstmt = null;
		/**
		 * FUNCTION FA_VALIDAR_MENSAJE_FN (
		 * 
		 * EN_CORRMENSAJE IN NUMBER,
		 * 
		 * SN_COD_RETORNO OUT NOCOPY NUMBER,
		 * 
		 * SV_MENS_RETORNO OUT NOCOPY VARCHAR2,
		 * 
		 * SN_NUM_EVENTO OUT NOCOPY NUMBER)
		 */
		String call = "{?=call FA_SERVICIOS_PG.FA_VALIDAR_MENSAJE_FN (?,?,?,?) }";
		logger.debug("Antes de obtener conexion");
		try {
			conn = getConnectionFromWLSInitialContext(myConnectionPool
					.getJndiForDataSource());
		} catch (Exception e1) {
			logger.debug("Exception de conexion", e1);
			throw new RateUsageRecordsException("-2129", 0,
					"No se pudo obtener una conexión : " + e1.getMessage());
		}

		try {
			logger.debug("Antes de ejecutar : " + call);

			cstmt = conn.prepareCall(call, ResultSet.TYPE_SCROLL_INSENSITIVE,
					ResultSet.CONCUR_READ_ONLY);
			logger.debug("Parámetros : ");
			logger.debug("EN_CORRMENSAJE [" + mensajeDoctoDTO.getCorrMensaje()
					+ "]");
			cstmt.registerOutParameter(1, Types.NUMERIC);
			cstmt.setString(2, mensajeDoctoDTO.getCorrMensaje());
			cstmt.registerOutParameter(3, Types.NUMERIC);
			cstmt.registerOutParameter(4, Types.VARCHAR);
			cstmt.registerOutParameter(5, Types.NUMERIC);

			cstmt.execute();

			codigoError = cstmt.getLong(3);
			msError = cstmt.getString(4);
			snEvento = cstmt.getLong(5);

			logger.debug("Despues de execute() ");
			logger.debug("Valor de  SN_ERROR [" + codigoError + "]");
			logger.debug("Valor de  SV_MENSAJE[" + msError + "]");
			logger.debug("Valor de  SN_EVENTO[" + snEvento + "]");

			if (codigoError == 0) {
				valor = cstmt.getLong(1);

				if (valor == 0)
					bRetorno = false;
				else
					throw new RateUsageRecordsException(
							String.valueOf(codigoError), snEvento,
							"");
			} else
				//esta maraña es para controlar el error cuando el codigo de mensaje no existe en SCL.
				throw new RateUsageRecordsException(
						String.valueOf(1), snEvento,
						"SQLException : " + msError);

		} catch (SQLException e) {
			logger.debug("SQLException ", e);
			throw new RateUsageRecordsException(String
					.valueOf(e.getErrorCode()), snEvento, "SQLException : "
					+ e.getMessage());

		} finally {
			try {
				if (ps != null) {
					ps.close();
				}

				if (rs != null) {
					rs.close();
				}

				if (conn != null) {
					conn.close();
				}
			} catch (Exception e) {
				logger.debug("Exception ", e);
				throw new RateUsageRecordsException("-2129", 0, "Exception : "
						+ e.getMessage());
			}
		}
		logger.debug("validarMensaje():end");
		return bRetorno;
	}

	public boolean bObtieneParMensaje(MensajeDoctoDTO mensajeDoctoDTO)
			throws RateUsageRecordsException {

		boolean bRetorno = false;
		logger.debug("ObtieneParMensaje():start");
		Connection conn = null;
		ResultSet rs = null;
		PreparedStatement ps = null;

		CallableStatement cstmt = null;
		/**
		 * PROCEDURE FA_OBTPARMENSAJE_PR (
		 * 
		 * EN_COD_FORMULARIO IN NUMBER,
		 * 
		 * EN_COD_BLOQUE IN NUMBER,
		 * 
		 * SN_CANT_LINEASMEN OUT NUMBER,
		 * 
		 * SN_CANT_CARACTLIN OUT NUMBER,
		 * 
		 * SN_COD_RETORNO OUT NOCOPY NUMBER,
		 * 
		 * SV_MENS_RETORNO OUT NOCOPY VARCHAR2,
		 * 
		 * SN_NUM_EVENTO OUT NOCOPY NUMBER);
		 */
		String call = "{call FA_SERVICIOS_PG.FA_OBTPARMENSAJE_PR( ?,?,?,?,?,?,? ) }";
		logger.debug("Antes de obtener conexion");
		try {
			conn = getConnectionFromWLSInitialContext(myConnectionPool
					.getJndiForDataSource());
		} catch (Exception e1) {
			logger.debug("Exception de conexion", e1);
			throw new RateUsageRecordsException("-2129", 0,
					"No se pudo obtener una conexión : " + e1.getMessage());
		}

		try {
			logger.debug("Antes de ejecutar : " + call);

			cstmt = conn.prepareCall(call, ResultSet.TYPE_SCROLL_INSENSITIVE,
					ResultSet.CONCUR_READ_ONLY);
			logger.debug("Parámetros : ");
			logger.debug("EN_COD_FORMULARIO ["
					+ mensajeDoctoDTO.getCodFormulario() + "]");
			logger.debug("EN_COD_BLOQUE [" + mensajeDoctoDTO.getCodBloque()
					+ "]");

			cstmt
					.setLong(1, Long.parseLong(mensajeDoctoDTO
							.getCodFormulario()));
			cstmt.setLong(2, Long.parseLong(mensajeDoctoDTO.getCodBloque()));
			cstmt.registerOutParameter(3, Types.NUMERIC);
			cstmt.registerOutParameter(4, Types.NUMERIC);
			cstmt.registerOutParameter(5, Types.NUMERIC);
			cstmt.registerOutParameter(6, Types.VARCHAR);
			cstmt.registerOutParameter(7, Types.NUMERIC);

			cstmt.execute();
			codigoError = cstmt.getLong(5);
			msError = cstmt.getString(6);
			snEvento = cstmt.getLong(7);

			logger.debug("Despues de execute() ");
			logger.debug("Valor de  SN_ERROR [" + codigoError + "]");
			logger.debug("Valor de  SV_MENSAJE[" + msError + "]");
			logger.debug("Valor de  SN_EVENTO[" + snEvento + "]");

			if (codigoError == 0) {
				mensajeDoctoDTO.setCantLineasMen(cstmt.getInt(3));
				mensajeDoctoDTO.setCantCaractLin(cstmt.getInt(4));

				bRetorno = true;
			} else
				throw new RateUsageRecordsException(
						String.valueOf(codigoError), snEvento,
						"SQLException : " + msError);

		} catch (SQLException e) {
			logger.debug("SQLException ", e);
			throw new RateUsageRecordsException(String
					.valueOf(e.getErrorCode()), snEvento, "SQLException : "
					+ e.getMessage());

		} finally {
			try {
				if (ps != null) {
					ps.close();
				}

				if (rs != null) {
					rs.close();
				}

				if (conn != null) {
					conn.close();
				}
			} catch (Exception e) {
				logger.debug("Exception ", e);
				throw new RateUsageRecordsException("-2129", 0, "Exception : "
						+ e.getMessage());
			}
		}
		logger.debug("bObtieneParMensaje():end");
		return bRetorno;
	}

	public boolean bObtieneCorrelativoMensaje(MensajeDoctoDTO mensajeDoctoDTO)
			throws RateUsageRecordsException {

		logger.debug("bObtieneCorrelativoMensaje():start");
		Connection conn = null;
		ResultSet rs = null;
		PreparedStatement ps = null;
		String result = null;
		CallableStatement cstmt = null;
		boolean bRetorno = false;
		/**
		 * FUNCTION FA_OBTENER_SECUENCIA_FN (
		 * 
		 * EV_ID_SECUENCIA IN VARCHAR2,
		 * 
		 * SN_COD_RETORNO OUT NOCOPY NUMBER,
		 * 
		 * SV_MENS_RETORNO OUT NOCOPY VARCHAR2,
		 * 
		 * SN_NUM_EVENTO OUT NOCOPY NUMBER)
		 */
		String call = "{?=call FA_SERVICIOS_PG.FA_OBTENER_SECUENCIA_FN ( ?,?,?,? ) }";
		logger.debug("Antes de obtener conexion");
		try {
			conn = getConnectionFromWLSInitialContext(myConnectionPool
					.getJndiForDataSource());
		} catch (Exception e1) {
			logger.debug("Exception de conexion", e1);
			throw new RateUsageRecordsException("-2129", 0,
					"No se pudo obtener una conexión : " + e1.getMessage());
		}

		try {
			logger.debug("Antes de ejecutar : " + call);

			cstmt = conn.prepareCall(call, ResultSet.TYPE_SCROLL_INSENSITIVE,
					ResultSet.CONCUR_READ_ONLY);
			logger.debug("Parámetros : ");
			logger.debug("EV_ID_SECUENCIA [" + "FA_SEQ_MENSAJES" + "]");
			cstmt.registerOutParameter(1, Types.VARCHAR);
			cstmt.setString(2, "FA_SEQ_MENSAJES");
			cstmt.registerOutParameter(3, Types.NUMERIC);
			cstmt.registerOutParameter(4, Types.VARCHAR);
			cstmt.registerOutParameter(5, Types.NUMERIC);

			cstmt.execute();

			codigoError = cstmt.getLong(3);
			msError = cstmt.getString(4);
			snEvento = cstmt.getLong(5);

			logger.debug("Despues de execute() ");
			logger.debug("Valor de  SN_ERROR [" + codigoError + "]");
			logger.debug("Valor de  SV_MENSAJE[" + msError + "]");
			logger.debug("Valor de  SN_EVENTO[" + snEvento + "]");

			if (codigoError == 0) {
				result = cstmt.getString(1);
				mensajeDoctoDTO.setCorrMensaje(result);
				bRetorno = true;
			} else
				throw new RateUsageRecordsException(
						String.valueOf(codigoError), snEvento,
						"SQLException : " + msError);

		} catch (SQLException e) {
			logger.debug("SQLException ", e);
			throw new RateUsageRecordsException(String
					.valueOf(e.getErrorCode()), snEvento, "SQLException : "
					+ e.getMessage());

		} finally {
			try {
				if (ps != null) {
					ps.close();
				}

				if (rs != null) {
					rs.close();
				}

				if (conn != null) {
					conn.close();
				}
			} catch (Exception e) {
				logger.debug("Exception ", e);
				throw new RateUsageRecordsException("-2129", 0, "Exception : "
						+ e.getMessage());
			}
		}
		logger.debug("bObtieneCorrelativoMensaje():start");
		return bRetorno;

	}

}
