//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : P-TMM-08004
//  @ File Name : FacturadorDAO.java
//  @ Date : 09/09/2008
//  @ Author : hsegura
//
//

package com.tmmas.scl.framework.customerdomainfacturacion.CustomerBillABE.dao;

import java.math.BigDecimal;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;

import org.apache.commons.configuration.CompositeConfiguration;
import org.apache.log4j.Logger;

import com.tmmas.cl.framework.base.ConnectionDAO;
import com.tmmas.cl.framework20.util.UtilProperty;
import com.tmmas.scl.framework.CustomerDomain.CustomerBillABE.dto.CargoDTO;
import com.tmmas.scl.framework.CustomerDomain.CustomerBillABE.dto.EjecutarFacturaDTO;
import com.tmmas.scl.framework.CustomerDomain.CustomerBillABE.dto.MonedaDTO;
import com.tmmas.scl.framework.CustomerDomain.CustomerBillABE.dto.ProcesoDTO;
import com.tmmas.scl.framework.CustomerDomain.CustomerBillABE.dto.RegistrarCargoDTO;
import com.tmmas.scl.framework.CustomerDomain.exception.RateUsageRecordsException;
import com.tmmas.scl.framework.Sistema.helper.FacturaConnectionPool;
import com.tmmas.scl.framework.customerdomainfacturacion.CustomerBillABE.dao.Interface.FacturadorDAOIT;

public class FacturadorDAO extends ConnectionDAO implements FacturadorDAOIT {
	private static FacturaConnectionPool myConnectionPool = FacturaConnectionPool
			.getInstance();

	private static Logger logger = Logger.getLogger(FacturadorDAO.class);

	private CompositeConfiguration config;

	public FacturadorDAO() {
		super();
		config = UtilProperty
				.getConfiguration("ServicioFacturacionWS.properties",
						"com/tmmas/scl/framework/properties/archivorecursos.properties");
	}

	private long codigoError;

	private String msError;

	private long snEvento;

	public void obtenerCodigoDocumento() {

	}

	public void obtenerSecuenciaFactura() {

	}

	public boolean validarTipoDocumento(String modalidadCobro)
			throws RateUsageRecordsException {
		return false;
	}

	public boolean validarModalidadCobro(String modalidadCobro)
			throws RateUsageRecordsException {
		return false;
	}

	public boolean validarMoneda(String moneda)
			throws RateUsageRecordsException {
		logger.debug("validarMoneda():start");
		Connection conn = null;
		ResultSet rs = null;
		PreparedStatement ps = null;
		CallableStatement cstmt = null;

		/**
		 * FUNCTION GE_VALIDA_MONEDA_FN (
		 * 
		 * ev_cod_moneda IN GE_MONEDAS.COD_MONEDA%type,
		 * 
		 * SN_COD_RETORNO OUT NOCOPY NUMBER,
		 * 
		 * SV_MENS_RETORNO OUT NOCOPY VARCHAR2,
		 * 
		 * SN_NUM_EVENTO OUT NOCOPY NUMBER) RETURN NUMBER
		 */
		String call = "{?=call GE_SISTEMA_PG.GE_VALIDA_MONEDA_FN( ?,?,?,? ) }";
		logger.debug("Antes de obtener conexion");
		try {
			conn = getConnectionFromWLSInitialContext(myConnectionPool
					.getJndiForDataSource());
		} catch (Exception e1) {
			logger.debug("Exception de conexion", e1);
			throw new RateUsageRecordsException("-2129", 0,
					"No se pudo obtener una conexión : " + e1.getMessage());
		}

		try {
			logger.debug("Antes de ejecutar : " + call);

			cstmt = conn.prepareCall(call, ResultSet.TYPE_SCROLL_INSENSITIVE,
					ResultSet.CONCUR_READ_ONLY);

			logger.debug("Parámetros ");
			logger.debug("COD_MONEDA [" + moneda + "]");

			cstmt.registerOutParameter(1, Types.NUMERIC);
			cstmt.setString(2, moneda);
			cstmt.registerOutParameter(3, Types.NUMERIC);
			cstmt.registerOutParameter(4, Types.VARCHAR);
			cstmt.registerOutParameter(5, Types.NUMERIC);

			cstmt.execute();
			codigoError = cstmt.getLong(3);
			msError = cstmt.getString(4);
			snEvento = cstmt.getLong(5);

			logger.debug("Despues de execute() ");
			logger.debug("Valor de  SN_ERROR [" + codigoError + "]");
			logger.debug("Valor de  SV_MENSAJE[" + msError + "]");
			logger.debug("Valor de  SN_EVENTO[" + snEvento + "]");

			if (codigoError == 0) {
				if (cstmt.getLong(1) == 1) {
					return true;
				}
			} else
				throw new RateUsageRecordsException(
						String.valueOf(codigoError), snEvento,
						"SQLException : " + msError);

		} catch (SQLException e) {
			logger.debug("SQLException ", e);
			throw new RateUsageRecordsException(String
					.valueOf(e.getErrorCode()), snEvento, "SQLException : "
					+ e.getMessage());

		} finally {
			try {
				if (ps != null) {
					ps.close();
				}

				if (rs != null) {
					rs.close();
				}

				if (conn != null) {
					conn.close();
				}
			} catch (Exception e) {
				logger.debug("Exception ", e);
				throw new RateUsageRecordsException("-2129", 0, "Exception : "
						+ e.getMessage());
			}
		}
		logger.debug("validarMoneda():end");
		return false;

	}

	public boolean validarConcepto(String codConcepto, String tipoConcepto)
			throws RateUsageRecordsException {
		logger.debug("validarConcepto():start");
		Connection conn = null;
		ResultSet rs = null;
		PreparedStatement ps = null;

		CallableStatement cstmt = null;
		/*
		 * FUNCTION FA_VALIDA_CONCEPTO_FN (
		 * 
		 * EN_CODCONCEPTO IN NUMBER,
		 * 
		 * EV_CODTIPCONCE IN VARCHAR2 ,
		 * 
		 * SN_COD_RETORNO OUT NOCOPY NUMBER,
		 * 
		 * SV_MENS_RETORNO OUT NOCOPY VARCHAR2,
		 * 
		 * SN_NUM_EVENTO OUT NOCOPY NUMBER)
		 */
		String call = "{?=call FA_SERVICIOS_PG.FA_VALIDA_CONCEPTO_FN( ?,?,?,?,? ) }";
		logger.debug("Antes de obtener conexion");
		try {
			conn = getConnectionFromWLSInitialContext(myConnectionPool
					.getJndiForDataSource());
		} catch (Exception e1) {
			logger.debug("Exception de conexion", e1);
			throw new RateUsageRecordsException("-2129", 0,
					"No se pudo obtener una conexión : " + e1.getMessage());
		}

		try {
			logger.debug("Antes de ejecutar : " + call);

			cstmt = conn.prepareCall(call, ResultSet.TYPE_SCROLL_INSENSITIVE,
					ResultSet.CONCUR_READ_ONLY);
			logger.debug("Parámetros ");
			logger.debug("EN_CODCONCEPTO [" + codConcepto + "]");
			logger.debug("EV_CODTIPCONCE [" + tipoConcepto + "]");
			cstmt.registerOutParameter(1, Types.NUMERIC);
			cstmt.setString(2, codConcepto);
			cstmt.setString(3, tipoConcepto);
			cstmt.registerOutParameter(4, Types.NUMERIC);
			cstmt.registerOutParameter(5, Types.VARCHAR);
			cstmt.registerOutParameter(6, Types.NUMERIC);

			cstmt.execute();
			codigoError = cstmt.getLong(4);
			msError = cstmt.getString(5);
			snEvento = cstmt.getLong(6);

			logger.debug("Despues de execute() ");
			logger.debug("Valor de  SN_ERROR [" + codigoError + "]");
			logger.debug("Valor de  SV_MENSAJE[" + msError + "]");
			logger.debug("Valor de  SN_EVENTO[" + snEvento + "]");

			if (codigoError == 0) {
				if (cstmt.getLong(1) == 1) {
					return true;
				}
			} else
				throw new RateUsageRecordsException(
						String.valueOf(codigoError), snEvento,
						"SQLException : " + msError);

		} catch (SQLException e) {
			logger.debug("SQLException ", e);
			throw new RateUsageRecordsException(String
					.valueOf(e.getErrorCode()), snEvento, "SQLException : "
					+ e.getMessage());

		} finally {
			try {
				if (ps != null) {
					ps.close();
				}

				if (rs != null) {
					rs.close();
				}

				if (conn != null) {
					conn.close();
				}
			} catch (Exception e) {
				logger.debug("Exception ", e);
				throw new RateUsageRecordsException("-2129", 0, "Exception : "
						+ e.getMessage());
			}
		}
		logger.debug("validarConcepto():end");
		return false;
	}

	public boolean validarConceptoAfecto(String codConcepto,
			String catImpositiva, String codZonaImpositiva, String fechaSistema)
			throws RateUsageRecordsException {
		logger.debug("validarConceptoAfecto():start");
		Connection conn = null;
		ResultSet rs = null;
		PreparedStatement ps = null;

		CallableStatement cstmt = null;
		/**
		 * EN_CODCONCEPTO IN NUMBER,
		 * 
		 * EN_CODCATIMPOS IN GE_IMPUESTOS.COD_CATIMPOS%type,
		 * 
		 * EN_CODZONAIMPO IN GE_IMPUESTOS.COD_ZONAIMPO%type,
		 * 
		 * EV_FECHASISTEMA IN VARCHAR2,
		 * 
		 * SN_COD_RETORNO OUT NOCOPY NUMBER,
		 * 
		 * SV_MENS_RETORNO OUT NOCOPY VARCHAR2,
		 * 
		 * SN_NUM_EVENTO OUT NOCOPY NUMBER
		 */
		String call = "{?=call FA_SERVICIOS_PG.FA_VALIDA_CONCEPTO_AFECTO_FN( ?,?,?,?,?,?,? ) }";
		logger.debug("Antes de obtener conexion");
		try {
			conn = getConnectionFromWLSInitialContext(myConnectionPool
					.getJndiForDataSource());
		} catch (Exception e1) {
			logger.debug("Exception de conexion", e1);
			throw new RateUsageRecordsException("-2129", 0,
					"No se pudo obtener una conexión : " + e1.getMessage());
		}

		try {
			logger.debug("Antes de ejecutar : " + call);

			cstmt = conn.prepareCall(call, ResultSet.TYPE_SCROLL_INSENSITIVE,
					ResultSet.CONCUR_READ_ONLY);

			logger.debug("Parámetros ");
			logger.debug("EN_CODCONCEPTO [" + codConcepto + "]");
			logger.debug("EN_CODCATIMPOS [" + catImpositiva + "]");
			logger.debug("EN_CODZONAIMPO [" + codZonaImpositiva + "]");
			cstmt.registerOutParameter(1, Types.NUMERIC);
			cstmt.setLong(2, Long.parseLong(codConcepto));
			cstmt.setLong(3, Long.parseLong(catImpositiva));
			cstmt.setLong(4, Long.parseLong(codZonaImpositiva));
			cstmt.setString(5, fechaSistema);
			cstmt.registerOutParameter(6, Types.NUMERIC);
			cstmt.registerOutParameter(7, Types.VARCHAR);
			cstmt.registerOutParameter(8, Types.NUMERIC);

			cstmt.execute();

			codigoError = cstmt.getLong(6);
			msError = cstmt.getString(7);
			snEvento = cstmt.getLong(8);

			logger.debug("Despues de execute() ");
			logger.debug("Valor de  SN_ERROR [" + codigoError + "]");
			logger.debug("Valor de  SV_MENSAJE[" + msError + "]");
			logger.debug("Valor de  SN_EVENTO[" + snEvento + "]");

			if (codigoError == 0) {
				if (cstmt.getLong(1) == 1) {
					return true;
				}
			} else
				throw new RateUsageRecordsException(
						String.valueOf(codigoError), snEvento,
						"SQLException : " + msError);
		} catch (SQLException e) {
			logger.debug("SQLException ", e);
			throw new RateUsageRecordsException(String
					.valueOf(e.getErrorCode()), snEvento, "SQLException : "
					+ e.getMessage());

		} finally {
			try {
				if (ps != null) {
					ps.close();
				}

				if (rs != null) {
					rs.close();
				}

				if (conn != null) {
					conn.close();
				}
			} catch (Exception e) {
				logger.debug("Exception ", e);
				throw new RateUsageRecordsException("-2129", 0, "Exception : "
						+ e.getMessage());
			}
		}
		logger.debug("validarConceptoAfecto():end");
		return false;
	}

	public boolean validarConceptoDescuento(String codCargo,
			String tipoDescuento) throws RateUsageRecordsException {
		logger.debug("validarConceptoDescuento():start");
		Connection conn = null;
		ResultSet rs = null;
		PreparedStatement ps = null;

		CallableStatement cstmt = null;
		/**
		 * FUNCTION FA_VERIFCARGOS_DESCUENTOS_FN (
		 * 
		 * EN_CODCONCEPTOCARGO IN NUMBER,
		 * 
		 * EN_CODCONCEPTODESCUENTO IN NUMBER,
		 * 
		 * SN_COD_RETORNO OUT NOCOPY NUMBER,
		 * 
		 * SV_MENS_RETORNO OUT NOCOPY VARCHAR2,
		 * 
		 * SN_NUM_EVENTO OUT NOCOPY NUMBER)
		 */
		String call = "{?=call FA_SERVICIOS_PG.FA_VERIFCARGOS_DESCUENTOS_FN( ?,?,?,?,? ) }";
		logger.debug("Antes de obtener conexion");
		try {
			conn = getConnectionFromWLSInitialContext(myConnectionPool
					.getJndiForDataSource());
		} catch (Exception e1) {
			logger.debug("Exception de conexion", e1);
			throw new RateUsageRecordsException("-2129", 0,
					"No se pudo obtener una conexión : " + e1.getMessage());
		}

		try {
			logger.debug("Antes de ejecutar : " + call);

			cstmt = conn.prepareCall(call, ResultSet.TYPE_SCROLL_INSENSITIVE,
					ResultSet.CONCUR_READ_ONLY);
			logger.debug("Parámetros ");
			logger.debug("EN_CODCONCEPTOCARGO [" + codCargo + "]");
			logger.debug("EN_CODCONCEPTODESCUENTO [" + tipoDescuento + "]");

			cstmt.registerOutParameter(1, Types.NUMERIC);
			cstmt.setLong(2, Long.parseLong(codCargo));
			cstmt.setLong(3, Long.parseLong(tipoDescuento));
			cstmt.registerOutParameter(4, Types.NUMERIC);
			cstmt.registerOutParameter(5, Types.VARCHAR);
			cstmt.registerOutParameter(6, Types.NUMERIC);
			cstmt.execute();

			codigoError = cstmt.getLong(4);
			msError = cstmt.getString(5);
			snEvento = cstmt.getLong(6);

			logger.debug("Despues de execute() ");
			logger.debug("Valor de  SN_ERROR [" + codigoError + "]");
			logger.debug("Valor de  SV_MENSAJE[" + msError + "]");
			logger.debug("Valor de  SN_EVENTO[" + snEvento + "]");

			if (codigoError == 0) {
				if (cstmt.getLong(1) == 1) {
					return true;
				}
			} else
				throw new RateUsageRecordsException(
						String.valueOf(codigoError), snEvento,
						"SQLException : " + msError);
		} catch (SQLException e) {
			logger.debug("SQLException ", e);
			throw new RateUsageRecordsException(String
					.valueOf(e.getErrorCode()), snEvento, "SQLException : "
					+ e.getMessage());

		} finally {
			try {
				if (ps != null) {
					ps.close();
				}

				if (rs != null) {
					rs.close();
				}

				if (conn != null) {
					conn.close();
				}
			} catch (Exception e) {
				logger.debug("Exception ", e);
				throw new RateUsageRecordsException("-2129", 0, "Exception : "
						+ e.getMessage());
			}
		}
		logger.debug("validarConceptoDescuento():end");
		return false;
	}

	public boolean registrarCargo(RegistrarCargoDTO registrarCargoDTO)
			throws RateUsageRecordsException {

		logger.debug("registrarCargo():start");
		Connection conn = null;
		ResultSet rs = null;
		PreparedStatement ps = null;

		boolean retorno = false;
		CallableStatement cstmt = null;

		String call = "{call FA_SERVICIOS_PG.FA_REGISTRAR_CARGOS_PR(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) }";

		logger.debug("Antes de obtener conexion");
		try {

			conn = getConnectionFromWLSInitialContext(myConnectionPool
					.getJndiForDataSource());

		} catch (Exception e1) {
			logger.debug("Exception de conexion", e1);
			throw new RateUsageRecordsException("-2129", 0,
					"No se pudo obtener una conexión : " + e1.getMessage());
		}

		try {
			logger.debug("Antes de ejecutar : " + call);

			cstmt = conn.prepareCall(call, ResultSet.TYPE_SCROLL_INSENSITIVE,
					ResultSet.CONCUR_READ_ONLY);
			/**
			 * EN_NUM_PROCESO IN NUMBER, //Secuencia
			 * 
			 * EN_COD_CLIENTE IN NUMBER, //ok
			 * 
			 * EN_COD_CONCEPTO IN NUMBER, //ok
			 * 
			 * EN_COLUMNA IN NUMBER, //contador
			 * 
			 * EN_COD_PRODUCTO IN NUMBER, //1
			 * 
			 * EV_COD_MONEDA IN VARCHAR2, //ok
			 * 
			 * EV_FEC_VALOR IN VARCHAR2, //fecha sistema
			 * 
			 * EV_FEC_EFECTIVIDAD IN VARCHAR2, //fecha sistema
			 * 
			 * EN_IMP_CONCEPTO IN NUMBER, //ok por parametro
			 * 
			 * EN_IMP_FACTURABLE IN NUMBER, //mismo importe concepto
			 * 
			 * EN_IMP_MONTOBASE IN NUMBER, //=0
			 * 
			 * EV_COD_REGION IN VARCHAR2, //PL' nueva ga_obteneroficina_pr
			 * 
			 * EV_COD_PROVINCIA IN VARCHAR2, //PL' nueva ga_obteneroficina_pr
			 * 
			 * EV_COD_CIUDAD IN VARCHAR2, //PL' nueva ga_obteneroficina_pr
			 * 
			 * EV_COD_MODULO IN VARCHAR2, //constante
			 * 
			 * EN_COD_PLANCOM IN NUMBER, //PL NUEVA ge_obtplancomercial_fn
			 * 
			 * EN_IND_FACTUR IN NUMBER, // = 1
			 * 
			 * EN_NUM_UNIDADES IN NUMBER, //cantidad
			 * 
			 * EN_COD_CATIMPOS IN NUMBER,
			 * 
			 * EN_IND_ESTADO IN NUMBER, // = 0
			 * 
			 * EN_COD_PORTADOR IN NUMBER, // = 0
			 * 
			 * EN_COD_TIPCONCE IN NUMBER, // si es cargo (3) o descuento(2)
			 * validar
			 * 
			 * EN_COD_CICLFACT IN NUMBER, //= ""
			 * 
			 * EN_COD_CONCEREL IN NUMBER, //= ""
			 * 
			 * EN_COLUMNA_REL IN NUMBER, //= ""
			 * 
			 * EN_NUM_ABONADO IN NUMBER, //= ""
			 * 
			 * EV_NUM_TERMINAL IN VARCHAR2, //= ""
			 * 
			 * EN_CAP_CODE IN NUMBER, //= ""
			 * 
			 * EV_NUM_SERIEMEC IN VARCHAR2, //= ""
			 * 
			 * EV_NUM_SERIELE IN VARCHAR2, //= "0"
			 * 
			 * EN_FLAG_IMPUES IN NUMBER, //= 0
			 * 
			 * EN_FLAG_DTO IN NUMBER, si el cargo tiene descuento en el registro
			 * del
			 * 
			 * cargo se pone 1
			 * 
			 * EN_PRC_IMPUESTO IN NUMBER, //= ""
			 * 
			 * EN_VAL_DTO IN NUMBER, //valor descuento
			 * 
			 * EN_TIP_DTO IN NUMBER, // P=1. M=0
			 * 
			 * EN_NUM_VENTA IN NUMBER, // = ""
			 * 
			 * EN_MES_GARANTIA IN NUMBER, //= ""
			 * 
			 * EN_IND_ALTA IN NUMBER, //= ""
			 * 
			 * EN_IND_SUPERTEL IN NUMBER, //= ""
			 * 
			 * EN_NUM_PAQUETE IN NUMBER, //= ""
			 * 
			 * EN_NUM_TRANSACCION IN NUMBER, //= ""
			 * 
			 * EN_IND_CUOTA IN NUMBER, //= ""
			 * 
			 * EN_NUM_GUIA IN NUMBER, //= ""
			 * 
			 * EN_NUM_CUOTAS IN NUMBER, //= ""
			 * 
			 * EN_ORD_CUOTA IN NUMBER, //= ""
			 * 
			 * EV_DES_NOTACREDC IN VARCHAR2, //= ""
			 * 
			 * EN_IND_MODVENTA IN NUMBER, //modalidadCobro
			 * 
			 * EV_IND_RECUPIVA IN CHAR, null
			 * 
			 * EN_COD_TIPDOCUM IN NUMBER, //= ""
			 * 
			 * EV_COD_TECNOLOGIA IN VARCHAR2, //obtener
			 * 
			 * EV_COD_MONEDAIMP IN VARCHAR2, //el mismo q viene por paramtro
			 * 
			 * EN_IMP_CONVERSION IN NUMBER, //= 1
			 * 
			 * EN_IMP_VALUNITARIO IN NUMBER, //importe unitario
			 * 
			 * EV_GLS_DESCRIP IN VARCHAR2, // = ""
			 * 
			 * SN_COD_RETORNO OUT NOCOPY NUMBER,
			 * 
			 * SV_MENS_RETORNO OUT NOCOPY VARCHAR2,
			 * 
			 * SN_NUM_EVENTO OUT NOCOPY NUMBER)
			 * 
			 */
			int i = 1, x = 0, contadorColumna = 0, tipoConcepto = 0, flagDTO = 0, tipoDescuento = -1;
			long codConcepto = 0;
			// 
			double importeConcepto = 0, cantidad = 0, importDescuento = 0, importeDescuentoDTO = 0, importeFacturable = 0, impMontoBase = 0, importeValUnitario = 0;
			Object valDTO = null, tipDTO = null, codConceRel = null, columnaRel = null;
			CargoDTO[] cargoDTOs = registrarCargoDTO.getCargoDTO();
			MonedaDTO monedaDTO = new MonedaDTO();
			int cantDeci = Integer.parseInt(registrarCargoDTO
					.getCantidadDecimales() != null
					&& !registrarCargoDTO.getCantidadDecimales().trim().equals(
							"") ? registrarCargoDTO.getCantidadDecimales()
					: "0");

			boolean convertir = false, esCargo = true;
			// si las monedas son distintas
			if (registrarCargoDTO.getCodMoneFac() != null
					&& registrarCargoDTO.getCodMoneda() != null
					&& !registrarCargoDTO.getCodMoneFac().equalsIgnoreCase(
							registrarCargoDTO.getCodMoneda())) { // convertir
				// moneda
				// a
				// moneda
				// local

				monedaDTO.setMonedaConc(registrarCargoDTO.getCodMoneda());
				monedaDTO.setMonedaLoc(registrarCargoDTO.getCodMoneFac());
				monedaDTO.setFecConversion(registrarCargoDTO.getFecValor());// fecha
				// sistema

				this.ObtenerConversionMoneda(monedaDTO);

				convertir = true;
			}
			if (cargoDTOs != null)
				for (int j = 0; j < cargoDTOs.length; j++) {
					importeConcepto = 0;
					cantidad = 0;
					importDescuento = 0;
					importeDescuentoDTO = 0;
					importeFacturable = 0;
					impMontoBase = 0;
					importeValUnitario = 0;
					x = 0;
					CargoDTO cargoDTO = cargoDTOs[j];
					while (x < 2 && cargoDTO.getDescuentoDTO() != null) {
						impMontoBase = 0;
						// es cargo
						if (x == 0) {
							esCargo = true;
							contadorColumna = 1;
							codConcepto = Long.parseLong(cargoDTO
									.getCodigoConceptoCargo());
							cantidad = Double.parseDouble(cargoDTO
									.getCantidad());
							importeConcepto = Double.parseDouble(cargoDTO
									.getImporteUnitario())
									* cantidad;

							importeFacturable = Double.parseDouble(cargoDTO
									.getImporteUnitario())
									* cantidad;

							tipoConcepto = 3;
							if (cargoDTO.getDescuentoDTO() != null
									&& cargoDTO.getDescuentoDTO().length > 0
									&& cargoDTO.getDescuentoDTO()[0]
											.getCodigoConceptoDescuento() != null
									&& !cargoDTO.getDescuentoDTO()[0]
											.getCodigoConceptoDescuento()
											.trim().equals("")) {
								//si el cargo trae descuento, pero el descuento viene con importe 0
								if ((cargoDTO.getDescuentoDTO()[0] != null
										&& cargoDTO.getDescuentoDTO()[0]
												.getImporteDescuento() != null && Double
										.parseDouble(cargoDTO.getDescuentoDTO()[0]
												.getImporteDescuento()) == 0)) {

									flagDTO = 0;
								} else {
									flagDTO = 1;
								}

								importDescuento = Double.parseDouble(cargoDTO
										.getDescuentoDTO()[0]
										.getImporteDescuento())
										* -1;
								importeDescuentoDTO = importDescuento;

								if (cargoDTO.getDescuentoDTO()[0]
										.getTipoMonto().equalsIgnoreCase("P")) {
									importeDescuentoDTO = importDescuento * 100;
									// esto se hace porque ya viene dividido por
									// 100
									importDescuento = Double
											.parseDouble(cargoDTO
													.getImporteUnitario())
											* cantidad
											* Double.parseDouble(cargoDTO
													.getDescuentoDTO()[0]
													.getImporteDescuento())
											* -1;

									tipoDescuento = 1;
								} else {
									tipoDescuento = 0;

								}
							} else {
								importDescuento = 0;
								importeDescuentoDTO = 0;
							}

							valDTO = importeDescuentoDTO != 0 ? String
									.valueOf(importeDescuentoDTO < 0 ? importeDescuentoDTO
											* -1
											: importeDescuentoDTO)
									: null;
							tipDTO = valDTO != null ? String
									.valueOf(tipoDescuento) : null;
							columnaRel = null;
							codConceRel = null;
							impMontoBase = 0;
							importeValUnitario = importeConcepto;
						} else {
							esCargo = false;
							// es descuento

							if (cargoDTO.getDescuentoDTO() != null
									&& cargoDTO.getDescuentoDTO().length == 0
									|| (cargoDTO.getDescuentoDTO().length > 0
											&& cargoDTO.getDescuentoDTO()[0]
													.getCodigoConceptoDescuento() != null && cargoDTO
											.getDescuentoDTO()[0]
											.getCodigoConceptoDescuento()
											.trim().equals(""))
									|| (cargoDTO.getDescuentoDTO()[0] != null
											&& cargoDTO.getDescuentoDTO()[0]
													.getImporteDescuento() != null && Double
											.parseDouble(cargoDTO
													.getDescuentoDTO()[0]
													.getImporteDescuento()) == 0)) {
								// si viene vacio no inserta y pasa al siguiente
								// cargo
								x++;
								impMontoBase = 0;
								valDTO = null;
								tipDTO = null;
								flagDTO = 0;
								continue;
							}
							columnaRel = String.valueOf(contadorColumna);// le
							// asigna
							// la
							// coluna del
							// cargo
							codConceRel = String.valueOf(codConcepto);// se
							// le
							// asigna
							// el
							// importeValUnitario = importeConcepto;
							importeValUnitario = Double.parseDouble(cargoDTO
									.getImporteUnitario())
									* cantidad;
							// impMontoBase = importeConcepto;
							impMontoBase = Double.parseDouble(cargoDTO
									.getImporteUnitario())
									* cantidad;
							// codigo del
							// concepto cargo
							contadorColumna = 2;
							cantidad = Double.parseDouble(cargoDTO
									.getCantidad());
							codConcepto = Long.parseLong(cargoDTO
									.getDescuentoDTO()[0]
									.getCodigoConceptoDescuento());

							importeConcepto = Double
									.parseDouble(cargoDTO.getDescuentoDTO()[0]
											.getImporteDescuento())
									* -1;

							tipoConcepto = 2;
							flagDTO = 0;
							importDescuento = Double
									.parseDouble(cargoDTO.getDescuentoDTO()[0]
											.getImporteDescuento())
									* -1;

							if (cargoDTO.getDescuentoDTO()[0].getTipoMonto()
									.equalsIgnoreCase("P")) {

								importeConcepto = (Double.parseDouble(cargoDTO
										.getImporteUnitario()) * Double
										.parseDouble(cargoDTO.getCantidad()))
										* importDescuento;

								importeFacturable = (Double
										.parseDouble(cargoDTO
												.getImporteUnitario()) * Double
										.parseDouble(cargoDTO.getCantidad()))
										* importDescuento;
								// importDescuento=importeFacturable*importDescuento;

								// impMontoBase=impMontoBase*100;
								tipoDescuento = 1;
							} else {
								tipoDescuento = 0;
								importeFacturable = Double.parseDouble(cargoDTO
										.getDescuentoDTO()[0]
										.getImporteDescuento())
										* -1;
							}
							valDTO = null;
							tipDTO = null;
						}

						// si las monedas son distintas

						if (convertir) { // convertir
							// moneda
							// a
							// moneda
							// local
							try {

								importeFacturable = cortarDecimales(
										importeFacturable
												* monedaDTO.getFacConversion(),
										cantDeci);
								impMontoBase = cortarDecimales(impMontoBase
										* monedaDTO.getFacConversion(),
										cantDeci);

								if (esCargo) {
									importeValUnitario = importeFacturable
											/ cantidad;
								} else {
									importeValUnitario = impMontoBase
											/ cantidad;
								}

							} catch (Exception e) {
								logger.debug("Exception ", e);
								throw new RateUsageRecordsException("-1235", 0,
										"Conversion de moneda : "
												+ e.getMessage());
							}
						}

						x++;

						logger
								.debug(" setLong(  registrarCargoDTO.getNumProceso()) : "
										+ registrarCargoDTO.getNumProceso());

						logger
								.debug(" setLong( registrarCargoDTO.getCodCliente()): "
										+ registrarCargoDTO.getCodCliente());
						logger
								.debug(" setLong( cargoDTO.getCodigoConceptoCargo()) : "
										+ codConcepto);
						logger
								.debug(" setLong( registrarCargoDTO.getContadorColumna()):"
										+ contadorColumna);
						logger
								.debug(" setLong( registrarCargoDTO.getCodProducto()): "
										+ registrarCargoDTO.getCodProducto());

						logger
								.debug(" setString( registrarCargoDTO.getCodMoneda()): "
										+ registrarCargoDTO.getCodMoneda());
						logger
								.debug(" setString( registrarCargoDTO.getFecValor()): "
										+ registrarCargoDTO.getFecValor());
						logger
								.debug(" setString( registrarCargoDTO.getFecEfectividad()): "
										+ registrarCargoDTO.getFecEfectividad());
						logger
								.debug(" setDouble( cargoDTO.getImporteUnitario()): "
										+ importeConcepto);

						logger.debug(" setDouble( importeFacturable): "
								+ importeFacturable);
						logger
								.debug(" setDouble( registrarCargoDTO.getImpMontabase()): "
										+ impMontoBase);

						logger
								.debug(" setString( registrarCargoDTO.getCodRegion()): "
										+ registrarCargoDTO.getCodRegion());
						logger
								.debug(" setString( registrarCargoDTO.getCodProvincia()): "
										+ registrarCargoDTO.getCodProvincia());
						logger
								.debug(" setString( registrarCargoDTO.getCodCiudad()): "
										+ registrarCargoDTO.getCodCiudad());
						logger
								.debug(" setString( registrarCargoDTO.getCodModulo()): "
										+ config.getString("codmodulo"));
						logger
								.debug(" setLong( registrarCargoDTO.getCodPlanComercial()): "
										+ registrarCargoDTO
												.getCodPlanComercial());

						logger
								.debug(" setLong( registrarCargoDTO.getIndFactura()()): "
										+ registrarCargoDTO.getIndFactura());

						logger.debug(" setLong( cargoDTO.getCantidad()): "
								+ cantidad);

						logger
								.debug(" setLong( registrarCargoDTO.getCodCatImpositiva()): "
										+ registrarCargoDTO
												.getCodCatImpositiva());
						logger
								.debug(" setLong( registrarCargoDTO.getIndEstado()): "
										+ registrarCargoDTO.getIndEstado());
						logger
								.debug(" setLong( registrarCargoDTO.getCodPortador()): "
										+ registrarCargoDTO.getCodPortador());
						logger
								.debug(" setLong( registrarCargoDTO.getCodTipoConcepto()) : "
										+ tipoConcepto);
						logger
								.debug(" setObject registrarCargoDTO.getCodCicloFactura()): null");
						logger
								.debug(" setObject( registrarCargoDTO.getCodConceRel()): "
										+ codConceRel);

						logger
								.debug(" setObject( registrarCargoDTO.getColumnaRel()): "
										+ columnaRel);
						logger
								.debug(" setObject( registrarCargoDTO.getNumAbonadosl()): null");
						logger
								.debug(" setString( registrarCargoDTO.getNumTerminal()): "
										+ registrarCargoDTO.getNumTerminal());
						logger
								.debug(" setObject( registrarCargoDTO.getCapCode()): null");
						logger
								.debug(" setString( registrarCargoDTO.getNumSerieEmec()): "
										+ registrarCargoDTO.getNumSerieEmec());
						logger
								.debug(" setString( registrarCargoDTO.getNumSerieLe()): 0");

						logger
								.debug(" setLong( registrarCargoDTO.getFlagimpues()): "
										+ registrarCargoDTO.getFlagimpues());

						logger
								.debug(" setLong( registrarCargoDTO.getFlagDTO()) : "
										+ flagDTO);

						logger
								.debug(" setObject( registrarCargoDTO.getPrcImpuesto()): null");

						logger
								.debug(" setObject( registrarCargoDTO.getValDscuento()): "
										+ valDTO);
						logger
								.debug(" setObject( registrarCargoDTO.getTipDescuento()): "
										+ tipDTO);

						logger
								.debug(" setObject registrarCargoDTO.getNumVenta()): null");
						logger
								.debug(" setObject( registrarCargoDTO.getMesGarantia()): null");
						logger
								.debug(" setObject( registrarCargoDTO.getIndAlta()): null");
						logger
								.debug(" setObject(registrarCargoDTO.getIndSuperTel()): null");
						logger
								.debug(" setObject( registrarCargoDTO.getNumPaquete()): null");
						logger
								.debug(" setObject( registrarCargoDTO.getNumTransaccion()): null");
						logger
								.debug(" setObject( registrarCargoDTO.getIndCuota()): null");
						logger
								.debug(" setObject( registrarCargoDTO.getNumGuia()): null");
						logger
								.debug(" setObject( registrarCargoDTO.getNumCuotas()): null");
						logger
								.debug(" setObject( registrarCargoDTO.getOrdCuota()): null");
						logger
								.debug(" setString( registrarCargoDTO.getDesNotaCredito()): "
										+ registrarCargoDTO.getDesNotaCredito());
						logger
								.debug(" setLong(registrarCargoDTO.getIndModVenta()): "
										+ registrarCargoDTO.getIndModVenta());
						logger
								.debug(" setString( registrarCargoDTO.getRecupIva()): "
										+ registrarCargoDTO.getRecupIva());
						logger
								.debug(" setObject(registrarCargoDTO.getTipoDocum()): null");
						logger
								.debug(" setString( registrarCargoDTO.getCodTecnologia()): "
										+ registrarCargoDTO.getCodTecnologia());
						logger
								.debug(" setString( registrarCargoDTO.getCodMoneFac()): "
										+ registrarCargoDTO.getCodMoneFac());
						logger
								.debug(" setLong( registrarCargoDTO.getImpConversion()): "
										+ registrarCargoDTO.getImpConversion());
						logger
								.debug(" setDouble( cargoDTO.getImporteUnitario()): "
										+ importeValUnitario);
						logger
								.debug(" setString( registrarCargoDTO.getGlsDescrip()): "
										+ registrarCargoDTO.getGlsDescrip());
						logger.debug(" registerOutParameter( Types.NUMERIC)");
						logger.debug(" registerOutParameter( Types.VARCHAR)");
						logger.debug(" registerOutParameter( Types.NUMERIC)");

						cstmt.setLong(i++, registrarCargoDTO.getNumProceso());
						cstmt.setLong(i++, registrarCargoDTO.getCodCliente());
						cstmt.setLong(i++, codConcepto);
						cstmt.setLong(i++, contadorColumna);
						cstmt.setLong(i++, registrarCargoDTO.getCodProducto());
						cstmt.setString(i++, registrarCargoDTO.getCodMoneda());
						cstmt.setString(i++, registrarCargoDTO.getFecValor());
						cstmt.setString(i++, registrarCargoDTO
								.getFecEfectividad());
						cstmt.setDouble(i++, importeConcepto);
						// cstmt.setDouble(i++, importeConcepto);
						// importe facturable
						cstmt.setDouble(i++, importeFacturable);
						cstmt.setDouble(i++, impMontoBase);
						cstmt.setString(i++, registrarCargoDTO.getCodRegion());
						cstmt.setString(i++, registrarCargoDTO
								.getCodProvincia());
						cstmt.setString(i++, registrarCargoDTO.getCodCiudad());
						cstmt.setString(i++, config.getString("codmodulo"));
						cstmt.setLong(i++, registrarCargoDTO
								.getCodPlanComercial());
						cstmt.setLong(i++, registrarCargoDTO.getIndFactura());
						cstmt.setDouble(i++, cantidad);
						cstmt.setLong(i++, registrarCargoDTO
								.getCodCatImpositiva());
						cstmt.setLong(i++, registrarCargoDTO.getIndEstado());
						cstmt.setLong(i++, registrarCargoDTO.getCodPortador());
						cstmt.setLong(i++, tipoConcepto);// si es cargo =
						// 3
						// cstmt.setLong(i++,registrarCargoDTO.getCodCicloFactura());
						cstmt.setObject(i++, null);

						cstmt.setObject(i++, codConceRel);
						cstmt.setObject(i++, columnaRel);

						// cstmt.setLong(i++,
						// registrarCargoDTO.getNumAbonadosl());
						cstmt.setObject(i++, null);
						cstmt
								.setString(i++, registrarCargoDTO
										.getNumTerminal());
						// cstmt.setLong(i++,
						// registrarCargoDTO.getCapCode());
						cstmt.setObject(i++, null);
						cstmt.setString(i++, registrarCargoDTO
								.getNumSerieEmec());
						// cstmt.setString(i++,
						// registrarCargoDTO.getNumSerieLe());
						cstmt.setString(i++, "0");
						cstmt.setLong(i++, registrarCargoDTO.getFlagimpues());

						cstmt.setLong(i++, flagDTO);

						// cstmt.setLong(i++,
						// registrarCargoDTO.getPrcImpuesto());
						cstmt.setObject(i++, null);

						// cstmt.setDouble(i++, importDescuento);
						// cstmt.setLong(i++, tipoDescuento);// el PLSQL LO
						cstmt.setObject(i++, valDTO);
						cstmt.setObject(i++, tipDTO);// el PLSQL LO
						// convierte a
						// ""
						// cstmt.setLong(i++,
						// registrarCargoDTO.getNumVenta());
						cstmt.setObject(i++, null);

						// cstmt.setLong(i++,
						// registrarCargoDTO.getMesGarantia());
						cstmt.setObject(i++, null);
						// cstmt.setLong(i++,
						// registrarCargoDTO.getIndAlta());
						cstmt.setObject(i++, null);
						// cstmt.setLong(i++,
						// registrarCargoDTO.getIndSuperTel());
						cstmt.setObject(i++, null);
						// cstmt.setLong(i++,
						// registrarCargoDTO.getNumPaquete());
						cstmt.setObject(i++, null);
						// cstmt.setLong(i++,
						// registrarCargoDTO.getNumTransaccion());
						cstmt.setObject(i++, null);
						// cstmt.setLong(i++,
						// registrarCargoDTO.getIndCuota());
						cstmt.setObject(i++, null);
						// cstmt.setLong(i++,
						// registrarCargoDTO.getNumGuia());
						cstmt.setObject(i++, null);
						// cstmt.setLong(i++,
						// registrarCargoDTO.getNumCuotas());
						cstmt.setObject(i++, null);
						// cstmt.setLong(i++,
						// registrarCargoDTO.getOrdCuota());
						cstmt.setObject(i++, null);
						cstmt.setString(i++, registrarCargoDTO
								.getDesNotaCredito());
						cstmt.setLong(i++, registrarCargoDTO.getIndModVenta());
						cstmt.setString(i++, registrarCargoDTO.getRecupIva());
						// cstmt.setLong(i++,
						// registrarCargoDTO.getTipoDocum());
						cstmt.setObject(i++, null);
						cstmt.setString(i++, registrarCargoDTO
								.getCodTecnologia());
						cstmt.setString(i++, registrarCargoDTO.getCodMoneFac());
						cstmt
								.setLong(i++, registrarCargoDTO
										.getImpConversion());
						// cstmt.setDouble(i++, importeConcepto);
						cstmt.setDouble(i++, importeValUnitario);// que
						// contiene
						// el valor
						// unitario del
						// cargo
						cstmt.setString(i++, registrarCargoDTO.getGlsDescrip());
						cstmt.registerOutParameter(i++, Types.NUMERIC);
						cstmt.registerOutParameter(i++, Types.VARCHAR);
						cstmt.registerOutParameter(i++, Types.NUMERIC);

						cstmt.execute();

						codigoError = cstmt.getLong(55);
						msError = cstmt.getString(56);
						snEvento = cstmt.getLong(57);

						logger.debug("Despues de execute() ");
						logger
								.debug("Valor de  SN_ERROR [" + codigoError
										+ "]");
						logger.debug("Valor de  SV_MENSAJE[" + msError + "]");
						logger.debug("Valor de  SN_EVENTO[" + snEvento + "]");

						if (codigoError == 0) {
							retorno = true;
						} else {
							throw new RateUsageRecordsException(String
									.valueOf(codigoError), snEvento,
									"SQLException : " + msError);
						}
						i = 1;
					}// end while

				}// fin for insert cargos
		} catch (SQLException e) {
			logger.debug("SQLException ", e);
			throw new RateUsageRecordsException(String
					.valueOf(e.getErrorCode()), snEvento, "SQLException : "
					+ e.getMessage());

		} finally {
			try {
				if (ps != null) {
					ps.close();
				}

				if (rs != null) {
					rs.close();
				}

				if (conn != null) {
					conn.close();
				}
			} catch (Exception e) {
				logger.debug("Exception ", e);
				throw new RateUsageRecordsException("-2129", 0, "Exception : "
						+ e.getMessage());
			}
		}
		logger.debug("registrarCargo():end");
		return retorno;
	}

	public boolean ejecutarFactura(EjecutarFacturaDTO ejecutarFacturaDTO)
			throws RateUsageRecordsException {
		logger.debug("registrarCargo():start");
		Connection conn = null;
		ResultSet rs = null;
		PreparedStatement ps = null;

		boolean retorno = false;
		CallableStatement cstmt = null;
		/**
		 * EV_num_proceso IN VARCHAR2,-- Parametro secuenciasDatos
		 * 
		 * EV_num_venta IN VARCHAR2,-- "0"
		 * 
		 * EV_cod_modgener IN VARCHAR2,--
		 * FA_SISTEMA_PG.FA_RECMODGENER_PR(CATEGORIA TRIBUTARIA, MODALIDAD DE
		 * VENTA, CENTRO DE EMISION, TIPO MOVIMIENTO, MOD_GENER. )
		 * 
		 * EV_cod_tipmovimien IN VARCHAR2,--
		 * FA_SISTEMA_PG.FA_RECDATOSGENER_PR(COD_MISCELA-- ESTE ES EL QUE TE
		 * SIRVE ES UN PARAMETRO DE SALIDA, COD_MONEFACT ESTE ES UN PARAMETRO DE
		 * SALIDA)
		 * 
		 * EV_cod_catribut IN VARCHAR2,-- categoria TRIBUTARIA B o F
		 * 
		 * EV_num_folio IN VARCHAR2,-- ""
		 * 
		 * EV_cod_estadoc IN VARCHAR2,-- "100"
		 * 
		 * EV_cod_estproc IN VARCHAR2,-- "3"
		 * 
		 * EV_fec_vencimiento IN VARCHAR2,-- Fecha de vencimiento
		 * 
		 * EV_fec_ingreso IN VARCHAR2,-- "0"
		 * 
		 * EV_cod_modventa IN VARCHAR2,-- Parametro modalidad de venta 1
		 * contado, 2
		 * 
		 * EV_num_cuotas IN VARCHAR2,-- Paramtero de numero de cuotas
		 * 
		 * EV_pref_plaza_rel IN VARCHAR2,-- ""
		 * 
		 * EV_tip_foliacion IN VARCHAR2,-- ""
		 * 
		 * EV_cod_tipdocum IN VARCHAR2,---- ""
		 * 
		 * SN_COD_RETORNO OUT NOCOPY NUMBER,
		 * 
		 * SV_MENS_RETORNO OUT NOCOPY VARCHAR2,
		 * 
		 * SN_NUM_EVENTO OUT NOCOPY NUMBER)
		 * 
		 */
		String call = "{call FA_SERVICIOS_PG.FA_EJECUTAR_FACTURA_PR(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) }";

		logger.debug("Antes de obtener conexion");
		try {

			conn = getConnectionFromWLSInitialContext(myConnectionPool
					.getJndiForDataSource());

		} catch (Exception e1) {
			logger.debug("Exception de conexion", e1);
			throw new RateUsageRecordsException("-2129", 0,
					"No se pudo obtener una conexión : " + e1.getMessage());
		}

		try {
			logger.debug("Antes de ejecutar : " + call);
			try {
				cstmt = conn.prepareCall(call,
						ResultSet.TYPE_SCROLL_INSENSITIVE,
						ResultSet.CONCUR_READ_ONLY);

				int i = 1;
				logger
						.debug("setString ejecutarFacturaDTO.getEV_num_proceso():  "
								+ ejecutarFacturaDTO.getEV_num_proceso());
				logger
						.debug("setString ejecutarFacturaDTO.getEV_num_venta():  "
								+ ejecutarFacturaDTO.getEV_num_venta());
				logger
						.debug("setString ejecutarFacturaDTO.getEV_cod_modgener():  "
								+ ejecutarFacturaDTO.getEV_cod_modgener());
				logger
						.debug("setString ejecutarFacturaDTO.getEV_cod_tipmovimien():  "
								+ ejecutarFacturaDTO.getEV_cod_tipmovimien());
				logger
						.debug("setString ejecutarFacturaDTO.getEV_cod_catribut():  "
								+ ejecutarFacturaDTO.getEV_cod_catribut());
				logger
						.debug(" setString ejecutarFacturaDTO.getEV_num_folio():  "
								+ ejecutarFacturaDTO.getEV_num_folio());
				logger
						.debug(" setString ejecutarFacturaDTO.getEV_cod_estadoc():  "
								+ ejecutarFacturaDTO.getEV_cod_estadoc());
				logger
						.debug(" setString ejecutarFacturaDTO.getEV_cod_estproc():  "
								+ ejecutarFacturaDTO.getEV_cod_estproc());
				logger
						.debug(" setString ejecutarFacturaDTO.getEV_fec_vencimiento():  "
								+ ejecutarFacturaDTO.getEV_fec_vencimiento());
				logger
						.debug(" setString ejecutarFacturaDTO.getEV_fec_ingreso():  "
								+ ejecutarFacturaDTO.getEV_fec_ingreso());

				logger
						.debug(" setString ejecutarFacturaDTO.getEV_cod_modventa():  "
								+ ejecutarFacturaDTO.getEV_cod_modventa());
				logger
						.debug(" setString ejecutarFacturaDTO.getEV_num_cuotas():  "
								+ ejecutarFacturaDTO.getEV_num_cuotas());
				logger
						.debug(" setString ejecutarFacturaDTO.getEV_pref_plaza_rel():  "
								+ ejecutarFacturaDTO.getEV_pref_plaza_rel());
				logger
						.debug(" setString ejecutarFacturaDTO.getEV_tip_foliacion():  "
								+ ejecutarFacturaDTO.getEV_tip_foliacion());
				logger
						.debug(" setString ejecutarFacturaDTO.getEV_cod_tipdocum():  "
								+ ejecutarFacturaDTO.getEV_cod_tipdocum());
				cstmt.setString(i++, ejecutarFacturaDTO.getEV_num_proceso());// usar
				// "GE"
				cstmt.setString(i++, ejecutarFacturaDTO.getEV_num_venta());
				cstmt.setString(i++, ejecutarFacturaDTO.getEV_cod_modgener());
				cstmt
						.setString(i++, ejecutarFacturaDTO
								.getEV_cod_tipmovimien());
				cstmt.setString(i++, ejecutarFacturaDTO.getEV_cod_catribut());
				cstmt.setString(i++, ejecutarFacturaDTO.getEV_num_folio());
				cstmt.setString(i++, ejecutarFacturaDTO.getEV_cod_estadoc());
				cstmt.setString(i++, ejecutarFacturaDTO.getEV_cod_estproc());
				cstmt
						.setString(i++, ejecutarFacturaDTO
								.getEV_fec_vencimiento());
				cstmt.setString(i++, ejecutarFacturaDTO.getEV_fec_ingreso());
				cstmt.setString(i++, ejecutarFacturaDTO.getEV_cod_modventa());
				cstmt.setString(i++, ejecutarFacturaDTO.getEV_num_cuotas());
				cstmt.setString(i++, ejecutarFacturaDTO.getEV_pref_plaza_rel());
				cstmt.setString(i++, ejecutarFacturaDTO.getEV_tip_foliacion());
				cstmt.setString(i++, ejecutarFacturaDTO.getEV_cod_tipdocum());

				cstmt.registerOutParameter(i++, Types.NUMERIC);
				cstmt.registerOutParameter(i++, Types.VARCHAR);
				cstmt.registerOutParameter(i++, Types.NUMERIC);

				cstmt.execute();

				long codigoError = cstmt.getLong(16);
				String msError = cstmt.getString(17);
				long snEvento = cstmt.getLong(18);

				logger.debug("Despues de execute() ");
				logger.debug("Valor de  SN_ERROR [" + codigoError + "]");
				logger.debug("Valor de  SV_MENSAJE[" + msError + "]");
				logger.debug("Valor de  SN_EVENTO[" + snEvento + "]");

				if (codigoError == 0)
					retorno = true;
				else
					throw new RateUsageRecordsException(String
							.valueOf(codigoError), snEvento, "SQLException : "
							+ msError);

			} catch (SQLException e) {
				logger.debug("SQLException ", e);
				throw new RateUsageRecordsException(String.valueOf(e
						.getErrorCode()), snEvento, "SQLException : "
						+ e.getMessage());
			}

		} finally {
			try {
				if (ps != null) {
					ps.close();
				}

				if (rs != null) {
					rs.close();
				}

				if (conn != null) {
					conn.close();
				}
			} catch (Exception e) {
				logger.debug("Exception ", e);
				throw new RateUsageRecordsException("-2129", 0, "Exception : "
						+ e.getMessage());
			}
		}
		logger.debug("registrarCargo():end");
		return retorno;

	}

	public boolean registrarProceso(ProcesoDTO procesoDTO)
			throws RateUsageRecordsException {

		boolean bRetorno = false;
		logger.debug("registrarProceso():start");
		Connection conn = null;
		ResultSet rs = null;
		PreparedStatement ps = null;
		CallableStatement cstmt = null;
		/**
		 * PROCEDURE FA_REGISTRAR_PROCESO_PR (
		 * 
		 * EN_NUM_PROCESO IN FA_PROCESOS.NUM_PROCESO%type,(NUMBER)
		 * 
		 * EN_COD_TIPDOCUM IN FA_PROCESOS.COD_TIPDOCUM%type,(NUMBER)
		 * 
		 * EN_COD_VENDEDOR_AGENTE IN FA_PROCESOS.COD_VENDEDOR_AGENTE%type,
		 * (NUMBER)
		 * 
		 * EN_COD_CENTREMI IN FA_PROCESOS.COD_CENTREMI%type,(NUMBER)
		 * 
		 * ED_FEC_EFECTIVIDAD IN VARCHAR2,
		 * 
		 * EV_NOM_USUARORA IN FA_PROCESOS.NOM_USUARORA%type,(VARCHAR 30)
		 * 
		 * EV_LETRAAG IN FA_PROCESOS.LETRAAG%type, (VARCHAR)
		 * 
		 * EN_NUM_SECUAG IN FA_PROCESOS.NUM_SECUAG%type,
		 * 
		 * EN_COD_TIPDOCNOT IN FA_PROCESOS.COD_TIPDOCNOT%type,
		 * 
		 * EN_COD_VENDEDOR_AGENTENOT IN FA_PROCESOS.COD_VENDEDOR_AGENTENOT%type,
		 * 
		 * EV_LETRANOT IN FA_PROCESOS.LETRANOT%type,
		 * 
		 * EV_COD_CENTRNOT IN FA_PROCESOS.COD_CENTRNOT%type,
		 * 
		 * EN_NUM_SECUNOT IN FA_PROCESOS.NUM_SECUNOT%type,
		 * 
		 * EN_IND_ESTADO IN FA_PROCESOS.IND_ESTADO%type,
		 * 
		 * EN_COD_CICLFACT IN FA_PROCESOS.COD_CICLFACT%type,
		 * 
		 * EN_IND_NOTACREDC IN FA_PROCESOS.IND_NOTACREDC%type,
		 * 
		 * SN_COD_RETORNO OUT NOCOPY NUMBER,
		 * 
		 * SV_MENS_RETORNO OUT NOCOPY VARCHAR2,
		 * 
		 * SN_NUM_EVENTO OUT NOCOPY NUMBER);
		 * 
		 * 
		 */
		String call = "{call FA_SERVICIOS_PG.FA_REGISTRAR_PROCESO_PR( ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,? ) }";
		logger.debug("Antes de obtener conexion");

		try {
			conn = getConnectionFromWLSInitialContext(myConnectionPool
					.getJndiForDataSource());
		} catch (Exception e1) {
			logger.debug("Exception de conexion", e1);
			throw new RateUsageRecordsException("-2129", 0,
					"No se pudo obtener una conexión : " + e1.getMessage());
		}
		try {
			int i = 1;
			logger.debug("Antes de ejecutar : " + call);

			cstmt = conn.prepareCall(call, ResultSet.TYPE_SCROLL_INSENSITIVE,
					ResultSet.CONCUR_READ_ONLY);
			logger.debug(" setLong procesoDTO.getNumProceso() : "
					+ procesoDTO.getNumProceso());
			logger.debug(" setInt procesoDTO.getCodTipDocum() : "
					+ procesoDTO.getCodTipDocum());
			logger.debug(" setLong procesoDTO.getCodVenAgente() : "
					+ procesoDTO.getCodVenAgente());
			logger.debug(" setInt  procesoDTO.getCodCentremi() : "
					+ procesoDTO.getCodCentremi());
			logger.debug(" setString procesoDTO.getFecEfectividad() : "
					+ procesoDTO.getFecEfectividad());
			logger.debug(" setString procesoDTO.getNomUsuarora() : "
					+ procesoDTO.getNomUsuarora());
			logger.debug(" setString procesoDTO.getLetraAg() : "
					+ procesoDTO.getLetraAg());
			logger.debug(" setLong procesoDTO.getNumSecuag(): "
					+ procesoDTO.getNumSecuag());
			logger.debug(" setObject procesoDTO.getCodTipDocNot() : null");
			logger.debug(" setObject  procesoDTO.getCodVenAgenteNot() : null");
			logger.debug(" setString procesoDTO.getLetraNot() : "
					+ procesoDTO.getLetraNot());
			logger.debug(" setObject procesoDTO.getCodCentrNot() :  null");
			logger.debug(" setObject procesoDTO.getNumSecNot(): : null");
			logger.debug(" setInt procesoDTO.getIndEstado() : "
					+ procesoDTO.getIndEstado());
			logger.debug(" setObject procesoDTO.getCodCiclFact() : null");
			logger.debug(" setInt procesoDTO.getIndNotaCredc() : "
					+ procesoDTO.getIndNotaCredc());
			cstmt.setLong(i++, procesoDTO.getNumProceso());
			cstmt.setInt(i++, procesoDTO.getCodTipDocum());
			cstmt.setLong(i++, procesoDTO.getCodVenAgente());
			cstmt.setInt(i++, procesoDTO.getCodCentremi());
			cstmt.setString(i++, procesoDTO.getFecEfectividad());
			cstmt.setString(i++, procesoDTO.getNomUsuarora());
			cstmt.setString(i++, procesoDTO.getLetraAg());
			cstmt.setLong(i++, procesoDTO.getNumSecuag());
			// cstmt.setInt(9, procesoDTO.getCodTipDocNot());
			cstmt.setObject(i++, null);
			// cstmt.setLong(10, procesoDTO.getCodVenAgenteNot());
			cstmt.setObject(i++, null);
			cstmt.setString(i++, procesoDTO.getLetraNot());
			// cstmt.setInt(12, procesoDTO.getCodCentrNot());
			cstmt.setObject(i++, null);
			// cstmt.setLong(13, procesoDTO.getNumSecNot());
			cstmt.setObject(i++, null);
			cstmt.setInt(i++, procesoDTO.getIndEstado());
			// cstmt.setLong(15, procesoDTO.getCodCiclFact());
			cstmt.setObject(i++, null);
			cstmt.setInt(i++, procesoDTO.getIndNotaCredc());

			cstmt.registerOutParameter(i++, Types.NUMERIC);
			cstmt.registerOutParameter(i++, Types.VARCHAR);
			cstmt.registerOutParameter(i++, Types.NUMERIC);

			cstmt.execute();

			codigoError = cstmt.getLong(17);
			msError = cstmt.getString(18);
			snEvento = cstmt.getLong(19);

			logger.debug("Despues de execute() ");
			logger.debug("Valor de  SN_ERROR [" + codigoError + "]");
			logger.debug("Valor de  SV_MENSAJE[" + msError + "]");
			logger.debug("Valor de  SN_EVENTO[" + snEvento + "]");

			if (codigoError == 0)
				bRetorno = true;
			else
				throw new RateUsageRecordsException(
						String.valueOf(codigoError), snEvento,
						"SQLException : " + msError);
		} catch (SQLException e) {
			logger.debug("SQLException ", e);
			throw new RateUsageRecordsException(String
					.valueOf(e.getErrorCode()), snEvento, "SQLException : "
					+ e.getMessage());

		} finally {
			try {
				if (ps != null) {
					ps.close();
				}
				if (rs != null) {
					rs.close();
				}
				if (conn != null) {
					conn.close();
				}
			} catch (Exception e) {
				logger.debug("Exception ", e);
				throw new RateUsageRecordsException("-2129", 0, "Exception : "
						+ e.getMessage());
			}
		}

		logger.debug("registrarProceso():end");
		return bRetorno;
	}

	/**
	 * 
	 * @param monedaDTO
	 * @return
	 * @throws RateUsageRecordsException
	 */
	private boolean ObtenerConversionMoneda(MonedaDTO monedaDTO)
			throws RateUsageRecordsException {
		logger.debug("ObtenerConversionMoneda():start");
		Connection conn = null;
		ResultSet rs = null;
		PreparedStatement ps = null;
		CallableStatement cstmt = null;
		boolean result = false;
		/**
		 * PROCEDURE GE_OBTENERCAMBIO_PR (
		 * 
		 * EN_COD_MONEDA IN GE_CONVERSION.COD_MONEDA%TYPE,
		 * 
		 * EV_FECHAINGRESO IN VARCHAR2,
		 * 
		 * SN_CAMBIO OUT GE_CONVERSION.CAMBIO%TYPE,
		 * 
		 * SN_COD_RETORNO OUT NOCOPY NUMBER,
		 * 
		 * SV_MENS_RETORNO OUT NOCOPY VARCHAR2,
		 * 
		 * SN_NUM_EVENTO OUT NOCOPY NUMBER)
		 */
		String call = "{call GE_SISTEMA_PG.GE_OBTENERCAMBIO_PR( ?,?,?,?,?,? ) }";
		logger.debug("Antes de obtener conexion");
		try

		{
			conn = getConnectionFromWLSInitialContext(myConnectionPool
					.getJndiForDataSource());

		}

		catch (Exception e1) {
			logger.debug("Exception de conexion", e1);
			throw new RateUsageRecordsException("-2129", 0,
					"No se pudo obtener una conexión : " + e1.getMessage());
		}
		try {
			logger.debug("Antes de ejecutar : " + call);

			cstmt = conn.prepareCall(call, ResultSet.TYPE_SCROLL_INSENSITIVE,
					ResultSet.CONCUR_READ_ONLY);
			int i = 1;
			logger.debug("Parametros de entrada: ");
			logger.debug("COD_MONEDA : " + monedaDTO.getMonedaConc());
			logger.debug("FECHAINGRESO : " + monedaDTO.getFecConversion());
			cstmt.setString(i++, monedaDTO.getMonedaConc());
			cstmt.setString(i++, monedaDTO.getFecConversion());
			cstmt.registerOutParameter(i++, Types.NUMERIC);
			cstmt.registerOutParameter(i++, Types.NUMERIC);
			cstmt.registerOutParameter(i++, Types.VARCHAR);
			cstmt.registerOutParameter(i++, Types.NUMERIC);
			cstmt.execute();
			codigoError = cstmt.getLong(4);
			msError = cstmt.getString(5);
			snEvento = cstmt.getLong(6);

			logger.debug("Despues de execute() ");
			logger.debug("Valor de  SN_ERROR [" + codigoError + "]");
			logger.debug("Valor de  SV_MENSAJE[" + msError + "]");
			logger.debug("Valor de  SN_EVENTO[" + snEvento + "]");

			if (codigoError == 0) {
				if (cstmt.getDouble(3) == 0)
					result = false;
				else {
					monedaDTO.setFacConversion(cstmt.getDouble(3));
					result = true;
				}
			} else
				throw new RateUsageRecordsException(
						String.valueOf(codigoError), snEvento,
						"SQLException : " + msError);

		}

		catch (SQLException e)

		{
			logger.debug("SQLException ", e);
			new RateUsageRecordsException(String.valueOf(codigoError),
					snEvento, "SQLException : " + msError);
		}

		finally

		{
			try {
				if (ps != null) {
					ps.close();
				}
				if (rs != null) {
					rs.close();
				}
				if (conn != null) {
					conn.close();
				}
			}

			catch (Exception e) {
				logger.debug("Exception ", e);
				throw new RateUsageRecordsException("-2129", 0, "Exception : "
						+ e.getMessage());

			}

		}
		logger.debug("ObtenerConversionMoneda():end");
		return result;

	}

	/**
	 * corta los decimales
	 * 
	 * @param valor
	 * @param cantdeci
	 * @return
	 * @throws Exception
	 */
	private double cortarDecimales(double valor, int cantdeci) throws Exception {
		logger.debug("cortarDecimales: start");
		logger.debug("Entrada [" + valor + ", " + cantdeci + "]");
		BigDecimal bigDecimal = new BigDecimal(0.0);
		;
		try {
			bigDecimal = new BigDecimal(valor);
			bigDecimal = bigDecimal.setScale(cantdeci,
					BigDecimal.ROUND_HALF_DOWN);

		} catch (Exception e) {
			throw new Exception(e.getMessage());
		}
		logger.debug("Salida [" + bigDecimal.doubleValue() + "]");
		logger.debug("cortarDecimales: end");
		return bigDecimal.doubleValue();
	}

}
