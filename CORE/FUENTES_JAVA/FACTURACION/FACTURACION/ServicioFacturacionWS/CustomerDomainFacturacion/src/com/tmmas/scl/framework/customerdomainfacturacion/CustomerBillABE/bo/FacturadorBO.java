//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : P-TMM-08004
//  @ File Name : FacturadorBO.java
//  @ Date : 09/09/2008
//  @ Author : hsegura
//
//

package com.tmmas.scl.framework.customerdomainfacturacion.CustomerBillABE.bo;

import org.apache.commons.configuration.CompositeConfiguration;
import org.apache.log4j.Logger;

import com.tmmas.cl.framework20.util.UtilProperty;
import com.tmmas.scl.framework.CustomerDomain.CustomerABE.dto.ClienteDTO;
import com.tmmas.scl.framework.CustomerDomain.CustomerBillABE.dto.CargoDTO;
import com.tmmas.scl.framework.CustomerDomain.CustomerBillABE.dto.DescuentoDTO;
import com.tmmas.scl.framework.CustomerDomain.CustomerBillABE.dto.EjecutarFacturaDTO;
import com.tmmas.scl.framework.CustomerDomain.CustomerBillABE.dto.FacturaMiscelaneaEntradaDTO;
import com.tmmas.scl.framework.CustomerDomain.CustomerBillABE.dto.ProcesoDTO;
import com.tmmas.scl.framework.CustomerDomain.CustomerBillABE.dto.RegistrarCargoDTO;
import com.tmmas.scl.framework.CustomerDomain.exception.RateUsageRecordsException;
import com.tmmas.scl.framework.customerdomainfacturacion.CustomerABE.bo.ClienteBO;
import com.tmmas.scl.framework.customerdomainfacturacion.CustomerABE.dao.ClienteDAO;
import com.tmmas.scl.framework.customerdomainfacturacion.CustomerABE.dao.Interface.ClienteDAOIT;
import com.tmmas.scl.framework.customerdomainfacturacion.CustomerBillABE.bo.Interface.FacturadorBOIT;
import com.tmmas.scl.framework.customerdomainfacturacion.CustomerBillABE.dao.FacturadorDAO;
import com.tmmas.scl.framework.customerdomainfacturacion.CustomerBillABE.dao.Interface.FacturadorDAOIT;

public class FacturadorBO implements FacturadorBOIT {

	private static Logger logger = Logger.getLogger(FacturadorBO.class);

	private CompositeConfiguration config;

	public FacturadorBO() {
		super();
		config = UtilProperty
				.getConfiguration("ServicioFacturacionWS.properties",
						"com/tmmas/scl/framework/properties/archivorecursos.properties");
	}

	/**
	 * @throws RateUsageRecordsException
	 * 
	 */
	public boolean validarModalidadCobro(String modalidadCobro)
			throws RateUsageRecordsException {
		logger.debug("validarModalidadCobro():start");
		FacturadorDAOIT facturadorDAO = new FacturadorDAO();
		boolean result = false;
		result = facturadorDAO.validarModalidadCobro(modalidadCobro);
		logger.debug("validarModalidadCobro():end");
		return result;
	}

	/**
	 * 
	 */
	public boolean validarMoneda(String moneda)
			throws RateUsageRecordsException {
		logger.debug("validarMoneda():start");
		FacturadorDAOIT facturadorDAO = new FacturadorDAO();
		boolean result = false;
		result = facturadorDAO.validarMoneda(moneda);
		logger.debug("validarMoneda():end");
		return result;
	}

	public boolean validarTipoDocumento(String tipoDocumento,
			ClienteDTO clienteDTO) throws RateUsageRecordsException {

		logger.debug("validarTipoDocumento():start");
		boolean result = true;
		//ClienteDAOIT clienteDAO = new ClienteDAO();
		// Obtener categoria tributaria del cliente, Si categoría es "B" (de
		// boleta), sólo puede facturar boleta.
		if (clienteDTO.getCodCategoria().trim().equalsIgnoreCase("B")
				&& !clienteDTO.getCodCategoria().equals(tipoDocumento)) {
			result = false;
		}
		logger.debug("validarTipoDocumento():end");
		return result;
	}

	public boolean validarCargo(CargoDTO cargoDTO)
			throws RateUsageRecordsException {
		FacturadorDAOIT facturadorDAO = new FacturadorDAO();
		boolean result = true;
		logger.debug("validarCargo():start");
		// Valida el cargo
		if (cargoDTO != null && cargoDTO.getCodigoConceptoCargo() != null
				&& !cargoDTO.getCodigoConceptoCargo().trim().equals("")) {
			if (!facturadorDAO.validarConcepto(cargoDTO
					.getCodigoConceptoCargo(), "C")) {
				result = false;
			} else {
				// valida los descuento
				DescuentoDTO[] descuentos = cargoDTO.getDescuentoDTO();
				if (descuentos != null && descuentos.length == 1) {
					String idDescuento = descuentos[0]
							.getCodigoConceptoDescuento();

					if (idDescuento != null && !idDescuento.trim().equals("")) {
						if (!facturadorDAO.validarConcepto(idDescuento, "D")) {

							result = false;
						} else {
							
							try {
								double valorDescuento = descuentos[0]
										.getImporteDescuento() != null
										&& !descuentos[0].getImporteDescuento()
												.trim().equals("") ? Double
										.parseDouble(descuentos[0]
												.getImporteDescuento()) : 0;
								double valorCargo = cargoDTO
										.getImporteUnitario() != null
										&& !cargoDTO.getImporteUnitario()
												.trim().equals("") ? Double
										.parseDouble(cargoDTO
												.getImporteUnitario()) : 0;

								double cantidad = cargoDTO.getCantidad() != null
										&& !cargoDTO.getCantidad().trim()
												.equals("") ? Double
										.parseDouble(cargoDTO.getCantidad())
										: 0;

								// además debe validar que el monto del
								// descuento no sea
								// superior al cargo*cantidad
								if (valorDescuento > (valorCargo * cantidad)) {
									result = false;
								}
							} catch (Exception e) {
								logger.debug("error : " + e.getMessage());
								result= false;

							}
						}

					}
				}
			}
		}
		logger.debug("validarCargo():end");
		return result;
	}

	public boolean validarConceptoAfecto(String codConcepto,
			String catImpositiva, String codZonaImpositiva, String fechaSistema)
			throws RateUsageRecordsException {
		logger.debug("validarConceptoAfecto():start");
		FacturadorDAOIT facturadorDAO = new FacturadorDAO();
		boolean result = false;
		result = facturadorDAO.validarConceptoAfecto(codConcepto,
				catImpositiva, codZonaImpositiva, fechaSistema);
		logger.debug("validarConceptoAfecto():end");
		return result;
	}

	public boolean registrarCargo(RegistrarCargoDTO registrarCargoDTO)
			throws RateUsageRecordsException {
		logger.debug("registrarCargo():start");
		FacturadorDAOIT facturadorDAO = new FacturadorDAO();
		boolean result = false;

		result = facturadorDAO.registrarCargo(registrarCargoDTO);
		logger.debug("registrarCargo():end");
		return result;
	}

	public boolean ejecutarFactura(EjecutarFacturaDTO ejecutarFacturaDTO)
			throws RateUsageRecordsException {
		logger.debug("ejecutarFactura():start");
		FacturadorDAOIT facturadorDAO = new FacturadorDAO();
		boolean result = false;
		result = facturadorDAO.ejecutarFactura(ejecutarFacturaDTO);
		logger.debug("ejecutarFactura():end");
		return result;
	}

	public boolean registrarProceso(ProcesoDTO procesoDTO)
			throws RateUsageRecordsException {
		logger.debug("registrarProceso():start");
		FacturadorDAOIT facturadorDAO = new FacturadorDAO();
		boolean result = false;
		result = facturadorDAO.registrarProceso(procesoDTO);
		logger.debug("registrarProceso():end");
		return result;
	}

	public boolean validarConceptoDescuento(String codCargo, String tipoDescuento) throws RateUsageRecordsException {
		logger.debug("validarConceptoDescuento():start");
		FacturadorDAOIT facturadorDAO = new FacturadorDAO();
		boolean result = false;

		result = facturadorDAO.validarConceptoDescuento(codCargo, tipoDescuento);
		logger.debug("validarConceptoDescuento():end");
		return result;
	}
}
