//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : P-TMM-08004
//  @ File Name : ConfiguracionSistemaDAO.java
//  @ Date : 09/09/2008
//  @ Author : hsegura
//
//

package com.tmmas.scl.framework.Sistema.dao;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;

import oracle.jdbc.OracleTypes;

import org.apache.commons.configuration.CompositeConfiguration;
import org.apache.log4j.Logger;

import com.tmmas.cl.framework.base.ConnectionDAO;
import com.tmmas.cl.framework20.util.UtilProperty;
import com.tmmas.scl.framework.CustomerDomain.exception.RateUsageRecordsException;
import com.tmmas.scl.framework.Sistema.dao.Interface.ConfiguracionSistemaDAOIT;
import com.tmmas.scl.framework.Sistema.dto.FormatoFechaDTO;
import com.tmmas.scl.framework.Sistema.helper.FacturaConnectionPool;

public class ConfiguracionSistemaDAO extends ConnectionDAO implements
		ConfiguracionSistemaDAOIT {

	private static FacturaConnectionPool myConnectionPool = FacturaConnectionPool
			.getInstance();

	private static Logger logger = Logger
			.getLogger(ConfiguracionSistemaDAO.class);

	private CompositeConfiguration config;

	private long codigoError;

	private String msError;

	private long snEvento;

	public ConfiguracionSistemaDAO() {
		super();
		config = UtilProperty
				.getConfiguration("ServicioFacturacionWS.properties",
						"com/tmmas/scl/framework/properties/archivorecursos.properties");
	}

	public String obtenerFechaSistema() throws RateUsageRecordsException {
		logger.debug("obtenerFechaSistema():start");
		Connection conn = null;
		ResultSet rs = null;
		PreparedStatement ps = null;
		String fechaSistema = null;
		CallableStatement cstmt = null;
		/**
		 * 
		 * FUNCTION GE_RECUPERAR_FECHA_SISTEMA_FN (
		 * 
		 * SN_COD_RETORNO OUT NOCOPY NUMBER,
		 * 
		 * SV_MENS_RETORNO OUT NOCOPY VARCHAR2,
		 * 
		 * SN_NUM_EVENTO OUT NOCOPY NUMBER)
		 */
		String call = "{?=call GE_SISTEMA_PG.GE_RECUPERAR_FECHA_SISTEMA_FN ( ?,?,? ) }";
		logger.debug("Antes de obtener conexion");
		try {
			conn = getConnectionFromWLSInitialContext(myConnectionPool
					.getJndiForDataSource());
		} catch (Exception e1) {
			logger.debug("Exception de conexion", e1);
			throw new RateUsageRecordsException("-2129", 0,
					"No se pudo obtener una conexión : " + e1.getMessage());
		}

		try {
			logger.debug("Antes de ejecutar : " + call);

			cstmt = conn.prepareCall(call, ResultSet.TYPE_SCROLL_INSENSITIVE,
					ResultSet.CONCUR_READ_ONLY);
			cstmt.registerOutParameter(1, Types.VARCHAR);
			cstmt.registerOutParameter(2, Types.NUMERIC);
			cstmt.registerOutParameter(3, Types.VARCHAR);
			cstmt.registerOutParameter(4, Types.NUMERIC);

			cstmt.execute();

			codigoError = cstmt.getLong(2);
			msError = cstmt.getString(3);
			snEvento = cstmt.getLong(4);

			logger.debug("Despues de execute() ");

			logger.debug("Valor de  SN_ERROR [" + codigoError + "]");
			logger.debug("Valor de  SV_MENSAJE[" + msError + "]");
			logger.debug("Valor de  SN_EVENTO[" + snEvento + "]");

			if (codigoError == 0) {
				fechaSistema = cstmt.getString(1);
			} else
				throw new RateUsageRecordsException(
						String.valueOf(codigoError), snEvento,
						"SQLException : " + msError);
		} catch (SQLException e) {
			logger.debug("SQLException ", e);
			throw new RateUsageRecordsException(String
					.valueOf(e.getErrorCode()), snEvento, "SQLException : "
					+ e.getMessage());

		} finally {
			try {
				if (ps != null) {
					ps.close();
				}

				if (rs != null) {
					rs.close();
				}

				if (conn != null) {
					conn.close();
				}
			} catch (Exception e) {
				logger.debug("Exception ", e);
				throw new RateUsageRecordsException("-2129", 0, "Exception : "
						+ e.getMessage());
			}
		}
		logger.debug("obtenerFechaSistema():end");
		return fechaSistema;
	}

	public FormatoFechaDTO obtenerParametrosFechasSCL()
			throws RateUsageRecordsException {
		logger.debug("obtenerParametrosFechasSCL():start");
		Connection conn = null;
		ResultSet rs = null;
		PreparedStatement ps = null;

		CallableStatement cstmt = null;

		String call = "{call GE_SISTEMA_PG.GE_REC_PARAM_FECHA_PR(?,?,?,?,?,?) }";

		logger.debug("Antes de obtener conexion");
		try {

			conn = getConnectionFromWLSInitialContext(myConnectionPool
					.getJndiForDataSource());

		} catch (Exception e1) {
			logger.debug("Exception de conexion", e1);
			throw new RateUsageRecordsException("-2129", 0,
					"No se pudo obtener una conexión : " + e1.getMessage());
		}

		try {
			logger.debug("Antes de ejecutar : " + call);
			try {
				cstmt = conn.prepareCall(call,
						ResultSet.TYPE_SCROLL_INSENSITIVE,
						ResultSet.CONCUR_READ_ONLY);

				cstmt.setString(1, config.getString("codmodulo").trim());// usar
				// "GE"
				cstmt.setInt(2, Integer.parseInt(config
						.getString("codproducto").trim())); // usar 1
				cstmt.registerOutParameter(3, OracleTypes.CURSOR);
				cstmt.registerOutParameter(4, Types.NUMERIC);
				cstmt.registerOutParameter(5, Types.VARCHAR);
				cstmt.registerOutParameter(6, Types.NUMERIC);
				cstmt.execute();

				rs = (ResultSet) cstmt.getObject(3);

				logger.debug("Antes de entrar a cursor  ");

				/*
				 * while (rs.next()) { System.out.print("NOM_PARAMETRO" +
				 * rs.getString("NOM_PARAMETRO"));
				 * System.out.print("VAL_PARAMETRO" +
				 * rs.getString("VAL_PARAMETRO"));
				 * System.out.print("DES_PARAMETRO" +
				 * rs.getString("DES_PARAMETRO")); }
				 */
			} catch (SQLException e) {

				logger.debug("SQLException ", e);
				throw new RateUsageRecordsException("-2129", 0,
						"SQLException : " + e.getMessage());
			}

		} finally {
			try {
				if (ps != null) {
					ps.close();
				}

				if (rs != null) {
					rs.close();
				}

				if (conn != null) {
					conn.close();
				}
			} catch (Exception e) {
				logger.debug("Exception ", e);
				throw new RateUsageRecordsException("-2129", 0, "Exception : "
						+ e.getMessage());
			}
		}
		logger.debug("obtenerParametrosFechasSCL():end");
		return null;
	}

	public boolean obtenerConfiguracionInternacional()
			throws RateUsageRecordsException {

		logger.debug("obtenerConfiguracionInternacional():start");
		Connection conn = null;
		ResultSet rs = null;
		PreparedStatement ps = null;

		CallableStatement cstmt = null;
		/**
		 * SV_COD_MODULO VARCHAR2(200); SN_COD_PRODUCTO NUMBER; SC_FECHAS
		 * GE_SISTEMA_PG.refCursor; SN_COD_RETORNO NUMBER; SV_MENS_RETORNO
		 * VARCHAR2(200); SN_NUM_EVENTO NUMBER;
		 */
		String call = "{call GE_SISTEMA_PG.GE_OBT_CONF_INTERNACIONAL_PR(?,?,?,?,?,?) }";

		logger.debug("Antes de obtener conexion");
		try {

			conn = getConnectionFromWLSInitialContext(myConnectionPool
					.getJndiForDataSource());

		} catch (Exception e1) {
			logger.debug("Exception de conexion", e1);
			throw new RateUsageRecordsException("-2129", 0,
					"No se pudo obtener una conexión : " + e1.getMessage());
		}

		try {
			logger.debug("Antes de ejecutar : " + call);
			try {
				cstmt = conn.prepareCall(call,
						ResultSet.TYPE_SCROLL_INSENSITIVE,
						ResultSet.CONCUR_READ_ONLY);

				cstmt.setString(1, config.getString("codmodulo").trim());// usar
				// "GE"
				cstmt.setInt(2, Integer.parseInt(config
						.getString("codproducto").trim())); // usar 1
				cstmt.registerOutParameter(3, OracleTypes.CURSOR);
				cstmt.registerOutParameter(4, Types.NUMERIC);
				cstmt.registerOutParameter(5, Types.VARCHAR);
				cstmt.registerOutParameter(6, Types.NUMERIC);
				cstmt.execute();

				rs = (ResultSet) cstmt.getObject(3);

				logger.debug("Antes de entrar a cursor  ");

				while (rs.next()) {
					System.out.print("NOM_PARAMETRO"
							+ rs.getString("NOM_PARAMETRO"));
					System.out.print("VAL_PARAMETRO"
							+ rs.getString("VAL_PARAMETRO"));
					System.out.print("DES_PARAMETRO"
							+ rs.getString("DES_PARAMETRO"));
				}
			} catch (SQLException e) {
				logger.debug("SQLException ", e);
				throw new RateUsageRecordsException("-2129", 0,
						"SQLException : " + e.getMessage());
			}

		} finally {
			try {
				if (ps != null) {
					ps.close();
				}

				if (rs != null) {
					rs.close();
				}

				if (conn != null) {
					conn.close();
				}
			} catch (Exception e) {
				logger.debug("Exception ", e);
				throw new RateUsageRecordsException("-2129", 0, "Exception : "
						+ e.getMessage());
			}
		}
		logger.debug("obtenerConfiguracionInternacional():end");
		return true;
	}

	public boolean verificarVersion() throws RateUsageRecordsException {

		logger.debug("verificarVersion():start");
		Connection conn = null;
		ResultSet rs = null;
		PreparedStatement ps = null;

		CallableStatement cstmt = null;
		/**
		 * FUNCTION GE_VERIFICAVERSION_FN (
		 * 
		 * ev_cod_programa IN ge_programas.COD_PROGRAMA%type,
		 * 
		 * en_num_version IN ge_programas.NUM_VERSION%type,
		 * 
		 * en_sub_version IN ge_programas.NUM_SUBVERSION%type,
		 * 
		 * sn_cod_retorno OUT NOCOPY NUMBER,
		 * 
		 * sv_mens_retorno OUT NOCOPY VARCHAR2,
		 * 
		 * sn_num_evento OUT NOCOPY NUMBER)
		 */
		String call = "{?=call GE_SISTEMA_PG.GE_VERIFICAVERSION_FN ( ?,?,?,?,?,? ) }";
		logger.debug("Antes de obtener conexion");
		try {
			conn = getConnectionFromWLSInitialContext(myConnectionPool
					.getJndiForDataSource());
		} catch (Exception e1) {
			logger.debug("Exception de conexion", e1);
			throw new RateUsageRecordsException("-2129", 0,
					"No se pudo obtener una conexión : " + e1.getMessage());
		}

		try {
			logger.debug("Antes de ejecutar : " + call);

			cstmt = conn.prepareCall(call, ResultSet.TYPE_SCROLL_INSENSITIVE,
					ResultSet.CONCUR_READ_ONLY);
			logger.debug("Parámetros : ");
			logger.debug("COD_PROGRAMA [" + config.getString("codprograma")
					+ "]");
			logger.debug("VERSION_PROGRAMA  ["
					+ config.getString("versionprograma") + "]");

			cstmt.registerOutParameter(1, Types.NUMERIC);
			cstmt.setString(2, config.getString("codprograma"));
			cstmt.setString(3, config.getString("versionprograma"));
			cstmt.setInt(4, Integer.parseInt(config.getString(
					"subversionprograma").trim()));

			cstmt.registerOutParameter(5, Types.NUMERIC);
			cstmt.registerOutParameter(6, Types.VARCHAR);
			cstmt.registerOutParameter(7, Types.NUMERIC);

			cstmt.execute();
			codigoError = cstmt.getLong(5);
			msError = cstmt.getString(6);
			snEvento = cstmt.getLong(7);

			logger.debug("Despues de execute() ");
			logger.debug("Valor de  SN_ERROR [" + codigoError + "]");
			logger.debug("Valor de  SV_MENSAJE[" + msError + "]");
			logger.debug("Valor de  SN_EVENTO[" + snEvento + "]");

			if (codigoError == 0) {
				if (cstmt.getLong(1) == 1) {
					return true;
				}
			} else
				throw new RateUsageRecordsException(
						String.valueOf(codigoError), snEvento,
						"SQLException : " + msError);
		} catch (SQLException e) {
			logger.debug("SQLException ", e);
			throw new RateUsageRecordsException(String
					.valueOf(e.getErrorCode()), snEvento, "SQLException : "
					+ e.getMessage());

		} finally {
			try {
				if (ps != null) {
					ps.close();
				}

				if (rs != null) {
					rs.close();
				}

				if (conn != null) {
					conn.close();
				}
			} catch (Exception e) {
				logger.debug("Exception ", e);
				throw new RateUsageRecordsException("-2129", 0, "Exception : "
						+ e.getMessage());
			}
		}
		logger.debug("verificarVersion():end");
		return true;
	}

	public boolean validarFechaVencimiento(String fechaVencimiento)
			throws RateUsageRecordsException {
		logger.debug("validarFechaVencimiento():start");
		Connection conn = null;
		ResultSet rs = null;
		PreparedStatement ps = null;

		CallableStatement cstmt = null;
		/**
		 * 
		 * FUNCTION GE_VALIDA_FECHA_VCTO_FN (
		 * 
		 * ev_fecha_vencimiento IN VARCHAR2,
		 * 
		 * SN_COD_RETORNO OUT NOCOPY NUMBER,
		 * 
		 * SV_MENS_RETORNO OUT NOCOPY VARCHAR2,
		 * 
		 * SN_NUM_EVENTO OUT NOCOPY NUMBER)
		 * 
		 */
		String call = "{?=call GE_SISTEMA_PG.GE_VALIDA_FECHA_VCTO_FN ( ?,?,?,? ) }";
		logger.debug("Antes de obtener conexion");
		try {
			conn = getConnectionFromWLSInitialContext(myConnectionPool
					.getJndiForDataSource());
		} catch (Exception e1) {
			logger.debug("Exception de conexion", e1);
			throw new RateUsageRecordsException("-2129", 0,
					"No se pudo obtener una conexión : " + e1.getMessage());
		}

		try {
			logger.debug("Antes de ejecutar : " + call);

			cstmt = conn.prepareCall(call, ResultSet.TYPE_SCROLL_INSENSITIVE,
					ResultSet.CONCUR_READ_ONLY);

			logger.debug("Parámetros : ");
			logger.debug("FECHA_VENCIMIENTO [" + fechaVencimiento + "]");

			cstmt.registerOutParameter(1, Types.NUMERIC);
			cstmt.setString(2, fechaVencimiento);
			cstmt.registerOutParameter(3, Types.NUMERIC);
			cstmt.registerOutParameter(4, Types.VARCHAR);
			cstmt.registerOutParameter(5, Types.NUMERIC);

			cstmt.execute();

			codigoError = cstmt.getLong(3);
			msError = cstmt.getString(4);
			snEvento = cstmt.getLong(5);

			logger.debug("Despues de execute() ");
			logger.debug("Valor de  SN_ERROR [" + codigoError + "]");
			logger.debug("Valor de  SV_MENSAJE[" + msError + "]");
			logger.debug("Valor de  SN_EVENTO[" + snEvento + "]");

			if (codigoError == 0) {
				if (cstmt.getLong(1) == 1) {
					return true;
				}
			} else
				throw new RateUsageRecordsException(
						String.valueOf(codigoError), snEvento,
						"SQLException : " + msError);
		} catch (SQLException e) {
			logger.debug("SQLException ", e);
			throw new RateUsageRecordsException(String
					.valueOf(e.getErrorCode()), snEvento, "SQLException : "
					+ e.getMessage());

		} finally {
			try {
				if (ps != null) {
					ps.close();
				}

				if (rs != null) {
					rs.close();
				}

				if (conn != null) {
					conn.close();
				}
			} catch (Exception e) {
				logger.debug("Exception ", e);
				throw new RateUsageRecordsException("-2129", 0, "Exception : "
						+ e.getMessage());
			}
		}
		logger.debug("validarFechaVencimiento():end");
		return false;
	}

	public String obtenerLetra(String codDcto, String catImpositiva)
			throws RateUsageRecordsException {
		logger.debug("obtenerLetra():start");
		Connection conn = null;
		ResultSet rs = null;
		PreparedStatement ps = null;
		String result = null;
		CallableStatement cstmt = null;

		/**
		 * FUNCTION GE_OBTENER_LETRA_FN (en_cod_tipdocum IN
		 * ge_letras.COD_TIPDOCUM%type,
		 * 
		 * en_cod_catimpos IN ge_letras.COD_CATIMPOS%type,
		 * 
		 * sn_cod_retorno OUT NOCOPY NUMBER,
		 * 
		 * sv_mens_retorno OUT NOCOPY VARCHAR2,
		 * 
		 * sn_num_evento OUT NOCOPY NUMBER)
		 */
		String call = "{?=call GE_SISTEMA_PG.GE_OBTENER_LETRA_FN ( ?,?,?,?,? ) }";
		logger.debug("Antes de obtener conexion");
		try {
			conn = getConnectionFromWLSInitialContext(myConnectionPool
					.getJndiForDataSource());
		} catch (Exception e1) {
			logger.debug("Exception de conexion", e1);
			throw new RateUsageRecordsException("-2129", 0,
					"No se pudo obtener una conexión : " + e1.getMessage());
		}

		try {
			logger.debug("Antes de ejecutar : " + call);

			cstmt = conn.prepareCall(call, ResultSet.TYPE_SCROLL_INSENSITIVE,
					ResultSet.CONCUR_READ_ONLY);

			logger.debug("Parámetros : ");
			logger.debug("COD_DOCUMEN [" + codDcto + "]");
			logger.debug("COD_CATIMPOS [" + catImpositiva + "]");

			cstmt.registerOutParameter(1, Types.VARCHAR);
			cstmt.setLong(2, Long.parseLong(codDcto));
			cstmt.setLong(3, Long.parseLong(catImpositiva));
			cstmt.registerOutParameter(4, Types.NUMERIC);
			cstmt.registerOutParameter(5, Types.VARCHAR);
			cstmt.registerOutParameter(6, Types.NUMERIC);

			cstmt.execute();
			codigoError = cstmt.getLong(4);
			msError = cstmt.getString(5);
			snEvento = cstmt.getLong(6);

			logger.debug("Despues de execute() ");
			logger.debug("Valor de  SN_ERROR [" + codigoError + "]");
			logger.debug("Valor de  SV_MENSAJE[" + msError + "]");
			logger.debug("Valor de  SN_EVENTO[" + snEvento + "]");

			if (codigoError == 0) {
				result = cstmt.getString(1);
			} else
				throw new RateUsageRecordsException(
						String.valueOf(codigoError), snEvento,
						"SQLException : " + msError);
		} catch (SQLException e) {
			logger.debug("SQLException ", e);
			throw new RateUsageRecordsException(String
					.valueOf(e.getErrorCode()), snEvento, "SQLException : "
					+ e.getMessage());

		} finally {
			try {
				if (ps != null) {
					ps.close();
				}

				if (rs != null) {
					rs.close();
				}

				if (conn != null) {
					conn.close();
				}
			} catch (Exception e) {
				logger.debug("Exception ", e);
				throw new RateUsageRecordsException("-2129", 0, "Exception : "
						+ e.getMessage());
			}
		}
		logger.debug("obtenerLetra():end");
		return result;
	}

	public String obtenerSecuencia(String nombreSecuencia)
			throws RateUsageRecordsException {
		logger.debug("obtenerSecuencia():start");
		Connection conn = null;
		ResultSet rs = null;
		PreparedStatement ps = null;
		String result = null;
		CallableStatement cstmt = null;

		/**
		 * FUNCTION FA_OBTENER_SECUENCIA_FN (
		 * 
		 * EV_ID_SECUENCIA IN VARCHAR2,
		 * 
		 * SN_COD_RETORNO OUT NOCOPY NUMBER,
		 * 
		 * SV_MENS_RETORNO OUT NOCOPY VARCHAR2,
		 * 
		 * SN_NUM_EVENTO OUT NOCOPY NUMBER)
		 */
		String call = "{?=call FA_SERVICIOS_PG.FA_OBTENER_SECUENCIA_FN ( ?,?,?,? ) }";
		logger.debug("Antes de obtener conexion");
		try {
			conn = getConnectionFromWLSInitialContext(myConnectionPool
					.getJndiForDataSource());
		} catch (Exception e1) {
			logger.debug("Exception de conexion", e1);
			throw new RateUsageRecordsException("-2129", 0,
					"No se pudo obtener una conexión : " + e1.getMessage());
		}

		try {
			logger.debug("Antes de ejecutar : " + call);

			cstmt = conn.prepareCall(call, ResultSet.TYPE_SCROLL_INSENSITIVE,
					ResultSet.CONCUR_READ_ONLY);

			logger.debug("Parámetros : ");
			logger.debug("EV_ID_SECUENCIA [" + nombreSecuencia + "]");

			cstmt.registerOutParameter(1, Types.VARCHAR);
			cstmt.setString(2, nombreSecuencia);
			cstmt.registerOutParameter(3, Types.NUMERIC);
			cstmt.registerOutParameter(4, Types.VARCHAR);
			cstmt.registerOutParameter(5, Types.NUMERIC);

			cstmt.execute();

			codigoError = cstmt.getLong(3);
			msError = cstmt.getString(4);
			snEvento = cstmt.getLong(5);

			logger.debug("Despues de execute() ");
			logger.debug("Valor de  SN_ERROR [" + codigoError + "]");
			logger.debug("Valor de  SV_MENSAJE[" + msError + "]");
			logger.debug("Valor de  SN_EVENTO[" + snEvento + "]");

			if (codigoError == 0) {
				result = cstmt.getString(1);
			} else
				throw new RateUsageRecordsException(
						String.valueOf(codigoError), snEvento,
						"SQLException : " + msError);
		} catch (SQLException e) {
			logger.debug("SQLException ", e);
			throw new RateUsageRecordsException(String
					.valueOf(e.getErrorCode()), snEvento, "SQLException : "
					+ e.getMessage());

		} finally {
			try {
				if (ps != null) {
					ps.close();
				}

				if (rs != null) {
					rs.close();
				}

				if (conn != null) {
					conn.close();
				}
			} catch (Exception e) {
				logger.debug("Exception ", e);
				throw new RateUsageRecordsException("-2129", 0, "Exception : "
						+ e.getMessage());
			}
		}
		logger.debug("obtenerSecuencia():end");
		return result;
	}

	public String obtenerParamGral(String parametro)
			throws RateUsageRecordsException {
		logger.debug("obtenerParamGral():start");
		Connection conn = null;
		ResultSet rs = null;
		PreparedStatement ps = null;
		String result = null;
		CallableStatement cstmt = null;
		/**
		 * ev_cod_modulo IN varchar,
		 * 
		 * en_cod_producto IN number,
		 * 
		 * ev_nom_parametro IN ged_parametros.NOM_PARAMETRO%type,
		 * 
		 * Sv_val_parametro OUT NOCOPY VARCHAR2,
		 * 
		 * Sv_des_parametro OUT NOCOPY VARCHAR2,
		 * 
		 * SN_COD_RETORNO OUT NOCOPY NUMBER,
		 * 
		 * SV_MENS_RETORNO OUT NOCOPY VARCHAR2,
		 * 
		 * SN_NUM_EVENTO OUT NOCOPY NUMBER)
		 */
		String call = "{call GE_SISTEMA_PG.GE_RECPARAMGENER_PR(?,?,?,?,?,?,?,?) }";

		logger.debug("Antes de obtener conexion");
		try {

			conn = getConnectionFromWLSInitialContext(myConnectionPool
					.getJndiForDataSource());

		} catch (Exception e1) {
			logger.debug("Exception de conexion", e1);
			throw new RateUsageRecordsException("-2129", 0,
					"No se pudo obtener una conexión : " + e1.getMessage());
		}

		try {
			logger.debug("Antes de ejecutar : " + call);

			cstmt = conn.prepareCall(call, ResultSet.TYPE_SCROLL_INSENSITIVE,
					ResultSet.CONCUR_READ_ONLY);
			logger.debug("Parámetros : ");
			//logger.debug("ev_cod_modulo [" + config.getString("codmodulo")	+ "]");
			logger.debug("ev_cod_modulo [GE]");			
			logger.debug("en_cod_producto [" + config.getString("codproducto")
					+ "]");
			logger.debug("ev_nom_parametro [" + parametro + "]");
			//cstmt.setString(1, config.getString("codmodulo").trim());
			cstmt.setString(1, "GE");
			cstmt.setInt(2, Integer.parseInt(config.getString("codproducto")
					.trim()));
			cstmt.setString(3, parametro);
			cstmt.registerOutParameter(4, Types.VARCHAR);
			cstmt.registerOutParameter(5, Types.VARCHAR);
			cstmt.registerOutParameter(6, Types.NUMERIC);
			cstmt.registerOutParameter(7, Types.VARCHAR);
			cstmt.registerOutParameter(8, Types.NUMERIC);
			cstmt.execute();

			codigoError = cstmt.getLong(6);
			msError = cstmt.getString(7);
			snEvento = cstmt.getLong(8);

			logger.debug("Despues de execute() ");
			logger.debug("Valor de  SN_ERROR [" + codigoError + "]");
			logger.debug("Valor de  SV_MENSAJE[" + msError + "]");
			logger.debug("Valor de  SN_EVENTO[" + snEvento + "]");

			if (codigoError == 0) {
				result = cstmt.getString(4);
			} else
				throw new RateUsageRecordsException(
						String.valueOf(codigoError), snEvento,
						"SQLException : " + msError);
		} catch (SQLException e) {
			logger.debug("SQLException ", e);
			throw new RateUsageRecordsException(String
					.valueOf(e.getErrorCode()), snEvento, "SQLException : "
					+ e.getMessage());

		} finally {
			try {
				if (ps != null) {
					ps.close();
				}

				if (rs != null) {
					rs.close();
				}

				if (conn != null) {
					conn.close();
				}
			} catch (Exception e) {
				logger.debug("Exception ", e);
				throw new RateUsageRecordsException("-2129", 0, "Exception : "
						+ e.getMessage());
			}
		}
		logger.debug("obtenerParamGral():end");
		return result;
	}

	/**
	 * 
	 * @param parametro
	 * @return
	 * @throws RateUsageRecordsException
	 */
	public String obtenerDatosGener(String parametro)
			throws RateUsageRecordsException {
		logger.debug("obtenerParamGral():start");
		Connection conn = null;
		ResultSet rs = null;
		PreparedStatement ps = null;
		String result = null;
		CallableStatement cstmt = null;
		/**
		 * 
		 * PROCEDURE GE_RECDATOSGENER_PR( SN_COD_MISCELA OUT
		 * FA_DATOSGENER.COD_MISCELA%TYPE,
		 * 
		 * SV_COD_MONEFACT OUT FA_DATOSGENER.COD_MONEFACT%TYPE,
		 * 
		 * SN_COD_RETORNO OUT NOCOPY NUMBER,
		 * 
		 * SV_MENS_RETORNO OUT NOCOPY VARCHAR2,
		 * 
		 * SN_NUM_EVENTO OUT NOCOPY NUMBER);
		 */
		String call = "{call GE_SISTEMA_PG.GE_RECDATOSGENER_PR(?,?,?,?,?) }";

		logger.debug("Antes de obtener conexion");
		try {

			conn = getConnectionFromWLSInitialContext(myConnectionPool
					.getJndiForDataSource());

		} catch (Exception e1) {
			logger.debug("Exception de conexion", e1);
			throw new RateUsageRecordsException("-2129", 0,
					"No se pudo obtener una conexión : " + e1.getMessage());
		}

		try {
			logger.debug("Antes de ejecutar : " + call);

			cstmt = conn.prepareCall(call, ResultSet.TYPE_SCROLL_INSENSITIVE,
					ResultSet.CONCUR_READ_ONLY);

			cstmt.registerOutParameter(1, Types.VARCHAR);
			cstmt.registerOutParameter(2, Types.VARCHAR);
			cstmt.registerOutParameter(3, Types.NUMERIC);
			cstmt.registerOutParameter(4, Types.VARCHAR);
			cstmt.registerOutParameter(5, Types.NUMERIC);
			cstmt.execute();

			codigoError = cstmt.getLong(3);
			msError = cstmt.getString(4);
			snEvento = cstmt.getLong(5);

			logger.debug("Despues de execute() ");
			logger.debug("Valor de  SN_ERROR [" + codigoError + "]");
			logger.debug("Valor de  SV_MENSAJE[" + msError + "]");
			logger.debug("Valor de  SN_EVENTO[" + snEvento + "]");

			if (codigoError == 0) {
				if (parametro.equalsIgnoreCase("COD_MONEFACT")) {
					result = cstmt.getString(2);
				} else {
					result = String.valueOf(cstmt.getLong(1));
				}
			} else
				throw new RateUsageRecordsException(
						String.valueOf(codigoError), snEvento,
						"SQLException : " + msError);

		} catch (SQLException e) {

			logger.debug("SQLException ", e);
			throw new RateUsageRecordsException("-2129", 0, "SQLException : "
					+ e.getMessage());

		} finally {
			try {
				if (ps != null) {
					ps.close();
				}

				if (rs != null) {
					rs.close();
				}

				if (conn != null) {
					conn.close();
				}
			} catch (Exception e) {
				logger.debug("Exception ", e);
				throw new RateUsageRecordsException("-2129", 0, "Exception : "
						+ e.getMessage());
			}
		}
		logger.debug("obtenerParamGral():end");
		return result;
	}

	public String obtenerModGener(String catTributaria, String modCobro,
			String centroEmision, String codMiscelanea)
			throws RateUsageRecordsException {

		logger.debug("obtenerModGener():start");
		Connection conn = null;
		ResultSet rs = null;
		PreparedStatement ps = null;
		String result = null;
		CallableStatement cstmt = null;
		/*
		 * PROCEDURE GE_RECMODGENER_PR (EV_COD_CATRIBUT IN
		 * FA_GENCENTREMI.COD_CATRIBUT%TYPE//char, EV_COD_MODVENTA IN
		 * FA_GENCENTREMI.COD_MODVENTA%TYPE//number, EN_COD_CENTREMI IN
		 * FA_GENCENTREMI.COD_CENTREMI%TYPE//number, EN_COD_TIPMOVIMIEN IN
		 * FA_GENCENTREMI.COD_TIPMOVIMIEN%TYPE//number, SV_COD_MODGENER OUT
		 * FA_GENCENTREMI.COD_MODGENER%TYPE, SN_COD_RETORNO OUT NOCOPY NUMBER,
		 * SV_MENS_RETORNO OUT NOCOPY VARCHAR2, SN_NUM_EVENTO OUT NOCOPY
		 * NUMBER);
		 */
		String call = "{call GE_SISTEMA_PG.GE_RECMODGENER_PR(?,?,?,?,?,?,?,?) }";

		logger.debug("Antes de obtener conexion");
		try {

			conn = getConnectionFromWLSInitialContext(myConnectionPool
					.getJndiForDataSource());

		} catch (Exception e1) {
			logger.debug("Exception de conexion", e1);
			throw new RateUsageRecordsException("-2129", 0,
					"No se pudo obtener una conexión : " + e1.getMessage());
		}

		try {
			logger.debug("Antes de ejecutar : " + call);

			cstmt = conn.prepareCall(call, ResultSet.TYPE_SCROLL_INSENSITIVE,
					ResultSet.CONCUR_READ_ONLY);
			logger.debug("Parámetros : ");
			logger.debug("EV_COD_CATRIBUT [" + catTributaria + "]");
			logger.debug("EV_COD_MODVENTA [" + modCobro + "]");
			logger.debug("EN_COD_CENTREMI [" + centroEmision + "]");
			logger.debug("EN_COD_TIPMOVIMIEN [" + codMiscelanea + "]");
			cstmt.setString(1, catTributaria);
			cstmt.setLong(2, Long.parseLong(modCobro));
			cstmt.setLong(3, Long.parseLong(centroEmision));
			cstmt.setLong(4, Long.parseLong(codMiscelanea));
			cstmt.registerOutParameter(5, Types.VARCHAR);
			cstmt.registerOutParameter(6, Types.NUMERIC);
			cstmt.registerOutParameter(7, Types.VARCHAR);
			cstmt.registerOutParameter(8, Types.NUMERIC);
			cstmt.execute();

			codigoError = cstmt.getLong(6);
			msError = cstmt.getString(7);
			snEvento = cstmt.getLong(8);

			logger.debug("Despues de execute() ");
			logger.debug("Valor de  SN_ERROR [" + codigoError + "]");
			logger.debug("Valor de  SV_MENSAJE[" + msError + "]");
			logger.debug("Valor de  SN_EVENTO[" + snEvento + "]");

			if (codigoError == 0) {
				result = cstmt.getString(5);
			} else {
				throw new RateUsageRecordsException(
						String.valueOf(codigoError), snEvento,
						"SQLException : " + msError);
			}

		} catch (SQLException e) {

			logger.debug("SQLException ", e);
			throw new RateUsageRecordsException(String
					.valueOf(e.getErrorCode()), snEvento, "SQLException : "
					+ e.getMessage());

		} finally {
			try {
				if (ps != null) {
					ps.close();
				}

				if (rs != null) {
					rs.close();
				}

				if (conn != null) {
					conn.close();
				}
			} catch (Exception e) {
				logger.debug("Exception ", e);
				throw new RateUsageRecordsException("-2129", 0, "Exception : "
						+ e.getMessage());
			}
		}
		logger.debug("obtenerModGener():end");
		return result;
	}

	public void obtenerValorImpresion() {
		// TODO Auto-generated method stub

	}
}
